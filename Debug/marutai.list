
marutai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009650  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009c48  08009c48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c48  08009c48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000070  08009cc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08009cc0  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001406c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acd  00000000  00000000  0003410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00036be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00037f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002883d  00000000  00000000  000390d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158b9  00000000  00000000  0006190d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ca3a  00000000  00000000  000771c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183c00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  00183c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009810 	.word	0x08009810

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08009810 	.word	0x08009810

08000218 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000222:	edc7 0a02 	vstr	s1, [r7, #8]
 8000226:	ed87 1a01 	vstr	s2, [r7, #4]
 800022a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	ed93 7a00 	vldr	s14, [r3]
 8000232:	edd7 6a03 	vldr	s13, [r7, #12]
 8000236:	edd7 7a01 	vldr	s15, [r7, #4]
 800023a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800023e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000248:	ed97 7a02 	vldr	s14, [r7, #8]
 800024c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	edd3 7a00 	vldr	s15, [r3]
 800025a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800025e:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	ee07 3a90 	vmov	s15, r3
}
 8000268:	eeb0 0a67 	vmov.f32	s0, s15
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000280:	edc7 0a02 	vstr	s1, [r7, #8]
 8000284:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000288:	edd7 7a02 	vldr	s15, [r7, #8]
 800028c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000294:	db0b      	blt.n	80002ae <gfDivideAvoidZero+0x38>
 8000296:	ed97 7a02 	vldr	s14, [r7, #8]
 800029a:	edd7 7a01 	vldr	s15, [r7, #4]
 800029e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	d502      	bpl.n	80002ae <gfDivideAvoidZero+0x38>
		den = threshold;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	e017      	b.n	80002de <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80002ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80002b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ba:	d510      	bpl.n	80002de <gfDivideAvoidZero+0x68>
 80002bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002c0:	eef1 7a67 	vneg.f32	s15, s15
 80002c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80002c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d0:	dd05      	ble.n	80002de <gfDivideAvoidZero+0x68>
		den = -threshold;
 80002d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d6:	eef1 7a67 	vneg.f32	s15, s15
 80002da:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80002de:	edd7 6a03 	vldr	s13, [r7, #12]
 80002e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80002e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002ea:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	ee07 3a90 	vmov	s15, r3
}
 80002f4:	eeb0 0a67 	vmov.f32	s0, s15
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 800030e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000374 <gfWrapTheta+0x70>
 8000312:	ed97 0a01 	vldr	s0, [r7, #4]
 8000316:	f008 fb2d 	bl	8008974 <fmodf>
 800031a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 800031e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000322:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000378 <gfWrapTheta+0x74>
 8000326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	dd08      	ble.n	8000342 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000330:	edd7 7a01 	vldr	s15, [r7, #4]
 8000334:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000374 <gfWrapTheta+0x70>
 8000338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000340:	e010      	b.n	8000364 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000342:	edd7 7a01 	vldr	s15, [r7, #4]
 8000346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800037c <gfWrapTheta+0x78>
 800034a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000352:	d507      	bpl.n	8000364 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000354:	edd7 7a01 	vldr	s15, [r7, #4]
 8000358:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000374 <gfWrapTheta+0x70>
 800035c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000360:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	ee07 3a90 	vmov	s15, r3
}
 800036a:	eeb0 0a67 	vmov.f32	s0, s15
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40c90fdb 	.word	0x40c90fdb
 8000378:	40490fdb 	.word	0x40490fdb
 800037c:	c0490fdb 	.word	0xc0490fdb

08000380 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a03 	vstr	s0, [r7, #12]
 800038a:	edc7 0a02 	vstr	s1, [r7, #8]
 800038e:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000392:	ed97 7a03 	vldr	s14, [r7, #12]
 8000396:	edd7 7a02 	vldr	s15, [r7, #8]
 800039a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a2:	dd01      	ble.n	80003a8 <gUpperLowerLimit+0x28>
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80003a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80003ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80003b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b8:	d501      	bpl.n	80003be <gUpperLowerLimit+0x3e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	return input;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	ee07 3a90 	vmov	s15, r3
}
 80003c4:	eeb0 0a67 	vmov.f32	s0, s15
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	3302      	adds	r3, #2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	f04f 0200 	mov.w	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3308      	adds	r3, #8
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800041a:	b480      	push	{r7}
 800041c:	b087      	sub	sp, #28
 800041e:	af00      	add	r7, sp, #0
 8000420:	ed87 0a03 	vstr	s0, [r7, #12]
 8000424:	edc7 0a02 	vstr	s1, [r7, #8]
 8000428:	ed87 1a01 	vstr	s2, [r7, #4]
 800042c:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 800042e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000432:	edd7 7a01 	vldr	s15, [r7, #4]
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000448:	edd7 7a05 	vldr	s15, [r7, #20]
 800044c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000450:	edd7 7a04 	vldr	s15, [r7, #16]
 8000454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000458:	edd7 6a05 	vldr	s13, [r7, #20]
 800045c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	edc3 7a00 	vstr	s15, [r3]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 800047a:	b480      	push	{r7}
 800047c:	b089      	sub	sp, #36	; 0x24
 800047e:	af00      	add	r7, sp, #0
 8000480:	ed87 0a03 	vstr	s0, [r7, #12]
 8000484:	edc7 0a02 	vstr	s1, [r7, #8]
 8000488:	ed87 1a01 	vstr	s2, [r7, #4]
 800048c:	6038      	str	r0, [r7, #0]
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 800048e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000492:	edd7 7a01 	vldr	s15, [r7, #4]
 8000496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800049a:	edc7 7a06 	vstr	s15, [r7, #24]
	yn_1 = *y;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]

	if( r > yn_1 )
 80004a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80004a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80004ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b4:	dd08      	ble.n	80004c8 <gRateLimit+0x4e>
		ytmp = yn_1 + dy;
 80004b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80004ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80004be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80004c6:	e010      	b.n	80004ea <gRateLimit+0x70>
	else if( r < yn_1 )
 80004c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80004cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80004d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	d507      	bpl.n	80004ea <gRateLimit+0x70>
		ytmp = yn_1 - dy;
 80004da:	ed97 7a05 	vldr	s14, [r7, #20]
 80004de:	edd7 7a06 	vldr	s15, [r7, #24]
 80004e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004e6:	edc7 7a07 	vstr	s15, [r7, #28]

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	601a      	str	r2, [r3, #0]

}
 80004f0:	bf00      	nop
 80004f2:	3724      	adds	r7, #36	; 0x24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b08d      	sub	sp, #52	; 0x34
 8000500:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t posMode_pre;
	uint8_t drvMode_pre;


	//read IO signals
	gButton1 = readButton1();
 8000502:	f000 fb45 	bl	8000b90 <readButton1>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <Sequence_Low_Freq+0x124>)
 800050c:	701a      	strb	r2, [r3, #0]
	gVolume = 0; //readVolume();
 800050e:	4b45      	ldr	r3, [pc, #276]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	gPropoDuty = readPropoDuty();
 8000516:	f000 fb69 	bl	8000bec <readPropoDuty>
 800051a:	eef0 7a40 	vmov.f32	s15, s0
 800051e:	4b42      	ldr	r3, [pc, #264]	; (8000628 <Sequence_Low_Freq+0x12c>)
 8000520:	edc3 7a00 	vstr	s15, [r3]

	readHallSignal(gHall);
 8000524:	4841      	ldr	r0, [pc, #260]	; (800062c <Sequence_Low_Freq+0x130>)
 8000526:	f000 fcab 	bl	8000e80 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 800052a:	4841      	ldr	r0, [pc, #260]	; (8000630 <Sequence_Low_Freq+0x134>)
 800052c:	f000 fce2 	bl	8000ef4 <readElectFreqFromHallSignal>

	sSensData.Vdc = 10.0f;//readVdc();
 8000530:	4b40      	ldr	r3, [pc, #256]	; (8000634 <Sequence_Low_Freq+0x138>)
 8000532:	4a41      	ldr	r2, [pc, #260]	; (8000638 <Sequence_Low_Freq+0x13c>)
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <Sequence_Low_Freq+0x138>)
 8000538:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800053c:	483f      	ldr	r0, [pc, #252]	; (800063c <Sequence_Low_Freq+0x140>)
 800053e:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8000640 <Sequence_Low_Freq+0x144>
 8000542:	eddf 0a40 	vldr	s1, [pc, #256]	; 8000644 <Sequence_Low_Freq+0x148>
 8000546:	eeb0 0a67 	vmov.f32	s0, s15
 800054a:	f7ff ff66 	bl	800041a <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <Sequence_Low_Freq+0x138>)
 8000550:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000554:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000558:	eef0 0a67 	vmov.f32	s1, s15
 800055c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000560:	f7ff fe89 	bl	8000276 <gfDivideAvoidZero>
 8000564:	eef0 7a40 	vmov.f32	s15, s0
 8000568:	4b32      	ldr	r3, [pc, #200]	; (8000634 <Sequence_Low_Freq+0x138>)
 800056a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <Sequence_Low_Freq+0x14c>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2b28      	cmp	r3, #40	; 0x28
 8000574:	d81d      	bhi.n	80005b2 <Sequence_Low_Freq+0xb6>
		sInitCnt++;
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <Sequence_Low_Freq+0x14c>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b32      	ldr	r3, [pc, #200]	; (8000648 <Sequence_Low_Freq+0x14c>)
 8000580:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <Sequence_Low_Freq+0x150>)
 8000584:	2202      	movs	r2, #2
 8000586:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <Sequence_Low_Freq+0x154>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 800058e:	4b31      	ldr	r3, [pc, #196]	; (8000654 <Sequence_Low_Freq+0x158>)
 8000590:	f04f 0200 	mov.w	r2, #0
 8000594:	601a      	str	r2, [r3, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <Sequence_Low_Freq+0x14c>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d83c      	bhi.n	8000618 <Sequence_Low_Freq+0x11c>
			sSensData.Iuvw_AD_Offset[0] = 2011.0f;
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <Sequence_Low_Freq+0x138>)
 80005a0:	4a2d      	ldr	r2, [pc, #180]	; (8000658 <Sequence_Low_Freq+0x15c>)
 80005a2:	61da      	str	r2, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] = 1995.0f;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <Sequence_Low_Freq+0x138>)
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <Sequence_Low_Freq+0x160>)
 80005a8:	621a      	str	r2, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] = 2000.0f;
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <Sequence_Low_Freq+0x138>)
 80005ac:	4a2c      	ldr	r2, [pc, #176]	; (8000660 <Sequence_Low_Freq+0x164>)
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 80005b0:	e032      	b.n	8000618 <Sequence_Low_Freq+0x11c>
		posMode_pre = sPosMode;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <Sequence_Low_Freq+0x150>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
		drvMode_pre = sDrvMode;
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <Sequence_Low_Freq+0x154>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	71bb      	strb	r3, [r7, #6]
		slctPosMode(gElectFreq, &sPosMode);
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <Sequence_Low_Freq+0x134>)
 80005c0:	edd3 7a00 	vldr	s15, [r3]
 80005c4:	4821      	ldr	r0, [pc, #132]	; (800064c <Sequence_Low_Freq+0x150>)
 80005c6:	eeb0 0a67 	vmov.f32	s0, s15
 80005ca:	f000 f89f 	bl	800070c <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <Sequence_Low_Freq+0x134>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <Sequence_Low_Freq+0x154>)
 80005d6:	eeb0 0a67 	vmov.f32	s0, s15
 80005da:	f000 f8d1 	bl	8000780 <slctDrvMode>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d113      	bne.n	800060c <Sequence_Low_Freq+0x110>
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <Sequence_Low_Freq+0x154>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d10f      	bne.n	800060c <Sequence_Low_Freq+0x110>
			InitVectorControl(sSensData, &sVectorControlData);
 80005ec:	4e11      	ldr	r6, [pc, #68]	; (8000634 <Sequence_Low_Freq+0x138>)
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <Sequence_Low_Freq+0x168>)
 80005f0:	9309      	str	r3, [sp, #36]	; 0x24
 80005f2:	466d      	mov	r5, sp
 80005f4:	f106 0410 	add.w	r4, r6, #16
 80005f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	602b      	str	r3, [r5, #0]
 8000604:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000608:	f001 f82a 	bl	8001660 <InitVectorControl>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <Sequence_Low_Freq+0x154>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4914      	ldr	r1, [pc, #80]	; (8000664 <Sequence_Low_Freq+0x168>)
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fa44 	bl	8000aa0 <calcCurrentRef>
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	2000008f 	.word	0x2000008f
 8000624:	20000094 	.word	0x20000094
 8000628:	20000098 	.word	0x20000098
 800062c:	2000008c 	.word	0x2000008c
 8000630:	20000090 	.word	0x20000090
 8000634:	200000b8 	.word	0x200000b8
 8000638:	41200000 	.word	0x41200000
 800063c:	200000e4 	.word	0x200000e4
 8000640:	3a83126f 	.word	0x3a83126f
 8000644:	42fb3333 	.word	0x42fb3333
 8000648:	2000009e 	.word	0x2000009e
 800064c:	2000009c 	.word	0x2000009c
 8000650:	2000009d 	.word	0x2000009d
 8000654:	200000a4 	.word	0x200000a4
 8000658:	44fb6000 	.word	0x44fb6000
 800065c:	44f96000 	.word	0x44f96000
 8000660:	44fa0000 	.word	0x44fa0000
 8000664:	200000ec 	.word	0x200000ec

08000668 <Sequence_High_Freq>:

void Sequence_High_Freq(void){
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	b08f      	sub	sp, #60	; 0x3c
 800066c:	af0e      	add	r7, sp, #56	; 0x38
	// clear Free Running Counter
	// writeFreeRunCnt(ZERO);

	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <Sequence_High_Freq+0x78>)
 8000670:	491c      	ldr	r1, [pc, #112]	; (80006e4 <Sequence_High_Freq+0x7c>)
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <Sequence_High_Freq+0x80>)
 8000674:	f000 fba2 	bl	8000dbc <readCurrent>

	// for debug
	sPosMode = POSMODE_HALL;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <Sequence_High_Freq+0x84>)
 800067a:	2202      	movs	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
	sDrvMode = DRVMODE_OPENLOOP;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <Sequence_High_Freq+0x88>)
 8000680:	2202      	movs	r2, #2
 8000682:	701a      	strb	r2, [r3, #0]
	sElectAngVeloRefRateLimit = TWOPI * 10.0f;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <Sequence_High_Freq+0x8c>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <Sequence_High_Freq+0x90>)
 8000688:	601a      	str	r2, [r3, #0]


	slctElectAngleFromPosMode(sPosMode, &sSensData);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <Sequence_High_Freq+0x84>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	491b      	ldr	r1, [pc, #108]	; (80006fc <Sequence_High_Freq+0x94>)
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8af 	bl	80007f4 <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <Sequence_High_Freq+0x88>)
 8000698:	f893 c000 	ldrb.w	ip, [r3]
 800069c:	4e17      	ldr	r6, [pc, #92]	; (80006fc <Sequence_High_Freq+0x94>)
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <Sequence_High_Freq+0x98>)
 80006a0:	930c      	str	r3, [sp, #48]	; 0x30
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <Sequence_High_Freq+0x9c>)
 80006a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <Sequence_High_Freq+0xa0>)
 80006a8:	930a      	str	r3, [sp, #40]	; 0x28
 80006aa:	466d      	mov	r5, sp
 80006ac:	f106 040c 	add.w	r4, r6, #12
 80006b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80006c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006c4:	4660      	mov	r0, ip
 80006c6:	f000 f965 	bl	8000994 <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <Sequence_High_Freq+0x98>)
 80006cc:	f000 fc5c 	bl	8000f88 <writeOutputMode>
	writeDuty(sDuty);
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <Sequence_High_Freq+0x9c>)
 80006d2:	f000 fc9b 	bl	800100c <writeDuty>

	// Calculate ProcessingLoad
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
 80006d6:	bf00      	nop
 80006d8:	3704      	adds	r7, #4
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000c0 	.word	0x200000c0
 80006e4:	200000d4 	.word	0x200000d4
 80006e8:	200000cc 	.word	0x200000cc
 80006ec:	2000009c 	.word	0x2000009c
 80006f0:	2000009d 	.word	0x2000009d
 80006f4:	200000a4 	.word	0x200000a4
 80006f8:	427b53d2 	.word	0x427b53d2
 80006fc:	200000b8 	.word	0x200000b8
 8000700:	200000a8 	.word	0x200000a8
 8000704:	200000ac 	.word	0x200000ac
 8000708:	200000ec 	.word	0x200000ec

0800070c <slctPosMode>:
void inline slctPosMode(float electFreq, uint8_t* posMode){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	ed87 0a01 	vstr	s0, [r7, #4]
 8000716:	6038      	str	r0, [r7, #0]

	if(*posMode != POSMODE_HALL_PLL){
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d010      	beq.n	8000742 <slctPosMode+0x36>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000720:	edd7 7a01 	vldr	s15, [r7, #4]
 8000724:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000778 <slctPosMode+0x6c>
 8000728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000730:	dd03      	ble.n	800073a <slctPosMode+0x2e>
			*posMode = POSMODE_HALL_PLL;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2203      	movs	r2, #3
 8000736:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 8000738:	e017      	b.n	800076a <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	e013      	b.n	800076a <slctPosMode+0x5e>
	else if(*posMode == POSMODE_HALL_PLL){
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d10f      	bne.n	800076a <slctPosMode+0x5e>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 800074a:	edd7 7a01 	vldr	s15, [r7, #4]
 800074e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800077c <slctPosMode+0x70>
 8000752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d503      	bpl.n	8000764 <slctPosMode+0x58>
			*posMode = POSMODE_HALL;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2202      	movs	r2, #2
 8000760:	701a      	strb	r2, [r3, #0]
}
 8000762:	e002      	b.n	800076a <slctPosMode+0x5e>
			*posMode = POSMODE_HALL_PLL;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	43480000 	.word	0x43480000
 800077c:	43160000 	.word	0x43160000

08000780 <slctDrvMode>:

void inline slctDrvMode(float electFreq, uint8_t* drvMode){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	ed87 0a01 	vstr	s0, [r7, #4]
 800078a:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b04      	cmp	r3, #4
 8000792:	d010      	beq.n	80007b6 <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 8000794:	edd7 7a01 	vldr	s15, [r7, #4]
 8000798:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007ec <slctDrvMode+0x6c>
 800079c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a4:	dd03      	ble.n	80007ae <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2204      	movs	r2, #4
 80007aa:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 80007ac:	e017      	b.n	80007de <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
}
 80007b4:	e013      	b.n	80007de <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d10f      	bne.n	80007de <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 80007be:	edd7 7a01 	vldr	s15, [r7, #4]
 80007c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80007f0 <slctDrvMode+0x70>
 80007c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	d503      	bpl.n	80007d8 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2202      	movs	r2, #2
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	e002      	b.n	80007de <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2204      	movs	r2, #4
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	43960000 	.word	0x43960000
 80007f0:	437a0000 	.word	0x437a0000

080007f4 <slctElectAngleFromPosMode>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 80007f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007f8:	b0a4      	sub	sp, #144	; 0x90
 80007fa:	af1e      	add	r7, sp, #120	; 0x78
 80007fc:	4603      	mov	r3, r0
 80007fe:	6039      	str	r1, [r7, #0]
 8000800:	71fb      	strb	r3, [r7, #7]
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b04      	cmp	r3, #4
 8000806:	f200 80a7 	bhi.w	8000958 <slctElectAngleFromPosMode+0x164>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <slctElectAngleFromPosMode+0x1c>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000825 	.word	0x08000825
 8000814:	08000855 	.word	0x08000855
 8000818:	080008b3 	.word	0x080008b3
 800081c:	080008df 	.word	0x080008df
 8000820:	0800090b 	.word	0x0800090b
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
		flgPLL = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000838:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <slctElectAngleFromPosMode+0x180>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	f107 0210 	add.w	r2, r7, #16
 8000846:	7db9      	ldrb	r1, [r7, #22]
 8000848:	eeb0 0a67 	vmov.f32	s0, s15
 800084c:	484a      	ldr	r0, [pc, #296]	; (8000978 <slctElectAngleFromPosMode+0x184>)
 800084e:	f000 fc1f 	bl	8001090 <calcElectAngle>
		break;
 8000852:	e08a      	b.n	800096a <slctElectAngleFromPosMode+0x176>

	case POSMODE_FREERUN:
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000854:	4b49      	ldr	r3, [pc, #292]	; (800097c <slctElectAngleFromPosMode+0x188>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	605a      	str	r2, [r3, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 800085c:	4b47      	ldr	r3, [pc, #284]	; (800097c <slctElectAngleFromPosMode+0x188>)
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000980 <slctElectAngleFromPosMode+0x18c>
 8000866:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <slctElectAngleFromPosMode+0x190>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000874:	4b43      	ldr	r3, [pc, #268]	; (8000984 <slctElectAngleFromPosMode+0x190>)
 8000876:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 800087a:	4b42      	ldr	r3, [pc, #264]	; (8000984 <slctElectAngleFromPosMode+0x190>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	f7ff fd3e 	bl	8000304 <gfWrapTheta>
 8000888:	eef0 7a40 	vmov.f32	s15, s0
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	edc3 7a00 	vstr	s15, [r3]

		flgPLL = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <slctElectAngleFromPosMode+0x180>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	7db9      	ldrb	r1, [r7, #22]
 80008a6:	eeb0 0a67 	vmov.f32	s0, s15
 80008aa:	4833      	ldr	r0, [pc, #204]	; (8000978 <slctElectAngleFromPosMode+0x184>)
 80008ac:	f000 fbf0 	bl	8001090 <calcElectAngle>

		break;
 80008b0:	e05b      	b.n	800096a <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL:
		flgPLL = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <slctElectAngleFromPosMode+0x180>)
 80008b8:	edd3 7a00 	vldr	s15, [r3]
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	7db9      	ldrb	r1, [r7, #22]
 80008c6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ca:	482b      	ldr	r0, [pc, #172]	; (8000978 <slctElectAngleFromPosMode+0x184>)
 80008cc:	f000 fbe0 	bl	8001090 <calcElectAngle>
		sensData->electAngle = electAngle;
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	605a      	str	r2, [r3, #4]
		break;
 80008dc:	e045      	b.n	800096a <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <slctElectAngleFromPosMode+0x180>)
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	f107 0210 	add.w	r2, r7, #16
 80008f0:	7db9      	ldrb	r1, [r7, #22]
 80008f2:	eeb0 0a67 	vmov.f32	s0, s15
 80008f6:	4820      	ldr	r0, [pc, #128]	; (8000978 <slctElectAngleFromPosMode+0x184>)
 80008f8:	f000 fbca 	bl	8001090 <calcElectAngle>
		sensData->electAngle = electAngle;
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	605a      	str	r2, [r3, #4]
		break;
 8000908:	e02f      	b.n	800096a <slctElectAngleFromPosMode+0x176>
	case POSMODE_SENSORLESS:
		flgInit = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 800090e:	4e1e      	ldr	r6, [pc, #120]	; (8000988 <slctElectAngleFromPosMode+0x194>)
 8000910:	f897 8017 	ldrb.w	r8, [r7, #23]
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <slctElectAngleFromPosMode+0x198>)
 8000916:	931d      	str	r3, [sp, #116]	; 0x74
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <slctElectAngleFromPosMode+0x19c>)
 800091a:	ab0a      	add	r3, sp, #40	; 0x28
 800091c:	4611      	mov	r1, r2
 800091e:	224c      	movs	r2, #76	; 0x4c
 8000920:	4618      	mov	r0, r3
 8000922:	f007 ff85 	bl	8008830 <memcpy>
 8000926:	466d      	mov	r5, sp
 8000928:	f106 040c 	add.w	r4, r6, #12
 800092c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000938:	e885 0003 	stmia.w	r5, {r0, r1}
 800093c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000940:	4640      	mov	r0, r8
 8000942:	f001 fb05 	bl	8001f50 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <slctElectAngleFromPosMode+0x198>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <slctElectAngleFromPosMode+0x198>)
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	605a      	str	r2, [r3, #4]
		break;
 8000956:	e008      	b.n	800096a <slctElectAngleFromPosMode+0x176>
	default:
		sensData->electAngle = 0.0f;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f04f 0200 	mov.w	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
		break;
 8000968:	bf00      	nop
	}
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000974:	20000090 	.word	0x20000090
 8000978:	2000008c 	.word	0x2000008c
 800097c:	200000a4 	.word	0x200000a4
 8000980:	461c4000 	.word	0x461c4000
 8000984:	200000a0 	.word	0x200000a0
 8000988:	200000b8 	.word	0x200000b8
 800098c:	20000138 	.word	0x20000138
 8000990:	200000ec 	.word	0x200000ec

08000994 <slctCntlFromDrvMode>:

void inline slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000994:	b084      	sub	sp, #16
 8000996:	b5b0      	push	{r4, r5, r7, lr}
 8000998:	b090      	sub	sp, #64	; 0x40
 800099a:	af0c      	add	r7, sp, #48	; 0x30
 800099c:	4604      	mov	r4, r0
 800099e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80009a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80009a6:	4623      	mov	r3, r4
 80009a8:	71fb      	strb	r3, [r7, #7]

	float VamRef;
	float ModRef = 1.13;
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <slctCntlFromDrvMode+0xf4>)
 80009ac:	60fb      	str	r3, [r7, #12]
	float ModErr;

	vectorControlData->Idq_ref[0] = 0.0f;
 80009ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
	vectorControlData->Idq_ref[1] = 3.0f;//IQREFMAX * gVolume;
 80009b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b8:	4a34      	ldr	r2, [pc, #208]	; (8000a8c <slctCntlFromDrvMode+0xf8>)
 80009ba:	605a      	str	r2, [r3, #4]
	vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_ref[0];
 80009bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009c2:	609a      	str	r2, [r3, #8]
	vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_ref[1];//IQREFMAX * gVolume;
 80009c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ca:	60da      	str	r2, [r3, #12]
	if( sId_ref_i < -1.0f)
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;*/

	switch(drvMode){
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d038      	beq.n	8000a44 <slctCntlFromDrvMode+0xb0>
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	dc4b      	bgt.n	8000a6e <slctCntlFromDrvMode+0xda>
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <slctCntlFromDrvMode+0x4c>
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d005      	beq.n	80009ea <slctCntlFromDrvMode+0x56>
 80009de:	e046      	b.n	8000a6e <slctCntlFromDrvMode+0xda>
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 80009e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80009e4:	f7ff fcf5 	bl	80003d2 <gOffDuty>
			break;
 80009e8:	e046      	b.n	8000a78 <slctCntlFromDrvMode+0xe4>
		case DRVMODE_OPENLOOP:
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * gPropoDuty * gButton1;//gVolume;
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <slctCntlFromDrvMode+0xfc>)
 80009ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009f0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000a94 <slctCntlFromDrvMode+0x100>
 80009f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <slctCntlFromDrvMode+0x104>)
 80009fa:	edd3 7a00 	vldr	s15, [r3]
 80009fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <slctCntlFromDrvMode+0x108>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a12:	edc7 7a02 	vstr	s15, [r7, #8]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a20:	9309      	str	r3, [sp, #36]	; 0x24
 8000a22:	466d      	mov	r5, sp
 8000a24:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	602b      	str	r3, [r5, #0]
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a3e:	f000 fd7f 	bl	8001540 <OpenLoopTasks>
			break;
 8000a42:	e019      	b.n	8000a78 <slctCntlFromDrvMode+0xe4>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 8000a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8000a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a50:	466d      	mov	r5, sp
 8000a52:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	602b      	str	r3, [r5, #0]
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a68:	f000 fcd4 	bl	8001414 <VectorControlTasks>
			break;
 8000a6c:	e004      	b.n	8000a78 <slctCntlFromDrvMode+0xe4>
		default :
			gOffDuty(Duty, outputMode);
 8000a6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a70:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000a72:	f7ff fcae 	bl	80003d2 <gOffDuty>
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a82:	b004      	add	sp, #16
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	3f90a3d7 	.word	0x3f90a3d7
 8000a8c:	40400000 	.word	0x40400000
 8000a90:	200000b8 	.word	0x200000b8
 8000a94:	3f1cc471 	.word	0x3f1cc471
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	2000008f 	.word	0x2000008f

08000aa0 <calcCurrentRef>:

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
	switch(drvMode){
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d028      	beq.n	8000b04 <calcCurrentRef+0x64>
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	dc51      	bgt.n	8000b5a <calcCurrentRef+0xba>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <calcCurrentRef+0x20>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d011      	beq.n	8000ae2 <calcCurrentRef+0x42>
 8000abe:	e04c      	b.n	8000b5a <calcCurrentRef+0xba>
		case DRVMODE_OFFDUTY:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
			break;
 8000ae0:	e04c      	b.n	8000b7c <calcCurrentRef+0xdc>
		case DRVMODE_OPENLOOP:
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	699a      	ldr	r2, [r3, #24]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	69da      	ldr	r2, [r3, #28]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	69da      	ldr	r2, [r3, #28]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	60da      	str	r2, [r3, #12]
			break;
 8000b02:	e03b      	b.n	8000b7c <calcCurrentRef+0xdc>
		case DRVMODE_VECTORCONTROL:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <calcCurrentRef+0xe4>)
 8000b0e:	edd3 7a00 	vldr	s15, [r3]
 8000b12:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	edc3 7a01 	vstr	s15, [r3, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3308      	adds	r3, #8
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000b88 <calcCurrentRef+0xe8>
 8000b30:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000b8c <calcCurrentRef+0xec>
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	f7ff fc6f 	bl	800041a <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	330c      	adds	r3, #12
 8000b46:	4618      	mov	r0, r3
 8000b48:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000b88 <calcCurrentRef+0xe8>
 8000b4c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000b8c <calcCurrentRef+0xec>
 8000b50:	eeb0 0a67 	vmov.f32	s0, s15
 8000b54:	f7ff fc61 	bl	800041a <gLPF>
			break;
 8000b58:	e010      	b.n	8000b7c <calcCurrentRef+0xdc>
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f04f 0200 	mov.w	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000094 	.word	0x20000094
 8000b88:	3a83126f 	.word	0x3a83126f
 8000b8c:	41fb53d1 	.word	0x41fb53d1

08000b90 <readButton1>:
float propoInputCaptureCntDiff;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = 1;//HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
	//B1 = 0b00000001 & (~B1);
	return B1;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	b2db      	uxtb	r3, r3
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <readHallInputCaptureCnt>:

uint32_t readHallInputCaptureCnt(void){
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <readPropoInputCaptureCnt>:

uint16_t readPropoInputCaptureCnt(void){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR2:TIM3 Channel2 = Propo
	volatile uint16_t inputCaptureCnt;

	inputCaptureCnt = TIM3 -> CCR2;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <readPropoInputCaptureCnt+0x20>)
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	80fb      	strh	r3, [r7, #6]

	return inputCaptureCnt;
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	b29b      	uxth	r3, r3
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40000400 	.word	0x40000400

08000bec <readPropoDuty>:

float readPropoDuty(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;
	float preScaler;

	sPropoState_pre = sPropoState;
 8000bf2:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <readPropoDuty+0x118>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <readPropoDuty+0x11c>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	sPropoState = HAL_GPIO_ReadPin(GPIOC, Propo_Pin) & 0b00000001;
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	4843      	ldr	r0, [pc, #268]	; (8000d0c <readPropoDuty+0x120>)
 8000bfe:	f004 ff79 	bl	8005af4 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <readPropoDuty+0x118>)
 8000c0c:	701a      	strb	r2, [r3, #0]

	if(sPropoState) // sPropoState = ON
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <readPropoDuty+0x118>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <readPropoDuty+0x38>
		sPropoInputCaptureCntRise = readPropoInputCaptureCnt();
 8000c16:	f7ff ffd7 	bl	8000bc8 <readPropoInputCaptureCnt>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <readPropoDuty+0x124>)
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	e063      	b.n	8000cec <readPropoDuty+0x100>
	else			// sPropoState = OFF
	{
		sPropoInputCaptureCntFall = readPropoInputCaptureCnt();
 8000c24:	f7ff ffd0 	bl	8000bc8 <readPropoInputCaptureCnt>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <readPropoDuty+0x128>)
 8000c2e:	801a      	strh	r2, [r3, #0]

		// Detect Falling Edge, Update propoDuty
		if(sPropoState == 0 && sPropoState_pre == 1)
 8000c30:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <readPropoDuty+0x118>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d159      	bne.n	8000cec <readPropoDuty+0x100>
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <readPropoDuty+0x11c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d155      	bne.n	8000cec <readPropoDuty+0x100>
		{

			inputCaptureCntMax = TIM3 -> ARR;
 8000c40:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <readPropoDuty+0x12c>)
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	60fb      	str	r3, [r7, #12]
			inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	085b      	lsrs	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
			preScaler = (float)(TIM3 -> PSC);
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <readPropoDuty+0x12c>)
 8000c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5a:	edc7 7a01 	vstr	s15, [r7, #4]

			propoInputCaptureCntDiff = (float)sPropoInputCaptureCntFall - (float)sPropoInputCaptureCntRise;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <readPropoDuty+0x128>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <readPropoDuty+0x124>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <readPropoDuty+0x130>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]

			if( propoInputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c8a:	eeb1 7a67 	vneg.f32	s14, s15
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <readPropoDuty+0x130>)
 8000c90:	edd3 7a00 	vldr	s15, [r3]
 8000c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9c:	dd0c      	ble.n	8000cb8 <readPropoDuty+0xcc>
				propoInputCaptureCntDiff += (float)inputCaptureCntMax;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <readPropoDuty+0x130>)
 8000caa:	edd3 7a00 	vldr	s15, [r3]
 8000cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <readPropoDuty+0x130>)
 8000cb4:	edc3 7a00 	vstr	s15, [r3]

			// Default 1489 Max 1857 Min 1119 Ampritude:370
			sPropoDuty = (propoInputCaptureCntDiff - 1489.0f) * 0.0027f;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <readPropoDuty+0x130>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000d20 <readPropoDuty+0x134>
 8000cc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cc6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000d24 <readPropoDuty+0x138>
 8000cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <readPropoDuty+0x13c>)
 8000cd0:	edc3 7a00 	vstr	s15, [r3]
			if(sPropoDuty < 0.0f) sPropoDuty = 0.0f;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <readPropoDuty+0x13c>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	d503      	bpl.n	8000cec <readPropoDuty+0x100>
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <readPropoDuty+0x13c>)
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]

		}
	}

	propoDuty = sPropoDuty;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <readPropoDuty+0x13c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	603b      	str	r3, [r7, #0]
	return propoDuty;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	ee07 3a90 	vmov	s15, r3

}
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000158 	.word	0x20000158
 8000d08:	20000159 	.word	0x20000159
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	20000154 	.word	0x20000154
 8000d14:	20000156 	.word	0x20000156
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	20000160 	.word	0x20000160
 8000d20:	44ba2000 	.word	0x44ba2000
 8000d24:	3b30f27c 	.word	0x3b30f27c
 8000d28:	2000015c 	.word	0x2000015c

08000d2c <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3301      	adds	r3, #1
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5e:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6c:	eef1 7a67 	vneg.f32	s15, s15
 8000d70:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	d50a      	bpl.n	8000d94 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d88:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d90:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000d94:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d98:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000db8 <readTimeInterval+0x8c>
 8000d9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da0:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	ee07 3a90 	vmov	s15, r3
}
 8000daa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	4d221fe8 	.word	0x4d221fe8

08000dbc <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dda:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3302      	adds	r3, #2
 8000de2:	b292      	uxth	r2, r2
 8000de4:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3304      	adds	r3, #4
 8000df2:	b292      	uxth	r2, r2
 8000df4:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000e7c <readCurrent+0xc0>
 8000e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	edd3 7a00 	vldr	s15, [r3]
 8000e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3304      	adds	r3, #4
 8000e38:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e7c <readCurrent+0xc0>
 8000e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e40:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3304      	adds	r3, #4
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3308      	adds	r3, #8
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3308      	adds	r3, #8
 8000e62:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e7c <readCurrent+0xc0>
 8000e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	3daf5c29 	.word	0x3daf5c29

08000e80 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w

	Hall[0] = ~HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin) & 0b00000001;
 8000e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f004 fe30 	bl	8005af4 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	701a      	strb	r2, [r3, #0]
	Hall[1] = ~HAL_GPIO_ReadPin(GPIOB, H2_Pin) & 0b00000001;
 8000eaa:	2108      	movs	r1, #8
 8000eac:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <readHallSignal+0x70>)
 8000eae:	f004 fe21 	bl	8005af4 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	Hall[2] = ~HAL_GPIO_ReadPin(GPIOB, H3_Pin) & 0b00000001;
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <readHallSignal+0x70>)
 8000ece:	f004 fe11 	bl	8005af4 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	701a      	strb	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	float timeInterval;

	sHallInputCaptureCnt_pre = sHallInputCaptureCnt;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <readElectFreqFromHallSignal+0x84>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <readElectFreqFromHallSignal+0x88>)
 8000f02:	6013      	str	r3, [r2, #0]
	sHallInputCaptureCnt = readHallInputCaptureCnt();
 8000f04:	f7ff fe51 	bl	8000baa <readHallInputCaptureCnt>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <readElectFreqFromHallSignal+0x84>)
 8000f0c:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sHallInputCaptureCnt != sHallInputCaptureCnt_pre){
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <readElectFreqFromHallSignal+0x84>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <readElectFreqFromHallSignal+0x88>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d01a      	beq.n	8000f50 <readElectFreqFromHallSignal+0x5c>
		timeInterval = readTimeInterval(sHallInputCaptureCnt, sHallInputCaptureCnt_pre);
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <readElectFreqFromHallSignal+0x84>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <readElectFreqFromHallSignal+0x88>)
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff01 	bl	8000d2c <readTimeInterval>
 8000f2a:	ed87 0a03 	vstr	s0, [r7, #12]
		*electFreq = gfDivideAvoidZero(1.0f, timeInterval, 0.0001f);
 8000f2e:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000f80 <readElectFreqFromHallSignal+0x8c>
 8000f32:	edd7 0a03 	vldr	s1, [r7, #12]
 8000f36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f3a:	f7ff f99c 	bl	8000276 <gfDivideAvoidZero>
 8000f3e:	eef0 7a40 	vmov.f32	s15, s0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <readElectFreqFromHallSignal+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
	// If Input Capture Count keep same value, Set Electrical Freq Zero
	else if(sNoInputCaptureCnt < 2000)
		sNoInputCaptureCnt ++;
	else
		*electFreq = 0;
}
 8000f4e:	e00f      	b.n	8000f70 <readElectFreqFromHallSignal+0x7c>
	else if(sNoInputCaptureCnt < 2000)
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <readElectFreqFromHallSignal+0x90>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f58:	d206      	bcs.n	8000f68 <readElectFreqFromHallSignal+0x74>
		sNoInputCaptureCnt ++;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <readElectFreqFromHallSignal+0x90>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <readElectFreqFromHallSignal+0x90>)
 8000f64:	801a      	strh	r2, [r3, #0]
}
 8000f66:	e003      	b.n	8000f70 <readElectFreqFromHallSignal+0x7c>
		*electFreq = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000014c 	.word	0x2000014c
 8000f7c:	20000150 	.word	0x20000150
 8000f80:	38d1b717 	.word	0x38d1b717
 8000f84:	20000148 	.word	0x20000148

08000f88 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f993 3000 	ldrsb.w	r3, [r3]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <writeOutputMode+0x80>)
 8000fa2:	f004 fdbf 	bl	8005b24 <HAL_GPIO_WritePin>
 8000fa6:	e005      	b.n	8000fb4 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4816      	ldr	r0, [pc, #88]	; (8001008 <writeOutputMode+0x80>)
 8000fb0:	f004 fdb8 	bl	8005b24 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d106      	bne.n	8000fce <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc6:	4810      	ldr	r0, [pc, #64]	; (8001008 <writeOutputMode+0x80>)
 8000fc8:	f004 fdac 	bl	8005b24 <HAL_GPIO_WritePin>
 8000fcc:	e005      	b.n	8000fda <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <writeOutputMode+0x80>)
 8000fd6:	f004 fda5 	bl	8005b24 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d106      	bne.n	8000ff4 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <writeOutputMode+0x80>)
 8000fee:	f004 fd99 	bl	8005b24 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000ff2:	e005      	b.n	8001000 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <writeOutputMode+0x80>)
 8000ffc:	f004 fd92 	bl	8005b24 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	48000800 	.word	0x48000800

0800100c <writeDuty>:

void writeDuty(float* Duty){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <writeDuty+0x80>)
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <writeDuty+0x80>)
 800102c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001030:	ee17 2a90 	vmov	r2, s15
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	ed93 7a00 	vldr	s14, [r3]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <writeDuty+0x80>)
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <writeDuty+0x80>)
 8001050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001054:	ee17 2a90 	vmov	r2, s15
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3308      	adds	r3, #8
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <writeDuty+0x80>)
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <writeDuty+0x80>)
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	ee17 2a90 	vmov	r2, s15
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40012c00 	.word	0x40012c00

08001090 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6178      	str	r0, [r7, #20]
 8001098:	ed87 0a04 	vstr	s0, [r7, #16]
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80010a4:	4b76      	ldr	r3, [pc, #472]	; (8001280 <calcElectAngle+0x1f0>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80010b6:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8001284 <calcElectAngle+0x1f4>
 80010ba:	eddf 0a73 	vldr	s1, [pc, #460]	; 8001288 <calcElectAngle+0x1f8>
 80010be:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80010c2:	f7ff f95d 	bl	8000380 <gUpperLowerLimit>
 80010c6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80010ca:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <calcElectAngle+0x1f0>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800128c <calcElectAngle+0x1fc>
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80010dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
	Kp_PLL = wc_PLL;
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	61fb      	str	r3, [r7, #28]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 80010f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010f4:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001290 <calcElectAngle+0x200>
 80010f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	ed97 7a08 	vldr	s14, [r7, #32]
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	edc7 7a06 	vstr	s15, [r7, #24]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8001110:	4b60      	ldr	r3, [pc, #384]	; (8001294 <calcElectAngle+0x204>)
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	4b60      	ldr	r3, [pc, #384]	; (8001298 <calcElectAngle+0x208>)
 8001116:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8001118:	6978      	ldr	r0, [r7, #20]
 800111a:	f000 f8d3 	bl	80012c4 <calcVoltageMode>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <calcElectAngle+0x204>)
 8001124:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <calcElectAngle+0x20c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a5d      	ldr	r2, [pc, #372]	; (80012a0 <calcElectAngle+0x210>)
 800112c:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 800112e:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <calcElectAngle+0x208>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <calcElectAngle+0x204>)
 8001134:	7811      	ldrb	r1, [r2, #0]
 8001136:	4a5b      	ldr	r2, [pc, #364]	; (80012a4 <calcElectAngle+0x214>)
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f909 	bl	8001350 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <calcElectAngle+0x204>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <calcElectAngle+0x214>)
 8001144:	f992 2000 	ldrsb.w	r2, [r2]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f92c 	bl	80013a8 <calcElectAngleFromVoltageMode>
 8001150:	eef0 7a40 	vmov.f32	s15, s0
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <calcElectAngle+0x20c>)
 8001156:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 800115a:	4b50      	ldr	r3, [pc, #320]	; (800129c <calcElectAngle+0x20c>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	f7ff f8ce 	bl	8000304 <gfWrapTheta>
 8001168:	eef0 7a40 	vmov.f32	s15, s0
 800116c:	4b4b      	ldr	r3, [pc, #300]	; (800129c <calcElectAngle+0x20c>)
 800116e:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <calcElectAngle+0x218>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <calcElectAngle+0x21c>)
 8001178:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 800117a:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <calcElectAngle+0x218>)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d163      	bne.n	800124e <calcElectAngle+0x1be>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 8001186:	4b49      	ldr	r3, [pc, #292]	; (80012ac <calcElectAngle+0x21c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d110      	bne.n	80011b0 <calcElectAngle+0x120>
			sElectAngVeloEstimate = electFreq * TWOPI;
 800118e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001192:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80012b0 <calcElectAngle+0x220>
 8001196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <calcElectAngle+0x1f0>)
 800119c:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <calcElectAngle+0x1f0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <calcElectAngle+0x224>)
 80011a6:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <calcElectAngle+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a42      	ldr	r2, [pc, #264]	; (80012b8 <calcElectAngle+0x228>)
 80011ae:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <calcElectAngle+0x1f0>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80012bc <calcElectAngle+0x22c>
 80011ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <calcElectAngle+0x228>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <calcElectAngle+0x228>)
 80011ca:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <calcElectAngle+0x228>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff f894 	bl	8000304 <gfWrapTheta>
 80011dc:	eef0 7a40 	vmov.f32	s15, s0
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <calcElectAngle+0x228>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]

		// Change Hall Signal, Update sElectAngVeloEstimate
		if( sElectAngleActual != sElectAngleActual_pre){
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <calcElectAngle+0x20c>)
 80011e8:	ed93 7a00 	vldr	s14, [r3]
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <calcElectAngle+0x210>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	d035      	beq.n	8001268 <calcElectAngle+0x1d8>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <calcElectAngle+0x20c>)
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <calcElectAngle+0x228>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <calcElectAngle+0x230>)
 800120e:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <calcElectAngle+0x230>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	f7ff f872 	bl	8000304 <gfWrapTheta>
 8001220:	eef0 7a40 	vmov.f32	s15, s0
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <calcElectAngle+0x230>)
 8001226:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <calcElectAngle+0x230>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	4820      	ldr	r0, [pc, #128]	; (80012b4 <calcElectAngle+0x224>)
 8001232:	ed97 1a06 	vldr	s2, [r7, #24]
 8001236:	edd7 0a07 	vldr	s1, [r7, #28]
 800123a:	eeb0 0a67 	vmov.f32	s0, s15
 800123e:	f7fe ffeb 	bl	8000218 <cfPhaseLockedLoop>
 8001242:	eef0 7a40 	vmov.f32	s15, s0
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <calcElectAngle+0x1f0>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
 800124c:	e00c      	b.n	8001268 <calcElectAngle+0x1d8>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <calcElectAngle+0x20c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <calcElectAngle+0x228>)
 8001254:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 8001256:	edd7 7a04 	vldr	s15, [r7, #16]
 800125a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012b0 <calcElectAngle+0x220>
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <calcElectAngle+0x1f0>)
 8001264:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <calcElectAngle+0x228>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <calcElectAngle+0x1f0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	601a      	str	r2, [r3, #0]


}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000017c 	.word	0x2000017c
 8001284:	00000000 	.word	0x00000000
 8001288:	43fa0000 	.word	0x43fa0000
 800128c:	3e22f983 	.word	0x3e22f983
 8001290:	3e4ccccd 	.word	0x3e4ccccd
 8001294:	20000164 	.word	0x20000164
 8001298:	20000165 	.word	0x20000165
 800129c:	2000016c 	.word	0x2000016c
 80012a0:	20000170 	.word	0x20000170
 80012a4:	20000166 	.word	0x20000166
 80012a8:	20000167 	.word	0x20000167
 80012ac:	20000168 	.word	0x20000168
 80012b0:	40c90fdb 	.word	0x40c90fdb
 80012b4:	20000178 	.word	0x20000178
 80012b8:	20000174 	.word	0x20000174
 80012bc:	461c4000 	.word	0x461c4000
 80012c0:	20000180 	.word	0x20000180

080012c4 <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3302      	adds	r3, #2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d821      	bhi.n	800133c <calcVoltageMode+0x78>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <calcVoltageMode+0x3c>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001337 	.word	0x08001337
 8001304:	0800131f 	.word	0x0800131f
 8001308:	08001319 	.word	0x08001319
 800130c:	0800132b 	.word	0x0800132b
 8001310:	08001331 	.word	0x08001331
 8001314:	08001325 	.word	0x08001325
	  case 3:
		voltageMode = 3;
 8001318:	2303      	movs	r3, #3
 800131a:	73fb      	strb	r3, [r7, #15]
		break;
 800131c:	e011      	b.n	8001342 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 800131e:	2304      	movs	r3, #4
 8001320:	73fb      	strb	r3, [r7, #15]
		break;
 8001322:	e00e      	b.n	8001342 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8001324:	2305      	movs	r3, #5
 8001326:	73fb      	strb	r3, [r7, #15]
		break;
 8001328:	e00b      	b.n	8001342 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 800132a:	2306      	movs	r3, #6
 800132c:	73fb      	strb	r3, [r7, #15]
		break;
 800132e:	e008      	b.n	8001342 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
		break;
 8001334:	e005      	b.n	8001342 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	73fb      	strb	r3, [r7, #15]
		break;
 800133a:	e002      	b.n	8001342 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
	  break;
 8001340:	bf00      	nop
	}

	return voltageMode;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	603a      	str	r2, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	460b      	mov	r3, r1
 800135e:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001360:	79ba      	ldrb	r2, [r7, #6]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b01      	cmp	r3, #1
 8001370:	dd04      	ble.n	800137c <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3b06      	subs	r3, #6
 8001376:	b2db      	uxtb	r3, r3
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e008      	b.n	800138e <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	da03      	bge.n	800138e <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3306      	adds	r3, #6
 800138a:	b2db      	uxtb	r3, r3
 800138c:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	701a      	strb	r2, [r3, #0]

}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	4613      	mov	r3, r2
 80013b6:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800140c <calcElectAngleFromVoltageMode+0x64>
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	edc7 7a03 	vstr	s15, [r7, #12]

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 80013d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001410 <calcElectAngleFromVoltageMode+0x68>
 80013e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f2:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	ee07 3a90 	vmov	s15, r3
}
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	3f860a92 	.word	0x3f860a92
 8001410:	3f060a92 	.word	0x3f060a92

08001414 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001414:	b084      	sub	sp, #16
 8001416:	b5b0      	push	{r4, r5, r7, lr}
 8001418:	b08a      	sub	sp, #40	; 0x28
 800141a:	af0a      	add	r7, sp, #40	; 0x28
 800141c:	f107 0410 	add.w	r4, r7, #16
 8001420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800142a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800142c:	3301      	adds	r3, #1
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001434:	3302      	adds	r3, #2
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	493b      	ldr	r1, [pc, #236]	; (800152c <VectorControlTasks+0x118>)
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f941 	bl	80016c8 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001446:	edd7 7a04 	vldr	s15, [r7, #16]
 800144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144c:	3310      	adds	r3, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4836      	ldr	r0, [pc, #216]	; (800152c <VectorControlTasks+0x118>)
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	f000 f9d9 	bl	800180c <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 800145a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800145c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001462:	3318      	adds	r3, #24
 8001464:	4618      	mov	r0, r3
 8001466:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8001530 <VectorControlTasks+0x11c>
 800146a:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001534 <VectorControlTasks+0x120>
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	f7fe ffd2 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8001476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001478:	edd3 7a05 	vldr	s15, [r3, #20]
 800147c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147e:	331c      	adds	r3, #28
 8001480:	4618      	mov	r0, r3
 8001482:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001530 <VectorControlTasks+0x11c>
 8001486:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001534 <VectorControlTasks+0x120>
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	f7fe ffc4 	bl	800041a <gLPF>

	CurrentFbControl(sensData, vectorControlData);
 8001492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001494:	9309      	str	r3, [sp, #36]	; 0x24
 8001496:	466d      	mov	r5, sp
 8001498:	f107 0420 	add.w	r4, r7, #32
 800149c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	602b      	str	r3, [r5, #0]
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ae:	f000 fc13 	bl	8001cd8 <CurrentFbControl>
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 80014b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b4:	9309      	str	r3, [sp, #36]	; 0x24
 80014b6:	466d      	mov	r5, sp
 80014b8:	f107 0420 	add.w	r4, r7, #32
 80014bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	602b      	str	r3, [r5, #0]
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ce:	f000 fa27 	bl	8001920 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 80014d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d4:	9309      	str	r3, [sp, #36]	; 0x24
 80014d6:	466d      	mov	r5, sp
 80014d8:	f107 0420 	add.w	r4, r7, #32
 80014dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	602b      	str	r3, [r5, #0]
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ee:	f000 fa4f 	bl	8001990 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 80014f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f8:	3320      	adds	r3, #32
 80014fa:	490f      	ldr	r1, [pc, #60]	; (8001538 <VectorControlTasks+0x124>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	f000 fab5 	bl	8001a70 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <VectorControlTasks+0x128>)
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <VectorControlTasks+0x124>)
 800150a:	f000 f93d 	bl	8001788 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800150e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001512:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <VectorControlTasks+0x128>)
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f000 fae9 	bl	8001af0 <Vuvw2Duty>

}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001526:	b004      	add	sp, #16
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000184 	.word	0x20000184
 8001530:	38d1b717 	.word	0x38d1b717
 8001534:	42fb3333 	.word	0x42fb3333
 8001538:	20000190 	.word	0x20000190
 800153c:	20000198 	.word	0x20000198

08001540 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001540:	b084      	sub	sp, #16
 8001542:	b5b0      	push	{r4, r5, r7, lr}
 8001544:	b08c      	sub	sp, #48	; 0x30
 8001546:	af0a      	add	r7, sp, #40	; 0x28
 8001548:	ed87 0a01 	vstr	s0, [r7, #4]
 800154c:	f107 0418 	add.w	r4, r7, #24
 8001550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800155a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155c:	3301      	adds	r3, #1
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001564:	3302      	adds	r3, #2
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	4937      	ldr	r1, [pc, #220]	; (800164c <OpenLoopTasks+0x10c>)
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f8a9 	bl	80016c8 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001576:	edd7 7a06 	vldr	s15, [r7, #24]
 800157a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800157c:	3310      	adds	r3, #16
 800157e:	4619      	mov	r1, r3
 8001580:	4832      	ldr	r0, [pc, #200]	; (800164c <OpenLoopTasks+0x10c>)
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	f000 f941 	bl	800180c <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 800158a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001592:	3318      	adds	r3, #24
 8001594:	4618      	mov	r0, r3
 8001596:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8001650 <OpenLoopTasks+0x110>
 800159a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8001654 <OpenLoopTasks+0x114>
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	f7fe ff3a 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 80015a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ae:	331c      	adds	r3, #28
 80015b0:	4618      	mov	r0, r3
 80015b2:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001650 <OpenLoopTasks+0x110>
 80015b6:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001654 <OpenLoopTasks+0x114>
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	f7fe ff2c 	bl	800041a <gLPF>

	vectorControlData->Vdq[0] = 0.0f;
 80015c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
	vectorControlData->Vdq[1] = VamRef;
 80015ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24


	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 80015d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d2:	9309      	str	r3, [sp, #36]	; 0x24
 80015d4:	466d      	mov	r5, sp
 80015d6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	602b      	str	r3, [r5, #0]
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ec:	f000 f998 	bl	8001920 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 80015f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f2:	9309      	str	r3, [sp, #36]	; 0x24
 80015f4:	466d      	mov	r5, sp
 80015f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	602b      	str	r3, [r5, #0]
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160c:	f000 f9c0 	bl	8001990 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001610:	edd7 7a06 	vldr	s15, [r7, #24]
 8001614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001616:	3320      	adds	r3, #32
 8001618:	490f      	ldr	r1, [pc, #60]	; (8001658 <OpenLoopTasks+0x118>)
 800161a:	4618      	mov	r0, r3
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	f000 fa26 	bl	8001a70 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001624:	490d      	ldr	r1, [pc, #52]	; (800165c <OpenLoopTasks+0x11c>)
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <OpenLoopTasks+0x118>)
 8001628:	f000 f8ae 	bl	8001788 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800162c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001630:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <OpenLoopTasks+0x11c>)
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	f000 fa5a 	bl	8001af0 <Vuvw2Duty>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001646:	b004      	add	sp, #16
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000184 	.word	0x20000184
 8001650:	38d1b717 	.word	0x38d1b717
 8001654:	42fb3333 	.word	0x42fb3333
 8001658:	20000190 	.word	0x20000190
 800165c:	20000198 	.word	0x20000198

08001660 <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001660:	b084      	sub	sp, #16
 8001662:	b5b0      	push	{r4, r5, r7, lr}
 8001664:	b08a      	sub	sp, #40	; 0x28
 8001666:	af0a      	add	r7, sp, #40	; 0x28
 8001668:	f107 0410 	add.w	r4, r7, #16
 800166c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	calcVdqFeedForword(sensData, vectorControlData);
 8001670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001672:	9309      	str	r3, [sp, #36]	; 0x24
 8001674:	466d      	mov	r5, sp
 8001676:	f107 0420 	add.w	r4, r7, #32
 800167a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	602b      	str	r3, [r5, #0]
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168c:	f000 fbcc 	bl	8001e28 <calcVdqFeedForword>
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8001690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001692:	ed93 7a08 	vldr	s14, [r3, #32]
 8001696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001698:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 80016a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80016ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ae:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016c4:	b004      	add	sp, #16
 80016c6:	4770      	bx	lr

080016c8 <uvw2ab>:

static inline void uvw2ab(float* uvw, float* ab){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3304      	adds	r3, #4
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3308      	adds	r3, #8
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800177c <uvw2ab+0xb4>
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001780 <uvw2ab+0xb8>
 800171a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3308      	adds	r3, #8
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001780 <uvw2ab+0xb8>
 800172a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800172e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3304      	adds	r3, #4
 8001736:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800177c <uvw2ab+0xb4>
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3304      	adds	r3, #4
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3308      	adds	r3, #8
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3308      	adds	r3, #8
 8001764:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001784 <uvw2ab+0xbc>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	edc3 7a00 	vstr	s15, [r3]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	3f5105ec 	.word	0x3f5105ec
 8001780:	3f5db3d7 	.word	0x3f5db3d7
 8001784:	3f13cd3a 	.word	0x3f13cd3a

08001788 <ab2uvw>:

static inline void ab2uvw(float* ab, float* uvw){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001804 <ab2uvw+0x7c>
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80017b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3304      	adds	r3, #4
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001808 <ab2uvw+0x80>
 80017c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3304      	adds	r3, #4
 80017cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001804 <ab2uvw+0x7c>
 80017d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d4:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb1 7a67 	vneg.f32	s14, s15
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3304      	adds	r3, #4
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3308      	adds	r3, #8
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	edc3 7a00 	vstr	s15, [r3]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	3f5105ec 	.word	0x3f5105ec
 8001808:	3f5db3d7 	.word	0x3f5db3d7

0800180c <ab2dq>:

static inline void ab2dq(float theta, float* ab, float* dq){
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a03 	vstr	s0, [r7, #12]
 8001816:	60b8      	str	r0, [r7, #8]
 8001818:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800181a:	ed97 0a03 	vldr	s0, [r7, #12]
 800181e:	f007 f861 	bl	80088e4 <sinf>
 8001822:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001826:	ed97 0a03 	vldr	s0, [r7, #12]
 800182a:	f007 f817 	bl	800885c <cosf>
 800182e:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	edd7 7a04 	vldr	s15, [r7, #16]
 800183c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3304      	adds	r3, #4
 8001844:	edd3 6a00 	vldr	s13, [r3]
 8001848:	edd7 7a05 	vldr	s15, [r7, #20]
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eeb1 7a67 	vneg.f32	s14, s15
 8001864:	edd7 7a05 	vldr	s15, [r7, #20]
 8001868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3304      	adds	r3, #4
 8001870:	edd3 6a00 	vldr	s13, [r3]
 8001874:	edd7 7a04 	vldr	s15, [r7, #16]
 8001878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	edc3 7a00 	vstr	s15, [r3]
}
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <calcAmpFromVect>:

static inline float calcAmpFromVect(float* Vect){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	edd3 6a00 	vldr	s13, [r3]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c0:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 80018c4:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c8:	f007 f874 	bl	80089b4 <sqrtf>
 80018cc:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	ee07 3a90 	vmov	s15, r3
}
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <calcModFromVamp>:

static inline float calcModFromVamp(float Vamp, float twoDivVdc){
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ea:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 80018ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80018f2:	edd7 7a00 	vldr	s15, [r7]
 80018f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800191c <calcModFromVamp+0x3c>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	ee07 3a90 	vmov	s15, r3
}
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	3f5105ec 	.word	0x3f5105ec

08001920 <calcAmpPhaseModFromVoltVect>:

static inline void calcAmpPhaseModFromVoltVect(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001920:	b084      	sub	sp, #16
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
 8001926:	f107 0c08 	add.w	ip, r7, #8
 800192a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 800192e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001930:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001936:	ed93 7a08 	vldr	s14, [r3, #32]
 800193a:	eef0 0a47 	vmov.f32	s1, s14
 800193e:	eeb0 0a67 	vmov.f32	s0, s15
 8001942:	f007 f815 	bl	8008970 <atan2f>
 8001946:	eef0 7a40 	vmov.f32	s15, s0
 800194a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	3320      	adds	r3, #32
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff9b 	bl	8001890 <calcAmpFromVect>
 800195a:	eef0 7a40 	vmov.f32	s15, s0
 800195e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001960:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001966:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800196a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800196e:	eef0 0a47 	vmov.f32	s1, s14
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	f7ff ffb3 	bl	80018e0 <calcModFromVamp>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800198c:	b004      	add	sp, #16
 800198e:	4770      	bx	lr

08001990 <limitVoltVectAmp>:

static inline void limitVoltVectAmp(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001990:	b084      	sub	sp, #16
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	f107 0c10 	add.w	ip, r7, #16
 800199c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float VampLimit;

	if( vectorControlData->Mod > MODLIMIT ){
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80019a6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001a64 <limitVoltVectAmp+0xd4>
 80019aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	dc00      	bgt.n	80019b6 <limitVoltVectAmp+0x26>
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
		vectorControlData->Mod = MODLIMIT;

	}
}
 80019b4:	e04e      	b.n	8001a54 <limitVoltVectAmp+0xc4>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 80019b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80019ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001a68 <limitVoltVectAmp+0xd8>
 80019be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a64 <limitVoltVectAmp+0xd4>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	edc7 7a01 	vstr	s15, [r7, #4]
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 80019ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019d4:	eeb0 0a67 	vmov.f32	s0, s15
 80019d8:	f006 ff40 	bl	800885c <cosf>
 80019dc:	eeb0 7a40 	vmov.f32	s14, s0
 80019e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ea:	edc3 7a08 	vstr	s15, [r3, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 80019ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80019f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8001a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a10:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a14:	eeb0 0a67 	vmov.f32	s0, s15
 8001a18:	f006 ff64 	bl	80088e4 <sinf>
 8001a1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 8001a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a30:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 8001a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <limitVoltVectAmp+0xdc>)
 8001a52:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a5e:	b004      	add	sp, #16
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	3f933333 	.word	0x3f933333
 8001a68:	3f1cc471 	.word	0x3f1cc471
 8001a6c:	3f933333 	.word	0x3f933333

08001a70 <dq2ab>:

static inline void dq2ab(float theta, float* dq, float* ab){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a7a:	60b8      	str	r0, [r7, #8]
 8001a7c:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001a7e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a82:	f006 ff2f 	bl	80088e4 <sinf>
 8001a86:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001a8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a8e:	f006 fee5 	bl	800885c <cosf>
 8001a92:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	edd3 6a00 	vldr	s13, [r3]
 8001ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <Vuvw2Duty>:

static inline void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001afa:	60b8      	str	r0, [r7, #8]
 8001afc:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	3304      	adds	r3, #4
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d502      	bpl.n	8001b20 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3308      	adds	r3, #8
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b34:	d502      	bpl.n	8001b3c <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3304      	adds	r3, #4
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	dd02      	ble.n	8001b5e <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3308      	adds	r3, #8
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	dd02      	ble.n	8001b7a <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	61bb      	str	r3, [r7, #24]

	vo = 0.0f;//(max + min) * 0.5f;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	ed93 7a00 	vldr	s14, [r3]
 8001b86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3304      	adds	r3, #4
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3308      	adds	r3, #8
 8001bb0:	ed93 7a00 	vldr	s14, [r3]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	ed93 7a00 	vldr	s14, [r3]
 8001bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	ed93 7a00 	vldr	s14, [r3]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c12:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c16:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1a:	f7fe fbb1 	bl	8000380 <gUpperLowerLimit>
 8001c1e:	eef0 7a40 	vmov.f32	s15, s0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	1d1c      	adds	r4, r3, #4
 8001c34:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f7fe fb9e 	bl	8000380 <gUpperLowerLimit>
 8001c44:	eef0 7a40 	vmov.f32	s15, s0
 8001c48:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f103 0408 	add.w	r4, r3, #8
 8001c5a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001c5e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f7fe fb8b 	bl	8000380 <gUpperLowerLimit>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001caa:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cca:	edc3 7a00 	vstr	s15, [r3]

}
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
	...

08001cd8 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001cd8:	b084      	sub	sp, #16
 8001cda:	b5b0      	push	{r4, r5, r7, lr}
 8001cdc:	b090      	sub	sp, #64	; 0x40
 8001cde:	af0a      	add	r7, sp, #40	; 0x28
 8001ce0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Kp;
	float Kig;
	float Kid;
	float wc;

	wc = 10.0f * TWOPI;
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <CurrentFbControl+0x140>)
 8001cea:	617b      	str	r3, [r7, #20]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
 8001cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001e1c <CurrentFbControl+0x144>
 8001cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf8:	edc7 7a04 	vstr	s15, [r7, #16]
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
 8001cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d00:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e20 <CurrentFbControl+0x148>
 8001d04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d08:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001e24 <CurrentFbControl+0x14c>
 8001d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d10:	edc7 7a03 	vstr	s15, [r7, #12]
	Kid = Kig;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	60bb      	str	r3, [r7, #8]

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d20:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d28:	edc7 7a00 	vstr	s15, [r7]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8001d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	edc7 7a01 	vstr	s15, [r7, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8001d40:	ed97 7a00 	vldr	s14, [r7]
 8001d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8001d52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d66:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d6a:	edd7 6a00 	vldr	s13, [r7]
 8001d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d82:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d86:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d98:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8001d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001da0:	466d      	mov	r5, sp
 8001da2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	602b      	str	r3, [r5, #0]
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db8:	f000 f836 	bl	8001e28 <calcVdqFeedForword>

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001dbc:	ed97 7a00 	vldr	s14, [r7]
 8001dc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dde:	edc3 7a08 	vstr	s15, [r3, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001de2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001de6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e12:	b004      	add	sp, #16
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	427b53d2 	.word	0x427b53d2
 8001e1c:	3949539b 	.word	0x3949539b
 8001e20:	3f75c28f 	.word	0x3f75c28f
 8001e24:	461c4000 	.word	0x461c4000

08001e28 <calcVdqFeedForword>:

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001e28:	b084      	sub	sp, #16
 8001e2a:	b490      	push	{r4, r7}
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	f107 0408 	add.w	r4, r7, #8
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8001e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3a:	eef1 7a67 	vneg.f32	s15, s15
 8001e3e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001e8c <calcVdqFeedForword+0x64>
 8001e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e46:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e90 <calcVdqFeedForword+0x68>
 8001e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e50:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8001e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e68:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001e94 <calcVdqFeedForword+0x6c>
 8001e6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e70:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001e98 <calcVdqFeedForword+0x70>
 8001e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc90      	pop	{r4, r7}
 8001e88:	b004      	add	sp, #16
 8001e8a:	4770      	bx	lr
 8001e8c:	39fba882 	.word	0x39fba882
 8001e90:	3ecccccd 	.word	0x3ecccccd
 8001e94:	3949539b 	.word	0x3949539b
 8001e98:	3a870111 	.word	0x3a870111

08001e9c <FluxObserver>:


static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	ed87 0a01 	vstr	s0, [r7, #4]
	float angleErr;
	float Egd[2];
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001f48 <FluxObserver+0xac>
 8001eba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001f4c <FluxObserver+0xb0>
 8001eca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	edc7 7a05 	vstr	s15, [r7, #20]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3304      	adds	r3, #4
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001f48 <FluxObserver+0xac>
 8001ef6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001efa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001efe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f02:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001f4c <FluxObserver+0xb0>
 8001f06:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f18:	edc7 7a06 	vstr	s15, [r7, #24]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f20:	eef1 7a67 	vneg.f32	s15, s15
 8001f24:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f28:	eef0 0a47 	vmov.f32	s1, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	f006 fd1e 	bl	8008970 <atan2f>
 8001f34:	ed87 0a07 	vstr	s0, [r7, #28]
	return angleErr;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	ee07 3a90 	vmov	s15, r3
}
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	3f75c28f 	.word	0x3f75c28f
 8001f4c:	3949539b 	.word	0x3949539b

08001f50 <calcElectAngleEstimate>:

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001f50:	b084      	sub	sp, #16
 8001f52:	b590      	push	{r4, r7, lr}
 8001f54:	b087      	sub	sp, #28
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4604      	mov	r4, r0
 8001f5a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f62:	4623      	mov	r3, r4
 8001f64:	71fb      	strb	r3, [r7, #7]
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f72:	f103 0220 	add.w	r2, r3, #32
 8001f76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff8a 	bl	8001e9c <FluxObserver>
 8001f88:	eef0 7a40 	vmov.f32	s15, s0
 8001f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f90:	edc3 7a01 	vstr	s15, [r3, #4]


	if( flgInit == 0){
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d110      	bne.n	8001fbc <calcElectAngleEstimate+0x6c>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa0:	609a      	str	r2, [r3, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa8:	60da      	str	r2, [r3, #12]
		electAngleEstimateData->wc_PLL = 0.0f;
 8001faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	4a39      	ldr	r2, [pc, #228]	; (800209c <calcElectAngleEstimate+0x14c>)
 8001fb8:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001fba:	e067      	b.n	800208c <calcElectAngleEstimate+0x13c>
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60bb      	str	r3, [r7, #8]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 8001fc4:	f107 0308 	add.w	r3, r7, #8
 8001fc8:	4618      	mov	r0, r3
 8001fca:	ed9f 1a35 	vldr	s2, [pc, #212]	; 80020a0 <calcElectAngleEstimate+0x150>
 8001fce:	eddf 0a35 	vldr	s1, [pc, #212]	; 80020a4 <calcElectAngleEstimate+0x154>
 8001fd2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80020a8 <calcElectAngleEstimate+0x158>
 8001fd6:	f7fe fa50 	bl	800047a <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fe0:	601a      	str	r2, [r3, #0]
		Ts_PLL = CARRIERCYCLE;
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <calcElectAngleEstimate+0x15c>)
 8001fe4:	617b      	str	r3, [r7, #20]
		Kp_PLL = wc_PLL;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fee:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80020b0 <calcElectAngleEstimate+0x160>
 8001ff2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a03 	vstr	s15, [r7, #12]
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 800200a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800200e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002016:	edd3 6a03 	vldr	s13, [r3, #12]
 800201a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80020b4 <calcElectAngleEstimate+0x164>
 800201e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800202a:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 800202e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002032:	edd3 7a02 	vldr	s15, [r3, #8]
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	f7fe f963 	bl	8000304 <gfWrapTheta>
 800203e:	eef0 7a40 	vmov.f32	s15, s0
 8002042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002046:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 800204a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800204e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002052:	eeb0 0a67 	vmov.f32	s0, s15
 8002056:	f7fe f955 	bl	8000304 <gfWrapTheta>
 800205a:	eef0 7a40 	vmov.f32	s15, s0
 800205e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002062:	edc3 7a01 	vstr	s15, [r3, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8002066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800206a:	edd3 7a01 	vldr	s15, [r3, #4]
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <calcElectAngleEstimate+0x14c>)
 8002070:	ed97 1a03 	vldr	s2, [r7, #12]
 8002074:	edd7 0a04 	vldr	s1, [r7, #16]
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	f7fe f8cc 	bl	8000218 <cfPhaseLockedLoop>
 8002080:	eef0 7a40 	vmov.f32	s15, s0
 8002084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002088:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002096:	b004      	add	sp, #16
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	200001a4 	.word	0x200001a4
 80020a0:	38d1b717 	.word	0x38d1b717
 80020a4:	42480000 	.word	0x42480000
 80020a8:	449d1463 	.word	0x449d1463
 80020ac:	38d1b717 	.word	0x38d1b717
 80020b0:	3e4ccccd 	.word	0x3e4ccccd
 80020b4:	461c4000 	.word	0x461c4000

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020bc:	f000 fdf5 	bl	8002caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c0:	f000 f886 	bl	80021d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c4:	f000 fb1a 	bl	80026fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80020c8:	f000 f8ce 	bl	8002268 <MX_ADC1_Init>
  MX_TIM1_Init();
 80020cc:	f000 f998 	bl	8002400 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020d0:	f000 fa56 	bl	8002580 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020d4:	f000 fabe 	bl	8002654 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80020d8:	4837      	ldr	r0, [pc, #220]	; (80021b8 <main+0x100>)
 80020da:	f004 fd3d 	bl	8006b58 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80020de:	4837      	ldr	r0, [pc, #220]	; (80021bc <main+0x104>)
 80020e0:	f002 fb0a 	bl	80046f8 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ea:	4835      	ldr	r0, [pc, #212]	; (80021c0 <main+0x108>)
 80020ec:	f003 fd1a 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f6:	4832      	ldr	r0, [pc, #200]	; (80021c0 <main+0x108>)
 80020f8:	f003 fd14 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002102:	482f      	ldr	r0, [pc, #188]	; (80021c0 <main+0x108>)
 8002104:	f003 fd0e 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002108:	2100      	movs	r1, #0
 800210a:	482b      	ldr	r0, [pc, #172]	; (80021b8 <main+0x100>)
 800210c:	f004 fdf4 	bl	8006cf8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002110:	2100      	movs	r1, #0
 8002112:	4829      	ldr	r0, [pc, #164]	; (80021b8 <main+0x100>)
 8002114:	f006 f90a 	bl	800832c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002118:	2104      	movs	r1, #4
 800211a:	4827      	ldr	r0, [pc, #156]	; (80021b8 <main+0x100>)
 800211c:	f004 fdec 	bl	8006cf8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002120:	2104      	movs	r1, #4
 8002122:	4825      	ldr	r0, [pc, #148]	; (80021b8 <main+0x100>)
 8002124:	f006 f902 	bl	800832c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002128:	2108      	movs	r1, #8
 800212a:	4823      	ldr	r0, [pc, #140]	; (80021b8 <main+0x100>)
 800212c:	f004 fde4 	bl	8006cf8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002130:	2108      	movs	r1, #8
 8002132:	4821      	ldr	r0, [pc, #132]	; (80021b8 <main+0x100>)
 8002134:	f006 f8fa 	bl	800832c <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <main+0x10c>)
 800213a:	2201      	movs	r2, #1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <main+0x10c>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <main+0x10c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <main+0x10c>)
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <main+0x10c>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <main+0x10c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <main+0x10c>)
 8002158:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800215c:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <main+0x10c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <main+0x10c>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <main+0x10c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <main+0x10c>)
 8002170:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002174:	6013      	str	r3, [r2, #0]

  TIM1 -> ARR = COUNTERPERIOD;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <main+0x10c>)
 8002178:	f242 1233 	movw	r2, #8499	; 0x2133
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <main+0x10c>)
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <main+0x10c>)
 8002184:	3b28      	subs	r3, #40	; 0x28
 8002186:	6413      	str	r3, [r2, #64]	; 0x40


  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8002188:	480f      	ldr	r0, [pc, #60]	; (80021c8 <main+0x110>)
 800218a:	f004 fce5 	bl	8006b58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800218e:	2100      	movs	r1, #0
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <main+0x110>)
 8002192:	f004 ff1b 	bl	8006fcc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002196:	2104      	movs	r1, #4
 8002198:	480b      	ldr	r0, [pc, #44]	; (80021c8 <main+0x110>)
 800219a:	f004 ff17 	bl	8006fcc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800219e:	2108      	movs	r1, #8
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <main+0x110>)
 80021a2:	f004 ff13 	bl	8006fcc <HAL_TIM_IC_Start_IT>

  // Start TIM3 Input Capture
  HAL_TIM_Base_Start_IT(&htim3);
 80021a6:	4809      	ldr	r0, [pc, #36]	; (80021cc <main+0x114>)
 80021a8:	f004 fcd6 	bl	8006b58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_2);
 80021ac:	2104      	movs	r1, #4
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <main+0x114>)
 80021b0:	f004 ff0c 	bl	8006fcc <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <main+0xfc>
 80021b6:	bf00      	nop
 80021b8:	20000214 	.word	0x20000214
 80021bc:	200001a8 	.word	0x200001a8
 80021c0:	48000800 	.word	0x48000800
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	20000260 	.word	0x20000260
 80021cc:	200002ac 	.word	0x200002ac

080021d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b094      	sub	sp, #80	; 0x50
 80021d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d6:	f107 0318 	add.w	r3, r7, #24
 80021da:	2238      	movs	r2, #56	; 0x38
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 fb34 	bl	800884c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f003 fcc8 	bl	8005b88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002202:	2340      	movs	r3, #64	; 0x40
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002206:	2302      	movs	r3, #2
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800220a:	2302      	movs	r3, #2
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800220e:	2304      	movs	r3, #4
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002212:	2355      	movs	r3, #85	; 0x55
 8002214:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002216:	2302      	movs	r3, #2
 8002218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800221a:	2302      	movs	r3, #2
 800221c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800221e:	2302      	movs	r3, #2
 8002220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fd52 	bl	8005cd0 <HAL_RCC_OscConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002232:	f000 fad3 	bl	80027dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002236:	230f      	movs	r3, #15
 8002238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223a:	2303      	movs	r3, #3
 800223c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2104      	movs	r1, #4
 800224e:	4618      	mov	r0, r3
 8002250:	f004 f850 	bl	80062f4 <HAL_RCC_ClockConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800225a:	f000 fabf 	bl	80027dc <Error_Handler>
  }
}
 800225e:	bf00      	nop
 8002260:	3750      	adds	r7, #80	; 0x50
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b09a      	sub	sp, #104	; 0x68
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800226e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800227a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800227e:	2220      	movs	r2, #32
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f006 fae2 	bl	800884c <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	223c      	movs	r2, #60	; 0x3c
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f006 fadc 	bl	800884c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002294:	4b55      	ldr	r3, [pc, #340]	; (80023ec <MX_ADC1_Init+0x184>)
 8002296:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800229a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <MX_ADC1_Init+0x184>)
 800229e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a4:	4b51      	ldr	r3, [pc, #324]	; (80023ec <MX_ADC1_Init+0x184>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022aa:	4b50      	ldr	r3, [pc, #320]	; (80023ec <MX_ADC1_Init+0x184>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022b0:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <MX_ADC1_Init+0x184>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022b6:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <MX_ADC1_Init+0x184>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022bc:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <MX_ADC1_Init+0x184>)
 80022be:	2204      	movs	r2, #4
 80022c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <MX_ADC1_Init+0x184>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022c8:	4b48      	ldr	r3, [pc, #288]	; (80023ec <MX_ADC1_Init+0x184>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <MX_ADC1_Init+0x184>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022d4:	4b45      	ldr	r3, [pc, #276]	; (80023ec <MX_ADC1_Init+0x184>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <MX_ADC1_Init+0x184>)
 80022de:	2200      	movs	r2, #0
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022e2:	4b42      	ldr	r3, [pc, #264]	; (80023ec <MX_ADC1_Init+0x184>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <MX_ADC1_Init+0x184>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022f0:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <MX_ADC1_Init+0x184>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <MX_ADC1_Init+0x184>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022fe:	483b      	ldr	r0, [pc, #236]	; (80023ec <MX_ADC1_Init+0x184>)
 8002300:	f000 ff70 	bl	80031e4 <HAL_ADC_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800230a:	f000 fa67 	bl	80027dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800230e:	2300      	movs	r3, #0
 8002310:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002312:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002316:	4619      	mov	r1, r3
 8002318:	4834      	ldr	r0, [pc, #208]	; (80023ec <MX_ADC1_Init+0x184>)
 800231a:	f003 f851 	bl	80053c0 <HAL_ADCEx_MultiModeConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8002324:	f000 fa5a 	bl	80027dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <MX_ADC1_Init+0x188>)
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800232c:	2306      	movs	r3, #6
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002330:	2300      	movs	r3, #0
 8002332:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002334:	237f      	movs	r3, #127	; 0x7f
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002338:	2304      	movs	r3, #4
 800233a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002340:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002344:	4619      	mov	r1, r3
 8002346:	4829      	ldr	r0, [pc, #164]	; (80023ec <MX_ADC1_Init+0x184>)
 8002348:	f001 fb86 	bl	8003a58 <HAL_ADC_ConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8002352:	f000 fa43 	bl	80027dc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002356:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <MX_ADC1_Init+0x18c>)
 8002358:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800235a:	2309      	movs	r3, #9
 800235c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002362:	237f      	movs	r3, #127	; 0x7f
 8002364:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002366:	2304      	movs	r3, #4
 8002368:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800236e:	2303      	movs	r3, #3
 8002370:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002392:	463b      	mov	r3, r7
 8002394:	4619      	mov	r1, r3
 8002396:	4815      	ldr	r0, [pc, #84]	; (80023ec <MX_ADC1_Init+0x184>)
 8002398:	f002 fae6 	bl	8004968 <HAL_ADCEx_InjectedConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80023a2:	f000 fa1b 	bl	80027dc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_ADC1_Init+0x190>)
 80023a8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80023aa:	f240 130f 	movw	r3, #271	; 0x10f
 80023ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80023b0:	463b      	mov	r3, r7
 80023b2:	4619      	mov	r1, r3
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <MX_ADC1_Init+0x184>)
 80023b6:	f002 fad7 	bl	8004968 <HAL_ADCEx_InjectedConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 80023c0:	f000 fa0c 	bl	80027dc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <MX_ADC1_Init+0x194>)
 80023c6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80023c8:	f240 2315 	movw	r3, #533	; 0x215
 80023cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80023ce:	463b      	mov	r3, r7
 80023d0:	4619      	mov	r1, r3
 80023d2:	4806      	ldr	r0, [pc, #24]	; (80023ec <MX_ADC1_Init+0x184>)
 80023d4:	f002 fac8 	bl	8004968 <HAL_ADCEx_InjectedConfigChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80023de:	f000 f9fd 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	3768      	adds	r7, #104	; 0x68
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200001a8 	.word	0x200001a8
 80023f0:	21800100 	.word	0x21800100
 80023f4:	04300002 	.word	0x04300002
 80023f8:	1d500080 	.word	0x1d500080
 80023fc:	19200040 	.word	0x19200040

08002400 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b098      	sub	sp, #96	; 0x60
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002406:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002412:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	615a      	str	r2, [r3, #20]
 8002424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2234      	movs	r2, #52	; 0x34
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f006 fa0d 	bl	800884c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002432:	4b51      	ldr	r3, [pc, #324]	; (8002578 <MX_TIM1_Init+0x178>)
 8002434:	4a51      	ldr	r2, [pc, #324]	; (800257c <MX_TIM1_Init+0x17c>)
 8002436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <MX_TIM1_Init+0x178>)
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800243e:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <MX_TIM1_Init+0x178>)
 8002440:	2220      	movs	r2, #32
 8002442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <MX_TIM1_Init+0x178>)
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <MX_TIM1_Init+0x178>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <MX_TIM1_Init+0x178>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b47      	ldr	r3, [pc, #284]	; (8002578 <MX_TIM1_Init+0x178>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800245e:	4846      	ldr	r0, [pc, #280]	; (8002578 <MX_TIM1_Init+0x178>)
 8002460:	f004 fbf2 	bl	8006c48 <HAL_TIM_PWM_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800246a:	f000 f9b7 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800246e:	2370      	movs	r3, #112	; 0x70
 8002470:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800247a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800247e:	4619      	mov	r1, r3
 8002480:	483d      	ldr	r0, [pc, #244]	; (8002578 <MX_TIM1_Init+0x178>)
 8002482:	f006 f815 	bl	80084b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800248c:	f000 f9a6 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002490:	2360      	movs	r3, #96	; 0x60
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002498:	2300      	movs	r3, #0
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800249c:	2300      	movs	r3, #0
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024b0:	2200      	movs	r2, #0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4830      	ldr	r0, [pc, #192]	; (8002578 <MX_TIM1_Init+0x178>)
 80024b6:	f005 f8c5 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024c0:	f000 f98c 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024c8:	2204      	movs	r2, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	482a      	ldr	r0, [pc, #168]	; (8002578 <MX_TIM1_Init+0x178>)
 80024ce:	f005 f8b9 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80024d8:	f000 f980 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80024dc:	2302      	movs	r3, #2
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80024e0:	2308      	movs	r3, #8
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024e8:	2208      	movs	r2, #8
 80024ea:	4619      	mov	r1, r3
 80024ec:	4822      	ldr	r0, [pc, #136]	; (8002578 <MX_TIM1_Init+0x178>)
 80024ee:	f005 f8a9 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80024f8:	f000 f970 	bl	80027dc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fc:	2300      	movs	r3, #0
 80024fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002500:	2300      	movs	r3, #0
 8002502:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002504:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002508:	220c      	movs	r2, #12
 800250a:	4619      	mov	r1, r3
 800250c:	481a      	ldr	r0, [pc, #104]	; (8002578 <MX_TIM1_Init+0x178>)
 800250e:	f005 f899 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8002518:	f000 f960 	bl	80027dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002534:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4619      	mov	r1, r3
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <MX_TIM1_Init+0x178>)
 800255a:	f006 f83f 	bl	80085dc <HAL_TIMEx_ConfigBreakDeadTime>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8002564:	f000 f93a 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <MX_TIM1_Init+0x178>)
 800256a:	f000 fa91 	bl	8002a90 <HAL_TIM_MspPostInit>

}
 800256e:	bf00      	nop
 8002570:	3760      	adds	r7, #96	; 0x60
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000214 	.word	0x20000214
 800257c:	40012c00 	.word	0x40012c00

08002580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <MX_TIM2_Init+0xcc>)
 80025a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <MX_TIM2_Init+0xcc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <MX_TIM2_Init+0xcc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.29496729E8;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <MX_TIM2_Init+0xcc>)
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <MX_TIM2_Init+0xd0>)
 80025b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <MX_TIM2_Init+0xcc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <MX_TIM2_Init+0xcc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80025c4:	4821      	ldr	r0, [pc, #132]	; (800264c <MX_TIM2_Init+0xcc>)
 80025c6:	f004 fca9 	bl	8006f1c <HAL_TIM_IC_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025d0:	f000 f904 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	481a      	ldr	r0, [pc, #104]	; (800264c <MX_TIM2_Init+0xcc>)
 80025e4:	f005 ff64 	bl	80084b0 <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025ee:	f000 f8f5 	bl	80027dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025f6:	2301      	movs	r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 80025fe:	230a      	movs	r3, #10
 8002600:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	4619      	mov	r1, r3
 8002608:	4810      	ldr	r0, [pc, #64]	; (800264c <MX_TIM2_Init+0xcc>)
 800260a:	f004 ff7e 	bl	800750a <HAL_TIM_IC_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002614:	f000 f8e2 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2204      	movs	r2, #4
 800261c:	4619      	mov	r1, r3
 800261e:	480b      	ldr	r0, [pc, #44]	; (800264c <MX_TIM2_Init+0xcc>)
 8002620:	f004 ff73 	bl	800750a <HAL_TIM_IC_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800262a:	f000 f8d7 	bl	80027dc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2208      	movs	r2, #8
 8002632:	4619      	mov	r1, r3
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_TIM2_Init+0xcc>)
 8002636:	f004 ff68 	bl	800750a <HAL_TIM_IC_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002640:	f000 f8cc 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000260 	.word	0x20000260
 8002650:	19999999 	.word	0x19999999

08002654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <MX_TIM3_Init+0xa0>)
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <MX_TIM3_Init+0xa4>)
 8002676:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <MX_TIM3_Init+0xa0>)
 800267a:	22aa      	movs	r2, #170	; 0xaa
 800267c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_TIM3_Init+0xa0>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <MX_TIM3_Init+0xa0>)
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <MX_TIM3_Init+0xa0>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_TIM3_Init+0xa0>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002698:	4816      	ldr	r0, [pc, #88]	; (80026f4 <MX_TIM3_Init+0xa0>)
 800269a:	f004 fc3f 	bl	8006f1c <HAL_TIM_IC_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026a4:	f000 f89a 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	480f      	ldr	r0, [pc, #60]	; (80026f4 <MX_TIM3_Init+0xa0>)
 80026b8:	f005 fefa 	bl	80084b0 <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80026c2:	f000 f88b 	bl	80027dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80026c6:	230a      	movs	r3, #10
 80026c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026ca:	2301      	movs	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 80026d2:	230a      	movs	r3, #10
 80026d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2204      	movs	r2, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_TIM3_Init+0xa0>)
 80026de:	f004 ff14 	bl	800750a <HAL_TIM_IC_ConfigChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026e8:	f000 f878 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200002ac 	.word	0x200002ac
 80026f8:	40000400 	.word	0x40000400

080026fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <MX_GPIO_Init+0xd4>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <MX_GPIO_Init+0xd4>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <MX_GPIO_Init+0xd4>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002778:	4816      	ldr	r0, [pc, #88]	; (80027d4 <MX_GPIO_Init+0xd8>)
 800277a:	f003 f9d3 	bl	8005b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002784:	4814      	ldr	r0, [pc, #80]	; (80027d8 <MX_GPIO_Init+0xdc>)
 8002786:	f003 f9cd 	bl	8005b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 800278a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	480c      	ldr	r0, [pc, #48]	; (80027d4 <MX_GPIO_Init+0xd8>)
 80027a4:	f003 f824 	bl	80057f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 80027a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_GPIO_Init+0xdc>)
 80027c2:	f003 f815 	bl	80057f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	48000400 	.word	0x48000400
 80027d8:	48000800 	.word	0x48000800

080027dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e0:	b672      	cpsid	i
}
 80027e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <Error_Handler+0x8>
	...

080027e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_MspInit+0x44>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_MspInit+0x44>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6613      	str	r3, [r2, #96]	; 0x60
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_MspInit+0x44>)
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_MspInit+0x44>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_MspInit+0x44>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6593      	str	r3, [r2, #88]	; 0x58
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_MspInit+0x44>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0a0      	sub	sp, #128	; 0x80
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	f107 0318 	add.w	r3, r7, #24
 800284c:	2254      	movs	r2, #84	; 0x54
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f005 fffb 	bl	800884c <memset>
  if(hadc->Instance==ADC1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285e:	d154      	bne.n	800290a <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002864:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002866:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800286a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	f107 0318 	add.w	r3, r7, #24
 8002870:	4618      	mov	r0, r3
 8002872:	f003 ff23 	bl	80066bc <HAL_RCCEx_PeriphCLKConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800287c:	f7ff ffae 	bl	80027dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 8002886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800288a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_ADC_MspInit+0xe4>)
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80028c8:	2307      	movs	r3, #7
 80028ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028cc:	2303      	movs	r3, #3
 80028ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d8:	4619      	mov	r1, r3
 80028da:	480f      	ldr	r0, [pc, #60]	; (8002918 <HAL_ADC_MspInit+0xe8>)
 80028dc:	f002 ff88 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028e0:	2301      	movs	r3, #1
 80028e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e4:	2303      	movs	r3, #3
 80028e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028f0:	4619      	mov	r1, r3
 80028f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f6:	f002 ff7b 	bl	80057f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2101      	movs	r1, #1
 80028fe:	2012      	movs	r0, #18
 8002900:	f002 ff41 	bl	8005786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002904:	2012      	movs	r0, #18
 8002906:	f002 ff58 	bl	80057ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3780      	adds	r7, #128	; 0x80
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	48000800 	.word	0x48000800

0800291c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_TIM_PWM_MspInit+0x38>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10b      	bne.n	8002946 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_TIM_PWM_MspInit+0x3c>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_TIM_PWM_MspInit+0x3c>)
 8002934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002938:	6613      	str	r3, [r2, #96]	; 0x60
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_TIM_PWM_MspInit+0x3c>)
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000

0800295c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d14f      	bne.n	8002a1e <HAL_TIM_IC_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800297e:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	4a3f      	ldr	r2, [pc, #252]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6593      	str	r3, [r2, #88]	; 0x58
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	4a39      	ldr	r2, [pc, #228]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a33      	ldr	r2, [pc, #204]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80029c6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4828      	ldr	r0, [pc, #160]	; (8002a84 <HAL_TIM_IC_MspInit+0x128>)
 80029e4:	f002 ff04 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 80029e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029fa:	2301      	movs	r3, #1
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a08:	f002 fef2 	bl	80057f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	201c      	movs	r0, #28
 8002a12:	f002 feb8 	bl	8005786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a16:	201c      	movs	r0, #28
 8002a18:	f002 fecf 	bl	80057ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a1c:	e02c      	b.n	8002a78 <HAL_TIM_IC_MspInit+0x11c>
  else if(htim_ic->Instance==TIM3)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_TIM_IC_MspInit+0x12c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d127      	bne.n	8002a78 <HAL_TIM_IC_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_TIM_IC_MspInit+0x124>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Propo_Pin;
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Propo_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <HAL_TIM_IC_MspInit+0x130>)
 8002a74:	f002 febc 	bl	80057f0 <HAL_GPIO_Init>
}
 8002a78:	bf00      	nop
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	48000400 	.word	0x48000400
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	48000800 	.word	0x48000800

08002a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a36      	ldr	r2, [pc, #216]	; (8002b88 <HAL_TIM_MspPostInit+0xf8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d166      	bne.n	8002b80 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	4a35      	ldr	r2, [pc, #212]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	4a2f      	ldr	r2, [pc, #188]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aee:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_TIM_MspPostInit+0xfc>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002afa:	2308      	movs	r3, #8
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	481e      	ldr	r0, [pc, #120]	; (8002b90 <HAL_TIM_MspPostInit+0x100>)
 8002b16:	f002 fe6b 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b1a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b2c:	2306      	movs	r3, #6
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3a:	f002 fe59 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b4e:	2306      	movs	r3, #6
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	480e      	ldr	r0, [pc, #56]	; (8002b94 <HAL_TIM_MspPostInit+0x104>)
 8002b5a:	f002 fe49 	bl	80057f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002b70:	230c      	movs	r3, #12
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4806      	ldr	r0, [pc, #24]	; (8002b94 <HAL_TIM_MspPostInit+0x104>)
 8002b7c:	f002 fe38 	bl	80057f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b80:	bf00      	nop
 8002b82:	3728      	adds	r7, #40	; 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	48000800 	.word	0x48000800
 8002b94:	48000400 	.word	0x48000400

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <NMI_Handler+0x4>

08002b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler+0x4>

08002ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <MemManage_Handler+0x4>

08002baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be4:	f000 f8b4 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}

08002bec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bf0:	4809      	ldr	r0, [pc, #36]	; (8002c18 <ADC1_2_IRQHandler+0x2c>)
 8002bf2:	f000 fcb3 	bl	800355c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bfa:	4808      	ldr	r0, [pc, #32]	; (8002c1c <ADC1_2_IRQHandler+0x30>)
 8002bfc:	f002 ffaa 	bl	8005b54 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence_Low_Freq();
 8002c00:	f7fd fc7c 	bl	80004fc <Sequence_Low_Freq>
	Sequence_High_Freq();
 8002c04:	f7fd fd30 	bl	8000668 <Sequence_High_Freq>


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c0c:	4803      	ldr	r0, [pc, #12]	; (8002c1c <ADC1_2_IRQHandler+0x30>)
 8002c0e:	f002 ffa1 	bl	8005b54 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200001a8 	.word	0x200001a8
 8002c1c:	48000400 	.word	0x48000400

08002c20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <TIM2_IRQHandler+0x10>)
 8002c26:	f004 fb21 	bl	800726c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000260 	.word	0x20000260

08002c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c5c:	f7ff ffea 	bl	8002c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c62:	490d      	ldr	r1, [pc, #52]	; (8002c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <LoopForever+0xe>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c68:	e002      	b.n	8002c70 <LoopCopyDataInit>

08002c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6e:	3304      	adds	r3, #4

08002c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c74:	d3f9      	bcc.n	8002c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <LoopForever+0x16>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c7c:	e001      	b.n	8002c82 <LoopFillZerobss>

08002c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c80:	3204      	adds	r2, #4

08002c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c84:	d3fb      	bcc.n	8002c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c86:	f005 fdaf 	bl	80087e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c8a:	f7ff fa15 	bl	80020b8 <main>

08002c8e <LoopForever>:

LoopForever:
    b LoopForever
 8002c8e:	e7fe      	b.n	8002c8e <LoopForever>
  ldr   r0, =_estack
 8002c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c9c:	08009c50 	.word	0x08009c50
  ldr r2, =_sbss
 8002ca0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ca4:	200002fc 	.word	0x200002fc

08002ca8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC3_IRQHandler>

08002caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f002 fd5b 	bl	8005770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cba:	200f      	movs	r0, #15
 8002cbc:	f000 f80e 	bl	8002cdc <HAL_InitTick>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	e001      	b.n	8002cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ccc:	f7ff fd8c 	bl	80027e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cd0:	79fb      	ldrb	r3, [r7, #7]

}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_InitTick+0x68>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d022      	beq.n	8002d36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_InitTick+0x6c>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_InitTick+0x68>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fd66 	bl	80057d6 <HAL_SYSTICK_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	d809      	bhi.n	8002d2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d16:	2200      	movs	r2, #0
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1e:	f002 fd32 	bl	8005786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_InitTick+0x70>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e007      	b.n	8002d3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e004      	b.n	8002d3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e001      	b.n	8002d3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000008 	.word	0x20000008
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_IncTick+0x1c>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_IncTick+0x20>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_IncTick+0x1c>)
 8002d60:	6013      	str	r3, [r2, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	200002f8 	.word	0x200002f8
 8002d70:	20000008 	.word	0x20000008

08002d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_GetTick+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	200002f8 	.word	0x200002f8

08002d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <LL_ADC_SetOffset+0x44>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	03fff000 	.word	0x03fff000

08002e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3360      	adds	r3, #96	; 0x60
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3360      	adds	r3, #96	; 0x60
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b087      	sub	sp, #28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3360      	adds	r3, #96	; 0x60
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	615a      	str	r2, [r3, #20]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3330      	adds	r3, #48	; 0x30
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	4413      	add	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	211f      	movs	r1, #31
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	401a      	ands	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	f003 011f 	and.w	r1, r3, #31
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	0e5b      	lsrs	r3, r3, #25
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	4413      	add	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0d1b      	lsrs	r3, r3, #20
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2107      	movs	r1, #7
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0d1b      	lsrs	r3, r3, #20
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	431a      	orrs	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0318 	and.w	r3, r3, #24
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003050:	40d9      	lsrs	r1, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	400b      	ands	r3, r1
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0007ffff 	.word	0x0007ffff

08003074 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 031f 	and.w	r3, r3, #31
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6093      	str	r3, [r2, #8]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e4:	d101      	bne.n	80030ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800310c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003134:	d101      	bne.n	800313a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <LL_ADC_IsEnabled+0x18>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <LL_ADC_IsEnabled+0x1a>
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d101      	bne.n	80031ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d101      	bne.n	80031d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1a9      	b.n	8003552 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fb0f 	bl	8002830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff53 	bl	80030d0 <LL_ADC_IsDeepPowerDownEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff39 	bl	80030ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff6e 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d115      	bne.n	8003276 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff52 	bl	80030f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003254:	4b9c      	ldr	r3, [pc, #624]	; (80034c8 <HAL_ADC_Init+0x2e4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	4a9c      	ldr	r2, [pc, #624]	; (80034cc <HAL_ADC_Init+0x2e8>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003268:	e002      	b.n	8003270 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f9      	bne.n	800326a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff50 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff75 	bl	8003196 <LL_ADC_REG_IsConversionOngoing>
 80032ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 8142 	bne.w	8003540 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 813e 	bne.w	8003540 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032cc:	f043 0202 	orr.w	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff49 	bl	8003170 <LL_ADC_IsEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d141      	bne.n	8003368 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ec:	d004      	beq.n	80032f8 <HAL_ADC_Init+0x114>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_ADC_Init+0x2ec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10f      	bne.n	8003318 <HAL_ADC_Init+0x134>
 80032f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032fc:	f7ff ff38 	bl	8003170 <LL_ADC_IsEnabled>
 8003300:	4604      	mov	r4, r0
 8003302:	4873      	ldr	r0, [pc, #460]	; (80034d0 <HAL_ADC_Init+0x2ec>)
 8003304:	f7ff ff34 	bl	8003170 <LL_ADC_IsEnabled>
 8003308:	4603      	mov	r3, r0
 800330a:	4323      	orrs	r3, r4
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e012      	b.n	800333e <HAL_ADC_Init+0x15a>
 8003318:	486e      	ldr	r0, [pc, #440]	; (80034d4 <HAL_ADC_Init+0x2f0>)
 800331a:	f7ff ff29 	bl	8003170 <LL_ADC_IsEnabled>
 800331e:	4604      	mov	r4, r0
 8003320:	486d      	ldr	r0, [pc, #436]	; (80034d8 <HAL_ADC_Init+0x2f4>)
 8003322:	f7ff ff25 	bl	8003170 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	431c      	orrs	r4, r3
 800332a:	486c      	ldr	r0, [pc, #432]	; (80034dc <HAL_ADC_Init+0x2f8>)
 800332c:	f7ff ff20 	bl	8003170 <LL_ADC_IsEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	4323      	orrs	r3, r4
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800334a:	d004      	beq.n	8003356 <HAL_ADC_Init+0x172>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5f      	ldr	r2, [pc, #380]	; (80034d0 <HAL_ADC_Init+0x2ec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_ADC_Init+0x176>
 8003356:	4a62      	ldr	r2, [pc, #392]	; (80034e0 <HAL_ADC_Init+0x2fc>)
 8003358:	e000      	b.n	800335c <HAL_ADC_Init+0x178>
 800335a:	4a62      	ldr	r2, [pc, #392]	; (80034e4 <HAL_ADC_Init+0x300>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7ff fd12 	bl	8002d8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7f5b      	ldrb	r3, [r3, #29]
 800336c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003372:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003378:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800337e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003386:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003392:	2b01      	cmp	r3, #1
 8003394:	d106      	bne.n	80033a4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	045b      	lsls	r3, r3, #17
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_ADC_Init+0x304>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	69b9      	ldr	r1, [r7, #24]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fee4 	bl	80031bc <LL_ADC_INJ_IsConversionOngoing>
 80033f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d17f      	bne.n	80034fc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d17c      	bne.n	80034fc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003406:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341e:	f023 0302 	bic.w	r3, r3, #2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	430b      	orrs	r3, r1
 800342a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003442:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800344c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6911      	ldr	r1, [r2, #16]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003462:	e013      	b.n	800348c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003472:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003488:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	2b01      	cmp	r3, #1
 8003494:	d12a      	bne.n	80034ec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034b8:	430a      	orrs	r2, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0201 	orr.w	r2, r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e019      	b.n	80034fc <HAL_ADC_Init+0x318>
 80034c8:	20000000 	.word	0x20000000
 80034cc:	053e2d63 	.word	0x053e2d63
 80034d0:	50000100 	.word	0x50000100
 80034d4:	50000400 	.word	0x50000400
 80034d8:	50000500 	.word	0x50000500
 80034dc:	50000600 	.word	0x50000600
 80034e0:	50000300 	.word	0x50000300
 80034e4:	50000700 	.word	0x50000700
 80034e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10c      	bne.n	800351e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f023 010f 	bic.w	r1, r3, #15
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
 800351c:	e007      	b.n	800352e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 020f 	bic.w	r2, r2, #15
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	65da      	str	r2, [r3, #92]	; 0x5c
 800353e:	e007      	b.n	8003550 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003550:	7ffb      	ldrb	r3, [r7, #31]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop

0800355c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d004      	beq.n	800358c <HAL_ADC_IRQHandler+0x30>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a8e      	ldr	r2, [pc, #568]	; (80037c0 <HAL_ADC_IRQHandler+0x264>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_ADC_IRQHandler+0x34>
 800358c:	4b8d      	ldr	r3, [pc, #564]	; (80037c4 <HAL_ADC_IRQHandler+0x268>)
 800358e:	e000      	b.n	8003592 <HAL_ADC_IRQHandler+0x36>
 8003590:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <HAL_ADC_IRQHandler+0x26c>)
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fd6e 	bl	8003074 <LL_ADC_GetMultimode>
 8003598:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x78>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d012      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f001 f9c4 	bl	8004954 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2202      	movs	r2, #2
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x8c>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8094 	beq.w	800371c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808e 	beq.w	800371c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fc87 	bl	8002f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d072      	beq.n	800370e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a64      	ldr	r2, [pc, #400]	; (80037c0 <HAL_ADC_IRQHandler+0x264>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_ADC_IRQHandler+0xea>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_ADC_IRQHandler+0x270>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d002      	beq.n	8003642 <HAL_ADC_IRQHandler+0xe6>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e003      	b.n	800364a <HAL_ADC_IRQHandler+0xee>
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_ADC_IRQHandler+0x274>)
 8003644:	e001      	b.n	800364a <HAL_ADC_IRQHandler+0xee>
 8003646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4293      	cmp	r3, r2
 8003650:	d008      	beq.n	8003664 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d002      	beq.n	8003664 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d104      	bne.n	800366e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	e014      	b.n	8003698 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_ADC_IRQHandler+0x264>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_ADC_IRQHandler+0x130>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a53      	ldr	r2, [pc, #332]	; (80037cc <HAL_ADC_IRQHandler+0x270>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d002      	beq.n	8003688 <HAL_ADC_IRQHandler+0x12c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e003      	b.n	8003690 <HAL_ADC_IRQHandler+0x134>
 8003688:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_ADC_IRQHandler+0x274>)
 800368a:	e001      	b.n	8003690 <HAL_ADC_IRQHandler+0x134>
 800368c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003690:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d135      	bne.n	800370e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d12e      	bne.n	800370e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fd6e 	bl	8003196 <LL_ADC_REG_IsConversionOngoing>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11a      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 020c 	bic.w	r2, r2, #12
 80036ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d112      	bne.n	800370e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036f4:	e00b      	b.n	800370e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f984 	bl	8003a1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	220c      	movs	r2, #12
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_ADC_IRQHandler+0x1d4>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80b3 	beq.w	80038a2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80ad 	beq.w	80038a2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fc22 	bl	8002fae <LL_ADC_INJ_IsTriggerSourceSWStart>
 800376a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fbdd 	bl	8002f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003776:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_ADC_IRQHandler+0x264>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_ADC_IRQHandler+0x23a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_ADC_IRQHandler+0x270>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d002      	beq.n	8003792 <HAL_ADC_IRQHandler+0x236>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	e003      	b.n	800379a <HAL_ADC_IRQHandler+0x23e>
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_ADC_IRQHandler+0x274>)
 8003794:	e001      	b.n	800379a <HAL_ADC_IRQHandler+0x23e>
 8003796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4293      	cmp	r3, r2
 80037a0:	d008      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d002      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d10f      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	e01f      	b.n	80037fe <HAL_ADC_IRQHandler+0x2a2>
 80037be:	bf00      	nop
 80037c0:	50000100 	.word	0x50000100
 80037c4:	50000300 	.word	0x50000300
 80037c8:	50000700 	.word	0x50000700
 80037cc:	50000500 	.word	0x50000500
 80037d0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a8b      	ldr	r2, [pc, #556]	; (8003a08 <HAL_ADC_IRQHandler+0x4ac>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x296>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a8a      	ldr	r2, [pc, #552]	; (8003a0c <HAL_ADC_IRQHandler+0x4b0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d002      	beq.n	80037ee <HAL_ADC_IRQHandler+0x292>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	e003      	b.n	80037f6 <HAL_ADC_IRQHandler+0x29a>
 80037ee:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_ADC_IRQHandler+0x4b4>)
 80037f0:	e001      	b.n	80037f6 <HAL_ADC_IRQHandler+0x29a>
 80037f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d047      	beq.n	8003894 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_ADC_IRQHandler+0x2c2>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d03f      	beq.n	8003894 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800381a:	2b00      	cmp	r3, #0
 800381c:	d13a      	bne.n	8003894 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d133      	bne.n	8003894 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12e      	bne.n	8003894 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fcbe 	bl	80031bc <LL_ADC_INJ_IsConversionOngoing>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11a      	bne.n	800387c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003854:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d112      	bne.n	8003894 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	65da      	str	r2, [r3, #92]	; 0x5c
 800387a:	e00b      	b.n	8003894 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	f043 0210 	orr.w	r2, r3, #16
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 f835 	bl	8004904 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2260      	movs	r2, #96	; 0x60
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d011      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x374>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8b4 	bl	8003a30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d012      	beq.n	8003900 <HAL_ADC_IRQHandler+0x3a4>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 f81b 	bl	800492c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <HAL_ADC_IRQHandler+0x3d4>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f001 f80d 	bl	8004940 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d043      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x466>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d03e      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800394c:	2301      	movs	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e021      	b.n	8003996 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003960:	d004      	beq.n	800396c <HAL_ADC_IRQHandler+0x410>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <HAL_ADC_IRQHandler+0x4ac>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_ADC_IRQHandler+0x414>
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_ADC_IRQHandler+0x4b8>)
 800396e:	e000      	b.n	8003972 <HAL_ADC_IRQHandler+0x416>
 8003970:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_ADC_IRQHandler+0x4bc>)
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fb8c 	bl	8003090 <LL_ADC_GetMultiDMATransfer>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800397e:	2301      	movs	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	e008      	b.n	8003996 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003992:	2301      	movs	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b01      	cmp	r3, #1
 800399a:	d10e      	bne.n	80039ba <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ac:	f043 0202 	orr.w	r2, r3, #2
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f845 	bl	8003a44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2210      	movs	r2, #16
 80039c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d018      	beq.n	80039fe <HAL_ADC_IRQHandler+0x4a2>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d013      	beq.n	80039fe <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e6:	f043 0208 	orr.w	r2, r3, #8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 ff8d 	bl	8004918 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	50000100 	.word	0x50000100
 8003a0c:	50000500 	.word	0x50000500
 8003a10:	50000400 	.word	0x50000400
 8003a14:	50000300 	.word	0x50000300
 8003a18:	50000700 	.word	0x50000700

08003a1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b0b6      	sub	sp, #216	; 0xd8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d102      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x24>
 8003a76:	2302      	movs	r3, #2
 8003a78:	f000 bc13 	b.w	80042a2 <HAL_ADC_ConfigChannel+0x84a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fb84 	bl	8003196 <LL_ADC_REG_IsConversionOngoing>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 83f3 	bne.w	800427c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7ff fa57 	bl	8002f56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fb72 	bl	8003196 <LL_ADC_REG_IsConversionOngoing>
 8003ab2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fb7e 	bl	80031bc <LL_ADC_INJ_IsConversionOngoing>
 8003ac0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 81d9 	bne.w	8003e80 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 81d4 	bne.w	8003e80 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae0:	d10f      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	4619      	mov	r1, r3
 8003aee:	f7ff fa71 	bl	8002fd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fa05 	bl	8002f0a <LL_ADC_SetSamplingTimeCommonConfig>
 8003b00:	e00e      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7ff fa60 	bl	8002fd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f9f5 	bl	8002f0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	08db      	lsrs	r3, r3, #3
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d022      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b52:	f7ff f94f 	bl	8002df4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6919      	ldr	r1, [r3, #16]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7ff f99b 	bl	8002e9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x126>
 8003b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7c:	e000      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x128>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	461a      	mov	r2, r3
 8003b82:	f7ff f9a7 	bl	8002ed4 <LL_ADC_SetOffsetSaturation>
 8003b86:	e17b      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f954 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x15c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff f949 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003baa:	4603      	mov	r3, r0
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	f003 021f 	and.w	r2, r3, #31
 8003bb2:	e01e      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x19a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f93e 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003be2:	2320      	movs	r3, #32
 8003be4:	e004      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x1b2>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	0e9b      	lsrs	r3, r3, #26
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	e018      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x1e4>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003c2e:	2320      	movs	r3, #32
 8003c30:	e004      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d106      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff f90d 	bl	8002e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f8f1 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x222>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff f8e6 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	0e9b      	lsrs	r3, r3, #26
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	e01e      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x260>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff f8db 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	e004      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x278>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	e018      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x2aa>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	e004      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d106      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff f8aa 	bl	8002e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f88e 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x2e8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff f883 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003d36:	4603      	mov	r3, r0
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	e01e      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x326>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f878 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	e004      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x33e>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	e016      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x36c>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003db6:	2320      	movs	r3, #32
 8003db8:	e004      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d106      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff f849 	bl	8002e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2103      	movs	r1, #3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff f82d 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x3aa>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2103      	movs	r1, #3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f822 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	0e9b      	lsrs	r3, r3, #26
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	e017      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x3da>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2103      	movs	r1, #3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff f817 	bl	8002e3c <LL_ADC_GetOffsetChannel>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e003      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x3f2>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	e011      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x416>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e62:	2320      	movs	r3, #32
 8003e64:	e003      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d106      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2103      	movs	r1, #3
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fff4 	bl	8002e68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff f973 	bl	8003170 <LL_ADC_IsEnabled>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 813d 	bne.w	800410c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f7ff f8c4 	bl	800302c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4aa2      	ldr	r2, [pc, #648]	; (8004134 <HAL_ADC_ConfigChannel+0x6dc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	f040 812e 	bne.w	800410c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x480>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	bf94      	ite	ls
 8003ed0:	2301      	movls	r3, #1
 8003ed2:	2300      	movhi	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e019      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x4b4>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e003      	b.n	8003efc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2b09      	cmp	r3, #9
 8003f04:	bf94      	ite	ls
 8003f06:	2301      	movls	r3, #1
 8003f08:	2300      	movhi	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d079      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x4d4>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	3301      	adds	r3, #1
 8003f24:	069b      	lsls	r3, r3, #26
 8003f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f2a:	e015      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x500>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f44:	2320      	movs	r3, #32
 8003f46:	e003      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	069b      	lsls	r3, r3, #26
 8003f54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x520>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	e017      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x550>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f90:	2320      	movs	r3, #32
 8003f92:	e003      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	ea42 0103 	orr.w	r1, r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x576>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f003 021f 	and.w	r2, r3, #31
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	051b      	lsls	r3, r3, #20
 8003fcc:	e018      	b.n	8004000 <HAL_ADC_ConfigChannel+0x5a8>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	e003      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f003 021f 	and.w	r2, r3, #31
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004000:	430b      	orrs	r3, r1
 8004002:	e07e      	b.n	8004102 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x5c8>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0e9b      	lsrs	r3, r3, #26
 8004016:	3301      	adds	r3, #1
 8004018:	069b      	lsls	r3, r3, #26
 800401a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401e:	e015      	b.n	800404c <HAL_ADC_ConfigChannel+0x5f4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004038:	2320      	movs	r3, #32
 800403a:	e003      	b.n	8004044 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	3301      	adds	r3, #1
 8004046:	069b      	lsls	r3, r3, #26
 8004048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_ADC_ConfigChannel+0x614>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	3301      	adds	r3, #1
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	e017      	b.n	800409c <HAL_ADC_ConfigChannel+0x644>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	61fb      	str	r3, [r7, #28]
  return result;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	ea42 0103 	orr.w	r1, r2, r3
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x670>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	3301      	adds	r3, #1
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4613      	mov	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	3b1e      	subs	r3, #30
 80040c0:	051b      	lsls	r3, r3, #20
 80040c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c6:	e01b      	b.n	8004100 <HAL_ADC_ConfigChannel+0x6a8>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	613b      	str	r3, [r7, #16]
  return result;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80040e0:	2320      	movs	r3, #32
 80040e2:	e003      	b.n	80040ec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3301      	adds	r3, #1
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	3b1e      	subs	r3, #30
 80040fa:	051b      	lsls	r3, r3, #20
 80040fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004100:	430b      	orrs	r3, r1
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	4619      	mov	r1, r3
 8004108:	f7fe ff64 	bl	8002fd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_ADC_ConfigChannel+0x6e0>)
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80be 	beq.w	8004296 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004122:	d004      	beq.n	800412e <HAL_ADC_ConfigChannel+0x6d6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_ADC_ConfigChannel+0x6e4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10a      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x6ec>
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_ADC_ConfigChannel+0x6e8>)
 8004130:	e009      	b.n	8004146 <HAL_ADC_ConfigChannel+0x6ee>
 8004132:	bf00      	nop
 8004134:	407f0000 	.word	0x407f0000
 8004138:	80080000 	.word	0x80080000
 800413c:	50000100 	.word	0x50000100
 8004140:	50000300 	.word	0x50000300
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_ADC_ConfigChannel+0x854>)
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fe46 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 800414c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <HAL_ADC_ConfigChannel+0x858>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x70c>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a55      	ldr	r2, [pc, #340]	; (80042b4 <HAL_ADC_ConfigChannel+0x85c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d13a      	bne.n	80041da <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d134      	bne.n	80041da <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004178:	d005      	beq.n	8004186 <HAL_ADC_ConfigChannel+0x72e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a4e      	ldr	r2, [pc, #312]	; (80042b8 <HAL_ADC_ConfigChannel+0x860>)
 8004180:	4293      	cmp	r3, r2
 8004182:	f040 8085 	bne.w	8004290 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418e:	d004      	beq.n	800419a <HAL_ADC_ConfigChannel+0x742>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a49      	ldr	r2, [pc, #292]	; (80042bc <HAL_ADC_ConfigChannel+0x864>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_ADC_ConfigChannel+0x746>
 800419a:	4a49      	ldr	r2, [pc, #292]	; (80042c0 <HAL_ADC_ConfigChannel+0x868>)
 800419c:	e000      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x748>
 800419e:	4a43      	ldr	r2, [pc, #268]	; (80042ac <HAL_ADC_ConfigChannel+0x854>)
 80041a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f7fe fe01 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041b0:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_ADC_ConfigChannel+0x86c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	4a44      	ldr	r2, [pc, #272]	; (80042c8 <HAL_ADC_ConfigChannel+0x870>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041ca:	e002      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f9      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041d8:	e05a      	b.n	8004290 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3b      	ldr	r2, [pc, #236]	; (80042cc <HAL_ADC_ConfigChannel+0x874>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d125      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11f      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a31      	ldr	r2, [pc, #196]	; (80042bc <HAL_ADC_ConfigChannel+0x864>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d104      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x7ac>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <HAL_ADC_ConfigChannel+0x878>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d047      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420c:	d004      	beq.n	8004218 <HAL_ADC_ConfigChannel+0x7c0>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2a      	ldr	r2, [pc, #168]	; (80042bc <HAL_ADC_ConfigChannel+0x864>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x7c4>
 8004218:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <HAL_ADC_ConfigChannel+0x868>)
 800421a:	e000      	b.n	800421e <HAL_ADC_ConfigChannel+0x7c6>
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <HAL_ADC_ConfigChannel+0x854>)
 800421e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fe fdc2 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800422e:	e031      	b.n	8004294 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <HAL_ADC_ConfigChannel+0x87c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d12d      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800423a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d127      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <HAL_ADC_ConfigChannel+0x864>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004258:	d004      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x80c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <HAL_ADC_ConfigChannel+0x864>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x810>
 8004264:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_ADC_ConfigChannel+0x868>)
 8004266:	e000      	b.n	800426a <HAL_ADC_ConfigChannel+0x812>
 8004268:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_ADC_ConfigChannel+0x854>)
 800426a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800426e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe fd9c 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 800427a:	e00c      	b.n	8004296 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800428e:	e002      	b.n	8004296 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004294:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800429e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	37d8      	adds	r7, #216	; 0xd8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	50000700 	.word	0x50000700
 80042b0:	c3210000 	.word	0xc3210000
 80042b4:	90c00010 	.word	0x90c00010
 80042b8:	50000600 	.word	0x50000600
 80042bc:	50000100 	.word	0x50000100
 80042c0:	50000300 	.word	0x50000300
 80042c4:	20000000 	.word	0x20000000
 80042c8:	053e2d63 	.word	0x053e2d63
 80042cc:	c7520000 	.word	0xc7520000
 80042d0:	50000500 	.word	0x50000500
 80042d4:	cb840000 	.word	0xcb840000

080042d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe ff41 	bl	8003170 <LL_ADC_IsEnabled>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d176      	bne.n	80043e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <ADC_Enable+0x114>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e062      	b.n	80043e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe ff10 	bl	8003148 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004330:	d004      	beq.n	800433c <ADC_Enable+0x64>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2e      	ldr	r2, [pc, #184]	; (80043f0 <ADC_Enable+0x118>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <ADC_Enable+0x68>
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <ADC_Enable+0x11c>)
 800433e:	e000      	b.n	8004342 <ADC_Enable+0x6a>
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <ADC_Enable+0x120>)
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fd48 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 8004348:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800434a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800434e:	2b00      	cmp	r3, #0
 8004350:	d013      	beq.n	800437a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <ADC_Enable+0x124>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	4a29      	ldr	r2, [pc, #164]	; (8004400 <ADC_Enable+0x128>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800436c:	e002      	b.n	8004374 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3b01      	subs	r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f9      	bne.n	800436e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800437a:	f7fe fcfb 	bl	8002d74 <HAL_GetTick>
 800437e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004380:	e028      	b.n	80043d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fef2 	bl	8003170 <LL_ADC_IsEnabled>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fed6 	bl	8003148 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800439c:	f7fe fcea 	bl	8002d74 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d914      	bls.n	80043d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d00d      	beq.n	80043d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	f043 0210 	orr.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e007      	b.n	80043e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d1cf      	bne.n	8004382 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	8000003f 	.word	0x8000003f
 80043f0:	50000100 	.word	0x50000100
 80043f4:	50000300 	.word	0x50000300
 80043f8:	50000700 	.word	0x50000700
 80043fc:	20000000 	.word	0x20000000
 8004400:	053e2d63 	.word	0x053e2d63

08004404 <LL_ADC_SetCommonPathInternalCh>:
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_GetCommonPathInternalCh>:
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <LL_ADC_SetOffset>:
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3360      	adds	r3, #96	; 0x60
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <LL_ADC_SetOffset+0x44>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	03fff000 	.word	0x03fff000

08004490 <LL_ADC_GetOffsetChannel>:
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3360      	adds	r3, #96	; 0x60
 800449e:	461a      	mov	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_ADC_SetOffsetState>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3360      	adds	r3, #96	; 0x60
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	601a      	str	r2, [r3, #0]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_ADC_SetOffsetSign>:
{
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3360      	adds	r3, #96	; 0x60
 8004502:	461a      	mov	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_SetOffsetSaturation>:
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3360      	adds	r3, #96	; 0x60
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	431a      	orrs	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	601a      	str	r2, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	615a      	str	r2, [r3, #20]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_INJ_GetTrigAuto>:
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_ADC_SetChannelSamplingTime>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3314      	adds	r3, #20
 80045b0:	461a      	mov	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	0e5b      	lsrs	r3, r3, #25
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	4413      	add	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	0d1b      	lsrs	r3, r3, #20
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	2107      	movs	r1, #7
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	401a      	ands	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0d1b      	lsrs	r3, r3, #20
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <LL_ADC_SetChannelSingleDiff>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0318 	and.w	r3, r3, #24
 800461a:	4908      	ldr	r1, [pc, #32]	; (800463c <LL_ADC_SetChannelSingleDiff+0x44>)
 800461c:	40d9      	lsrs	r1, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	400b      	ands	r3, r1
 8004622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	0007ffff 	.word	0x0007ffff

08004640 <LL_ADC_GetMultimode>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 031f 	and.w	r3, r3, #31
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_IsEnabled>:
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <LL_ADC_IsEnabled+0x18>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <LL_ADC_IsEnabled+0x1a>
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <LL_ADC_REG_IsConversionOngoing>:
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d101      	bne.n	800469a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_ADC_INJ_StartConversion>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046bc:	f043 0208 	orr.w	r2, r3, #8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_ADC_INJ_IsConversionOngoing>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d101      	bne.n	80046e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004708:	d004      	beq.n	8004714 <HAL_ADCEx_InjectedStart_IT+0x1c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a78      	ldr	r2, [pc, #480]	; (80048f0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004714:	4b77      	ldr	r3, [pc, #476]	; (80048f4 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004716:	e000      	b.n	800471a <HAL_ADCEx_InjectedStart_IT+0x22>
 8004718:	4b77      	ldr	r3, [pc, #476]	; (80048f8 <HAL_ADCEx_InjectedStart_IT+0x200>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff90 	bl	8004640 <LL_ADC_GetMultimode>
 8004720:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ffd2 	bl	80046d0 <LL_ADC_INJ_IsConversionOngoing>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
 8004734:	e0d8      	b.n	80048e8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004740:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0c0      	b.n	80048e8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004770:	2302      	movs	r3, #2
 8004772:	e0b9      	b.n	80048e8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fdab 	bl	80042d8 <ADC_Enable>
 8004782:	4603      	mov	r3, r0
 8004784:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 80a8 	bne.w	80048de <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479e:	f023 0208 	bic.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
 80047a6:	e002      	b.n	80047ae <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4a      	ldr	r2, [pc, #296]	; (80048f0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_ADCEx_InjectedStart_IT+0xe8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4a      	ldr	r2, [pc, #296]	; (80048fc <HAL_ADCEx_InjectedStart_IT+0x204>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d002      	beq.n	80047dc <HAL_ADCEx_InjectedStart_IT+0xe4>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	e003      	b.n	80047e4 <HAL_ADCEx_InjectedStart_IT+0xec>
 80047dc:	4b48      	ldr	r3, [pc, #288]	; (8004900 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80047de:	e001      	b.n	80047e4 <HAL_ADCEx_InjectedStart_IT+0xec>
 80047e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d002      	beq.n	80047f2 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2260      	movs	r2, #96	; 0x60
 8004804:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d110      	bne.n	8004856 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0220 	bic.w	r2, r2, #32
 8004842:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004852:	605a      	str	r2, [r3, #4]
          break;
 8004854:	e010      	b.n	8004878 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004864:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	605a      	str	r2, [r3, #4]
          break;
 8004876:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d002      	beq.n	8004892 <HAL_ADCEx_InjectedStart_IT+0x19a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	e003      	b.n	800489a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004894:	e001      	b.n	800489a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004896:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	4293      	cmp	r3, r2
 80048a0:	d008      	beq.n	80048b4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d002      	beq.n	80048b4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b07      	cmp	r3, #7
 80048b2:	d10d      	bne.n	80048d0 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fe63 	bl	8004584 <LL_ADC_INJ_GetTrigAuto>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d110      	bne.n	80048e6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff feed 	bl	80046a8 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80048ce:	e00a      	b.n	80048e6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	65da      	str	r2, [r3, #92]	; 0x5c
 80048dc:	e003      	b.n	80048e6 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	50000100 	.word	0x50000100
 80048f4:	50000300 	.word	0x50000300
 80048f8:	50000700 	.word	0x50000700
 80048fc:	50000500 	.word	0x50000500
 8004900:	50000400 	.word	0x50000400

08004904 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b0b6      	sub	sp, #216	; 0xd8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800498c:	2302      	movs	r3, #2
 800498e:	f000 bcfd 	b.w	800538c <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d130      	bne.n	8004a0c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b09      	cmp	r3, #9
 80049b0:	d179      	bne.n	8004aa6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	0e9b      	lsrs	r3, r3, #26
 80049c0:	025b      	lsls	r3, r3, #9
 80049c2:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80049ce:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049da:	e007      	b.n	80049ec <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	0e9b      	lsrs	r3, r3, #26
 80049e2:	025b      	lsls	r3, r3, #9
 80049e4:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80049e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f2:	4b84      	ldr	r3, [pc, #528]	; (8004c04 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80049fe:	430b      	orrs	r3, r1
 8004a00:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004a0a:	e04c      	b.n	8004aa6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11d      	bne.n	8004a50 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004a38:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a44:	e004      	b.n	8004a50 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	f003 021f 	and.w	r2, r3, #31
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a74:	1e5a      	subs	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a96:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fe10 	bl	80046d0 <LL_ADC_INJ_IsConversionOngoing>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d124      	bne.n	8004b00 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d112      	bne.n	8004ae6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ad0:	055a      	lsls	r2, r3, #21
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ad8:	051b      	lsls	r3, r3, #20
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	e00c      	b.n	8004b00 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004af6:	055a      	lsls	r2, r3, #21
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fdbc 	bl	8004682 <LL_ADC_REG_IsConversionOngoing>
 8004b0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fddc 	bl	80046d0 <LL_ADC_INJ_IsConversionOngoing>
 8004b18:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f040 822e 	bne.w	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8229 	bne.w	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d116      	bne.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d108      	bne.n	8004b5c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004b58:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b5a:	e01f      	b.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004b6a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b6c:	e016      	b.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d109      	bne.n	8004b8c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004b8a:	e007      	b.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004b9a:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d110      	bne.n	8004bc8 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0202 	orr.w	r2, r2, #2
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	e007      	b.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0202 	bic.w	r2, r2, #2
 8004bd6:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be0:	d112      	bne.n	8004c08 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7ff fcd7 	bl	80045a0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fcaf 	bl	800455e <LL_ADC_SetSamplingTimeCommonConfig>
 8004c00:	e011      	b.n	8004c26 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004c02:	bf00      	nop
 8004c04:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	461a      	mov	r2, r3
 8004c16:	f7ff fcc3 	bl	80045a0 <LL_ADC_SetChannelSamplingTime>
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fc9c 	bl	800455e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d022      	beq.n	8004c8e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6919      	ldr	r1, [r3, #16]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c58:	f7ff fbf6 	bl	8004448 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6919      	ldr	r1, [r3, #16]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f7ff fc42 	bl	80044f2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c82:	e000      	b.n	8004c86 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004c84:	2300      	movs	r3, #0
 8004c86:	461a      	mov	r2, r3
 8004c88:	f7ff fc4e 	bl	8004528 <LL_ADC_SetOffsetSaturation>
 8004c8c:	e179      	b.n	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fbfb 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fbf0 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	0e9b      	lsrs	r3, r3, #26
 8004cb4:	f003 021f 	and.w	r2, r3, #31
 8004cb8:	e01e      	b.n	8004cf8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fbe5 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004ce8:	2320      	movs	r3, #32
 8004cea:	e004      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004cf0:	fab3 f383 	clz	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	0e9b      	lsrs	r3, r3, #26
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	e018      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004d34:	2320      	movs	r3, #32
 8004d36:	e004      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d106      	bne.n	8004d54 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fbb4 	bl	80044bc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fb98 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fb8d 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004d76:	4603      	mov	r3, r0
 8004d78:	0e9b      	lsrs	r3, r3, #26
 8004d7a:	f003 021f 	and.w	r2, r3, #31
 8004d7e:	e01e      	b.n	8004dbe <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fb82 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004dae:	2320      	movs	r3, #32
 8004db0:	e004      	b.n	8004dbc <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	0e9b      	lsrs	r3, r3, #26
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	e018      	b.n	8004e08 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	e004      	b.n	8004e08 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d106      	bne.n	8004e1a <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fb51 	bl	80044bc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fb35 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2102      	movs	r1, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fb2a 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	e01e      	b.n	8004e84 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fb1f 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e004      	b.n	8004e82 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	e014      	b.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004eb8:	2320      	movs	r3, #32
 8004eba:	e004      	b.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d106      	bne.n	8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff faf2 	bl	80044bc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2103      	movs	r1, #3
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fad6 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2103      	movs	r1, #3
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff facb 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004efa:	4603      	mov	r3, r0
 8004efc:	0e9b      	lsrs	r3, r3, #26
 8004efe:	f003 021f 	and.w	r2, r3, #31
 8004f02:	e017      	b.n	8004f34 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2103      	movs	r1, #3
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fac0 	bl	8004490 <LL_ADC_GetOffsetChannel>
 8004f10:	4603      	mov	r3, r0
 8004f12:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f16:	fa93 f3a3 	rbit	r3, r3
 8004f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004f26:	2320      	movs	r3, #32
 8004f28:	e003      	b.n	8004f32 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	0e9b      	lsrs	r3, r3, #26
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	e011      	b.n	8004f70 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004f64:	2320      	movs	r3, #32
 8004f66:	e003      	b.n	8004f70 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d106      	bne.n	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2103      	movs	r1, #3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fa9d 	bl	80044bc <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fb68 	bl	800465c <LL_ADC_IsEnabled>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 813d 	bne.w	800520e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f7ff fb29 	bl	80045f8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	4aa2      	ldr	r2, [pc, #648]	; (8005234 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	f040 812e 	bne.w	800520e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	0e9b      	lsrs	r3, r3, #26
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	bf94      	ite	ls
 8004fd2:	2301      	movls	r3, #1
 8004fd4:	2300      	movhi	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e019      	b.n	800500e <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	e003      	b.n	8004ffe <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff8:	fab3 f383 	clz	r3, r3
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	3301      	adds	r3, #1
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	2b09      	cmp	r3, #9
 8005006:	bf94      	ite	ls
 8005008:	2301      	movls	r3, #1
 800500a:	2300      	movhi	r3, #0
 800500c:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800500e:	2b00      	cmp	r3, #0
 8005010:	d079      	beq.n	8005106 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501a:	2b00      	cmp	r3, #0
 800501c:	d107      	bne.n	800502e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	0e9b      	lsrs	r3, r3, #26
 8005024:	3301      	adds	r3, #1
 8005026:	069b      	lsls	r3, r3, #26
 8005028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800502c:	e015      	b.n	800505a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800503c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005046:	2320      	movs	r3, #32
 8005048:	e003      	b.n	8005052 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504c:	fab3 f383 	clz	r3, r3
 8005050:	b2db      	uxtb	r3, r3
 8005052:	3301      	adds	r3, #1
 8005054:	069b      	lsls	r3, r3, #26
 8005056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	0e9b      	lsrs	r3, r3, #26
 800506c:	3301      	adds	r3, #1
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	e017      	b.n	80050aa <HAL_ADCEx_InjectedConfigChannel+0x742>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005082:	fa93 f3a3 	rbit	r3, r3
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005092:	2320      	movs	r3, #32
 8005094:	e003      	b.n	800509e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005098:	fab3 f383 	clz	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	3301      	adds	r3, #1
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2101      	movs	r1, #1
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	ea42 0103 	orr.w	r1, r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	0e9b      	lsrs	r3, r3, #26
 80050c0:	3301      	adds	r3, #1
 80050c2:	f003 021f 	and.w	r2, r3, #31
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	051b      	lsls	r3, r3, #20
 80050ce:	e018      	b.n	8005102 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f003 021f 	and.w	r2, r3, #31
 80050fa:	4613      	mov	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	4413      	add	r3, r2
 8005100:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005102:	430b      	orrs	r3, r1
 8005104:	e07e      	b.n	8005204 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0e9b      	lsrs	r3, r3, #26
 8005118:	3301      	adds	r3, #1
 800511a:	069b      	lsls	r3, r3, #26
 800511c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005120:	e015      	b.n	800514e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	fa93 f3a3 	rbit	r3, r3
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800513a:	2320      	movs	r3, #32
 800513c:	e003      	b.n	8005146 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	fab3 f383 	clz	r3, r3
 8005144:	b2db      	uxtb	r3, r3
 8005146:	3301      	adds	r3, #1
 8005148:	069b      	lsls	r3, r3, #26
 800514a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_ADCEx_InjectedConfigChannel+0x806>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	0e9b      	lsrs	r3, r3, #26
 8005160:	3301      	adds	r3, #1
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	e017      	b.n	800519e <HAL_ADCEx_InjectedConfigChannel+0x836>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	fa93 f3a3 	rbit	r3, r3
 800517a:	61bb      	str	r3, [r7, #24]
  return result;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8005186:	2320      	movs	r3, #32
 8005188:	e003      	b.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	b2db      	uxtb	r3, r3
 8005192:	3301      	adds	r3, #1
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	ea42 0103 	orr.w	r1, r2, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <HAL_ADCEx_InjectedConfigChannel+0x862>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	0e9b      	lsrs	r3, r3, #26
 80051b4:	3301      	adds	r3, #1
 80051b6:	f003 021f 	and.w	r2, r3, #31
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	3b1e      	subs	r3, #30
 80051c2:	051b      	lsls	r3, r3, #20
 80051c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051c8:	e01b      	b.n	8005202 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	60fb      	str	r3, [r7, #12]
  return result;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80051e2:	2320      	movs	r3, #32
 80051e4:	e003      	b.n	80051ee <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	f003 021f 	and.w	r2, r3, #31
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	3b1e      	subs	r3, #30
 80051fc:	051b      	lsls	r3, r3, #20
 80051fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005202:	430b      	orrs	r3, r1
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	6892      	ldr	r2, [r2, #8]
 8005208:	4619      	mov	r1, r3
 800520a:	f7ff f9c9 	bl	80045a0 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80b2 	beq.w	8005380 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005224:	d004      	beq.n	8005230 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a04      	ldr	r2, [pc, #16]	; (800523c <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d109      	bne.n	8005244 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8005232:	e008      	b.n	8005246 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8005234:	407f0000 	.word	0x407f0000
 8005238:	80080000 	.word	0x80080000
 800523c:	50000100 	.word	0x50000100
 8005240:	50000300 	.word	0x50000300
 8005244:	4b53      	ldr	r3, [pc, #332]	; (8005394 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff f8ef 	bl	800442a <LL_ADC_GetCommonPathInternalCh>
 800524c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a50      	ldr	r2, [pc, #320]	; (8005398 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a4f      	ldr	r2, [pc, #316]	; (800539c <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d139      	bne.n	80052d8 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d133      	bne.n	80052d8 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005278:	d004      	beq.n	8005284 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a48      	ldr	r2, [pc, #288]	; (80053a0 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d17a      	bne.n	800537a <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800528c:	d004      	beq.n	8005298 <HAL_ADCEx_InjectedConfigChannel+0x930>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a44      	ldr	r2, [pc, #272]	; (80053a4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_ADCEx_InjectedConfigChannel+0x934>
 8005298:	4a43      	ldr	r2, [pc, #268]	; (80053a8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800529a:	e000      	b.n	800529e <HAL_ADCEx_InjectedConfigChannel+0x936>
 800529c:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800529e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7ff f8ab 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80052ae:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	099b      	lsrs	r3, r3, #6
 80052b4:	4a3e      	ldr	r2, [pc, #248]	; (80053b0 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	099a      	lsrs	r2, r3, #6
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80052c6:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80052c8:	e002      	b.n	80052d0 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f9      	bne.n	80052ca <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052d6:	e050      	b.n	800537a <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a35      	ldr	r2, [pc, #212]	; (80053b4 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d125      	bne.n	800532e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11f      	bne.n	800532e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d104      	bne.n	8005302 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d03d      	beq.n	800537e <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800530a:	d004      	beq.n	8005316 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005316:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005318:	e000      	b.n	800531c <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800531a:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800531c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f7ff f86c 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800532c:	e027      	b.n	800537e <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a22      	ldr	r2, [pc, #136]	; (80053bc <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d123      	bne.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800533c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11d      	bne.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005356:	d004      	beq.n	8005362 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8005362:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005364:	e000      	b.n	8005368 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8005366:	4a0b      	ldr	r2, [pc, #44]	; (8005394 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800536c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f7ff f846 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
 8005378:	e002      	b.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800537e:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005388:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800538c:	4618      	mov	r0, r3
 800538e:	37d8      	adds	r7, #216	; 0xd8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	50000700 	.word	0x50000700
 8005398:	c3210000 	.word	0xc3210000
 800539c:	90c00010 	.word	0x90c00010
 80053a0:	50000600 	.word	0x50000600
 80053a4:	50000100 	.word	0x50000100
 80053a8:	50000300 	.word	0x50000300
 80053ac:	20000000 	.word	0x20000000
 80053b0:	053e2d63 	.word	0x053e2d63
 80053b4:	c7520000 	.word	0xc7520000
 80053b8:	50000500 	.word	0x50000500
 80053bc:	cb840000 	.word	0xcb840000

080053c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b0a1      	sub	sp, #132	; 0x84
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80053da:	2302      	movs	r3, #2
 80053dc:	e0e7      	b.n	80055ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80053e6:	2300      	movs	r3, #0
 80053e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80053ea:	2300      	movs	r3, #0
 80053ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053f6:	d102      	bne.n	80053fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80053f8:	4b6f      	ldr	r3, [pc, #444]	; (80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	e009      	b.n	8005412 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6e      	ldr	r2, [pc, #440]	; (80055bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d102      	bne.n	800540e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005408:	4b6d      	ldr	r3, [pc, #436]	; (80055c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	e001      	b.n	8005412 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0be      	b.n	80055ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f925 	bl	8004682 <LL_ADC_REG_IsConversionOngoing>
 8005438:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f91f 	bl	8004682 <LL_ADC_REG_IsConversionOngoing>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 80a0 	bne.w	800558c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800544c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 809c 	bne.w	800558c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800545c:	d004      	beq.n	8005468 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a55      	ldr	r2, [pc, #340]	; (80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d101      	bne.n	800546c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005468:	4b56      	ldr	r3, [pc, #344]	; (80055c4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800546a:	e000      	b.n	800546e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800546c:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800546e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d04b      	beq.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800548a:	035b      	lsls	r3, r3, #13
 800548c:	430b      	orrs	r3, r1
 800548e:	431a      	orrs	r2, r3
 8005490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005492:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549c:	d004      	beq.n	80054a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a45      	ldr	r2, [pc, #276]	; (80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10f      	bne.n	80054c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80054a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80054ac:	f7ff f8d6 	bl	800465c <LL_ADC_IsEnabled>
 80054b0:	4604      	mov	r4, r0
 80054b2:	4841      	ldr	r0, [pc, #260]	; (80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054b4:	f7ff f8d2 	bl	800465c <LL_ADC_IsEnabled>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4323      	orrs	r3, r4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e012      	b.n	80054ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80054c8:	483c      	ldr	r0, [pc, #240]	; (80055bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80054ca:	f7ff f8c7 	bl	800465c <LL_ADC_IsEnabled>
 80054ce:	4604      	mov	r4, r0
 80054d0:	483b      	ldr	r0, [pc, #236]	; (80055c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80054d2:	f7ff f8c3 	bl	800465c <LL_ADC_IsEnabled>
 80054d6:	4603      	mov	r3, r0
 80054d8:	431c      	orrs	r4, r3
 80054da:	483c      	ldr	r0, [pc, #240]	; (80055cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80054dc:	f7ff f8be 	bl	800465c <LL_ADC_IsEnabled>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4323      	orrs	r3, r4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d056      	beq.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80054fa:	f023 030f 	bic.w	r3, r3, #15
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	6811      	ldr	r1, [r2, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6892      	ldr	r2, [r2, #8]
 8005506:	430a      	orrs	r2, r1
 8005508:	431a      	orrs	r2, r3
 800550a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800550e:	e047      	b.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005524:	d004      	beq.n	8005530 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10f      	bne.n	8005550 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005530:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005534:	f7ff f892 	bl	800465c <LL_ADC_IsEnabled>
 8005538:	4604      	mov	r4, r0
 800553a:	481f      	ldr	r0, [pc, #124]	; (80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800553c:	f7ff f88e 	bl	800465c <LL_ADC_IsEnabled>
 8005540:	4603      	mov	r3, r0
 8005542:	4323      	orrs	r3, r4
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf0c      	ite	eq
 8005548:	2301      	moveq	r3, #1
 800554a:	2300      	movne	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e012      	b.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005550:	481a      	ldr	r0, [pc, #104]	; (80055bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005552:	f7ff f883 	bl	800465c <LL_ADC_IsEnabled>
 8005556:	4604      	mov	r4, r0
 8005558:	4819      	ldr	r0, [pc, #100]	; (80055c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800555a:	f7ff f87f 	bl	800465c <LL_ADC_IsEnabled>
 800555e:	4603      	mov	r3, r0
 8005560:	431c      	orrs	r4, r3
 8005562:	481a      	ldr	r0, [pc, #104]	; (80055cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005564:	f7ff f87a 	bl	800465c <LL_ADC_IsEnabled>
 8005568:	4603      	mov	r3, r0
 800556a:	4323      	orrs	r3, r4
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800557a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005582:	f023 030f 	bic.w	r3, r3, #15
 8005586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005588:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800558a:	e009      	b.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800559e:	e000      	b.n	80055a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80055aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3784      	adds	r7, #132	; 0x84
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	50000100 	.word	0x50000100
 80055bc:	50000400 	.word	0x50000400
 80055c0:	50000500 	.word	0x50000500
 80055c4:	50000300 	.word	0x50000300
 80055c8:	50000700 	.word	0x50000700
 80055cc:	50000600 	.word	0x50000600

080055d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <__NVIC_SetPriorityGrouping+0x44>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055ec:	4013      	ands	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005602:	4a04      	ldr	r2, [pc, #16]	; (8005614 <__NVIC_SetPriorityGrouping+0x44>)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	60d3      	str	r3, [r2, #12]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <__NVIC_GetPriorityGrouping+0x18>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	f003 0307 	and.w	r3, r3, #7
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800563e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	db0b      	blt.n	800565e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	f003 021f 	and.w	r2, r3, #31
 800564c:	4907      	ldr	r1, [pc, #28]	; (800566c <__NVIC_EnableIRQ+0x38>)
 800564e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2001      	movs	r0, #1
 8005656:	fa00 f202 	lsl.w	r2, r0, r2
 800565a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000e100 	.word	0xe000e100

08005670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005680:	2b00      	cmp	r3, #0
 8005682:	db0a      	blt.n	800569a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	490c      	ldr	r1, [pc, #48]	; (80056bc <__NVIC_SetPriority+0x4c>)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	0112      	lsls	r2, r2, #4
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	440b      	add	r3, r1
 8005694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005698:	e00a      	b.n	80056b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	4908      	ldr	r1, [pc, #32]	; (80056c0 <__NVIC_SetPriority+0x50>)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	3b04      	subs	r3, #4
 80056a8:	0112      	lsls	r2, r2, #4
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	440b      	add	r3, r1
 80056ae:	761a      	strb	r2, [r3, #24]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000e100 	.word	0xe000e100
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f1c3 0307 	rsb	r3, r3, #7
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf28      	it	cs
 80056e2:	2304      	movcs	r3, #4
 80056e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3304      	adds	r3, #4
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d902      	bls.n	80056f4 <NVIC_EncodePriority+0x30>
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3b03      	subs	r3, #3
 80056f2:	e000      	b.n	80056f6 <NVIC_EncodePriority+0x32>
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43da      	mvns	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	401a      	ands	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800570c:	f04f 31ff 	mov.w	r1, #4294967295
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	43d9      	mvns	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800571c:	4313      	orrs	r3, r2
         );
}
 800571e:	4618      	mov	r0, r3
 8005720:	3724      	adds	r7, #36	; 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3b01      	subs	r3, #1
 8005738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800573c:	d301      	bcc.n	8005742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800573e:	2301      	movs	r3, #1
 8005740:	e00f      	b.n	8005762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005742:	4a0a      	ldr	r2, [pc, #40]	; (800576c <SysTick_Config+0x40>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3b01      	subs	r3, #1
 8005748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800574a:	210f      	movs	r1, #15
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	f7ff ff8e 	bl	8005670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <SysTick_Config+0x40>)
 8005756:	2200      	movs	r2, #0
 8005758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800575a:	4b04      	ldr	r3, [pc, #16]	; (800576c <SysTick_Config+0x40>)
 800575c:	2207      	movs	r2, #7
 800575e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	e000e010 	.word	0xe000e010

08005770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff ff29 	bl	80055d0 <__NVIC_SetPriorityGrouping>
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	4603      	mov	r3, r0
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005794:	f7ff ff40 	bl	8005618 <__NVIC_GetPriorityGrouping>
 8005798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	6978      	ldr	r0, [r7, #20]
 80057a0:	f7ff ff90 	bl	80056c4 <NVIC_EncodePriority>
 80057a4:	4602      	mov	r2, r0
 80057a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff5f 	bl	8005670 <__NVIC_SetPriority>
}
 80057b2:	bf00      	nop
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	4603      	mov	r3, r0
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ff33 	bl	8005634 <__NVIC_EnableIRQ>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ffa4 	bl	800572c <SysTick_Config>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80057fe:	e15a      	b.n	8005ab6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	2101      	movs	r1, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa01 f303 	lsl.w	r3, r1, r3
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 814c 	beq.w	8005ab0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d005      	beq.n	8005830 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800582c:	2b02      	cmp	r3, #2
 800582e:	d130      	bne.n	8005892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	2203      	movs	r2, #3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4013      	ands	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005866:	2201      	movs	r2, #1
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	091b      	lsrs	r3, r3, #4
 800587c:	f003 0201 	and.w	r2, r3, #1
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d017      	beq.n	80058ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	2203      	movs	r2, #3
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4013      	ands	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d123      	bne.n	8005922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	08da      	lsrs	r2, r3, #3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3208      	adds	r2, #8
 80058e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	220f      	movs	r2, #15
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4013      	ands	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	08da      	lsrs	r2, r3, #3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3208      	adds	r2, #8
 800591c:	6939      	ldr	r1, [r7, #16]
 800591e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	2203      	movs	r2, #3
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 0203 	and.w	r2, r3, #3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80a6 	beq.w	8005ab0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005964:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_GPIO_Init+0x2e4>)
 8005966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005968:	4a5a      	ldr	r2, [pc, #360]	; (8005ad4 <HAL_GPIO_Init+0x2e4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6613      	str	r3, [r2, #96]	; 0x60
 8005970:	4b58      	ldr	r3, [pc, #352]	; (8005ad4 <HAL_GPIO_Init+0x2e4>)
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800597c:	4a56      	ldr	r2, [pc, #344]	; (8005ad8 <HAL_GPIO_Init+0x2e8>)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	3302      	adds	r3, #2
 8005984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	220f      	movs	r2, #15
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059a6:	d01f      	beq.n	80059e8 <HAL_GPIO_Init+0x1f8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a4c      	ldr	r2, [pc, #304]	; (8005adc <HAL_GPIO_Init+0x2ec>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d019      	beq.n	80059e4 <HAL_GPIO_Init+0x1f4>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a4b      	ldr	r2, [pc, #300]	; (8005ae0 <HAL_GPIO_Init+0x2f0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d013      	beq.n	80059e0 <HAL_GPIO_Init+0x1f0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a4a      	ldr	r2, [pc, #296]	; (8005ae4 <HAL_GPIO_Init+0x2f4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00d      	beq.n	80059dc <HAL_GPIO_Init+0x1ec>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a49      	ldr	r2, [pc, #292]	; (8005ae8 <HAL_GPIO_Init+0x2f8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <HAL_GPIO_Init+0x1e8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a48      	ldr	r2, [pc, #288]	; (8005aec <HAL_GPIO_Init+0x2fc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d101      	bne.n	80059d4 <HAL_GPIO_Init+0x1e4>
 80059d0:	2305      	movs	r3, #5
 80059d2:	e00a      	b.n	80059ea <HAL_GPIO_Init+0x1fa>
 80059d4:	2306      	movs	r3, #6
 80059d6:	e008      	b.n	80059ea <HAL_GPIO_Init+0x1fa>
 80059d8:	2304      	movs	r3, #4
 80059da:	e006      	b.n	80059ea <HAL_GPIO_Init+0x1fa>
 80059dc:	2303      	movs	r3, #3
 80059de:	e004      	b.n	80059ea <HAL_GPIO_Init+0x1fa>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e002      	b.n	80059ea <HAL_GPIO_Init+0x1fa>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_GPIO_Init+0x1fa>
 80059e8:	2300      	movs	r3, #0
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	f002 0203 	and.w	r2, r2, #3
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	4093      	lsls	r3, r2
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059fa:	4937      	ldr	r1, [pc, #220]	; (8005ad8 <HAL_GPIO_Init+0x2e8>)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a08:	4b39      	ldr	r3, [pc, #228]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a2c:	4a30      	ldr	r2, [pc, #192]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a32:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a56:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005a5c:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4013      	ands	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <HAL_GPIO_Init+0x300>)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f ae9d 	bne.w	8005800 <HAL_GPIO_Init+0x10>
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	48000400 	.word	0x48000400
 8005ae0:	48000800 	.word	0x48000800
 8005ae4:	48000c00 	.word	0x48000c00
 8005ae8:	48001000 	.word	0x48001000
 8005aec:	48001400 	.word	0x48001400
 8005af0:	40010400 	.word	0x40010400

08005af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
 8005b10:	e001      	b.n	8005b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
 8005b30:	4613      	mov	r3, r2
 8005b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b34:	787b      	ldrb	r3, [r7, #1]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b40:	e002      	b.n	8005b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b42:	887a      	ldrh	r2, [r7, #2]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	041a      	lsls	r2, r3, #16
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	43d9      	mvns	r1, r3
 8005b72:	887b      	ldrh	r3, [r7, #2]
 8005b74:	400b      	ands	r3, r1
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d141      	bne.n	8005c1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b96:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba2:	d131      	bne.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ba4:	4b47      	ldr	r3, [pc, #284]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005baa:	4a46      	ldr	r2, [pc, #280]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bb4:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bbc:	4a41      	ldr	r2, [pc, #260]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bc4:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2232      	movs	r2, #50	; 0x32
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	0c9b      	lsrs	r3, r3, #18
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bda:	e002      	b.n	8005be2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d102      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f2      	bne.n	8005bdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bf6:	4b33      	ldr	r3, [pc, #204]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d158      	bne.n	8005cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e057      	b.n	8005cb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c08:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0e:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c18:	e04d      	b.n	8005cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c20:	d141      	bne.n	8005ca6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c22:	4b28      	ldr	r3, [pc, #160]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2e:	d131      	bne.n	8005c94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c30:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c36:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c40:	4b20      	ldr	r3, [pc, #128]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c48:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2232      	movs	r2, #50	; 0x32
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c60:	0c9b      	lsrs	r3, r3, #18
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c66:	e002      	b.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7a:	d102      	bne.n	8005c82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f2      	bne.n	8005c68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d112      	bne.n	8005cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e011      	b.n	8005cb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ca4:	e007      	b.n	8005cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	20000000 	.word	0x20000000
 8005ccc:	431bde83 	.word	0x431bde83

08005cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e2fe      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d075      	beq.n	8005dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cee:	4b97      	ldr	r3, [pc, #604]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cf8:	4b94      	ldr	r3, [pc, #592]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b0c      	cmp	r3, #12
 8005d06:	d102      	bne.n	8005d0e <HAL_RCC_OscConfig+0x3e>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d002      	beq.n	8005d14 <HAL_RCC_OscConfig+0x44>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d10b      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	4b8d      	ldr	r3, [pc, #564]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05b      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x108>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d157      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e2d9      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d106      	bne.n	8005d44 <HAL_RCC_OscConfig+0x74>
 8005d36:	4b85      	ldr	r3, [pc, #532]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a84      	ldr	r2, [pc, #528]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e01d      	b.n	8005d80 <HAL_RCC_OscConfig+0xb0>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x98>
 8005d4e:	4b7f      	ldr	r3, [pc, #508]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a7e      	ldr	r2, [pc, #504]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4b7c      	ldr	r3, [pc, #496]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a7b      	ldr	r2, [pc, #492]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0xb0>
 8005d68:	4b78      	ldr	r3, [pc, #480]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a77      	ldr	r2, [pc, #476]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b75      	ldr	r3, [pc, #468]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a74      	ldr	r2, [pc, #464]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc fff4 	bl	8002d74 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fc fff0 	bl	8002d74 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e29e      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005da2:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0xc0>
 8005dae:	e014      	b.n	8005dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc ffe0 	bl	8002d74 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fc ffdc 	bl	8002d74 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e28a      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dca:	4b60      	ldr	r3, [pc, #384]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0xe8>
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d075      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de6:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df0:	4b56      	ldr	r3, [pc, #344]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d102      	bne.n	8005e06 <HAL_RCC_OscConfig+0x136>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d002      	beq.n	8005e0c <HAL_RCC_OscConfig+0x13c>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d11f      	bne.n	8005e4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e0c:	4b4f      	ldr	r3, [pc, #316]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_OscConfig+0x154>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e25d      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e24:	4b49      	ldr	r3, [pc, #292]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	061b      	lsls	r3, r3, #24
 8005e32:	4946      	ldr	r1, [pc, #280]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e38:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fc ff4d 	bl	8002cdc <HAL_InitTick>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d043      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e249      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d023      	beq.n	8005e9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e54:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3c      	ldr	r2, [pc, #240]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fc ff88 	bl	8002d74 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e68:	f7fc ff84 	bl	8002d74 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e232      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e7a:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e86:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	061b      	lsls	r3, r3, #24
 8005e94:	492d      	ldr	r1, [pc, #180]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	604b      	str	r3, [r1, #4]
 8005e9a:	e01a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9c:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fc ff64 	bl	8002d74 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fc ff60 	bl	8002d74 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e20e      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ec2:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1e0>
 8005ece:	e000      	b.n	8005ed2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d041      	beq.n	8005f62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01c      	beq.n	8005f20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee6:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eec:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef6:	f7fc ff3d 	bl	8002d74 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efe:	f7fc ff39 	bl	8002d74 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e1e7      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0ef      	beq.n	8005efe <HAL_RCC_OscConfig+0x22e>
 8005f1e:	e020      	b.n	8005f62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <HAL_RCC_OscConfig+0x27c>)
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f30:	f7fc ff20 	bl	8002d74 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f36:	e00d      	b.n	8005f54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f38:	f7fc ff1c 	bl	8002d74 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d906      	bls.n	8005f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e1ca      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f54:	4b8c      	ldr	r3, [pc, #560]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ea      	bne.n	8005f38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80a6 	beq.w	80060bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f70:	2300      	movs	r3, #0
 8005f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f74:	4b84      	ldr	r3, [pc, #528]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_RCC_OscConfig+0x2b4>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_RCC_OscConfig+0x2b6>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00d      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8a:	4b7f      	ldr	r3, [pc, #508]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	4a7e      	ldr	r2, [pc, #504]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f94:	6593      	str	r3, [r2, #88]	; 0x58
 8005f96:	4b7c      	ldr	r3, [pc, #496]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa6:	4b79      	ldr	r3, [pc, #484]	; (800618c <HAL_RCC_OscConfig+0x4bc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d118      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fb2:	4b76      	ldr	r3, [pc, #472]	; (800618c <HAL_RCC_OscConfig+0x4bc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a75      	ldr	r2, [pc, #468]	; (800618c <HAL_RCC_OscConfig+0x4bc>)
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fbe:	f7fc fed9 	bl	8002d74 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc6:	f7fc fed5 	bl	8002d74 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e183      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd8:	4b6c      	ldr	r3, [pc, #432]	; (800618c <HAL_RCC_OscConfig+0x4bc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d108      	bne.n	8005ffe <HAL_RCC_OscConfig+0x32e>
 8005fec:	4b66      	ldr	r3, [pc, #408]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff2:	4a65      	ldr	r2, [pc, #404]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ffc:	e024      	b.n	8006048 <HAL_RCC_OscConfig+0x378>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b05      	cmp	r3, #5
 8006004:	d110      	bne.n	8006028 <HAL_RCC_OscConfig+0x358>
 8006006:	4b60      	ldr	r3, [pc, #384]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600c:	4a5e      	ldr	r2, [pc, #376]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800600e:	f043 0304 	orr.w	r3, r3, #4
 8006012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006016:	4b5c      	ldr	r3, [pc, #368]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	4a5a      	ldr	r2, [pc, #360]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006026:	e00f      	b.n	8006048 <HAL_RCC_OscConfig+0x378>
 8006028:	4b57      	ldr	r3, [pc, #348]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	4a56      	ldr	r2, [pc, #344]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006038:	4b53      	ldr	r3, [pc, #332]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	4a52      	ldr	r2, [pc, #328]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d016      	beq.n	800607e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fc fe90 	bl	8002d74 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006056:	e00a      	b.n	800606e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fc fe8c 	bl	8002d74 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e138      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800606e:	4b46      	ldr	r3, [pc, #280]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ed      	beq.n	8006058 <HAL_RCC_OscConfig+0x388>
 800607c:	e015      	b.n	80060aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607e:	f7fc fe79 	bl	8002d74 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006084:	e00a      	b.n	800609c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006086:	f7fc fe75 	bl	8002d74 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f241 3288 	movw	r2, #5000	; 0x1388
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e121      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800609c:	4b3a      	ldr	r3, [pc, #232]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1ed      	bne.n	8006086 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060aa:	7ffb      	ldrb	r3, [r7, #31]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d105      	bne.n	80060bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b0:	4b35      	ldr	r3, [pc, #212]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	4a34      	ldr	r2, [pc, #208]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03c      	beq.n	8006142 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01c      	beq.n	800610a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060d0:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 80060d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d6:	4a2c      	ldr	r2, [pc, #176]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fc fe48 	bl	8002d74 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060e8:	f7fc fe44 	bl	8002d74 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e0f2      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060fa:	4b23      	ldr	r3, [pc, #140]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 80060fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0ef      	beq.n	80060e8 <HAL_RCC_OscConfig+0x418>
 8006108:	e01b      	b.n	8006142 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800610a:	4b1f      	ldr	r3, [pc, #124]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800610c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006110:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611a:	f7fc fe2b 	bl	8002d74 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006122:	f7fc fe27 	bl	8002d74 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e0d5      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006134:	4b14      	ldr	r3, [pc, #80]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1ef      	bne.n	8006122 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80c9 	beq.w	80062de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800614c:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 030c 	and.w	r3, r3, #12
 8006154:	2b0c      	cmp	r3, #12
 8006156:	f000 8083 	beq.w	8006260 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d15e      	bne.n	8006220 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006162:	4b09      	ldr	r3, [pc, #36]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a08      	ldr	r2, [pc, #32]	; (8006188 <HAL_RCC_OscConfig+0x4b8>)
 8006168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800616c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fc fe01 	bl	8002d74 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006174:	e00c      	b.n	8006190 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006176:	f7fc fdfd 	bl	8002d74 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d905      	bls.n	8006190 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e0ab      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
 8006188:	40021000 	.word	0x40021000
 800618c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006190:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ec      	bne.n	8006176 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800619c:	4b52      	ldr	r3, [pc, #328]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	4b52      	ldr	r3, [pc, #328]	; (80062ec <HAL_RCC_OscConfig+0x61c>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6a11      	ldr	r1, [r2, #32]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ac:	3a01      	subs	r2, #1
 80061ae:	0112      	lsls	r2, r2, #4
 80061b0:	4311      	orrs	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061b6:	0212      	lsls	r2, r2, #8
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061be:	0852      	lsrs	r2, r2, #1
 80061c0:	3a01      	subs	r2, #1
 80061c2:	0552      	lsls	r2, r2, #21
 80061c4:	4311      	orrs	r1, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061ca:	0852      	lsrs	r2, r2, #1
 80061cc:	3a01      	subs	r2, #1
 80061ce:	0652      	lsls	r2, r2, #25
 80061d0:	4311      	orrs	r1, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061d6:	06d2      	lsls	r2, r2, #27
 80061d8:	430a      	orrs	r2, r1
 80061da:	4943      	ldr	r1, [pc, #268]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a40      	ldr	r2, [pc, #256]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 80061e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061ec:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 80061f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc fdbc 	bl	8002d74 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006200:	f7fc fdb8 	bl	8002d74 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e066      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006212:	4b35      	ldr	r3, [pc, #212]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0x530>
 800621e:	e05e      	b.n	80062de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800622a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622c:	f7fc fda2 	bl	8002d74 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fc fd9e 	bl	8002d74 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e04c      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006246:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006252:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	4924      	ldr	r1, [pc, #144]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <HAL_RCC_OscConfig+0x620>)
 800625a:	4013      	ands	r3, r2
 800625c:	60cb      	str	r3, [r1, #12]
 800625e:	e03e      	b.n	80062de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e039      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800626c:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <HAL_RCC_OscConfig+0x618>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f003 0203 	and.w	r2, r3, #3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	429a      	cmp	r2, r3
 800627e:	d12c      	bne.n	80062da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	3b01      	subs	r3, #1
 800628c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d123      	bne.n	80062da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d11b      	bne.n	80062da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d113      	bne.n	80062da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	3b01      	subs	r3, #1
 80062c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d109      	bne.n	80062da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	3b01      	subs	r3, #1
 80062d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d001      	beq.n	80062de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40021000 	.word	0x40021000
 80062ec:	019f800c 	.word	0x019f800c
 80062f0:	feeefffc 	.word	0xfeeefffc

080062f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e11e      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800630c:	4b91      	ldr	r3, [pc, #580]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d910      	bls.n	800633c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b8e      	ldr	r3, [pc, #568]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 020f 	bic.w	r2, r3, #15
 8006322:	498c      	ldr	r1, [pc, #560]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b8a      	ldr	r3, [pc, #552]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e106      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d073      	beq.n	8006430 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d129      	bne.n	80063a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006350:	4b81      	ldr	r3, [pc, #516]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0f4      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006360:	f000 f966 	bl	8006630 <RCC_GetSysClockFreqFromPLLSource>
 8006364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4a7c      	ldr	r2, [pc, #496]	; (800655c <HAL_RCC_ClockConfig+0x268>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d93f      	bls.n	80063ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800636e:	4b7a      	ldr	r3, [pc, #488]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006382:	2b00      	cmp	r3, #0
 8006384:	d033      	beq.n	80063ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800638a:	2b00      	cmp	r3, #0
 800638c:	d12f      	bne.n	80063ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800638e:	4b72      	ldr	r3, [pc, #456]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006396:	4a70      	ldr	r2, [pc, #448]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e024      	b.n	80063ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d107      	bne.n	80063bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ac:	4b6a      	ldr	r3, [pc, #424]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0c6      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063bc:	4b66      	ldr	r3, [pc, #408]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0be      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063cc:	f000 f8ce 	bl	800656c <HAL_RCC_GetSysClockFreq>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4a61      	ldr	r2, [pc, #388]	; (800655c <HAL_RCC_ClockConfig+0x268>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d909      	bls.n	80063ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063da:	4b5f      	ldr	r3, [pc, #380]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e2:	4a5d      	ldr	r2, [pc, #372]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063ee:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f023 0203 	bic.w	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4957      	ldr	r1, [pc, #348]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006400:	f7fc fcb8 	bl	8002d74 <HAL_GetTick>
 8006404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006406:	e00a      	b.n	800641e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006408:	f7fc fcb4 	bl	8002d74 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	f241 3288 	movw	r2, #5000	; 0x1388
 8006416:	4293      	cmp	r3, r2
 8006418:	d901      	bls.n	800641e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e095      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	4b4e      	ldr	r3, [pc, #312]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 020c 	and.w	r2, r3, #12
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	429a      	cmp	r2, r3
 800642e:	d1eb      	bne.n	8006408 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d023      	beq.n	8006484 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006448:	4b43      	ldr	r3, [pc, #268]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4a42      	ldr	r2, [pc, #264]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800644e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006452:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006460:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006468:	4a3b      	ldr	r2, [pc, #236]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800646a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800646e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006470:	4b39      	ldr	r3, [pc, #228]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4936      	ldr	r1, [pc, #216]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
 8006482:	e008      	b.n	8006496 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d105      	bne.n	8006496 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800648a:	4b33      	ldr	r3, [pc, #204]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4a32      	ldr	r2, [pc, #200]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006494:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006496:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d21d      	bcs.n	80064e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f023 020f 	bic.w	r2, r3, #15
 80064ac:	4929      	ldr	r1, [pc, #164]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064b4:	f7fc fc5e 	bl	8002d74 <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ba:	e00a      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064bc:	f7fc fc5a 	bl	8002d74 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e03b      	b.n	800654a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d2:	4b20      	ldr	r3, [pc, #128]	; (8006554 <HAL_RCC_ClockConfig+0x260>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d1ed      	bne.n	80064bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d008      	beq.n	80064fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4917      	ldr	r1, [pc, #92]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800650a:	4b13      	ldr	r3, [pc, #76]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	490f      	ldr	r1, [pc, #60]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800651e:	f000 f825 	bl	800656c <HAL_RCC_GetSysClockFreq>
 8006522:	4602      	mov	r2, r0
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <HAL_RCC_ClockConfig+0x264>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	091b      	lsrs	r3, r3, #4
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	490c      	ldr	r1, [pc, #48]	; (8006560 <HAL_RCC_ClockConfig+0x26c>)
 8006530:	5ccb      	ldrb	r3, [r1, r3]
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	fa22 f303 	lsr.w	r3, r2, r3
 800653a:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_RCC_ClockConfig+0x270>)
 800653c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <HAL_RCC_ClockConfig+0x274>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fc fbca 	bl	8002cdc <HAL_InitTick>
 8006548:	4603      	mov	r3, r0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40022000 	.word	0x40022000
 8006558:	40021000 	.word	0x40021000
 800655c:	04c4b400 	.word	0x04c4b400
 8006560:	08009828 	.word	0x08009828
 8006564:	20000000 	.word	0x20000000
 8006568:	20000004 	.word	0x20000004

0800656c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006572:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b04      	cmp	r3, #4
 800657c:	d102      	bne.n	8006584 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800657e:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e047      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006584:	4b27      	ldr	r3, [pc, #156]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 030c 	and.w	r3, r3, #12
 800658c:	2b08      	cmp	r3, #8
 800658e:	d102      	bne.n	8006596 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006590:	4b26      	ldr	r3, [pc, #152]	; (800662c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	e03e      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006596:	4b23      	ldr	r3, [pc, #140]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d136      	bne.n	8006610 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	091b      	lsrs	r3, r3, #4
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	3301      	adds	r3, #1
 80065b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d10c      	bne.n	80065da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065c0:	4a1a      	ldr	r2, [pc, #104]	; (800662c <HAL_RCC_GetSysClockFreq+0xc0>)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	4a16      	ldr	r2, [pc, #88]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ca:	68d2      	ldr	r2, [r2, #12]
 80065cc:	0a12      	lsrs	r2, r2, #8
 80065ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	617b      	str	r3, [r7, #20]
      break;
 80065d8:	e00c      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065da:	4a13      	ldr	r2, [pc, #76]	; (8006628 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e4:	68d2      	ldr	r2, [r2, #12]
 80065e6:	0a12      	lsrs	r2, r2, #8
 80065e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]
      break;
 80065f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	0e5b      	lsrs	r3, r3, #25
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	3301      	adds	r3, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e001      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006614:	693b      	ldr	r3, [r7, #16]
}
 8006616:	4618      	mov	r0, r3
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	00f42400 	.word	0x00f42400
 800662c:	016e3600 	.word	0x016e3600

08006630 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006636:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d10c      	bne.n	800666e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006654:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800665e:	68d2      	ldr	r2, [r2, #12]
 8006660:	0a12      	lsrs	r2, r2, #8
 8006662:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	617b      	str	r3, [r7, #20]
    break;
 800666c:	e00c      	b.n	8006688 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	fbb2 f3f3 	udiv	r3, r2, r3
 8006676:	4a0e      	ldr	r2, [pc, #56]	; (80066b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006678:	68d2      	ldr	r2, [r2, #12]
 800667a:	0a12      	lsrs	r2, r2, #8
 800667c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	617b      	str	r3, [r7, #20]
    break;
 8006686:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	0e5b      	lsrs	r3, r3, #25
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	3301      	adds	r3, #1
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066a2:	687b      	ldr	r3, [r7, #4]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40021000 	.word	0x40021000
 80066b4:	016e3600 	.word	0x016e3600
 80066b8:	00f42400 	.word	0x00f42400

080066bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066c4:	2300      	movs	r3, #0
 80066c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066c8:	2300      	movs	r3, #0
 80066ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8098 	beq.w	800680a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066da:	2300      	movs	r3, #0
 80066dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066de:	4b43      	ldr	r3, [pc, #268]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10d      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ea:	4b40      	ldr	r3, [pc, #256]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	4a3f      	ldr	r2, [pc, #252]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f4:	6593      	str	r3, [r2, #88]	; 0x58
 80066f6:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006702:	2301      	movs	r3, #1
 8006704:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006706:	4b3a      	ldr	r3, [pc, #232]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a39      	ldr	r2, [pc, #228]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800670c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006710:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006712:	f7fc fb2f 	bl	8002d74 <HAL_GetTick>
 8006716:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006718:	e009      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671a:	f7fc fb2b 	bl	8002d74 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d902      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	74fb      	strb	r3, [r7, #19]
        break;
 800672c:	e005      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672e:	4b30      	ldr	r3, [pc, #192]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0ef      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800673a:	7cfb      	ldrb	r3, [r7, #19]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d159      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006740:	4b2a      	ldr	r3, [pc, #168]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01e      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	429a      	cmp	r2, r3
 800675a:	d019      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800675c:	4b23      	ldr	r3, [pc, #140]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006766:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006768:	4b20      	ldr	r3, [pc, #128]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	4a1f      	ldr	r2, [pc, #124]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677e:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006788:	4a18      	ldr	r2, [pc, #96]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679a:	f7fc faeb 	bl	8002d74 <HAL_GetTick>
 800679e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a0:	e00b      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fc fae7 	bl	8002d74 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d902      	bls.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	74fb      	strb	r3, [r7, #19]
            break;
 80067b8:	e006      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ba:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0ec      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067dc:	4903      	ldr	r1, [pc, #12]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067e4:	e008      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	74bb      	strb	r3, [r7, #18]
 80067ea:	e005      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067ec:	40021000 	.word	0x40021000
 80067f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067f8:	7c7b      	ldrb	r3, [r7, #17]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d105      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067fe:	4ba7      	ldr	r3, [pc, #668]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	4aa6      	ldr	r2, [pc, #664]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006816:	4ba1      	ldr	r3, [pc, #644]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	f023 0203 	bic.w	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	499d      	ldr	r1, [pc, #628]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006838:	4b98      	ldr	r3, [pc, #608]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	f023 020c 	bic.w	r2, r3, #12
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	4995      	ldr	r1, [pc, #596]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800685a:	4b90      	ldr	r3, [pc, #576]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	498c      	ldr	r1, [pc, #560]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800687c:	4b87      	ldr	r3, [pc, #540]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	4984      	ldr	r1, [pc, #528]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800689e:	4b7f      	ldr	r3, [pc, #508]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	497b      	ldr	r1, [pc, #492]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068c0:	4b76      	ldr	r3, [pc, #472]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	4973      	ldr	r1, [pc, #460]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068e2:	4b6e      	ldr	r3, [pc, #440]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	496a      	ldr	r1, [pc, #424]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006904:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	4962      	ldr	r1, [pc, #392]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006926:	4b5d      	ldr	r3, [pc, #372]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	4959      	ldr	r1, [pc, #356]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006948:	4b54      	ldr	r3, [pc, #336]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	4951      	ldr	r1, [pc, #324]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800696a:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	4948      	ldr	r1, [pc, #288]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	2b00      	cmp	r3, #0
 800698a:	d015      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800698c:	4b43      	ldr	r3, [pc, #268]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	4940      	ldr	r1, [pc, #256]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069aa:	d105      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ac:	4b3b      	ldr	r3, [pc, #236]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4a3a      	ldr	r2, [pc, #232]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069c4:	4b35      	ldr	r3, [pc, #212]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	4932      	ldr	r1, [pc, #200]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e2:	d105      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e4:	4b2d      	ldr	r3, [pc, #180]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a2c      	ldr	r2, [pc, #176]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d015      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069fc:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	4924      	ldr	r1, [pc, #144]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a1a:	d105      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a1c:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a34:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	4916      	ldr	r1, [pc, #88]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a52:	d105      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a54:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a10      	ldr	r2, [pc, #64]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d019      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	4908      	ldr	r1, [pc, #32]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a8c:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4a02      	ldr	r2, [pc, #8]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a96:	60d3      	str	r3, [r2, #12]
 8006a98:	e002      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a9a:	bf00      	nop
 8006a9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006aac:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	4926      	ldr	r1, [pc, #152]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006acc:	4b21      	ldr	r3, [pc, #132]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a20      	ldr	r2, [pc, #128]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d015      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	4918      	ldr	r1, [pc, #96]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d105      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d015      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	490a      	ldr	r1, [pc, #40]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b3a:	d105      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a04      	ldr	r2, [pc, #16]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b48:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000

08006b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d001      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e054      	b.n	8006c1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d022      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	d01d      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d018      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00e      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <HAL_TIM_Base_Start_IT+0xe0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <HAL_TIM_Base_Start_IT+0xe4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x80>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_TIM_Base_Start_IT+0xe8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d115      	bne.n	8006c04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <HAL_TIM_Base_Start_IT+0xec>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d015      	beq.n	8006c16 <HAL_TIM_Base_Start_IT+0xbe>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf0:	d011      	beq.n	8006c16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c02:	e008      	b.n	8006c16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e000      	b.n	8006c18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40015000 	.word	0x40015000
 8006c44:	00010007 	.word	0x00010007

08006c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e049      	b.n	8006cee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb fe54 	bl	800291c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f000 fe22 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_TIM_PWM_Start+0x24>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	bf14      	ite	ne
 8006d14:	2301      	movne	r3, #1
 8006d16:	2300      	moveq	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	e03c      	b.n	8006d96 <HAL_TIM_PWM_Start+0x9e>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d109      	bne.n	8006d36 <HAL_TIM_PWM_Start+0x3e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	bf14      	ite	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	2300      	moveq	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	e02f      	b.n	8006d96 <HAL_TIM_PWM_Start+0x9e>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d109      	bne.n	8006d50 <HAL_TIM_PWM_Start+0x58>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	bf14      	ite	ne
 8006d48:	2301      	movne	r3, #1
 8006d4a:	2300      	moveq	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	e022      	b.n	8006d96 <HAL_TIM_PWM_Start+0x9e>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b0c      	cmp	r3, #12
 8006d54:	d109      	bne.n	8006d6a <HAL_TIM_PWM_Start+0x72>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	bf14      	ite	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	2300      	moveq	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	e015      	b.n	8006d96 <HAL_TIM_PWM_Start+0x9e>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d109      	bne.n	8006d84 <HAL_TIM_PWM_Start+0x8c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	bf14      	ite	ne
 8006d7c:	2301      	movne	r3, #1
 8006d7e:	2300      	moveq	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	e008      	b.n	8006d96 <HAL_TIM_PWM_Start+0x9e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e0a6      	b.n	8006eec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_PWM_Start+0xb6>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dac:	e023      	b.n	8006df6 <HAL_TIM_PWM_Start+0xfe>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_PWM_Start+0xc6>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dbc:	e01b      	b.n	8006df6 <HAL_TIM_PWM_Start+0xfe>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_PWM_Start+0xd6>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dcc:	e013      	b.n	8006df6 <HAL_TIM_PWM_Start+0xfe>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b0c      	cmp	r3, #12
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_PWM_Start+0xe6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ddc:	e00b      	b.n	8006df6 <HAL_TIM_PWM_Start+0xfe>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d104      	bne.n	8006dee <HAL_TIM_PWM_Start+0xf6>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dec:	e003      	b.n	8006df6 <HAL_TIM_PWM_Start+0xfe>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fa6e 	bl	80082e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3a      	ldr	r2, [pc, #232]	; (8006ef4 <HAL_TIM_PWM_Start+0x1fc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d018      	beq.n	8006e40 <HAL_TIM_PWM_Start+0x148>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <HAL_TIM_PWM_Start+0x200>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <HAL_TIM_PWM_Start+0x148>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a37      	ldr	r2, [pc, #220]	; (8006efc <HAL_TIM_PWM_Start+0x204>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00e      	beq.n	8006e40 <HAL_TIM_PWM_Start+0x148>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a36      	ldr	r2, [pc, #216]	; (8006f00 <HAL_TIM_PWM_Start+0x208>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d009      	beq.n	8006e40 <HAL_TIM_PWM_Start+0x148>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a34      	ldr	r2, [pc, #208]	; (8006f04 <HAL_TIM_PWM_Start+0x20c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <HAL_TIM_PWM_Start+0x148>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a33      	ldr	r2, [pc, #204]	; (8006f08 <HAL_TIM_PWM_Start+0x210>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIM_PWM_Start+0x14c>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <HAL_TIM_PWM_Start+0x14e>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a25      	ldr	r2, [pc, #148]	; (8006ef4 <HAL_TIM_PWM_Start+0x1fc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d01d      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <HAL_TIM_PWM_Start+0x214>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a24      	ldr	r2, [pc, #144]	; (8006f10 <HAL_TIM_PWM_Start+0x218>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <HAL_TIM_PWM_Start+0x21c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <HAL_TIM_PWM_Start+0x200>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a18      	ldr	r2, [pc, #96]	; (8006efc <HAL_TIM_PWM_Start+0x204>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x1b2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a18      	ldr	r2, [pc, #96]	; (8006f08 <HAL_TIM_PWM_Start+0x210>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d115      	bne.n	8006ed6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	4b19      	ldr	r3, [pc, #100]	; (8006f18 <HAL_TIM_PWM_Start+0x220>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	d015      	beq.n	8006ee8 <HAL_TIM_PWM_Start+0x1f0>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec2:	d011      	beq.n	8006ee8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed4:	e008      	b.n	8006ee8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0201 	orr.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e000      	b.n	8006eea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800
 8006f08:	40015000 	.word	0x40015000
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	40000800 	.word	0x40000800
 8006f14:	40000c00 	.word	0x40000c00
 8006f18:	00010007 	.word	0x00010007

08006f1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e049      	b.n	8006fc2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb fd0a 	bl	800295c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 fcb8 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_IC_Start_IT+0x1e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	e023      	b.n	8007032 <HAL_TIM_IC_Start_IT+0x66>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_IC_Start_IT+0x2e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	e01b      	b.n	8007032 <HAL_TIM_IC_Start_IT+0x66>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0x3e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e013      	b.n	8007032 <HAL_TIM_IC_Start_IT+0x66>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d104      	bne.n	800701a <HAL_TIM_IC_Start_IT+0x4e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e00b      	b.n	8007032 <HAL_TIM_IC_Start_IT+0x66>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b10      	cmp	r3, #16
 800701e:	d104      	bne.n	800702a <HAL_TIM_IC_Start_IT+0x5e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007026:	b2db      	uxtb	r3, r3
 8007028:	e003      	b.n	8007032 <HAL_TIM_IC_Start_IT+0x66>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007030:	b2db      	uxtb	r3, r3
 8007032:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d104      	bne.n	8007044 <HAL_TIM_IC_Start_IT+0x78>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007040:	b2db      	uxtb	r3, r3
 8007042:	e013      	b.n	800706c <HAL_TIM_IC_Start_IT+0xa0>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b04      	cmp	r3, #4
 8007048:	d104      	bne.n	8007054 <HAL_TIM_IC_Start_IT+0x88>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007050:	b2db      	uxtb	r3, r3
 8007052:	e00b      	b.n	800706c <HAL_TIM_IC_Start_IT+0xa0>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b08      	cmp	r3, #8
 8007058:	d104      	bne.n	8007064 <HAL_TIM_IC_Start_IT+0x98>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e003      	b.n	800706c <HAL_TIM_IC_Start_IT+0xa0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800706a:	b2db      	uxtb	r3, r3
 800706c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d102      	bne.n	800707a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007074:	7b7b      	ldrb	r3, [r7, #13]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e0e2      	b.n	8007244 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_IC_Start_IT+0xc2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708c:	e023      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x10a>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_IC_Start_IT+0xd2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	e01b      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x10a>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Start_IT+0xe2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	e013      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x10a>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d104      	bne.n	80070be <HAL_TIM_IC_Start_IT+0xf2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070bc:	e00b      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x10a>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_IC_Start_IT+0x102>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070cc:	e003      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x10a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_IC_Start_IT+0x11a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070e4:	e013      	b.n	800710e <HAL_TIM_IC_Start_IT+0x142>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_IC_Start_IT+0x12a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070f4:	e00b      	b.n	800710e <HAL_TIM_IC_Start_IT+0x142>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_IC_Start_IT+0x13a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007104:	e003      	b.n	800710e <HAL_TIM_IC_Start_IT+0x142>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2202      	movs	r2, #2
 800710a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b0c      	cmp	r3, #12
 8007112:	d841      	bhi.n	8007198 <HAL_TIM_IC_Start_IT+0x1cc>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <HAL_TIM_IC_Start_IT+0x150>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007151 	.word	0x08007151
 8007120:	08007199 	.word	0x08007199
 8007124:	08007199 	.word	0x08007199
 8007128:	08007199 	.word	0x08007199
 800712c:	08007163 	.word	0x08007163
 8007130:	08007199 	.word	0x08007199
 8007134:	08007199 	.word	0x08007199
 8007138:	08007199 	.word	0x08007199
 800713c:	08007175 	.word	0x08007175
 8007140:	08007199 	.word	0x08007199
 8007144:	08007199 	.word	0x08007199
 8007148:	08007199 	.word	0x08007199
 800714c:	08007187 	.word	0x08007187
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0202 	orr.w	r2, r2, #2
 800715e:	60da      	str	r2, [r3, #12]
      break;
 8007160:	e01d      	b.n	800719e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0204 	orr.w	r2, r2, #4
 8007170:	60da      	str	r2, [r3, #12]
      break;
 8007172:	e014      	b.n	800719e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0208 	orr.w	r2, r2, #8
 8007182:	60da      	str	r2, [r3, #12]
      break;
 8007184:	e00b      	b.n	800719e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0210 	orr.w	r2, r2, #16
 8007194:	60da      	str	r2, [r3, #12]
      break;
 8007196:	e002      	b.n	800719e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
      break;
 800719c:	bf00      	nop
  }

  if (status == HAL_OK)
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d14e      	bne.n	8007242 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2201      	movs	r2, #1
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f897 	bl	80082e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a25      	ldr	r2, [pc, #148]	; (800724c <HAL_TIM_IC_Start_IT+0x280>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d01d      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a21      	ldr	r2, [pc, #132]	; (8007250 <HAL_TIM_IC_Start_IT+0x284>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <HAL_TIM_IC_Start_IT+0x288>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1e      	ldr	r2, [pc, #120]	; (8007258 <HAL_TIM_IC_Start_IT+0x28c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1c      	ldr	r2, [pc, #112]	; (800725c <HAL_TIM_IC_Start_IT+0x290>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a1b      	ldr	r2, [pc, #108]	; (8007260 <HAL_TIM_IC_Start_IT+0x294>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIM_IC_Start_IT+0x236>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <HAL_TIM_IC_Start_IT+0x298>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d115      	bne.n	800722e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	4b17      	ldr	r3, [pc, #92]	; (8007268 <HAL_TIM_IC_Start_IT+0x29c>)
 800720a:	4013      	ands	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b06      	cmp	r3, #6
 8007212:	d015      	beq.n	8007240 <HAL_TIM_IC_Start_IT+0x274>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721a:	d011      	beq.n	8007240 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722c:	e008      	b.n	8007240 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	e000      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007240:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40013400 	.word	0x40013400
 8007260:	40014000 	.word	0x40014000
 8007264:	40015000 	.word	0x40015000
 8007268:	00010007 	.word	0x00010007

0800726c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d020      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01b      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0202 	mvn.w	r2, #2
 80072a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 faec 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 80072bc:	e005      	b.n	80072ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fade 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 faef 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0204 	mvn.w	r2, #4
 80072ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fac6 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fab8 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fac9 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d020      	beq.n	8007368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0208 	mvn.w	r2, #8
 8007338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2204      	movs	r2, #4
 800733e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 faa0 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007354:	e005      	b.n	8007362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa92 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 faa3 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	2b00      	cmp	r3, #0
 8007370:	d020      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0210 	mvn.w	r2, #16
 8007384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2208      	movs	r2, #8
 800738a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa7a 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa6c 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa7d 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00c      	beq.n	80073d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0201 	mvn.w	r2, #1
 80073d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa4a 	bl	800786c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d104      	bne.n	80073ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00c      	beq.n	8007406 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80073fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f989 	bl	8008718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00c      	beq.n	800742a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f981 	bl	800872c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa37 	bl	80078bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00c      	beq.n	8007472 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f06f 0220 	mvn.w	r2, #32
 800746a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 f949 	bl	8008704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800748e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f955 	bl	8008740 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f94d 	bl	8008754 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80074d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 f945 	bl	8008768 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00c      	beq.n	8007502 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80074fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f93d 	bl	800877c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007524:	2302      	movs	r3, #2
 8007526:	e088      	b.n	800763a <HAL_TIM_IC_ConfigChannel+0x130>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11b      	bne.n	800756e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f000 fda1 	bl	800808c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 020c 	bic.w	r2, r2, #12
 8007558:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6999      	ldr	r1, [r3, #24]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	619a      	str	r2, [r3, #24]
 800756c:	e060      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b04      	cmp	r3, #4
 8007572:	d11c      	bne.n	80075ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f000 fdf6 	bl	8008174 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007596:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6999      	ldr	r1, [r3, #24]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	619a      	str	r2, [r3, #24]
 80075ac:	e040      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d11b      	bne.n	80075ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6819      	ldr	r1, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f000 fe13 	bl	80081ee <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69da      	ldr	r2, [r3, #28]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 020c 	bic.w	r2, r2, #12
 80075d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69d9      	ldr	r1, [r3, #28]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	61da      	str	r2, [r3, #28]
 80075ea:	e021      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b0c      	cmp	r3, #12
 80075f0:	d11c      	bne.n	800762c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6819      	ldr	r1, [r3, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f000 fe30 	bl	8008266 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007614:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69d9      	ldr	r1, [r3, #28]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	021a      	lsls	r2, r3, #8
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	61da      	str	r2, [r3, #28]
 800762a:	e001      	b.n	8007630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800765e:	2302      	movs	r3, #2
 8007660:	e0ff      	b.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b14      	cmp	r3, #20
 800766e:	f200 80f0 	bhi.w	8007852 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076cd 	.word	0x080076cd
 800767c:	08007853 	.word	0x08007853
 8007680:	08007853 	.word	0x08007853
 8007684:	08007853 	.word	0x08007853
 8007688:	0800770d 	.word	0x0800770d
 800768c:	08007853 	.word	0x08007853
 8007690:	08007853 	.word	0x08007853
 8007694:	08007853 	.word	0x08007853
 8007698:	0800774f 	.word	0x0800774f
 800769c:	08007853 	.word	0x08007853
 80076a0:	08007853 	.word	0x08007853
 80076a4:	08007853 	.word	0x08007853
 80076a8:	0800778f 	.word	0x0800778f
 80076ac:	08007853 	.word	0x08007853
 80076b0:	08007853 	.word	0x08007853
 80076b4:	08007853 	.word	0x08007853
 80076b8:	080077d1 	.word	0x080077d1
 80076bc:	08007853 	.word	0x08007853
 80076c0:	08007853 	.word	0x08007853
 80076c4:	08007853 	.word	0x08007853
 80076c8:	08007811 	.word	0x08007811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f9b0 	bl	8007a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0208 	orr.w	r2, r2, #8
 80076e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0204 	bic.w	r2, r2, #4
 80076f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6999      	ldr	r1, [r3, #24]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	619a      	str	r2, [r3, #24]
      break;
 800770a:	e0a5      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fa2a 	bl	8007b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6999      	ldr	r1, [r3, #24]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	021a      	lsls	r2, r3, #8
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	619a      	str	r2, [r3, #24]
      break;
 800774c:	e084      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fa9d 	bl	8007c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0208 	orr.w	r2, r2, #8
 8007768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0204 	bic.w	r2, r2, #4
 8007778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69d9      	ldr	r1, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	61da      	str	r2, [r3, #28]
      break;
 800778c:	e064      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fb0f 	bl	8007db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	021a      	lsls	r2, r3, #8
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	61da      	str	r2, [r3, #28]
      break;
 80077ce:	e043      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fb82 	bl	8007ee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0208 	orr.w	r2, r2, #8
 80077ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0204 	bic.w	r2, r2, #4
 80077fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800780e:	e023      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fbcc 	bl	8007fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007850:	e002      	b.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
      break;
 8007856:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop

0800786c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a4c      	ldr	r2, [pc, #304]	; (8007a14 <TIM_Base_SetConfig+0x144>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d017      	beq.n	8007918 <TIM_Base_SetConfig+0x48>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d013      	beq.n	8007918 <TIM_Base_SetConfig+0x48>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a49      	ldr	r2, [pc, #292]	; (8007a18 <TIM_Base_SetConfig+0x148>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00f      	beq.n	8007918 <TIM_Base_SetConfig+0x48>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a48      	ldr	r2, [pc, #288]	; (8007a1c <TIM_Base_SetConfig+0x14c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_Base_SetConfig+0x48>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a47      	ldr	r2, [pc, #284]	; (8007a20 <TIM_Base_SetConfig+0x150>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_Base_SetConfig+0x48>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a46      	ldr	r2, [pc, #280]	; (8007a24 <TIM_Base_SetConfig+0x154>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_Base_SetConfig+0x48>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a45      	ldr	r2, [pc, #276]	; (8007a28 <TIM_Base_SetConfig+0x158>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d108      	bne.n	800792a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a39      	ldr	r2, [pc, #228]	; (8007a14 <TIM_Base_SetConfig+0x144>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d023      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007938:	d01f      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a36      	ldr	r2, [pc, #216]	; (8007a18 <TIM_Base_SetConfig+0x148>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01b      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a35      	ldr	r2, [pc, #212]	; (8007a1c <TIM_Base_SetConfig+0x14c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d017      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a34      	ldr	r2, [pc, #208]	; (8007a20 <TIM_Base_SetConfig+0x150>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a33      	ldr	r2, [pc, #204]	; (8007a24 <TIM_Base_SetConfig+0x154>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00f      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a33      	ldr	r2, [pc, #204]	; (8007a2c <TIM_Base_SetConfig+0x15c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00b      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a32      	ldr	r2, [pc, #200]	; (8007a30 <TIM_Base_SetConfig+0x160>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a31      	ldr	r2, [pc, #196]	; (8007a34 <TIM_Base_SetConfig+0x164>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_Base_SetConfig+0xaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2c      	ldr	r2, [pc, #176]	; (8007a28 <TIM_Base_SetConfig+0x158>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d108      	bne.n	800798c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <TIM_Base_SetConfig+0x144>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d013      	beq.n	80079e0 <TIM_Base_SetConfig+0x110>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <TIM_Base_SetConfig+0x154>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00f      	beq.n	80079e0 <TIM_Base_SetConfig+0x110>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a1a      	ldr	r2, [pc, #104]	; (8007a2c <TIM_Base_SetConfig+0x15c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00b      	beq.n	80079e0 <TIM_Base_SetConfig+0x110>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <TIM_Base_SetConfig+0x160>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d007      	beq.n	80079e0 <TIM_Base_SetConfig+0x110>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a18      	ldr	r2, [pc, #96]	; (8007a34 <TIM_Base_SetConfig+0x164>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d003      	beq.n	80079e0 <TIM_Base_SetConfig+0x110>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a13      	ldr	r2, [pc, #76]	; (8007a28 <TIM_Base_SetConfig+0x158>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d103      	bne.n	80079e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d105      	bne.n	8007a06 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f023 0201 	bic.w	r2, r3, #1
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	611a      	str	r2, [r3, #16]
  }
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40013400 	.word	0x40013400
 8007a28:	40015000 	.word	0x40015000
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800

08007a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	f023 0201 	bic.w	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 0302 	bic.w	r3, r3, #2
 8007a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a30      	ldr	r2, [pc, #192]	; (8007b54 <TIM_OC1_SetConfig+0x11c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <TIM_OC1_SetConfig+0x88>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a2f      	ldr	r2, [pc, #188]	; (8007b58 <TIM_OC1_SetConfig+0x120>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00f      	beq.n	8007ac0 <TIM_OC1_SetConfig+0x88>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a2e      	ldr	r2, [pc, #184]	; (8007b5c <TIM_OC1_SetConfig+0x124>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <TIM_OC1_SetConfig+0x88>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a2d      	ldr	r2, [pc, #180]	; (8007b60 <TIM_OC1_SetConfig+0x128>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <TIM_OC1_SetConfig+0x88>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <TIM_OC1_SetConfig+0x12c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_OC1_SetConfig+0x88>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a2b      	ldr	r2, [pc, #172]	; (8007b68 <TIM_OC1_SetConfig+0x130>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10c      	bne.n	8007ada <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 0308 	bic.w	r3, r3, #8
 8007ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f023 0304 	bic.w	r3, r3, #4
 8007ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <TIM_OC1_SetConfig+0x11c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d013      	beq.n	8007b0a <TIM_OC1_SetConfig+0xd2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <TIM_OC1_SetConfig+0x120>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00f      	beq.n	8007b0a <TIM_OC1_SetConfig+0xd2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1b      	ldr	r2, [pc, #108]	; (8007b5c <TIM_OC1_SetConfig+0x124>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00b      	beq.n	8007b0a <TIM_OC1_SetConfig+0xd2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1a      	ldr	r2, [pc, #104]	; (8007b60 <TIM_OC1_SetConfig+0x128>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d007      	beq.n	8007b0a <TIM_OC1_SetConfig+0xd2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a19      	ldr	r2, [pc, #100]	; (8007b64 <TIM_OC1_SetConfig+0x12c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_OC1_SetConfig+0xd2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <TIM_OC1_SetConfig+0x130>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d111      	bne.n	8007b2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	621a      	str	r2, [r3, #32]
}
 8007b48:	bf00      	nop
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40013400 	.word	0x40013400
 8007b5c:	40014000 	.word	0x40014000
 8007b60:	40014400 	.word	0x40014400
 8007b64:	40014800 	.word	0x40014800
 8007b68:	40015000 	.word	0x40015000

08007b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	f023 0210 	bic.w	r2, r3, #16
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f023 0320 	bic.w	r3, r3, #32
 8007bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a2c      	ldr	r2, [pc, #176]	; (8007c7c <TIM_OC2_SetConfig+0x110>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d007      	beq.n	8007be0 <TIM_OC2_SetConfig+0x74>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a2b      	ldr	r2, [pc, #172]	; (8007c80 <TIM_OC2_SetConfig+0x114>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_OC2_SetConfig+0x74>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <TIM_OC2_SetConfig+0x118>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10d      	bne.n	8007bfc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <TIM_OC2_SetConfig+0x110>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <TIM_OC2_SetConfig+0xc0>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a1e      	ldr	r2, [pc, #120]	; (8007c80 <TIM_OC2_SetConfig+0x114>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00f      	beq.n	8007c2c <TIM_OC2_SetConfig+0xc0>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <TIM_OC2_SetConfig+0x11c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00b      	beq.n	8007c2c <TIM_OC2_SetConfig+0xc0>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <TIM_OC2_SetConfig+0x120>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d007      	beq.n	8007c2c <TIM_OC2_SetConfig+0xc0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <TIM_OC2_SetConfig+0x124>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d003      	beq.n	8007c2c <TIM_OC2_SetConfig+0xc0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a17      	ldr	r2, [pc, #92]	; (8007c84 <TIM_OC2_SetConfig+0x118>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d113      	bne.n	8007c54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40013400 	.word	0x40013400
 8007c84:	40015000 	.word	0x40015000
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400
 8007c90:	40014800 	.word	0x40014800

08007c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a2b      	ldr	r2, [pc, #172]	; (8007da0 <TIM_OC3_SetConfig+0x10c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d007      	beq.n	8007d06 <TIM_OC3_SetConfig+0x72>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a2a      	ldr	r2, [pc, #168]	; (8007da4 <TIM_OC3_SetConfig+0x110>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC3_SetConfig+0x72>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a29      	ldr	r2, [pc, #164]	; (8007da8 <TIM_OC3_SetConfig+0x114>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10d      	bne.n	8007d22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a1e      	ldr	r2, [pc, #120]	; (8007da0 <TIM_OC3_SetConfig+0x10c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <TIM_OC3_SetConfig+0xbe>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <TIM_OC3_SetConfig+0x110>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00f      	beq.n	8007d52 <TIM_OC3_SetConfig+0xbe>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a1d      	ldr	r2, [pc, #116]	; (8007dac <TIM_OC3_SetConfig+0x118>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00b      	beq.n	8007d52 <TIM_OC3_SetConfig+0xbe>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a1c      	ldr	r2, [pc, #112]	; (8007db0 <TIM_OC3_SetConfig+0x11c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d007      	beq.n	8007d52 <TIM_OC3_SetConfig+0xbe>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1b      	ldr	r2, [pc, #108]	; (8007db4 <TIM_OC3_SetConfig+0x120>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d003      	beq.n	8007d52 <TIM_OC3_SetConfig+0xbe>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <TIM_OC3_SetConfig+0x114>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d113      	bne.n	8007d7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	621a      	str	r2, [r3, #32]
}
 8007d94:	bf00      	nop
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40013400 	.word	0x40013400
 8007da8:	40015000 	.word	0x40015000
 8007dac:	40014000 	.word	0x40014000
 8007db0:	40014400 	.word	0x40014400
 8007db4:	40014800 	.word	0x40014800

08007db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	031b      	lsls	r3, r3, #12
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a2c      	ldr	r2, [pc, #176]	; (8007ec8 <TIM_OC4_SetConfig+0x110>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d007      	beq.n	8007e2c <TIM_OC4_SetConfig+0x74>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a2b      	ldr	r2, [pc, #172]	; (8007ecc <TIM_OC4_SetConfig+0x114>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_OC4_SetConfig+0x74>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a2a      	ldr	r2, [pc, #168]	; (8007ed0 <TIM_OC4_SetConfig+0x118>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d10d      	bne.n	8007e48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	031b      	lsls	r3, r3, #12
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a1f      	ldr	r2, [pc, #124]	; (8007ec8 <TIM_OC4_SetConfig+0x110>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <TIM_OC4_SetConfig+0xc0>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <TIM_OC4_SetConfig+0x114>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00f      	beq.n	8007e78 <TIM_OC4_SetConfig+0xc0>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ed4 <TIM_OC4_SetConfig+0x11c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00b      	beq.n	8007e78 <TIM_OC4_SetConfig+0xc0>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a1d      	ldr	r2, [pc, #116]	; (8007ed8 <TIM_OC4_SetConfig+0x120>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <TIM_OC4_SetConfig+0xc0>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1c      	ldr	r2, [pc, #112]	; (8007edc <TIM_OC4_SetConfig+0x124>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC4_SetConfig+0xc0>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <TIM_OC4_SetConfig+0x118>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d113      	bne.n	8007ea0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	019b      	lsls	r3, r3, #6
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	019b      	lsls	r3, r3, #6
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40013400 	.word	0x40013400
 8007ed0:	40015000 	.word	0x40015000
 8007ed4:	40014000 	.word	0x40014000
 8007ed8:	40014400 	.word	0x40014400
 8007edc:	40014800 	.word	0x40014800

08007ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <TIM_OC5_SetConfig+0xbc>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <TIM_OC5_SetConfig+0x82>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a18      	ldr	r2, [pc, #96]	; (8007fa0 <TIM_OC5_SetConfig+0xc0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00f      	beq.n	8007f62 <TIM_OC5_SetConfig+0x82>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a17      	ldr	r2, [pc, #92]	; (8007fa4 <TIM_OC5_SetConfig+0xc4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <TIM_OC5_SetConfig+0x82>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <TIM_OC5_SetConfig+0xc8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d007      	beq.n	8007f62 <TIM_OC5_SetConfig+0x82>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <TIM_OC5_SetConfig+0xcc>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_OC5_SetConfig+0x82>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <TIM_OC5_SetConfig+0xd0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d109      	bne.n	8007f76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	40012c00 	.word	0x40012c00
 8007fa0:	40013400 	.word	0x40013400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40014400 	.word	0x40014400
 8007fac:	40014800 	.word	0x40014800
 8007fb0:	40015000 	.word	0x40015000

08007fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	021b      	lsls	r3, r3, #8
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	051b      	lsls	r3, r3, #20
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <TIM_OC6_SetConfig+0xc0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <TIM_OC6_SetConfig+0x84>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a19      	ldr	r2, [pc, #100]	; (8008078 <TIM_OC6_SetConfig+0xc4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d00f      	beq.n	8008038 <TIM_OC6_SetConfig+0x84>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a18      	ldr	r2, [pc, #96]	; (800807c <TIM_OC6_SetConfig+0xc8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00b      	beq.n	8008038 <TIM_OC6_SetConfig+0x84>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <TIM_OC6_SetConfig+0xcc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d007      	beq.n	8008038 <TIM_OC6_SetConfig+0x84>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a16      	ldr	r2, [pc, #88]	; (8008084 <TIM_OC6_SetConfig+0xd0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_OC6_SetConfig+0x84>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a15      	ldr	r2, [pc, #84]	; (8008088 <TIM_OC6_SetConfig+0xd4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d109      	bne.n	800804c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	029b      	lsls	r3, r3, #10
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40013400 	.word	0x40013400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800
 8008088:	40015000 	.word	0x40015000

0800808c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	f023 0201 	bic.w	r2, r3, #1
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4a28      	ldr	r2, [pc, #160]	; (8008158 <TIM_TI1_SetConfig+0xcc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01b      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c0:	d017      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a25      	ldr	r2, [pc, #148]	; (800815c <TIM_TI1_SetConfig+0xd0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d013      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4a24      	ldr	r2, [pc, #144]	; (8008160 <TIM_TI1_SetConfig+0xd4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00f      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4a23      	ldr	r2, [pc, #140]	; (8008164 <TIM_TI1_SetConfig+0xd8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00b      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4a22      	ldr	r2, [pc, #136]	; (8008168 <TIM_TI1_SetConfig+0xdc>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d007      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4a21      	ldr	r2, [pc, #132]	; (800816c <TIM_TI1_SetConfig+0xe0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <TIM_TI1_SetConfig+0x66>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4a20      	ldr	r2, [pc, #128]	; (8008170 <TIM_TI1_SetConfig+0xe4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d101      	bne.n	80080f6 <TIM_TI1_SetConfig+0x6a>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <TIM_TI1_SetConfig+0x6c>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4313      	orrs	r3, r2
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e003      	b.n	8008116 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f043 0301 	orr.w	r3, r3, #1
 8008114:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800811c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	b2db      	uxtb	r3, r3
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f023 030a 	bic.w	r3, r3, #10
 8008130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f003 030a 	and.w	r3, r3, #10
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	621a      	str	r2, [r3, #32]
}
 800814a:	bf00      	nop
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40012c00 	.word	0x40012c00
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40013400 	.word	0x40013400
 800816c:	40014000 	.word	0x40014000
 8008170:	40015000 	.word	0x40015000

08008174 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f023 0210 	bic.w	r2, r3, #16
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	031b      	lsls	r3, r3, #12
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	621a      	str	r2, [r3, #32]
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b087      	sub	sp, #28
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800822a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	b2db      	uxtb	r3, r3
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800823e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008266:	b480      	push	{r7}
 8008268:	b087      	sub	sp, #28
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008292:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	031b      	lsls	r3, r3, #12
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	031b      	lsls	r3, r3, #12
 80082be:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	621a      	str	r2, [r3, #32]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	2201      	movs	r2, #1
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1a      	ldr	r2, [r3, #32]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	43db      	mvns	r3, r3
 8008302:	401a      	ands	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1a      	ldr	r2, [r3, #32]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	431a      	orrs	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d109      	bne.n	8008350 <HAL_TIMEx_PWMN_Start+0x24>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	bf14      	ite	ne
 8008348:	2301      	movne	r3, #1
 800834a:	2300      	moveq	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	e022      	b.n	8008396 <HAL_TIMEx_PWMN_Start+0x6a>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b04      	cmp	r3, #4
 8008354:	d109      	bne.n	800836a <HAL_TIMEx_PWMN_Start+0x3e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b01      	cmp	r3, #1
 8008360:	bf14      	ite	ne
 8008362:	2301      	movne	r3, #1
 8008364:	2300      	moveq	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	e015      	b.n	8008396 <HAL_TIMEx_PWMN_Start+0x6a>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b08      	cmp	r3, #8
 800836e:	d109      	bne.n	8008384 <HAL_TIMEx_PWMN_Start+0x58>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	bf14      	ite	ne
 800837c:	2301      	movne	r3, #1
 800837e:	2300      	moveq	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	e008      	b.n	8008396 <HAL_TIMEx_PWMN_Start+0x6a>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	bf14      	ite	ne
 8008390:	2301      	movne	r3, #1
 8008392:	2300      	moveq	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e073      	b.n	8008486 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d104      	bne.n	80083ae <HAL_TIMEx_PWMN_Start+0x82>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ac:	e013      	b.n	80083d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d104      	bne.n	80083be <HAL_TIMEx_PWMN_Start+0x92>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083bc:	e00b      	b.n	80083d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d104      	bne.n	80083ce <HAL_TIMEx_PWMN_Start+0xa2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083cc:	e003      	b.n	80083d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2202      	movs	r2, #2
 80083d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2204      	movs	r2, #4
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 f9d6 	bl	8008790 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a25      	ldr	r2, [pc, #148]	; (8008490 <HAL_TIMEx_PWMN_Start+0x164>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d022      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d01d      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a21      	ldr	r2, [pc, #132]	; (8008494 <HAL_TIMEx_PWMN_Start+0x168>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d018      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a20      	ldr	r2, [pc, #128]	; (8008498 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d013      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1e      	ldr	r2, [pc, #120]	; (800849c <HAL_TIMEx_PWMN_Start+0x170>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00e      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <HAL_TIMEx_PWMN_Start+0x174>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d009      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <HAL_TIMEx_PWMN_Start+0x178>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <HAL_TIMEx_PWMN_Start+0x118>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d115      	bne.n	8008470 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	4b18      	ldr	r3, [pc, #96]	; (80084ac <HAL_TIMEx_PWMN_Start+0x180>)
 800844c:	4013      	ands	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b06      	cmp	r3, #6
 8008454:	d015      	beq.n	8008482 <HAL_TIMEx_PWMN_Start+0x156>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845c:	d011      	beq.n	8008482 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0201 	orr.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800846e:	e008      	b.n	8008482 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e000      	b.n	8008484 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40012c00 	.word	0x40012c00
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40013400 	.word	0x40013400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40015000 	.word	0x40015000
 80084ac:	00010007 	.word	0x00010007

080084b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e074      	b.n	80085b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a34      	ldr	r2, [pc, #208]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d009      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a33      	ldr	r2, [pc, #204]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d004      	beq.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a31      	ldr	r2, [pc, #196]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d108      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800850c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800851e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d022      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008548:	d01d      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a1f      	ldr	r2, [pc, #124]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d018      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1d      	ldr	r2, [pc, #116]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d013      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a1c      	ldr	r2, [pc, #112]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00e      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a15      	ldr	r2, [pc, #84]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d009      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d004      	beq.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d10c      	bne.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800858c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	4313      	orrs	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	40012c00 	.word	0x40012c00
 80085c4:	40013400 	.word	0x40013400
 80085c8:	40015000 	.word	0x40015000
 80085cc:	40000400 	.word	0x40000400
 80085d0:	40000800 	.word	0x40000800
 80085d4:	40000c00 	.word	0x40000c00
 80085d8:	40014000 	.word	0x40014000

080085dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e078      	b.n	80086ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	041b      	lsls	r3, r3, #16
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d009      	beq.n	800869e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d004      	beq.n	800869e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a19      	ldr	r2, [pc, #100]	; (8008700 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d11c      	bne.n	80086d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	051b      	lsls	r3, r3, #20
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40012c00 	.word	0x40012c00
 80086fc:	40013400 	.word	0x40013400
 8008700:	40015000 	.word	0x40015000

08008704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	2204      	movs	r2, #4
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1a      	ldr	r2, [r3, #32]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f003 030f 	and.w	r3, r3, #15
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	fa01 f303 	lsl.w	r3, r1, r3
 80087c8:	431a      	orrs	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	621a      	str	r2, [r3, #32]
}
 80087ce:	bf00      	nop
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <__errno>:
 80087dc:	4b01      	ldr	r3, [pc, #4]	; (80087e4 <__errno+0x8>)
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c

080087e8 <__libc_init_array>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	4d0d      	ldr	r5, [pc, #52]	; (8008820 <__libc_init_array+0x38>)
 80087ec:	4c0d      	ldr	r4, [pc, #52]	; (8008824 <__libc_init_array+0x3c>)
 80087ee:	1b64      	subs	r4, r4, r5
 80087f0:	10a4      	asrs	r4, r4, #2
 80087f2:	2600      	movs	r6, #0
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	d109      	bne.n	800880c <__libc_init_array+0x24>
 80087f8:	4d0b      	ldr	r5, [pc, #44]	; (8008828 <__libc_init_array+0x40>)
 80087fa:	4c0c      	ldr	r4, [pc, #48]	; (800882c <__libc_init_array+0x44>)
 80087fc:	f001 f808 	bl	8009810 <_init>
 8008800:	1b64      	subs	r4, r4, r5
 8008802:	10a4      	asrs	r4, r4, #2
 8008804:	2600      	movs	r6, #0
 8008806:	42a6      	cmp	r6, r4
 8008808:	d105      	bne.n	8008816 <__libc_init_array+0x2e>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008810:	4798      	blx	r3
 8008812:	3601      	adds	r6, #1
 8008814:	e7ee      	b.n	80087f4 <__libc_init_array+0xc>
 8008816:	f855 3b04 	ldr.w	r3, [r5], #4
 800881a:	4798      	blx	r3
 800881c:	3601      	adds	r6, #1
 800881e:	e7f2      	b.n	8008806 <__libc_init_array+0x1e>
 8008820:	08009c48 	.word	0x08009c48
 8008824:	08009c48 	.word	0x08009c48
 8008828:	08009c48 	.word	0x08009c48
 800882c:	08009c4c 	.word	0x08009c4c

08008830 <memcpy>:
 8008830:	440a      	add	r2, r1
 8008832:	4291      	cmp	r1, r2
 8008834:	f100 33ff 	add.w	r3, r0, #4294967295
 8008838:	d100      	bne.n	800883c <memcpy+0xc>
 800883a:	4770      	bx	lr
 800883c:	b510      	push	{r4, lr}
 800883e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008846:	4291      	cmp	r1, r2
 8008848:	d1f9      	bne.n	800883e <memcpy+0xe>
 800884a:	bd10      	pop	{r4, pc}

0800884c <memset>:
 800884c:	4402      	add	r2, r0
 800884e:	4603      	mov	r3, r0
 8008850:	4293      	cmp	r3, r2
 8008852:	d100      	bne.n	8008856 <memset+0xa>
 8008854:	4770      	bx	lr
 8008856:	f803 1b01 	strb.w	r1, [r3], #1
 800885a:	e7f9      	b.n	8008850 <memset+0x4>

0800885c <cosf>:
 800885c:	ee10 3a10 	vmov	r3, s0
 8008860:	b507      	push	{r0, r1, r2, lr}
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <cosf+0x80>)
 8008864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008868:	4293      	cmp	r3, r2
 800886a:	dc06      	bgt.n	800887a <cosf+0x1e>
 800886c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80088e0 <cosf+0x84>
 8008870:	b003      	add	sp, #12
 8008872:	f85d eb04 	ldr.w	lr, [sp], #4
 8008876:	f000 bb1d 	b.w	8008eb4 <__kernel_cosf>
 800887a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800887e:	db04      	blt.n	800888a <cosf+0x2e>
 8008880:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008884:	b003      	add	sp, #12
 8008886:	f85d fb04 	ldr.w	pc, [sp], #4
 800888a:	4668      	mov	r0, sp
 800888c:	f000 f9d2 	bl	8008c34 <__ieee754_rem_pio2f>
 8008890:	f000 0003 	and.w	r0, r0, #3
 8008894:	2801      	cmp	r0, #1
 8008896:	d009      	beq.n	80088ac <cosf+0x50>
 8008898:	2802      	cmp	r0, #2
 800889a:	d010      	beq.n	80088be <cosf+0x62>
 800889c:	b9b0      	cbnz	r0, 80088cc <cosf+0x70>
 800889e:	eddd 0a01 	vldr	s1, [sp, #4]
 80088a2:	ed9d 0a00 	vldr	s0, [sp]
 80088a6:	f000 fb05 	bl	8008eb4 <__kernel_cosf>
 80088aa:	e7eb      	b.n	8008884 <cosf+0x28>
 80088ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80088b0:	ed9d 0a00 	vldr	s0, [sp]
 80088b4:	f000 fdd4 	bl	8009460 <__kernel_sinf>
 80088b8:	eeb1 0a40 	vneg.f32	s0, s0
 80088bc:	e7e2      	b.n	8008884 <cosf+0x28>
 80088be:	eddd 0a01 	vldr	s1, [sp, #4]
 80088c2:	ed9d 0a00 	vldr	s0, [sp]
 80088c6:	f000 faf5 	bl	8008eb4 <__kernel_cosf>
 80088ca:	e7f5      	b.n	80088b8 <cosf+0x5c>
 80088cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80088d0:	ed9d 0a00 	vldr	s0, [sp]
 80088d4:	2001      	movs	r0, #1
 80088d6:	f000 fdc3 	bl	8009460 <__kernel_sinf>
 80088da:	e7d3      	b.n	8008884 <cosf+0x28>
 80088dc:	3f490fd8 	.word	0x3f490fd8
 80088e0:	00000000 	.word	0x00000000

080088e4 <sinf>:
 80088e4:	ee10 3a10 	vmov	r3, s0
 80088e8:	b507      	push	{r0, r1, r2, lr}
 80088ea:	4a1f      	ldr	r2, [pc, #124]	; (8008968 <sinf+0x84>)
 80088ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088f0:	4293      	cmp	r3, r2
 80088f2:	dc07      	bgt.n	8008904 <sinf+0x20>
 80088f4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800896c <sinf+0x88>
 80088f8:	2000      	movs	r0, #0
 80088fa:	b003      	add	sp, #12
 80088fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008900:	f000 bdae 	b.w	8009460 <__kernel_sinf>
 8008904:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008908:	db04      	blt.n	8008914 <sinf+0x30>
 800890a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800890e:	b003      	add	sp, #12
 8008910:	f85d fb04 	ldr.w	pc, [sp], #4
 8008914:	4668      	mov	r0, sp
 8008916:	f000 f98d 	bl	8008c34 <__ieee754_rem_pio2f>
 800891a:	f000 0003 	and.w	r0, r0, #3
 800891e:	2801      	cmp	r0, #1
 8008920:	d00a      	beq.n	8008938 <sinf+0x54>
 8008922:	2802      	cmp	r0, #2
 8008924:	d00f      	beq.n	8008946 <sinf+0x62>
 8008926:	b9c0      	cbnz	r0, 800895a <sinf+0x76>
 8008928:	eddd 0a01 	vldr	s1, [sp, #4]
 800892c:	ed9d 0a00 	vldr	s0, [sp]
 8008930:	2001      	movs	r0, #1
 8008932:	f000 fd95 	bl	8009460 <__kernel_sinf>
 8008936:	e7ea      	b.n	800890e <sinf+0x2a>
 8008938:	eddd 0a01 	vldr	s1, [sp, #4]
 800893c:	ed9d 0a00 	vldr	s0, [sp]
 8008940:	f000 fab8 	bl	8008eb4 <__kernel_cosf>
 8008944:	e7e3      	b.n	800890e <sinf+0x2a>
 8008946:	eddd 0a01 	vldr	s1, [sp, #4]
 800894a:	ed9d 0a00 	vldr	s0, [sp]
 800894e:	2001      	movs	r0, #1
 8008950:	f000 fd86 	bl	8009460 <__kernel_sinf>
 8008954:	eeb1 0a40 	vneg.f32	s0, s0
 8008958:	e7d9      	b.n	800890e <sinf+0x2a>
 800895a:	eddd 0a01 	vldr	s1, [sp, #4]
 800895e:	ed9d 0a00 	vldr	s0, [sp]
 8008962:	f000 faa7 	bl	8008eb4 <__kernel_cosf>
 8008966:	e7f5      	b.n	8008954 <sinf+0x70>
 8008968:	3f490fd8 	.word	0x3f490fd8
 800896c:	00000000 	.word	0x00000000

08008970 <atan2f>:
 8008970:	f000 b83e 	b.w	80089f0 <__ieee754_atan2f>

08008974 <fmodf>:
 8008974:	b508      	push	{r3, lr}
 8008976:	ed2d 8b02 	vpush	{d8}
 800897a:	eef0 8a40 	vmov.f32	s17, s0
 800897e:	eeb0 8a60 	vmov.f32	s16, s1
 8008982:	f000 f8d5 	bl	8008b30 <__ieee754_fmodf>
 8008986:	eef4 8a48 	vcmp.f32	s17, s16
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	d60c      	bvs.n	80089aa <fmodf+0x36>
 8008990:	eddf 8a07 	vldr	s17, [pc, #28]	; 80089b0 <fmodf+0x3c>
 8008994:	eeb4 8a68 	vcmp.f32	s16, s17
 8008998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899c:	d105      	bne.n	80089aa <fmodf+0x36>
 800899e:	f7ff ff1d 	bl	80087dc <__errno>
 80089a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80089a6:	2321      	movs	r3, #33	; 0x21
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	ecbd 8b02 	vpop	{d8}
 80089ae:	bd08      	pop	{r3, pc}
 80089b0:	00000000 	.word	0x00000000

080089b4 <sqrtf>:
 80089b4:	b508      	push	{r3, lr}
 80089b6:	ed2d 8b02 	vpush	{d8}
 80089ba:	eeb0 8a40 	vmov.f32	s16, s0
 80089be:	f000 fa75 	bl	8008eac <__ieee754_sqrtf>
 80089c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80089c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ca:	d60c      	bvs.n	80089e6 <sqrtf+0x32>
 80089cc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80089ec <sqrtf+0x38>
 80089d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80089d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d8:	d505      	bpl.n	80089e6 <sqrtf+0x32>
 80089da:	f7ff feff 	bl	80087dc <__errno>
 80089de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80089e2:	2321      	movs	r3, #33	; 0x21
 80089e4:	6003      	str	r3, [r0, #0]
 80089e6:	ecbd 8b02 	vpop	{d8}
 80089ea:	bd08      	pop	{r3, pc}
 80089ec:	00000000 	.word	0x00000000

080089f0 <__ieee754_atan2f>:
 80089f0:	ee10 2a90 	vmov	r2, s1
 80089f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80089f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80089fc:	b510      	push	{r4, lr}
 80089fe:	eef0 7a40 	vmov.f32	s15, s0
 8008a02:	dc06      	bgt.n	8008a12 <__ieee754_atan2f+0x22>
 8008a04:	ee10 0a10 	vmov	r0, s0
 8008a08:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008a0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a10:	dd04      	ble.n	8008a1c <__ieee754_atan2f+0x2c>
 8008a12:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008a16:	eeb0 0a67 	vmov.f32	s0, s15
 8008a1a:	bd10      	pop	{r4, pc}
 8008a1c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008a20:	d103      	bne.n	8008a2a <__ieee754_atan2f+0x3a>
 8008a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a26:	f000 bd63 	b.w	80094f0 <atanf>
 8008a2a:	1794      	asrs	r4, r2, #30
 8008a2c:	f004 0402 	and.w	r4, r4, #2
 8008a30:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008a34:	b943      	cbnz	r3, 8008a48 <__ieee754_atan2f+0x58>
 8008a36:	2c02      	cmp	r4, #2
 8008a38:	d05e      	beq.n	8008af8 <__ieee754_atan2f+0x108>
 8008a3a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008b0c <__ieee754_atan2f+0x11c>
 8008a3e:	2c03      	cmp	r4, #3
 8008a40:	bf08      	it	eq
 8008a42:	eef0 7a47 	vmoveq.f32	s15, s14
 8008a46:	e7e6      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008a48:	b941      	cbnz	r1, 8008a5c <__ieee754_atan2f+0x6c>
 8008a4a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008b10 <__ieee754_atan2f+0x120>
 8008a4e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008b14 <__ieee754_atan2f+0x124>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	bfb8      	it	lt
 8008a56:	eef0 7a40 	vmovlt.f32	s15, s0
 8008a5a:	e7dc      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008a5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a60:	d110      	bne.n	8008a84 <__ieee754_atan2f+0x94>
 8008a62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a66:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a6a:	d107      	bne.n	8008a7c <__ieee754_atan2f+0x8c>
 8008a6c:	2c02      	cmp	r4, #2
 8008a6e:	d846      	bhi.n	8008afe <__ieee754_atan2f+0x10e>
 8008a70:	4b29      	ldr	r3, [pc, #164]	; (8008b18 <__ieee754_atan2f+0x128>)
 8008a72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a76:	edd4 7a00 	vldr	s15, [r4]
 8008a7a:	e7cc      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008a7c:	2c02      	cmp	r4, #2
 8008a7e:	d841      	bhi.n	8008b04 <__ieee754_atan2f+0x114>
 8008a80:	4b26      	ldr	r3, [pc, #152]	; (8008b1c <__ieee754_atan2f+0x12c>)
 8008a82:	e7f6      	b.n	8008a72 <__ieee754_atan2f+0x82>
 8008a84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a88:	d0df      	beq.n	8008a4a <__ieee754_atan2f+0x5a>
 8008a8a:	1a5b      	subs	r3, r3, r1
 8008a8c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008a90:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008a94:	da1a      	bge.n	8008acc <__ieee754_atan2f+0xdc>
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	da01      	bge.n	8008a9e <__ieee754_atan2f+0xae>
 8008a9a:	313c      	adds	r1, #60	; 0x3c
 8008a9c:	db19      	blt.n	8008ad2 <__ieee754_atan2f+0xe2>
 8008a9e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008aa2:	f000 fdf9 	bl	8009698 <fabsf>
 8008aa6:	f000 fd23 	bl	80094f0 <atanf>
 8008aaa:	eef0 7a40 	vmov.f32	s15, s0
 8008aae:	2c01      	cmp	r4, #1
 8008ab0:	d012      	beq.n	8008ad8 <__ieee754_atan2f+0xe8>
 8008ab2:	2c02      	cmp	r4, #2
 8008ab4:	d017      	beq.n	8008ae6 <__ieee754_atan2f+0xf6>
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	d0ad      	beq.n	8008a16 <__ieee754_atan2f+0x26>
 8008aba:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008b20 <__ieee754_atan2f+0x130>
 8008abe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ac2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008b24 <__ieee754_atan2f+0x134>
 8008ac6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008aca:	e7a4      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008acc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008b10 <__ieee754_atan2f+0x120>
 8008ad0:	e7ed      	b.n	8008aae <__ieee754_atan2f+0xbe>
 8008ad2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b28 <__ieee754_atan2f+0x138>
 8008ad6:	e7ea      	b.n	8008aae <__ieee754_atan2f+0xbe>
 8008ad8:	ee17 3a90 	vmov	r3, s15
 8008adc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	e797      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008ae6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008b20 <__ieee754_atan2f+0x130>
 8008aea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008aee:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008b24 <__ieee754_atan2f+0x134>
 8008af2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008af6:	e78e      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008af8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008b24 <__ieee754_atan2f+0x134>
 8008afc:	e78b      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008afe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008b2c <__ieee754_atan2f+0x13c>
 8008b02:	e788      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008b04:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b28 <__ieee754_atan2f+0x138>
 8008b08:	e785      	b.n	8008a16 <__ieee754_atan2f+0x26>
 8008b0a:	bf00      	nop
 8008b0c:	c0490fdb 	.word	0xc0490fdb
 8008b10:	3fc90fdb 	.word	0x3fc90fdb
 8008b14:	bfc90fdb 	.word	0xbfc90fdb
 8008b18:	08009838 	.word	0x08009838
 8008b1c:	08009844 	.word	0x08009844
 8008b20:	33bbbd2e 	.word	0x33bbbd2e
 8008b24:	40490fdb 	.word	0x40490fdb
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	3f490fdb 	.word	0x3f490fdb

08008b30 <__ieee754_fmodf>:
 8008b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b32:	ee10 5a90 	vmov	r5, s1
 8008b36:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8008b3a:	d009      	beq.n	8008b50 <__ieee754_fmodf+0x20>
 8008b3c:	ee10 2a10 	vmov	r2, s0
 8008b40:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008b44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b48:	da02      	bge.n	8008b50 <__ieee754_fmodf+0x20>
 8008b4a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008b4e:	dd04      	ble.n	8008b5a <__ieee754_fmodf+0x2a>
 8008b50:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008b54:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	dbfc      	blt.n	8008b58 <__ieee754_fmodf+0x28>
 8008b5e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8008b62:	d105      	bne.n	8008b70 <__ieee754_fmodf+0x40>
 8008b64:	4b32      	ldr	r3, [pc, #200]	; (8008c30 <__ieee754_fmodf+0x100>)
 8008b66:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8008b6a:	ed93 0a00 	vldr	s0, [r3]
 8008b6e:	e7f3      	b.n	8008b58 <__ieee754_fmodf+0x28>
 8008b70:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8008b74:	d13f      	bne.n	8008bf6 <__ieee754_fmodf+0xc6>
 8008b76:	0219      	lsls	r1, r3, #8
 8008b78:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	dc37      	bgt.n	8008bf0 <__ieee754_fmodf+0xc0>
 8008b80:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8008b84:	d13d      	bne.n	8008c02 <__ieee754_fmodf+0xd2>
 8008b86:	0227      	lsls	r7, r4, #8
 8008b88:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008b8c:	2f00      	cmp	r7, #0
 8008b8e:	da35      	bge.n	8008bfc <__ieee754_fmodf+0xcc>
 8008b90:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008b94:	bfbb      	ittet	lt
 8008b96:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008b9a:	1a12      	sublt	r2, r2, r0
 8008b9c:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008ba0:	4093      	lsllt	r3, r2
 8008ba2:	bfa8      	it	ge
 8008ba4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008ba8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008bac:	bfb5      	itete	lt
 8008bae:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008bb2:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8008bb6:	1a52      	sublt	r2, r2, r1
 8008bb8:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8008bbc:	bfb8      	it	lt
 8008bbe:	4094      	lsllt	r4, r2
 8008bc0:	1a40      	subs	r0, r0, r1
 8008bc2:	1b1a      	subs	r2, r3, r4
 8008bc4:	bb00      	cbnz	r0, 8008c08 <__ieee754_fmodf+0xd8>
 8008bc6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8008bca:	bf38      	it	cc
 8008bcc:	4613      	movcc	r3, r2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0c8      	beq.n	8008b64 <__ieee754_fmodf+0x34>
 8008bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bd6:	db1f      	blt.n	8008c18 <__ieee754_fmodf+0xe8>
 8008bd8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008bdc:	db1f      	blt.n	8008c1e <__ieee754_fmodf+0xee>
 8008bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008be2:	317f      	adds	r1, #127	; 0x7f
 8008be4:	4333      	orrs	r3, r6
 8008be6:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8008bea:	ee00 3a10 	vmov	s0, r3
 8008bee:	e7b3      	b.n	8008b58 <__ieee754_fmodf+0x28>
 8008bf0:	3801      	subs	r0, #1
 8008bf2:	0049      	lsls	r1, r1, #1
 8008bf4:	e7c2      	b.n	8008b7c <__ieee754_fmodf+0x4c>
 8008bf6:	15d8      	asrs	r0, r3, #23
 8008bf8:	387f      	subs	r0, #127	; 0x7f
 8008bfa:	e7c1      	b.n	8008b80 <__ieee754_fmodf+0x50>
 8008bfc:	3901      	subs	r1, #1
 8008bfe:	007f      	lsls	r7, r7, #1
 8008c00:	e7c4      	b.n	8008b8c <__ieee754_fmodf+0x5c>
 8008c02:	15e1      	asrs	r1, r4, #23
 8008c04:	397f      	subs	r1, #127	; 0x7f
 8008c06:	e7c3      	b.n	8008b90 <__ieee754_fmodf+0x60>
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	da02      	bge.n	8008c12 <__ieee754_fmodf+0xe2>
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	3801      	subs	r0, #1
 8008c10:	e7d7      	b.n	8008bc2 <__ieee754_fmodf+0x92>
 8008c12:	d0a7      	beq.n	8008b64 <__ieee754_fmodf+0x34>
 8008c14:	0053      	lsls	r3, r2, #1
 8008c16:	e7fa      	b.n	8008c0e <__ieee754_fmodf+0xde>
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	3901      	subs	r1, #1
 8008c1c:	e7d9      	b.n	8008bd2 <__ieee754_fmodf+0xa2>
 8008c1e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008c22:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8008c26:	3182      	adds	r1, #130	; 0x82
 8008c28:	410b      	asrs	r3, r1
 8008c2a:	4333      	orrs	r3, r6
 8008c2c:	e7dd      	b.n	8008bea <__ieee754_fmodf+0xba>
 8008c2e:	bf00      	nop
 8008c30:	08009850 	.word	0x08009850

08008c34 <__ieee754_rem_pio2f>:
 8008c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c36:	ee10 6a10 	vmov	r6, s0
 8008c3a:	4b8e      	ldr	r3, [pc, #568]	; (8008e74 <__ieee754_rem_pio2f+0x240>)
 8008c3c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008c40:	429d      	cmp	r5, r3
 8008c42:	b087      	sub	sp, #28
 8008c44:	eef0 7a40 	vmov.f32	s15, s0
 8008c48:	4604      	mov	r4, r0
 8008c4a:	dc05      	bgt.n	8008c58 <__ieee754_rem_pio2f+0x24>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	ed80 0a00 	vstr	s0, [r0]
 8008c52:	6043      	str	r3, [r0, #4]
 8008c54:	2000      	movs	r0, #0
 8008c56:	e01a      	b.n	8008c8e <__ieee754_rem_pio2f+0x5a>
 8008c58:	4b87      	ldr	r3, [pc, #540]	; (8008e78 <__ieee754_rem_pio2f+0x244>)
 8008c5a:	429d      	cmp	r5, r3
 8008c5c:	dc46      	bgt.n	8008cec <__ieee754_rem_pio2f+0xb8>
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008e7c <__ieee754_rem_pio2f+0x248>
 8008c64:	4b86      	ldr	r3, [pc, #536]	; (8008e80 <__ieee754_rem_pio2f+0x24c>)
 8008c66:	f025 050f 	bic.w	r5, r5, #15
 8008c6a:	dd1f      	ble.n	8008cac <__ieee754_rem_pio2f+0x78>
 8008c6c:	429d      	cmp	r5, r3
 8008c6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008c72:	d00e      	beq.n	8008c92 <__ieee754_rem_pio2f+0x5e>
 8008c74:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008e84 <__ieee754_rem_pio2f+0x250>
 8008c78:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008c7c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008c80:	ed80 0a00 	vstr	s0, [r0]
 8008c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c88:	2001      	movs	r0, #1
 8008c8a:	edc4 7a01 	vstr	s15, [r4, #4]
 8008c8e:	b007      	add	sp, #28
 8008c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c92:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008e88 <__ieee754_rem_pio2f+0x254>
 8008c96:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008e8c <__ieee754_rem_pio2f+0x258>
 8008c9a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008c9e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008ca2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ca6:	edc0 6a00 	vstr	s13, [r0]
 8008caa:	e7eb      	b.n	8008c84 <__ieee754_rem_pio2f+0x50>
 8008cac:	429d      	cmp	r5, r3
 8008cae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008cb2:	d00e      	beq.n	8008cd2 <__ieee754_rem_pio2f+0x9e>
 8008cb4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008e84 <__ieee754_rem_pio2f+0x250>
 8008cb8:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008cbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008cc0:	ed80 0a00 	vstr	s0, [r0]
 8008cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ccc:	edc4 7a01 	vstr	s15, [r4, #4]
 8008cd0:	e7dd      	b.n	8008c8e <__ieee754_rem_pio2f+0x5a>
 8008cd2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008e88 <__ieee754_rem_pio2f+0x254>
 8008cd6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008e8c <__ieee754_rem_pio2f+0x258>
 8008cda:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008cde:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008ce2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ce6:	edc0 6a00 	vstr	s13, [r0]
 8008cea:	e7eb      	b.n	8008cc4 <__ieee754_rem_pio2f+0x90>
 8008cec:	4b68      	ldr	r3, [pc, #416]	; (8008e90 <__ieee754_rem_pio2f+0x25c>)
 8008cee:	429d      	cmp	r5, r3
 8008cf0:	dc72      	bgt.n	8008dd8 <__ieee754_rem_pio2f+0x1a4>
 8008cf2:	f000 fcd1 	bl	8009698 <fabsf>
 8008cf6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008e94 <__ieee754_rem_pio2f+0x260>
 8008cfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008cfe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d0a:	ee17 0a90 	vmov	r0, s15
 8008d0e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008e7c <__ieee754_rem_pio2f+0x248>
 8008d12:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008d16:	281f      	cmp	r0, #31
 8008d18:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008e84 <__ieee754_rem_pio2f+0x250>
 8008d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d20:	eeb1 6a47 	vneg.f32	s12, s14
 8008d24:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008d28:	ee16 2a90 	vmov	r2, s13
 8008d2c:	dc1c      	bgt.n	8008d68 <__ieee754_rem_pio2f+0x134>
 8008d2e:	495a      	ldr	r1, [pc, #360]	; (8008e98 <__ieee754_rem_pio2f+0x264>)
 8008d30:	1e47      	subs	r7, r0, #1
 8008d32:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008d36:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008d3a:	428b      	cmp	r3, r1
 8008d3c:	d014      	beq.n	8008d68 <__ieee754_rem_pio2f+0x134>
 8008d3e:	6022      	str	r2, [r4, #0]
 8008d40:	ed94 7a00 	vldr	s14, [r4]
 8008d44:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d4e:	ed84 0a01 	vstr	s0, [r4, #4]
 8008d52:	da9c      	bge.n	8008c8e <__ieee754_rem_pio2f+0x5a>
 8008d54:	eeb1 7a47 	vneg.f32	s14, s14
 8008d58:	eeb1 0a40 	vneg.f32	s0, s0
 8008d5c:	ed84 7a00 	vstr	s14, [r4]
 8008d60:	ed84 0a01 	vstr	s0, [r4, #4]
 8008d64:	4240      	negs	r0, r0
 8008d66:	e792      	b.n	8008c8e <__ieee754_rem_pio2f+0x5a>
 8008d68:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008d6c:	15eb      	asrs	r3, r5, #23
 8008d6e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008d72:	2d08      	cmp	r5, #8
 8008d74:	dde3      	ble.n	8008d3e <__ieee754_rem_pio2f+0x10a>
 8008d76:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008e88 <__ieee754_rem_pio2f+0x254>
 8008d7a:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e8c <__ieee754_rem_pio2f+0x258>
 8008d7e:	eef0 6a40 	vmov.f32	s13, s0
 8008d82:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d86:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008d8a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008d8e:	eef0 7a40 	vmov.f32	s15, s0
 8008d92:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008d96:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008d9a:	ee15 2a90 	vmov	r2, s11
 8008d9e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008da2:	1a5b      	subs	r3, r3, r1
 8008da4:	2b19      	cmp	r3, #25
 8008da6:	dc04      	bgt.n	8008db2 <__ieee754_rem_pio2f+0x17e>
 8008da8:	edc4 5a00 	vstr	s11, [r4]
 8008dac:	eeb0 0a66 	vmov.f32	s0, s13
 8008db0:	e7c6      	b.n	8008d40 <__ieee754_rem_pio2f+0x10c>
 8008db2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008e9c <__ieee754_rem_pio2f+0x268>
 8008db6:	eeb0 0a66 	vmov.f32	s0, s13
 8008dba:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008dbe:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008dc2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008ea0 <__ieee754_rem_pio2f+0x26c>
 8008dc6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008dca:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008dce:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008dd2:	ed84 7a00 	vstr	s14, [r4]
 8008dd6:	e7b3      	b.n	8008d40 <__ieee754_rem_pio2f+0x10c>
 8008dd8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008ddc:	db06      	blt.n	8008dec <__ieee754_rem_pio2f+0x1b8>
 8008dde:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008de2:	edc0 7a01 	vstr	s15, [r0, #4]
 8008de6:	edc0 7a00 	vstr	s15, [r0]
 8008dea:	e733      	b.n	8008c54 <__ieee754_rem_pio2f+0x20>
 8008dec:	15ea      	asrs	r2, r5, #23
 8008dee:	3a86      	subs	r2, #134	; 0x86
 8008df0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008dfc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008ea4 <__ieee754_rem_pio2f+0x270>
 8008e00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e08:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008e0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008e10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e1c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008e24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2c:	edcd 7a05 	vstr	s15, [sp, #20]
 8008e30:	d11e      	bne.n	8008e70 <__ieee754_rem_pio2f+0x23c>
 8008e32:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	bf14      	ite	ne
 8008e3c:	2302      	movne	r3, #2
 8008e3e:	2301      	moveq	r3, #1
 8008e40:	4919      	ldr	r1, [pc, #100]	; (8008ea8 <__ieee754_rem_pio2f+0x274>)
 8008e42:	9101      	str	r1, [sp, #4]
 8008e44:	2102      	movs	r1, #2
 8008e46:	9100      	str	r1, [sp, #0]
 8008e48:	a803      	add	r0, sp, #12
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	f000 f892 	bl	8008f74 <__kernel_rem_pio2f>
 8008e50:	2e00      	cmp	r6, #0
 8008e52:	f6bf af1c 	bge.w	8008c8e <__ieee754_rem_pio2f+0x5a>
 8008e56:	edd4 7a00 	vldr	s15, [r4]
 8008e5a:	eef1 7a67 	vneg.f32	s15, s15
 8008e5e:	edc4 7a00 	vstr	s15, [r4]
 8008e62:	edd4 7a01 	vldr	s15, [r4, #4]
 8008e66:	eef1 7a67 	vneg.f32	s15, s15
 8008e6a:	edc4 7a01 	vstr	s15, [r4, #4]
 8008e6e:	e779      	b.n	8008d64 <__ieee754_rem_pio2f+0x130>
 8008e70:	2303      	movs	r3, #3
 8008e72:	e7e5      	b.n	8008e40 <__ieee754_rem_pio2f+0x20c>
 8008e74:	3f490fd8 	.word	0x3f490fd8
 8008e78:	4016cbe3 	.word	0x4016cbe3
 8008e7c:	3fc90f80 	.word	0x3fc90f80
 8008e80:	3fc90fd0 	.word	0x3fc90fd0
 8008e84:	37354443 	.word	0x37354443
 8008e88:	37354400 	.word	0x37354400
 8008e8c:	2e85a308 	.word	0x2e85a308
 8008e90:	43490f80 	.word	0x43490f80
 8008e94:	3f22f984 	.word	0x3f22f984
 8008e98:	08009858 	.word	0x08009858
 8008e9c:	2e85a300 	.word	0x2e85a300
 8008ea0:	248d3132 	.word	0x248d3132
 8008ea4:	43800000 	.word	0x43800000
 8008ea8:	080098d8 	.word	0x080098d8

08008eac <__ieee754_sqrtf>:
 8008eac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008eb0:	4770      	bx	lr
	...

08008eb4 <__kernel_cosf>:
 8008eb4:	ee10 3a10 	vmov	r3, s0
 8008eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ebc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008ec0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008ec4:	da05      	bge.n	8008ed2 <__kernel_cosf+0x1e>
 8008ec6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008eca:	ee17 2a90 	vmov	r2, s15
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	d03d      	beq.n	8008f4e <__kernel_cosf+0x9a>
 8008ed2:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008ed6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008f54 <__kernel_cosf+0xa0>
 8008eda:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008f58 <__kernel_cosf+0xa4>
 8008ede:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008f5c <__kernel_cosf+0xa8>
 8008ee2:	4a1f      	ldr	r2, [pc, #124]	; (8008f60 <__kernel_cosf+0xac>)
 8008ee4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008f64 <__kernel_cosf+0xb0>
 8008eee:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008ef2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008f68 <__kernel_cosf+0xb4>
 8008ef6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008efa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008f6c <__kernel_cosf+0xb8>
 8008efe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008f02:	eeb0 7a66 	vmov.f32	s14, s13
 8008f06:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008f0a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008f0e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008f12:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008f16:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008f1a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008f1e:	dc04      	bgt.n	8008f2a <__kernel_cosf+0x76>
 8008f20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008f24:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008f28:	4770      	bx	lr
 8008f2a:	4a11      	ldr	r2, [pc, #68]	; (8008f70 <__kernel_cosf+0xbc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	bfda      	itte	le
 8008f30:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008f34:	ee06 3a90 	vmovle	s13, r3
 8008f38:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008f3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f40:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008f44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f48:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f4c:	4770      	bx	lr
 8008f4e:	eeb0 0a46 	vmov.f32	s0, s12
 8008f52:	4770      	bx	lr
 8008f54:	ad47d74e 	.word	0xad47d74e
 8008f58:	310f74f6 	.word	0x310f74f6
 8008f5c:	3d2aaaab 	.word	0x3d2aaaab
 8008f60:	3e999999 	.word	0x3e999999
 8008f64:	b493f27c 	.word	0xb493f27c
 8008f68:	37d00d01 	.word	0x37d00d01
 8008f6c:	bab60b61 	.word	0xbab60b61
 8008f70:	3f480000 	.word	0x3f480000

08008f74 <__kernel_rem_pio2f>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	ed2d 8b04 	vpush	{d8-d9}
 8008f7c:	b0d9      	sub	sp, #356	; 0x164
 8008f7e:	4688      	mov	r8, r1
 8008f80:	9002      	str	r0, [sp, #8]
 8008f82:	49bb      	ldr	r1, [pc, #748]	; (8009270 <__kernel_rem_pio2f+0x2fc>)
 8008f84:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008f8c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008f90:	1e59      	subs	r1, r3, #1
 8008f92:	1d13      	adds	r3, r2, #4
 8008f94:	db27      	blt.n	8008fe6 <__kernel_rem_pio2f+0x72>
 8008f96:	f1b2 0b03 	subs.w	fp, r2, #3
 8008f9a:	bf48      	it	mi
 8008f9c:	f102 0b04 	addmi.w	fp, r2, #4
 8008fa0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008fa4:	1c45      	adds	r5, r0, #1
 8008fa6:	00ec      	lsls	r4, r5, #3
 8008fa8:	1a47      	subs	r7, r0, r1
 8008faa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009280 <__kernel_rem_pio2f+0x30c>
 8008fae:	9403      	str	r4, [sp, #12]
 8008fb0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008fb4:	eb0a 0c01 	add.w	ip, sl, r1
 8008fb8:	ae1c      	add	r6, sp, #112	; 0x70
 8008fba:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008fbe:	2400      	movs	r4, #0
 8008fc0:	4564      	cmp	r4, ip
 8008fc2:	dd12      	ble.n	8008fea <__kernel_rem_pio2f+0x76>
 8008fc4:	9b01      	ldr	r3, [sp, #4]
 8008fc6:	ac1c      	add	r4, sp, #112	; 0x70
 8008fc8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008fcc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008fd0:	f04f 0c00 	mov.w	ip, #0
 8008fd4:	45d4      	cmp	ip, sl
 8008fd6:	dc27      	bgt.n	8009028 <__kernel_rem_pio2f+0xb4>
 8008fd8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008fdc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009280 <__kernel_rem_pio2f+0x30c>
 8008fe0:	4627      	mov	r7, r4
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	e016      	b.n	8009014 <__kernel_rem_pio2f+0xa0>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e7dc      	b.n	8008fa4 <__kernel_rem_pio2f+0x30>
 8008fea:	42e7      	cmn	r7, r4
 8008fec:	bf5d      	ittte	pl
 8008fee:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008ff2:	ee07 3a90 	vmovpl	s15, r3
 8008ff6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008ffa:	eef0 7a47 	vmovmi.f32	s15, s14
 8008ffe:	ece6 7a01 	vstmia	r6!, {s15}
 8009002:	3401      	adds	r4, #1
 8009004:	e7dc      	b.n	8008fc0 <__kernel_rem_pio2f+0x4c>
 8009006:	ecf9 6a01 	vldmia	r9!, {s13}
 800900a:	ed97 7a00 	vldr	s14, [r7]
 800900e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009012:	3601      	adds	r6, #1
 8009014:	428e      	cmp	r6, r1
 8009016:	f1a7 0704 	sub.w	r7, r7, #4
 800901a:	ddf4      	ble.n	8009006 <__kernel_rem_pio2f+0x92>
 800901c:	eceb 7a01 	vstmia	fp!, {s15}
 8009020:	f10c 0c01 	add.w	ip, ip, #1
 8009024:	3404      	adds	r4, #4
 8009026:	e7d5      	b.n	8008fd4 <__kernel_rem_pio2f+0x60>
 8009028:	ab08      	add	r3, sp, #32
 800902a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800902e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800927c <__kernel_rem_pio2f+0x308>
 8009032:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009278 <__kernel_rem_pio2f+0x304>
 8009036:	9304      	str	r3, [sp, #16]
 8009038:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800903c:	4656      	mov	r6, sl
 800903e:	00b3      	lsls	r3, r6, #2
 8009040:	9305      	str	r3, [sp, #20]
 8009042:	ab58      	add	r3, sp, #352	; 0x160
 8009044:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009048:	ac08      	add	r4, sp, #32
 800904a:	ab44      	add	r3, sp, #272	; 0x110
 800904c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009050:	46a4      	mov	ip, r4
 8009052:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009056:	4637      	mov	r7, r6
 8009058:	2f00      	cmp	r7, #0
 800905a:	f1a0 0004 	sub.w	r0, r0, #4
 800905e:	dc4f      	bgt.n	8009100 <__kernel_rem_pio2f+0x18c>
 8009060:	4628      	mov	r0, r5
 8009062:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009066:	f000 fb61 	bl	800972c <scalbnf>
 800906a:	eeb0 8a40 	vmov.f32	s16, s0
 800906e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009072:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009076:	f000 fb17 	bl	80096a8 <floorf>
 800907a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800907e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009082:	2d00      	cmp	r5, #0
 8009084:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009088:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800908c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009090:	ee17 9a90 	vmov	r9, s15
 8009094:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009098:	dd44      	ble.n	8009124 <__kernel_rem_pio2f+0x1b0>
 800909a:	f106 3cff 	add.w	ip, r6, #4294967295
 800909e:	ab08      	add	r3, sp, #32
 80090a0:	f1c5 0e08 	rsb	lr, r5, #8
 80090a4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80090a8:	fa47 f00e 	asr.w	r0, r7, lr
 80090ac:	4481      	add	r9, r0
 80090ae:	fa00 f00e 	lsl.w	r0, r0, lr
 80090b2:	1a3f      	subs	r7, r7, r0
 80090b4:	f1c5 0007 	rsb	r0, r5, #7
 80090b8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80090bc:	4107      	asrs	r7, r0
 80090be:	2f00      	cmp	r7, #0
 80090c0:	dd3f      	ble.n	8009142 <__kernel_rem_pio2f+0x1ce>
 80090c2:	f04f 0e00 	mov.w	lr, #0
 80090c6:	f109 0901 	add.w	r9, r9, #1
 80090ca:	4673      	mov	r3, lr
 80090cc:	4576      	cmp	r6, lr
 80090ce:	dc6b      	bgt.n	80091a8 <__kernel_rem_pio2f+0x234>
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	dd04      	ble.n	80090de <__kernel_rem_pio2f+0x16a>
 80090d4:	2d01      	cmp	r5, #1
 80090d6:	d078      	beq.n	80091ca <__kernel_rem_pio2f+0x256>
 80090d8:	2d02      	cmp	r5, #2
 80090da:	f000 8081 	beq.w	80091e0 <__kernel_rem_pio2f+0x26c>
 80090de:	2f02      	cmp	r7, #2
 80090e0:	d12f      	bne.n	8009142 <__kernel_rem_pio2f+0x1ce>
 80090e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80090e6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80090ea:	b353      	cbz	r3, 8009142 <__kernel_rem_pio2f+0x1ce>
 80090ec:	4628      	mov	r0, r5
 80090ee:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80090f2:	f000 fb1b 	bl	800972c <scalbnf>
 80090f6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80090fa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80090fe:	e020      	b.n	8009142 <__kernel_rem_pio2f+0x1ce>
 8009100:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009104:	3f01      	subs	r7, #1
 8009106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800910a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800910e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009112:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009116:	ecac 0a01 	vstmia	ip!, {s0}
 800911a:	ed90 0a00 	vldr	s0, [r0]
 800911e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009122:	e799      	b.n	8009058 <__kernel_rem_pio2f+0xe4>
 8009124:	d105      	bne.n	8009132 <__kernel_rem_pio2f+0x1be>
 8009126:	1e70      	subs	r0, r6, #1
 8009128:	ab08      	add	r3, sp, #32
 800912a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800912e:	11ff      	asrs	r7, r7, #7
 8009130:	e7c5      	b.n	80090be <__kernel_rem_pio2f+0x14a>
 8009132:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009136:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913e:	da31      	bge.n	80091a4 <__kernel_rem_pio2f+0x230>
 8009140:	2700      	movs	r7, #0
 8009142:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914a:	f040 809b 	bne.w	8009284 <__kernel_rem_pio2f+0x310>
 800914e:	1e74      	subs	r4, r6, #1
 8009150:	46a4      	mov	ip, r4
 8009152:	2000      	movs	r0, #0
 8009154:	45d4      	cmp	ip, sl
 8009156:	da4a      	bge.n	80091ee <__kernel_rem_pio2f+0x27a>
 8009158:	2800      	cmp	r0, #0
 800915a:	d07a      	beq.n	8009252 <__kernel_rem_pio2f+0x2de>
 800915c:	ab08      	add	r3, sp, #32
 800915e:	3d08      	subs	r5, #8
 8009160:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8081 	beq.w	800926c <__kernel_rem_pio2f+0x2f8>
 800916a:	4628      	mov	r0, r5
 800916c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009170:	00a5      	lsls	r5, r4, #2
 8009172:	f000 fadb 	bl	800972c <scalbnf>
 8009176:	aa44      	add	r2, sp, #272	; 0x110
 8009178:	1d2b      	adds	r3, r5, #4
 800917a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800927c <__kernel_rem_pio2f+0x308>
 800917e:	18d1      	adds	r1, r2, r3
 8009180:	4622      	mov	r2, r4
 8009182:	2a00      	cmp	r2, #0
 8009184:	f280 80ae 	bge.w	80092e4 <__kernel_rem_pio2f+0x370>
 8009188:	4622      	mov	r2, r4
 800918a:	2a00      	cmp	r2, #0
 800918c:	f2c0 80cc 	blt.w	8009328 <__kernel_rem_pio2f+0x3b4>
 8009190:	a944      	add	r1, sp, #272	; 0x110
 8009192:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009196:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009274 <__kernel_rem_pio2f+0x300>
 800919a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009280 <__kernel_rem_pio2f+0x30c>
 800919e:	2000      	movs	r0, #0
 80091a0:	1aa1      	subs	r1, r4, r2
 80091a2:	e0b6      	b.n	8009312 <__kernel_rem_pio2f+0x39e>
 80091a4:	2702      	movs	r7, #2
 80091a6:	e78c      	b.n	80090c2 <__kernel_rem_pio2f+0x14e>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	b94b      	cbnz	r3, 80091c0 <__kernel_rem_pio2f+0x24c>
 80091ac:	b118      	cbz	r0, 80091b6 <__kernel_rem_pio2f+0x242>
 80091ae:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	2001      	movs	r0, #1
 80091b6:	f10e 0e01 	add.w	lr, lr, #1
 80091ba:	3404      	adds	r4, #4
 80091bc:	4603      	mov	r3, r0
 80091be:	e785      	b.n	80090cc <__kernel_rem_pio2f+0x158>
 80091c0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80091c4:	6020      	str	r0, [r4, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	e7f5      	b.n	80091b6 <__kernel_rem_pio2f+0x242>
 80091ca:	1e74      	subs	r4, r6, #1
 80091cc:	a808      	add	r0, sp, #32
 80091ce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80091d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80091d6:	f10d 0c20 	add.w	ip, sp, #32
 80091da:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80091de:	e77e      	b.n	80090de <__kernel_rem_pio2f+0x16a>
 80091e0:	1e74      	subs	r4, r6, #1
 80091e2:	a808      	add	r0, sp, #32
 80091e4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80091e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80091ec:	e7f3      	b.n	80091d6 <__kernel_rem_pio2f+0x262>
 80091ee:	ab08      	add	r3, sp, #32
 80091f0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80091f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091f8:	4318      	orrs	r0, r3
 80091fa:	e7ab      	b.n	8009154 <__kernel_rem_pio2f+0x1e0>
 80091fc:	f10c 0c01 	add.w	ip, ip, #1
 8009200:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8009204:	2c00      	cmp	r4, #0
 8009206:	d0f9      	beq.n	80091fc <__kernel_rem_pio2f+0x288>
 8009208:	9b05      	ldr	r3, [sp, #20]
 800920a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800920e:	eb0d 0003 	add.w	r0, sp, r3
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	18f4      	adds	r4, r6, r3
 8009216:	ab1c      	add	r3, sp, #112	; 0x70
 8009218:	1c77      	adds	r7, r6, #1
 800921a:	384c      	subs	r0, #76	; 0x4c
 800921c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009220:	4466      	add	r6, ip
 8009222:	42be      	cmp	r6, r7
 8009224:	f6ff af0b 	blt.w	800903e <__kernel_rem_pio2f+0xca>
 8009228:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800922c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009230:	ee07 3a90 	vmov	s15, r3
 8009234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009238:	f04f 0c00 	mov.w	ip, #0
 800923c:	ece4 7a01 	vstmia	r4!, {s15}
 8009240:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009280 <__kernel_rem_pio2f+0x30c>
 8009244:	46a1      	mov	r9, r4
 8009246:	458c      	cmp	ip, r1
 8009248:	dd07      	ble.n	800925a <__kernel_rem_pio2f+0x2e6>
 800924a:	ece0 7a01 	vstmia	r0!, {s15}
 800924e:	3701      	adds	r7, #1
 8009250:	e7e7      	b.n	8009222 <__kernel_rem_pio2f+0x2ae>
 8009252:	9804      	ldr	r0, [sp, #16]
 8009254:	f04f 0c01 	mov.w	ip, #1
 8009258:	e7d2      	b.n	8009200 <__kernel_rem_pio2f+0x28c>
 800925a:	ecfe 6a01 	vldmia	lr!, {s13}
 800925e:	ed39 7a01 	vldmdb	r9!, {s14}
 8009262:	f10c 0c01 	add.w	ip, ip, #1
 8009266:	eee6 7a87 	vfma.f32	s15, s13, s14
 800926a:	e7ec      	b.n	8009246 <__kernel_rem_pio2f+0x2d2>
 800926c:	3c01      	subs	r4, #1
 800926e:	e775      	b.n	800915c <__kernel_rem_pio2f+0x1e8>
 8009270:	08009c1c 	.word	0x08009c1c
 8009274:	08009bf0 	.word	0x08009bf0
 8009278:	43800000 	.word	0x43800000
 800927c:	3b800000 	.word	0x3b800000
 8009280:	00000000 	.word	0x00000000
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	eeb0 0a48 	vmov.f32	s0, s16
 800928a:	1a98      	subs	r0, r3, r2
 800928c:	f000 fa4e 	bl	800972c <scalbnf>
 8009290:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009278 <__kernel_rem_pio2f+0x304>
 8009294:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	db19      	blt.n	80092d2 <__kernel_rem_pio2f+0x35e>
 800929e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800927c <__kernel_rem_pio2f+0x308>
 80092a2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80092a6:	aa08      	add	r2, sp, #32
 80092a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092ac:	1c74      	adds	r4, r6, #1
 80092ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092b2:	3508      	adds	r5, #8
 80092b4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80092b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80092c0:	ee10 3a10 	vmov	r3, s0
 80092c4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80092c8:	ee17 3a90 	vmov	r3, s15
 80092cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80092d0:	e74b      	b.n	800916a <__kernel_rem_pio2f+0x1f6>
 80092d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80092d6:	aa08      	add	r2, sp, #32
 80092d8:	ee10 3a10 	vmov	r3, s0
 80092dc:	4634      	mov	r4, r6
 80092de:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80092e2:	e742      	b.n	800916a <__kernel_rem_pio2f+0x1f6>
 80092e4:	a808      	add	r0, sp, #32
 80092e6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80092ea:	9001      	str	r0, [sp, #4]
 80092ec:	ee07 0a90 	vmov	s15, r0
 80092f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092f4:	3a01      	subs	r2, #1
 80092f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80092fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80092fe:	ed61 7a01 	vstmdb	r1!, {s15}
 8009302:	e73e      	b.n	8009182 <__kernel_rem_pio2f+0x20e>
 8009304:	ecfc 6a01 	vldmia	ip!, {s13}
 8009308:	ecb6 7a01 	vldmia	r6!, {s14}
 800930c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009310:	3001      	adds	r0, #1
 8009312:	4550      	cmp	r0, sl
 8009314:	dc01      	bgt.n	800931a <__kernel_rem_pio2f+0x3a6>
 8009316:	4288      	cmp	r0, r1
 8009318:	ddf4      	ble.n	8009304 <__kernel_rem_pio2f+0x390>
 800931a:	a858      	add	r0, sp, #352	; 0x160
 800931c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009320:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009324:	3a01      	subs	r2, #1
 8009326:	e730      	b.n	800918a <__kernel_rem_pio2f+0x216>
 8009328:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800932a:	2a02      	cmp	r2, #2
 800932c:	dc09      	bgt.n	8009342 <__kernel_rem_pio2f+0x3ce>
 800932e:	2a00      	cmp	r2, #0
 8009330:	dc2a      	bgt.n	8009388 <__kernel_rem_pio2f+0x414>
 8009332:	d043      	beq.n	80093bc <__kernel_rem_pio2f+0x448>
 8009334:	f009 0007 	and.w	r0, r9, #7
 8009338:	b059      	add	sp, #356	; 0x164
 800933a:	ecbd 8b04 	vpop	{d8-d9}
 800933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009342:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009344:	2b03      	cmp	r3, #3
 8009346:	d1f5      	bne.n	8009334 <__kernel_rem_pio2f+0x3c0>
 8009348:	ab30      	add	r3, sp, #192	; 0xc0
 800934a:	442b      	add	r3, r5
 800934c:	461a      	mov	r2, r3
 800934e:	4619      	mov	r1, r3
 8009350:	4620      	mov	r0, r4
 8009352:	2800      	cmp	r0, #0
 8009354:	f1a1 0104 	sub.w	r1, r1, #4
 8009358:	dc51      	bgt.n	80093fe <__kernel_rem_pio2f+0x48a>
 800935a:	4621      	mov	r1, r4
 800935c:	2901      	cmp	r1, #1
 800935e:	f1a2 0204 	sub.w	r2, r2, #4
 8009362:	dc5c      	bgt.n	800941e <__kernel_rem_pio2f+0x4aa>
 8009364:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009280 <__kernel_rem_pio2f+0x30c>
 8009368:	3304      	adds	r3, #4
 800936a:	2c01      	cmp	r4, #1
 800936c:	dc67      	bgt.n	800943e <__kernel_rem_pio2f+0x4ca>
 800936e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009372:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009376:	2f00      	cmp	r7, #0
 8009378:	d167      	bne.n	800944a <__kernel_rem_pio2f+0x4d6>
 800937a:	edc8 6a00 	vstr	s13, [r8]
 800937e:	ed88 7a01 	vstr	s14, [r8, #4]
 8009382:	edc8 7a02 	vstr	s15, [r8, #8]
 8009386:	e7d5      	b.n	8009334 <__kernel_rem_pio2f+0x3c0>
 8009388:	aa30      	add	r2, sp, #192	; 0xc0
 800938a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009280 <__kernel_rem_pio2f+0x30c>
 800938e:	4413      	add	r3, r2
 8009390:	4622      	mov	r2, r4
 8009392:	2a00      	cmp	r2, #0
 8009394:	da24      	bge.n	80093e0 <__kernel_rem_pio2f+0x46c>
 8009396:	b34f      	cbz	r7, 80093ec <__kernel_rem_pio2f+0x478>
 8009398:	eef1 7a47 	vneg.f32	s15, s14
 800939c:	edc8 7a00 	vstr	s15, [r8]
 80093a0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80093a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093a8:	aa31      	add	r2, sp, #196	; 0xc4
 80093aa:	2301      	movs	r3, #1
 80093ac:	429c      	cmp	r4, r3
 80093ae:	da20      	bge.n	80093f2 <__kernel_rem_pio2f+0x47e>
 80093b0:	b10f      	cbz	r7, 80093b6 <__kernel_rem_pio2f+0x442>
 80093b2:	eef1 7a67 	vneg.f32	s15, s15
 80093b6:	edc8 7a01 	vstr	s15, [r8, #4]
 80093ba:	e7bb      	b.n	8009334 <__kernel_rem_pio2f+0x3c0>
 80093bc:	aa30      	add	r2, sp, #192	; 0xc0
 80093be:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009280 <__kernel_rem_pio2f+0x30c>
 80093c2:	4413      	add	r3, r2
 80093c4:	2c00      	cmp	r4, #0
 80093c6:	da05      	bge.n	80093d4 <__kernel_rem_pio2f+0x460>
 80093c8:	b10f      	cbz	r7, 80093ce <__kernel_rem_pio2f+0x45a>
 80093ca:	eef1 7a67 	vneg.f32	s15, s15
 80093ce:	edc8 7a00 	vstr	s15, [r8]
 80093d2:	e7af      	b.n	8009334 <__kernel_rem_pio2f+0x3c0>
 80093d4:	ed33 7a01 	vldmdb	r3!, {s14}
 80093d8:	3c01      	subs	r4, #1
 80093da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093de:	e7f1      	b.n	80093c4 <__kernel_rem_pio2f+0x450>
 80093e0:	ed73 7a01 	vldmdb	r3!, {s15}
 80093e4:	3a01      	subs	r2, #1
 80093e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093ea:	e7d2      	b.n	8009392 <__kernel_rem_pio2f+0x41e>
 80093ec:	eef0 7a47 	vmov.f32	s15, s14
 80093f0:	e7d4      	b.n	800939c <__kernel_rem_pio2f+0x428>
 80093f2:	ecb2 7a01 	vldmia	r2!, {s14}
 80093f6:	3301      	adds	r3, #1
 80093f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093fc:	e7d6      	b.n	80093ac <__kernel_rem_pio2f+0x438>
 80093fe:	edd1 7a00 	vldr	s15, [r1]
 8009402:	edd1 6a01 	vldr	s13, [r1, #4]
 8009406:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800940a:	3801      	subs	r0, #1
 800940c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009410:	ed81 7a00 	vstr	s14, [r1]
 8009414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009418:	edc1 7a01 	vstr	s15, [r1, #4]
 800941c:	e799      	b.n	8009352 <__kernel_rem_pio2f+0x3de>
 800941e:	edd2 7a00 	vldr	s15, [r2]
 8009422:	edd2 6a01 	vldr	s13, [r2, #4]
 8009426:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800942a:	3901      	subs	r1, #1
 800942c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009430:	ed82 7a00 	vstr	s14, [r2]
 8009434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009438:	edc2 7a01 	vstr	s15, [r2, #4]
 800943c:	e78e      	b.n	800935c <__kernel_rem_pio2f+0x3e8>
 800943e:	ed33 7a01 	vldmdb	r3!, {s14}
 8009442:	3c01      	subs	r4, #1
 8009444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009448:	e78f      	b.n	800936a <__kernel_rem_pio2f+0x3f6>
 800944a:	eef1 6a66 	vneg.f32	s13, s13
 800944e:	eeb1 7a47 	vneg.f32	s14, s14
 8009452:	edc8 6a00 	vstr	s13, [r8]
 8009456:	ed88 7a01 	vstr	s14, [r8, #4]
 800945a:	eef1 7a67 	vneg.f32	s15, s15
 800945e:	e790      	b.n	8009382 <__kernel_rem_pio2f+0x40e>

08009460 <__kernel_sinf>:
 8009460:	ee10 3a10 	vmov	r3, s0
 8009464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009468:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800946c:	da04      	bge.n	8009478 <__kernel_sinf+0x18>
 800946e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009472:	ee17 3a90 	vmov	r3, s15
 8009476:	b35b      	cbz	r3, 80094d0 <__kernel_sinf+0x70>
 8009478:	ee20 7a00 	vmul.f32	s14, s0, s0
 800947c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80094d4 <__kernel_sinf+0x74>
 8009480:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80094d8 <__kernel_sinf+0x78>
 8009484:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009488:	eddf 7a14 	vldr	s15, [pc, #80]	; 80094dc <__kernel_sinf+0x7c>
 800948c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009490:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80094e0 <__kernel_sinf+0x80>
 8009494:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009498:	eddf 7a12 	vldr	s15, [pc, #72]	; 80094e4 <__kernel_sinf+0x84>
 800949c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80094a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80094a4:	b930      	cbnz	r0, 80094b4 <__kernel_sinf+0x54>
 80094a6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80094e8 <__kernel_sinf+0x88>
 80094aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80094ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80094b2:	4770      	bx	lr
 80094b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80094b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80094bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80094c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80094c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80094ec <__kernel_sinf+0x8c>
 80094c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80094cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80094d8:	b2d72f34 	.word	0xb2d72f34
 80094dc:	3638ef1b 	.word	0x3638ef1b
 80094e0:	b9500d01 	.word	0xb9500d01
 80094e4:	3c088889 	.word	0x3c088889
 80094e8:	be2aaaab 	.word	0xbe2aaaab
 80094ec:	3e2aaaab 	.word	0x3e2aaaab

080094f0 <atanf>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	ee10 5a10 	vmov	r5, s0
 80094f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80094fa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80094fe:	eef0 7a40 	vmov.f32	s15, s0
 8009502:	db10      	blt.n	8009526 <atanf+0x36>
 8009504:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009508:	dd04      	ble.n	8009514 <atanf+0x24>
 800950a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800950e:	eeb0 0a67 	vmov.f32	s0, s15
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800964c <atanf+0x15c>
 8009518:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009650 <atanf+0x160>
 800951c:	2d00      	cmp	r5, #0
 800951e:	bfd8      	it	le
 8009520:	eef0 7a40 	vmovle.f32	s15, s0
 8009524:	e7f3      	b.n	800950e <atanf+0x1e>
 8009526:	4b4b      	ldr	r3, [pc, #300]	; (8009654 <atanf+0x164>)
 8009528:	429c      	cmp	r4, r3
 800952a:	dc10      	bgt.n	800954e <atanf+0x5e>
 800952c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009530:	da0a      	bge.n	8009548 <atanf+0x58>
 8009532:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009658 <atanf+0x168>
 8009536:	ee30 7a07 	vadd.f32	s14, s0, s14
 800953a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800953e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009546:	dce2      	bgt.n	800950e <atanf+0x1e>
 8009548:	f04f 33ff 	mov.w	r3, #4294967295
 800954c:	e013      	b.n	8009576 <atanf+0x86>
 800954e:	f000 f8a3 	bl	8009698 <fabsf>
 8009552:	4b42      	ldr	r3, [pc, #264]	; (800965c <atanf+0x16c>)
 8009554:	429c      	cmp	r4, r3
 8009556:	dc4f      	bgt.n	80095f8 <atanf+0x108>
 8009558:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800955c:	429c      	cmp	r4, r3
 800955e:	dc41      	bgt.n	80095e4 <atanf+0xf4>
 8009560:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009564:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009568:	eea0 7a27 	vfma.f32	s14, s0, s15
 800956c:	2300      	movs	r3, #0
 800956e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009572:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800957c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009660 <atanf+0x170>
 8009580:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009664 <atanf+0x174>
 8009584:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009668 <atanf+0x178>
 8009588:	ee66 6a06 	vmul.f32	s13, s12, s12
 800958c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009590:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800966c <atanf+0x17c>
 8009594:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009598:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009670 <atanf+0x180>
 800959c:	eee7 5a26 	vfma.f32	s11, s14, s13
 80095a0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009674 <atanf+0x184>
 80095a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80095a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009678 <atanf+0x188>
 80095ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 80095b0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800967c <atanf+0x18c>
 80095b4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80095b8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009680 <atanf+0x190>
 80095bc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80095c0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009684 <atanf+0x194>
 80095c4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80095c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009688 <atanf+0x198>
 80095cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80095d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80095d4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80095d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80095dc:	d121      	bne.n	8009622 <atanf+0x132>
 80095de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095e2:	e794      	b.n	800950e <atanf+0x1e>
 80095e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80095e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80095ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80095f0:	2301      	movs	r3, #1
 80095f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80095f6:	e7be      	b.n	8009576 <atanf+0x86>
 80095f8:	4b24      	ldr	r3, [pc, #144]	; (800968c <atanf+0x19c>)
 80095fa:	429c      	cmp	r4, r3
 80095fc:	dc0b      	bgt.n	8009616 <atanf+0x126>
 80095fe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009606:	eea0 7a27 	vfma.f32	s14, s0, s15
 800960a:	2302      	movs	r3, #2
 800960c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009614:	e7af      	b.n	8009576 <atanf+0x86>
 8009616:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800961a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800961e:	2303      	movs	r3, #3
 8009620:	e7a9      	b.n	8009576 <atanf+0x86>
 8009622:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <atanf+0x1a0>)
 8009624:	491b      	ldr	r1, [pc, #108]	; (8009694 <atanf+0x1a4>)
 8009626:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800962a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800962e:	ed93 0a00 	vldr	s0, [r3]
 8009632:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009636:	ed92 0a00 	vldr	s0, [r2]
 800963a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800963e:	2d00      	cmp	r5, #0
 8009640:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009644:	bfb8      	it	lt
 8009646:	eef1 7a67 	vneglt.f32	s15, s15
 800964a:	e760      	b.n	800950e <atanf+0x1e>
 800964c:	3fc90fdb 	.word	0x3fc90fdb
 8009650:	bfc90fdb 	.word	0xbfc90fdb
 8009654:	3edfffff 	.word	0x3edfffff
 8009658:	7149f2ca 	.word	0x7149f2ca
 800965c:	3f97ffff 	.word	0x3f97ffff
 8009660:	3c8569d7 	.word	0x3c8569d7
 8009664:	3d4bda59 	.word	0x3d4bda59
 8009668:	bd6ef16b 	.word	0xbd6ef16b
 800966c:	3d886b35 	.word	0x3d886b35
 8009670:	3dba2e6e 	.word	0x3dba2e6e
 8009674:	3e124925 	.word	0x3e124925
 8009678:	3eaaaaab 	.word	0x3eaaaaab
 800967c:	bd15a221 	.word	0xbd15a221
 8009680:	bd9d8795 	.word	0xbd9d8795
 8009684:	bde38e38 	.word	0xbde38e38
 8009688:	be4ccccd 	.word	0xbe4ccccd
 800968c:	401bffff 	.word	0x401bffff
 8009690:	08009c28 	.word	0x08009c28
 8009694:	08009c38 	.word	0x08009c38

08009698 <fabsf>:
 8009698:	ee10 3a10 	vmov	r3, s0
 800969c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096a0:	ee00 3a10 	vmov	s0, r3
 80096a4:	4770      	bx	lr
	...

080096a8 <floorf>:
 80096a8:	ee10 3a10 	vmov	r3, s0
 80096ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80096b0:	3a7f      	subs	r2, #127	; 0x7f
 80096b2:	2a16      	cmp	r2, #22
 80096b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096b8:	dc2a      	bgt.n	8009710 <floorf+0x68>
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	da11      	bge.n	80096e2 <floorf+0x3a>
 80096be:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009720 <floorf+0x78>
 80096c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	dd05      	ble.n	80096dc <floorf+0x34>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da23      	bge.n	800971c <floorf+0x74>
 80096d4:	4a13      	ldr	r2, [pc, #76]	; (8009724 <floorf+0x7c>)
 80096d6:	2900      	cmp	r1, #0
 80096d8:	bf18      	it	ne
 80096da:	4613      	movne	r3, r2
 80096dc:	ee00 3a10 	vmov	s0, r3
 80096e0:	4770      	bx	lr
 80096e2:	4911      	ldr	r1, [pc, #68]	; (8009728 <floorf+0x80>)
 80096e4:	4111      	asrs	r1, r2
 80096e6:	420b      	tst	r3, r1
 80096e8:	d0fa      	beq.n	80096e0 <floorf+0x38>
 80096ea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009720 <floorf+0x78>
 80096ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	ddef      	ble.n	80096dc <floorf+0x34>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfbe      	ittt	lt
 8009700:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009704:	fa40 f202 	asrlt.w	r2, r0, r2
 8009708:	189b      	addlt	r3, r3, r2
 800970a:	ea23 0301 	bic.w	r3, r3, r1
 800970e:	e7e5      	b.n	80096dc <floorf+0x34>
 8009710:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009714:	d3e4      	bcc.n	80096e0 <floorf+0x38>
 8009716:	ee30 0a00 	vadd.f32	s0, s0, s0
 800971a:	4770      	bx	lr
 800971c:	2300      	movs	r3, #0
 800971e:	e7dd      	b.n	80096dc <floorf+0x34>
 8009720:	7149f2ca 	.word	0x7149f2ca
 8009724:	bf800000 	.word	0xbf800000
 8009728:	007fffff 	.word	0x007fffff

0800972c <scalbnf>:
 800972c:	ee10 3a10 	vmov	r3, s0
 8009730:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009734:	d025      	beq.n	8009782 <scalbnf+0x56>
 8009736:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800973a:	d302      	bcc.n	8009742 <scalbnf+0x16>
 800973c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009740:	4770      	bx	lr
 8009742:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009746:	d122      	bne.n	800978e <scalbnf+0x62>
 8009748:	4b2a      	ldr	r3, [pc, #168]	; (80097f4 <scalbnf+0xc8>)
 800974a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80097f8 <scalbnf+0xcc>
 800974e:	4298      	cmp	r0, r3
 8009750:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009754:	db16      	blt.n	8009784 <scalbnf+0x58>
 8009756:	ee10 3a10 	vmov	r3, s0
 800975a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800975e:	3a19      	subs	r2, #25
 8009760:	4402      	add	r2, r0
 8009762:	2afe      	cmp	r2, #254	; 0xfe
 8009764:	dd15      	ble.n	8009792 <scalbnf+0x66>
 8009766:	ee10 3a10 	vmov	r3, s0
 800976a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80097fc <scalbnf+0xd0>
 800976e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009800 <scalbnf+0xd4>
 8009772:	2b00      	cmp	r3, #0
 8009774:	eeb0 7a67 	vmov.f32	s14, s15
 8009778:	bfb8      	it	lt
 800977a:	eef0 7a66 	vmovlt.f32	s15, s13
 800977e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009782:	4770      	bx	lr
 8009784:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009804 <scalbnf+0xd8>
 8009788:	ee20 0a27 	vmul.f32	s0, s0, s15
 800978c:	4770      	bx	lr
 800978e:	0dd2      	lsrs	r2, r2, #23
 8009790:	e7e6      	b.n	8009760 <scalbnf+0x34>
 8009792:	2a00      	cmp	r2, #0
 8009794:	dd06      	ble.n	80097a4 <scalbnf+0x78>
 8009796:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800979a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800979e:	ee00 3a10 	vmov	s0, r3
 80097a2:	4770      	bx	lr
 80097a4:	f112 0f16 	cmn.w	r2, #22
 80097a8:	da1a      	bge.n	80097e0 <scalbnf+0xb4>
 80097aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80097ae:	4298      	cmp	r0, r3
 80097b0:	ee10 3a10 	vmov	r3, s0
 80097b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097b8:	dd0a      	ble.n	80097d0 <scalbnf+0xa4>
 80097ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80097fc <scalbnf+0xd0>
 80097be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009800 <scalbnf+0xd4>
 80097c2:	eef0 7a40 	vmov.f32	s15, s0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bf18      	it	ne
 80097ca:	eeb0 0a47 	vmovne.f32	s0, s14
 80097ce:	e7db      	b.n	8009788 <scalbnf+0x5c>
 80097d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009804 <scalbnf+0xd8>
 80097d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009808 <scalbnf+0xdc>
 80097d8:	eef0 7a40 	vmov.f32	s15, s0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	e7f3      	b.n	80097c8 <scalbnf+0x9c>
 80097e0:	3219      	adds	r2, #25
 80097e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80097ea:	eddf 7a08 	vldr	s15, [pc, #32]	; 800980c <scalbnf+0xe0>
 80097ee:	ee07 3a10 	vmov	s14, r3
 80097f2:	e7c4      	b.n	800977e <scalbnf+0x52>
 80097f4:	ffff3cb0 	.word	0xffff3cb0
 80097f8:	4c000000 	.word	0x4c000000
 80097fc:	7149f2ca 	.word	0x7149f2ca
 8009800:	f149f2ca 	.word	0xf149f2ca
 8009804:	0da24260 	.word	0x0da24260
 8009808:	8da24260 	.word	0x8da24260
 800980c:	33000000 	.word	0x33000000

08009810 <_init>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr

0800981c <_fini>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr
