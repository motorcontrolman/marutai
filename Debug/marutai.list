
marutai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009300  08009300  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009300  08009300  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009300  08009300  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  08009378  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08009378  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a74  00000000  00000000  00033af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00036570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00037878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028831  00000000  00000000  00038a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015739  00000000  00000000  00061251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c91b  00000000  00000000  0007698a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001832a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053fc  00000000  00000000  001832f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008ec8 	.word	0x08008ec8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08008ec8 	.word	0x08008ec8

08000218 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000222:	edc7 0a02 	vstr	s1, [r7, #8]
 8000226:	ed87 1a01 	vstr	s2, [r7, #4]
 800022a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	ed93 7a00 	vldr	s14, [r3]
 8000232:	edd7 6a03 	vldr	s13, [r7, #12]
 8000236:	edd7 7a01 	vldr	s15, [r7, #4]
 800023a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800023e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000248:	ed97 7a02 	vldr	s14, [r7, #8]
 800024c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	edd3 7a00 	vldr	s15, [r3]
 800025a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800025e:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	ee07 3a90 	vmov	s15, r3
}
 8000268:	eeb0 0a67 	vmov.f32	s0, s15
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000280:	edc7 0a02 	vstr	s1, [r7, #8]
 8000284:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000288:	edd7 7a02 	vldr	s15, [r7, #8]
 800028c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000294:	db0b      	blt.n	80002ae <gfDivideAvoidZero+0x38>
 8000296:	ed97 7a02 	vldr	s14, [r7, #8]
 800029a:	edd7 7a01 	vldr	s15, [r7, #4]
 800029e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	d502      	bpl.n	80002ae <gfDivideAvoidZero+0x38>
		den = threshold;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	e017      	b.n	80002de <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80002ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80002b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ba:	d510      	bpl.n	80002de <gfDivideAvoidZero+0x68>
 80002bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002c0:	eef1 7a67 	vneg.f32	s15, s15
 80002c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80002c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d0:	dd05      	ble.n	80002de <gfDivideAvoidZero+0x68>
		den = -threshold;
 80002d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d6:	eef1 7a67 	vneg.f32	s15, s15
 80002da:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80002de:	edd7 6a03 	vldr	s13, [r7, #12]
 80002e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80002e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002ea:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	ee07 3a90 	vmov	s15, r3
}
 80002f4:	eeb0 0a67 	vmov.f32	s0, s15
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 800030e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000374 <gfWrapTheta+0x70>
 8000312:	ed97 0a01 	vldr	s0, [r7, #4]
 8000316:	f007 fe89 	bl	800802c <fmodf>
 800031a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 800031e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000322:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000378 <gfWrapTheta+0x74>
 8000326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	dd08      	ble.n	8000342 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000330:	edd7 7a01 	vldr	s15, [r7, #4]
 8000334:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000374 <gfWrapTheta+0x70>
 8000338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000340:	e010      	b.n	8000364 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000342:	edd7 7a01 	vldr	s15, [r7, #4]
 8000346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800037c <gfWrapTheta+0x78>
 800034a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000352:	d507      	bpl.n	8000364 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000354:	edd7 7a01 	vldr	s15, [r7, #4]
 8000358:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000374 <gfWrapTheta+0x70>
 800035c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000360:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	ee07 3a90 	vmov	s15, r3
}
 800036a:	eeb0 0a67 	vmov.f32	s0, s15
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40c90fdb 	.word	0x40c90fdb
 8000378:	40490fdb 	.word	0x40490fdb
 800037c:	c0490fdb 	.word	0xc0490fdb

08000380 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a03 	vstr	s0, [r7, #12]
 800038a:	edc7 0a02 	vstr	s1, [r7, #8]
 800038e:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000392:	ed97 7a03 	vldr	s14, [r7, #12]
 8000396:	edd7 7a02 	vldr	s15, [r7, #8]
 800039a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a2:	dd01      	ble.n	80003a8 <gUpperLowerLimit+0x28>
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80003a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80003ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80003b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b8:	d501      	bpl.n	80003be <gUpperLowerLimit+0x3e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	return input;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	ee07 3a90 	vmov	s15, r3
}
 80003c4:	eeb0 0a67 	vmov.f32	s0, s15
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	3302      	adds	r3, #2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	f04f 0200 	mov.w	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3308      	adds	r3, #8
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800041a:	b480      	push	{r7}
 800041c:	b087      	sub	sp, #28
 800041e:	af00      	add	r7, sp, #0
 8000420:	ed87 0a03 	vstr	s0, [r7, #12]
 8000424:	edc7 0a02 	vstr	s1, [r7, #8]
 8000428:	ed87 1a01 	vstr	s2, [r7, #4]
 800042c:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 800042e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000432:	edd7 7a01 	vldr	s15, [r7, #4]
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000448:	edd7 7a05 	vldr	s15, [r7, #20]
 800044c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000450:	edd7 7a04 	vldr	s15, [r7, #16]
 8000454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000458:	edd7 6a05 	vldr	s13, [r7, #20]
 800045c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	edc3 7a00 	vstr	s15, [r3]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 800047a:	b480      	push	{r7}
 800047c:	b089      	sub	sp, #36	; 0x24
 800047e:	af00      	add	r7, sp, #0
 8000480:	ed87 0a03 	vstr	s0, [r7, #12]
 8000484:	edc7 0a02 	vstr	s1, [r7, #8]
 8000488:	ed87 1a01 	vstr	s2, [r7, #4]
 800048c:	6038      	str	r0, [r7, #0]
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 800048e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000492:	edd7 7a01 	vldr	s15, [r7, #4]
 8000496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800049a:	edc7 7a06 	vstr	s15, [r7, #24]
	yn_1 = *y;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]

	if( r > yn_1 )
 80004a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80004a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80004ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b4:	dd08      	ble.n	80004c8 <gRateLimit+0x4e>
		ytmp = yn_1 + dy;
 80004b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80004ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80004be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80004c6:	e010      	b.n	80004ea <gRateLimit+0x70>
	else if( r < yn_1 )
 80004c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80004cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80004d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	d507      	bpl.n	80004ea <gRateLimit+0x70>
		ytmp = yn_1 - dy;
 80004da:	ed97 7a05 	vldr	s14, [r7, #20]
 80004de:	edd7 7a06 	vldr	s15, [r7, #24]
 80004e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004e6:	edc7 7a07 	vstr	s15, [r7, #28]

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	601a      	str	r2, [r3, #0]

}
 80004f0:	bf00      	nop
 80004f2:	3724      	adds	r7, #36	; 0x24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b08d      	sub	sp, #52	; 0x34
 8000500:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t posMode_pre;
	uint8_t drvMode_pre;


	//read IO signals
	gButton1 = readButton1();
 8000502:	f000 fb27 	bl	8000b54 <readButton1>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <Sequence_Low_Freq+0x118>)
 800050c:	701a      	strb	r2, [r3, #0]
	gVolume = 0; //readVolume();
 800050e:	4b42      	ldr	r3, [pc, #264]	; (8000618 <Sequence_Low_Freq+0x11c>)
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	readHallSignal(gHall);
 8000516:	4841      	ldr	r0, [pc, #260]	; (800061c <Sequence_Low_Freq+0x120>)
 8000518:	f000 fbe2 	bl	8000ce0 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 800051c:	4840      	ldr	r0, [pc, #256]	; (8000620 <Sequence_Low_Freq+0x124>)
 800051e:	f000 fc05 	bl	8000d2c <readElectFreqFromHallSignal>

	sSensData.Vdc = 10.0f;//readVdc();
 8000522:	4b40      	ldr	r3, [pc, #256]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000524:	4a40      	ldr	r2, [pc, #256]	; (8000628 <Sequence_Low_Freq+0x12c>)
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 8000528:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <Sequence_Low_Freq+0x128>)
 800052a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800052e:	483f      	ldr	r0, [pc, #252]	; (800062c <Sequence_Low_Freq+0x130>)
 8000530:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8000630 <Sequence_Low_Freq+0x134>
 8000534:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8000634 <Sequence_Low_Freq+0x138>
 8000538:	eeb0 0a67 	vmov.f32	s0, s15
 800053c:	f7ff ff6d 	bl	800041a <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000542:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000546:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800054a:	eef0 0a67 	vmov.f32	s1, s15
 800054e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000552:	f7ff fe90 	bl	8000276 <gfDivideAvoidZero>
 8000556:	eef0 7a40 	vmov.f32	s15, s0
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <Sequence_Low_Freq+0x128>)
 800055c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 8000560:	4b35      	ldr	r3, [pc, #212]	; (8000638 <Sequence_Low_Freq+0x13c>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	2b28      	cmp	r3, #40	; 0x28
 8000566:	d81d      	bhi.n	80005a4 <Sequence_Low_Freq+0xa8>
		sInitCnt++;
 8000568:	4b33      	ldr	r3, [pc, #204]	; (8000638 <Sequence_Low_Freq+0x13c>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b31      	ldr	r3, [pc, #196]	; (8000638 <Sequence_Low_Freq+0x13c>)
 8000572:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000574:	4b31      	ldr	r3, [pc, #196]	; (800063c <Sequence_Low_Freq+0x140>)
 8000576:	2202      	movs	r2, #2
 8000578:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <Sequence_Low_Freq+0x144>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <Sequence_Low_Freq+0x148>)
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	601a      	str	r2, [r3, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <Sequence_Low_Freq+0x13c>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d83c      	bhi.n	800060a <Sequence_Low_Freq+0x10e>
			sSensData.Iuvw_AD_Offset[0] = 1993.0f;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <Sequence_Low_Freq+0x14c>)
 8000594:	61da      	str	r2, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] = 1987.0f;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000598:	4a2c      	ldr	r2, [pc, #176]	; (800064c <Sequence_Low_Freq+0x150>)
 800059a:	621a      	str	r2, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] = 2003.0f;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <Sequence_Low_Freq+0x128>)
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <Sequence_Low_Freq+0x154>)
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 80005a2:	e032      	b.n	800060a <Sequence_Low_Freq+0x10e>
		posMode_pre = sPosMode;
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <Sequence_Low_Freq+0x140>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	71fb      	strb	r3, [r7, #7]
		drvMode_pre = sDrvMode;
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	71bb      	strb	r3, [r7, #6]
		slctPosMode(gElectFreq, &sPosMode);
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <Sequence_Low_Freq+0x124>)
 80005b2:	edd3 7a00 	vldr	s15, [r3]
 80005b6:	4821      	ldr	r0, [pc, #132]	; (800063c <Sequence_Low_Freq+0x140>)
 80005b8:	eeb0 0a67 	vmov.f32	s0, s15
 80005bc:	f000 f89e 	bl	80006fc <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <Sequence_Low_Freq+0x124>)
 80005c2:	edd3 7a00 	vldr	s15, [r3]
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005c8:	eeb0 0a67 	vmov.f32	s0, s15
 80005cc:	f000 f8cc 	bl	8000768 <slctDrvMode>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d113      	bne.n	80005fe <Sequence_Low_Freq+0x102>
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d10f      	bne.n	80005fe <Sequence_Low_Freq+0x102>
			InitVectorControl(sSensData, &sVectorControlData);
 80005de:	4e11      	ldr	r6, [pc, #68]	; (8000624 <Sequence_Low_Freq+0x128>)
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <Sequence_Low_Freq+0x158>)
 80005e2:	9309      	str	r3, [sp, #36]	; 0x24
 80005e4:	466d      	mov	r5, sp
 80005e6:	f106 0410 	add.w	r4, r6, #16
 80005ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	602b      	str	r3, [r5, #0]
 80005f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005fa:	f000 ff59 	bl	80014b0 <InitVectorControl>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <Sequence_Low_Freq+0x144>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4914      	ldr	r1, [pc, #80]	; (8000654 <Sequence_Low_Freq+0x158>)
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fa2d 	bl	8000a64 <calcCurrentRef>
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008f 	.word	0x2000008f
 8000618:	20000094 	.word	0x20000094
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000090 	.word	0x20000090
 8000624:	200000b4 	.word	0x200000b4
 8000628:	41200000 	.word	0x41200000
 800062c:	200000e0 	.word	0x200000e0
 8000630:	3a83126f 	.word	0x3a83126f
 8000634:	42fb3333 	.word	0x42fb3333
 8000638:	2000009a 	.word	0x2000009a
 800063c:	20000098 	.word	0x20000098
 8000640:	20000099 	.word	0x20000099
 8000644:	200000a0 	.word	0x200000a0
 8000648:	44f92000 	.word	0x44f92000
 800064c:	44f86000 	.word	0x44f86000
 8000650:	44fa6000 	.word	0x44fa6000
 8000654:	200000e8 	.word	0x200000e8

08000658 <Sequence_High_Freq>:

void Sequence_High_Freq(void){
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b08f      	sub	sp, #60	; 0x3c
 800065c:	af0e      	add	r7, sp, #56	; 0x38
	// clear Free Running Counter
	// writeFreeRunCnt(ZERO);

	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <Sequence_High_Freq+0x78>)
 8000660:	491c      	ldr	r1, [pc, #112]	; (80006d4 <Sequence_High_Freq+0x7c>)
 8000662:	481d      	ldr	r0, [pc, #116]	; (80006d8 <Sequence_High_Freq+0x80>)
 8000664:	f000 fada 	bl	8000c1c <readCurrent>

	// for debug
	sPosMode = POSMODE_FREERUN;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <Sequence_High_Freq+0x84>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
	sDrvMode = DRVMODE_OPENLOOP;
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <Sequence_High_Freq+0x88>)
 8000670:	2202      	movs	r2, #2
 8000672:	701a      	strb	r2, [r3, #0]
	sElectAngVeloRefRateLimit = 62.8 * 2.0f;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <Sequence_High_Freq+0x8c>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <Sequence_High_Freq+0x90>)
 8000678:	601a      	str	r2, [r3, #0]


	slctElectAngleFromPosMode(sPosMode, &sSensData);
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <Sequence_High_Freq+0x84>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	491b      	ldr	r1, [pc, #108]	; (80006ec <Sequence_High_Freq+0x94>)
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8ab 	bl	80007dc <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <Sequence_High_Freq+0x88>)
 8000688:	f893 c000 	ldrb.w	ip, [r3]
 800068c:	4e17      	ldr	r6, [pc, #92]	; (80006ec <Sequence_High_Freq+0x94>)
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <Sequence_High_Freq+0x98>)
 8000690:	930c      	str	r3, [sp, #48]	; 0x30
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <Sequence_High_Freq+0x9c>)
 8000694:	930b      	str	r3, [sp, #44]	; 0x2c
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <Sequence_High_Freq+0xa0>)
 8000698:	930a      	str	r3, [sp, #40]	; 0x28
 800069a:	466d      	mov	r5, sp
 800069c:	f106 040c 	add.w	r4, r6, #12
 80006a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80006b0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006b4:	4660      	mov	r0, ip
 80006b6:	f000 f961 	bl	800097c <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <Sequence_High_Freq+0x98>)
 80006bc:	f000 fb8c 	bl	8000dd8 <writeOutputMode>
	writeDuty(sDuty);
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <Sequence_High_Freq+0x9c>)
 80006c2:	f000 fbcb 	bl	8000e5c <writeDuty>

	// Calculate ProcessingLoad
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
 80006c6:	bf00      	nop
 80006c8:	3704      	adds	r7, #4
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000bc 	.word	0x200000bc
 80006d4:	200000d0 	.word	0x200000d0
 80006d8:	200000c8 	.word	0x200000c8
 80006dc:	20000098 	.word	0x20000098
 80006e0:	20000099 	.word	0x20000099
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	42fb3333 	.word	0x42fb3333
 80006ec:	200000b4 	.word	0x200000b4
 80006f0:	200000a4 	.word	0x200000a4
 80006f4:	200000a8 	.word	0x200000a8
 80006f8:	200000e8 	.word	0x200000e8

080006fc <slctPosMode>:
void inline slctPosMode(float electFreq, uint8_t* posMode){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a01 	vstr	s0, [r7, #4]
 8000706:	6038      	str	r0, [r7, #0]

	if(*posMode != POSMODE_HALL_PLL){
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d010      	beq.n	8000732 <slctPosMode+0x36>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000710:	edd7 7a01 	vldr	s15, [r7, #4]
 8000714:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	dd03      	ble.n	800072a <slctPosMode+0x2e>
			*posMode = POSMODE_HALL_PLL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2203      	movs	r2, #3
 8000726:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 8000728:	e017      	b.n	800075a <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2202      	movs	r2, #2
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	e013      	b.n	800075a <slctPosMode+0x5e>
	else if(*posMode == POSMODE_HALL_PLL){
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d10f      	bne.n	800075a <slctPosMode+0x5e>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 800073a:	edd7 7a01 	vldr	s15, [r7, #4]
 800073e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d503      	bpl.n	8000754 <slctPosMode+0x58>
			*posMode = POSMODE_HALL;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2202      	movs	r2, #2
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	e002      	b.n	800075a <slctPosMode+0x5e>
			*posMode = POSMODE_HALL_PLL;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <slctDrvMode>:

void inline slctDrvMode(float electFreq, uint8_t* drvMode){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000772:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b04      	cmp	r3, #4
 800077a:	d010      	beq.n	800079e <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 800077c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000780:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007d4 <slctDrvMode+0x6c>
 8000784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078c:	dd03      	ble.n	8000796 <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2204      	movs	r2, #4
 8000792:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 8000794:	e017      	b.n	80007c6 <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2202      	movs	r2, #2
 800079a:	701a      	strb	r2, [r3, #0]
}
 800079c:	e013      	b.n	80007c6 <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d10f      	bne.n	80007c6 <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 80007a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80007d8 <slctDrvMode+0x70>
 80007ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b6:	d503      	bpl.n	80007c0 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2202      	movs	r2, #2
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	e002      	b.n	80007c6 <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2204      	movs	r2, #4
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	42c80000 	.word	0x42c80000
 80007d8:	42a00000 	.word	0x42a00000

080007dc <slctElectAngleFromPosMode>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	b0a4      	sub	sp, #144	; 0x90
 80007e2:	af1e      	add	r7, sp, #120	; 0x78
 80007e4:	4603      	mov	r3, r0
 80007e6:	6039      	str	r1, [r7, #0]
 80007e8:	71fb      	strb	r3, [r7, #7]
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	f200 80a7 	bhi.w	8000940 <slctElectAngleFromPosMode+0x164>
 80007f2:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <slctElectAngleFromPosMode+0x1c>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	0800080d 	.word	0x0800080d
 80007fc:	0800081f 	.word	0x0800081f
 8000800:	0800089b 	.word	0x0800089b
 8000804:	080008c7 	.word	0x080008c7
 8000808:	080008f3 	.word	0x080008f3
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	f04f 0200 	mov.w	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
		break;
 800081c:	e099      	b.n	8000952 <slctElectAngleFromPosMode+0x176>

	case POSMODE_FREERUN:
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <slctElectAngleFromPosMode+0x180>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	605a      	str	r2, [r3, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000826:	4b4d      	ldr	r3, [pc, #308]	; (800095c <slctElectAngleFromPosMode+0x180>)
 8000828:	edd3 7a00 	vldr	s15, [r3]
 800082c:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8000960 <slctElectAngleFromPosMode+0x184>
 8000830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000834:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <slctElectAngleFromPosMode+0x188>)
 8000836:	edd3 7a00 	vldr	s15, [r3]
 800083a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <slctElectAngleFromPosMode+0x188>)
 8000840:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 8000844:	4b47      	ldr	r3, [pc, #284]	; (8000964 <slctElectAngleFromPosMode+0x188>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	eeb0 0a67 	vmov.f32	s0, s15
 800084e:	f7ff fd59 	bl	8000304 <gfWrapTheta>
 8000852:	eef0 7a40 	vmov.f32	s15, s0
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	edc3 7a00 	vstr	s15, [r3]

		// For Sensorless Init
		flgInit = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000860:	4e41      	ldr	r6, [pc, #260]	; (8000968 <slctElectAngleFromPosMode+0x18c>)
 8000862:	f897 8017 	ldrb.w	r8, [r7, #23]
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <slctElectAngleFromPosMode+0x190>)
 8000868:	931d      	str	r3, [sp, #116]	; 0x74
 800086a:	4a41      	ldr	r2, [pc, #260]	; (8000970 <slctElectAngleFromPosMode+0x194>)
 800086c:	ab0a      	add	r3, sp, #40	; 0x28
 800086e:	4611      	mov	r1, r2
 8000870:	224c      	movs	r2, #76	; 0x4c
 8000872:	4618      	mov	r0, r3
 8000874:	f007 fb38 	bl	8007ee8 <memcpy>
 8000878:	466d      	mov	r5, sp
 800087a:	f106 040c 	add.w	r4, r6, #12
 800087e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800088a:	e885 0003 	stmia.w	r5, {r0, r1}
 800088e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000892:	4640      	mov	r0, r8
 8000894:	f001 fa84 	bl	8001da0 <calcElectAngleEstimate>
		break;
 8000898:	e05b      	b.n	8000952 <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL:
		flgPLL = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <slctElectAngleFromPosMode+0x198>)
 80008a0:	edd3 7a00 	vldr	s15, [r3]
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	7db9      	ldrb	r1, [r7, #22]
 80008ae:	eeb0 0a67 	vmov.f32	s0, s15
 80008b2:	4831      	ldr	r0, [pc, #196]	; (8000978 <slctElectAngleFromPosMode+0x19c>)
 80008b4:	f000 fb14 	bl	8000ee0 <calcElectAngle>
		sensData->electAngle = electAngle;
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	605a      	str	r2, [r3, #4]
		break;
 80008c4:	e045      	b.n	8000952 <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <slctElectAngleFromPosMode+0x198>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	f107 0210 	add.w	r2, r7, #16
 80008d8:	7db9      	ldrb	r1, [r7, #22]
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <slctElectAngleFromPosMode+0x19c>)
 80008e0:	f000 fafe 	bl	8000ee0 <calcElectAngle>
		sensData->electAngle = electAngle;
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	605a      	str	r2, [r3, #4]
		break;
 80008f0:	e02f      	b.n	8000952 <slctElectAngleFromPosMode+0x176>
	case POSMODE_SENSORLESS:
		flgInit = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 80008f6:	4e1c      	ldr	r6, [pc, #112]	; (8000968 <slctElectAngleFromPosMode+0x18c>)
 80008f8:	f897 8017 	ldrb.w	r8, [r7, #23]
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <slctElectAngleFromPosMode+0x190>)
 80008fe:	931d      	str	r3, [sp, #116]	; 0x74
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <slctElectAngleFromPosMode+0x194>)
 8000902:	ab0a      	add	r3, sp, #40	; 0x28
 8000904:	4611      	mov	r1, r2
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	4618      	mov	r0, r3
 800090a:	f007 faed 	bl	8007ee8 <memcpy>
 800090e:	466d      	mov	r5, sp
 8000910:	f106 040c 	add.w	r4, r6, #12
 8000914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000920:	e885 0003 	stmia.w	r5, {r0, r1}
 8000924:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000928:	4640      	mov	r0, r8
 800092a:	f001 fa39 	bl	8001da0 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <slctElectAngleFromPosMode+0x190>)
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <slctElectAngleFromPosMode+0x190>)
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	605a      	str	r2, [r3, #4]
		break;
 800093e:	e008      	b.n	8000952 <slctElectAngleFromPosMode+0x176>
	default:
		sensData->electAngle = 0.0f;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f04f 0200 	mov.w	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	f04f 0200 	mov.w	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
		break;
 8000950:	bf00      	nop
	}
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800095c:	200000a0 	.word	0x200000a0
 8000960:	461c4000 	.word	0x461c4000
 8000964:	2000009c 	.word	0x2000009c
 8000968:	200000b4 	.word	0x200000b4
 800096c:	20000134 	.word	0x20000134
 8000970:	200000e8 	.word	0x200000e8
 8000974:	20000090 	.word	0x20000090
 8000978:	2000008c 	.word	0x2000008c

0800097c <slctCntlFromDrvMode>:

void inline slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 800097c:	b084      	sub	sp, #16
 800097e:	b5b0      	push	{r4, r5, r7, lr}
 8000980:	b090      	sub	sp, #64	; 0x40
 8000982:	af0c      	add	r7, sp, #48	; 0x30
 8000984:	4604      	mov	r4, r0
 8000986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800098a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800098e:	4623      	mov	r3, r4
 8000990:	71fb      	strb	r3, [r7, #7]

	float VamRef;
	float ModRef = 1.13;
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <slctCntlFromDrvMode+0xd4>)
 8000994:	60fb      	str	r3, [r7, #12]
	if( sId_ref_i < -1.0f)
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;*/

	switch(drvMode){
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b04      	cmp	r3, #4
 800099a:	d037      	beq.n	8000a0c <slctCntlFromDrvMode+0x90>
 800099c:	2b04      	cmp	r3, #4
 800099e:	dc4a      	bgt.n	8000a36 <slctCntlFromDrvMode+0xba>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <slctCntlFromDrvMode+0x2e>
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d005      	beq.n	80009b4 <slctCntlFromDrvMode+0x38>
 80009a8:	e045      	b.n	8000a36 <slctCntlFromDrvMode+0xba>
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 80009aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80009ae:	f7ff fd10 	bl	80003d2 <gOffDuty>
			break;
 80009b2:	e045      	b.n	8000a40 <slctCntlFromDrvMode+0xc4>
		case DRVMODE_OPENLOOP:
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * 0.2f * gButton1;//gVolume;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <slctCntlFromDrvMode+0xd8>)
 80009b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009ba:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000a58 <slctCntlFromDrvMode+0xdc>
 80009be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a5c <slctCntlFromDrvMode+0xe0>
 80009c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <slctCntlFromDrvMode+0xe4>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009da:	edc7 7a02 	vstr	s15, [r7, #8]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 80009de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80009e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009e4:	930a      	str	r3, [sp, #40]	; 0x28
 80009e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009e8:	9309      	str	r3, [sp, #36]	; 0x24
 80009ea:	466d      	mov	r5, sp
 80009ec:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80009f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	602b      	str	r3, [r5, #0]
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a02:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a06:	f000 fcc3 	bl	8001390 <OpenLoopTasks>
			break;
 8000a0a:	e019      	b.n	8000a40 <slctCntlFromDrvMode+0xc4>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 8000a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a12:	930a      	str	r3, [sp, #40]	; 0x28
 8000a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a16:	9309      	str	r3, [sp, #36]	; 0x24
 8000a18:	466d      	mov	r5, sp
 8000a1a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	602b      	str	r3, [r5, #0]
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a30:	f000 fc18 	bl	8001264 <VectorControlTasks>
			break;
 8000a34:	e004      	b.n	8000a40 <slctCntlFromDrvMode+0xc4>
		default :
			gOffDuty(Duty, outputMode);
 8000a36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000a3a:	f7ff fcca 	bl	80003d2 <gOffDuty>
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a4a:	b004      	add	sp, #16
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	3f90a3d7 	.word	0x3f90a3d7
 8000a54:	200000b4 	.word	0x200000b4
 8000a58:	3f1cc471 	.word	0x3f1cc471
 8000a5c:	3e4ccccd 	.word	0x3e4ccccd
 8000a60:	2000008f 	.word	0x2000008f

08000a64 <calcCurrentRef>:

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
	switch(drvMode){
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d028      	beq.n	8000ac8 <calcCurrentRef+0x64>
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	dc51      	bgt.n	8000b1e <calcCurrentRef+0xba>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <calcCurrentRef+0x20>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d011      	beq.n	8000aa6 <calcCurrentRef+0x42>
 8000a82:	e04c      	b.n	8000b1e <calcCurrentRef+0xba>
		case DRVMODE_OFFDUTY:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f04f 0200 	mov.w	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
			break;
 8000aa4:	e04c      	b.n	8000b40 <calcCurrentRef+0xdc>
		case DRVMODE_OPENLOOP:
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	69da      	ldr	r2, [r3, #28]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	699a      	ldr	r2, [r3, #24]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	69da      	ldr	r2, [r3, #28]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	60da      	str	r2, [r3, #12]
			break;
 8000ac6:	e03b      	b.n	8000b40 <calcCurrentRef+0xdc>
		case DRVMODE_VECTORCONTROL:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <calcCurrentRef+0xe4>)
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	edc3 7a01 	vstr	s15, [r3, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3308      	adds	r3, #8
 8000aee:	4618      	mov	r0, r3
 8000af0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000b4c <calcCurrentRef+0xe8>
 8000af4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000b50 <calcCurrentRef+0xec>
 8000af8:	eeb0 0a67 	vmov.f32	s0, s15
 8000afc:	f7ff fc8d 	bl	800041a <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000b4c <calcCurrentRef+0xe8>
 8000b10:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000b50 <calcCurrentRef+0xec>
 8000b14:	eeb0 0a67 	vmov.f32	s0, s15
 8000b18:	f7ff fc7f 	bl	800041a <gLPF>
			break;
 8000b1c:	e010      	b.n	8000b40 <calcCurrentRef+0xdc>
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
	}
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000094 	.word	0x20000094
 8000b4c:	3a83126f 	.word	0x3a83126f
 8000b50:	41fb53d1 	.word	0x41fb53d1

08000b54 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = 1;//HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
	//B1 = 0b00000001 & (~B1);
	return B1;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	b2db      	uxtb	r3, r3
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7a:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	085b      	lsrs	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbe:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bcc:	eef1 7a67 	vneg.f32	s15, s15
 8000bd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bdc:	d50a      	bpl.n	8000bf4 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	ee07 3a90 	vmov	s15, r3
 8000be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000be8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf0:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000bf4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bf8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000c18 <readTimeInterval+0x8c>
 8000bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c00:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	ee07 3a90 	vmov	s15, r3
}
 8000c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	4d221fe8 	.word	0x4d221fe8

08000c1c <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000c36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3302      	adds	r3, #2
 8000c42:	b292      	uxth	r2, r2
 8000c44:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	b292      	uxth	r2, r2
 8000c54:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c6c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000cdc <readCurrent+0xc0>
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3304      	adds	r3, #4
 8000c98:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000cdc <readCurrent+0xc0>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
 8000cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000cdc <readCurrent+0xc0>
 8000cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cca:	edc3 7a00 	vstr	s15, [r3]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	bc71f4bc 	.word	0xbc71f4bc

08000ce0 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f004 fd74 	bl	80057dc <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	1c5c      	adds	r4, r3, #1
 8000d00:	2102      	movs	r1, #2
 8000d02:	4809      	ldr	r0, [pc, #36]	; (8000d28 <readHallSignal+0x48>)
 8000d04:	f004 fd6a 	bl	80057dc <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	1c9c      	adds	r4, r3, #2
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <readHallSignal+0x48>)
 8000d16:	f004 fd61 	bl	80057dc <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	7023      	strb	r3, [r4, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	48000400 	.word	0x48000400

08000d2c <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <readElectFreqFromHallSignal+0x98>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <readElectFreqFromHallSignal+0x9c>)
 8000d3a:	6013      	str	r3, [r2, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 8000d3c:	f7ff ff17 	bl	8000b6e <readInputCaptureCnt>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <readElectFreqFromHallSignal+0x98>)
 8000d44:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <readElectFreqFromHallSignal+0x98>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <readElectFreqFromHallSignal+0x9c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d023      	beq.n	8000d9a <readElectFreqFromHallSignal+0x6e>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <readElectFreqFromHallSignal+0x98>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <readElectFreqFromHallSignal+0x9c>)
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff15 	bl	8000b8c <readTimeInterval>
 8000d62:	ed87 0a03 	vstr	s0, [r7, #12]
		if( timeInterval > 0.0001f)
 8000d66:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d6a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000dcc <readElectFreqFromHallSignal+0xa0>
 8000d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d76:	dd0c      	ble.n	8000d92 <readElectFreqFromHallSignal+0x66>
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000d78:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000dd0 <readElectFreqFromHallSignal+0xa4>
 8000d7c:	edd7 0a03 	vldr	s1, [r7, #12]
 8000d80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d84:	f7ff fa77 	bl	8000276 <gfDivideAvoidZero>
 8000d88:	eef0 7a40 	vmov.f32	s15, s0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <readElectFreqFromHallSignal+0xa8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	801a      	strh	r2, [r3, #0]
	// If Input Capture Count keep same value, Set Electrical Freq Zero
	else if(sNoInputCaptureCnt < 2000)
		sNoInputCaptureCnt ++;
	else
		*electFreq = 0;
}
 8000d98:	e00f      	b.n	8000dba <readElectFreqFromHallSignal+0x8e>
	else if(sNoInputCaptureCnt < 2000)
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <readElectFreqFromHallSignal+0xa8>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000da2:	d206      	bcs.n	8000db2 <readElectFreqFromHallSignal+0x86>
		sNoInputCaptureCnt ++;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <readElectFreqFromHallSignal+0xa8>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <readElectFreqFromHallSignal+0xa8>)
 8000dae:	801a      	strh	r2, [r3, #0]
}
 8000db0:	e003      	b.n	8000dba <readElectFreqFromHallSignal+0x8e>
		*electFreq = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000148 	.word	0x20000148
 8000dc8:	2000014c 	.word	0x2000014c
 8000dcc:	38d1b717 	.word	0x38d1b717
 8000dd0:	31ca1db9 	.word	0x31ca1db9
 8000dd4:	20000144 	.word	0x20000144

08000dd8 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f993 3000 	ldrsb.w	r3, [r3]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d106      	bne.n	8000df8 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df0:	4819      	ldr	r0, [pc, #100]	; (8000e58 <writeOutputMode+0x80>)
 8000df2:	f004 fd0b 	bl	800580c <HAL_GPIO_WritePin>
 8000df6:	e005      	b.n	8000e04 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	4816      	ldr	r0, [pc, #88]	; (8000e58 <writeOutputMode+0x80>)
 8000e00:	f004 fd04 	bl	800580c <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d106      	bne.n	8000e1e <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e16:	4810      	ldr	r0, [pc, #64]	; (8000e58 <writeOutputMode+0x80>)
 8000e18:	f004 fcf8 	bl	800580c <HAL_GPIO_WritePin>
 8000e1c:	e005      	b.n	8000e2a <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <writeOutputMode+0x80>)
 8000e26:	f004 fcf1 	bl	800580c <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d106      	bne.n	8000e44 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <writeOutputMode+0x80>)
 8000e3e:	f004 fce5 	bl	800580c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000e42:	e005      	b.n	8000e50 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <writeOutputMode+0x80>)
 8000e4c:	f004 fcde 	bl	800580c <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000800 	.word	0x48000800

08000e5c <writeDuty>:

void writeDuty(float* Duty){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	ed93 7a00 	vldr	s14, [r3]
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <writeDuty+0x80>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <writeDuty+0x80>)
 8000e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e80:	ee17 2a90 	vmov	r2, s15
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <writeDuty+0x80>)
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <writeDuty+0x80>)
 8000ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea4:	ee17 2a90 	vmov	r2, s15
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3308      	adds	r3, #8
 8000eae:	ed93 7a00 	vldr	s14, [r3]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <writeDuty+0x80>)
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <writeDuty+0x80>)
 8000ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec8:	ee17 2a90 	vmov	r2, s15
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6178      	str	r0, [r7, #20]
 8000ee8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eec:	60ba      	str	r2, [r7, #8]
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8000ef4:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <calcElectAngle+0x1f0>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 8000f06:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80010d4 <calcElectAngle+0x1f4>
 8000f0a:	eddf 0a73 	vldr	s1, [pc, #460]	; 80010d8 <calcElectAngle+0x1f8>
 8000f0e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f12:	f7ff fa35 	bl	8000380 <gUpperLowerLimit>
 8000f16:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <calcElectAngle+0x1f0>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80010dc <calcElectAngle+0x1fc>
 8000f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f28:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f38:	edc7 7a08 	vstr	s15, [r7, #32]
	Kp_PLL = wc_PLL;
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	61fb      	str	r3, [r7, #28]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000f40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f44:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80010e0 <calcElectAngle+0x200>
 8000f48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f54:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5c:	edc7 7a06 	vstr	s15, [r7, #24]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000f60:	4b60      	ldr	r3, [pc, #384]	; (80010e4 <calcElectAngle+0x204>)
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <calcElectAngle+0x208>)
 8000f66:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8000f68:	6978      	ldr	r0, [r7, #20]
 8000f6a:	f000 f8d3 	bl	8001114 <calcVoltageMode>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <calcElectAngle+0x204>)
 8000f74:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <calcElectAngle+0x20c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <calcElectAngle+0x210>)
 8000f7c:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <calcElectAngle+0x208>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <calcElectAngle+0x204>)
 8000f84:	7811      	ldrb	r1, [r2, #0]
 8000f86:	4a5b      	ldr	r2, [pc, #364]	; (80010f4 <calcElectAngle+0x214>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f909 	bl	80011a0 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000f8e:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <calcElectAngle+0x204>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4a58      	ldr	r2, [pc, #352]	; (80010f4 <calcElectAngle+0x214>)
 8000f94:	f992 2000 	ldrsb.w	r2, [r2]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f92c 	bl	80011f8 <calcElectAngleFromVoltageMode>
 8000fa0:	eef0 7a40 	vmov.f32	s15, s0
 8000fa4:	4b51      	ldr	r3, [pc, #324]	; (80010ec <calcElectAngle+0x20c>)
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <calcElectAngle+0x20c>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	f7ff f9a6 	bl	8000304 <gfWrapTheta>
 8000fb8:	eef0 7a40 	vmov.f32	s15, s0
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <calcElectAngle+0x20c>)
 8000fbe:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8000fc2:	4b4d      	ldr	r3, [pc, #308]	; (80010f8 <calcElectAngle+0x218>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <calcElectAngle+0x21c>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 8000fca:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <calcElectAngle+0x218>)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d163      	bne.n	800109e <calcElectAngle+0x1be>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <calcElectAngle+0x21c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d110      	bne.n	8001000 <calcElectAngle+0x120>
			sElectAngVeloEstimate = electFreq * TWOPI;
 8000fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001100 <calcElectAngle+0x220>
 8000fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <calcElectAngle+0x1f0>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <calcElectAngle+0x1f0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a43      	ldr	r2, [pc, #268]	; (8001104 <calcElectAngle+0x224>)
 8000ff6:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <calcElectAngle+0x20c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a42      	ldr	r2, [pc, #264]	; (8001108 <calcElectAngle+0x228>)
 8000ffe:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <calcElectAngle+0x1f0>)
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	eddf 6a41 	vldr	s13, [pc, #260]	; 800110c <calcElectAngle+0x22c>
 800100a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <calcElectAngle+0x228>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <calcElectAngle+0x228>)
 800101a:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <calcElectAngle+0x228>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eeb0 0a67 	vmov.f32	s0, s15
 8001028:	f7ff f96c 	bl	8000304 <gfWrapTheta>
 800102c:	eef0 7a40 	vmov.f32	s15, s0
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <calcElectAngle+0x228>)
 8001032:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <calcElectAngle+0x20c>)
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <calcElectAngle+0x210>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	eeb4 7a67 	vcmp.f32	s14, s15
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	d035      	beq.n	80010b8 <calcElectAngle+0x1d8>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <calcElectAngle+0x20c>)
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <calcElectAngle+0x228>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <calcElectAngle+0x230>)
 800105e:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <calcElectAngle+0x230>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f7ff f94a 	bl	8000304 <gfWrapTheta>
 8001070:	eef0 7a40 	vmov.f32	s15, s0
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <calcElectAngle+0x230>)
 8001076:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <calcElectAngle+0x230>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	4820      	ldr	r0, [pc, #128]	; (8001104 <calcElectAngle+0x224>)
 8001082:	ed97 1a06 	vldr	s2, [r7, #24]
 8001086:	edd7 0a07 	vldr	s1, [r7, #28]
 800108a:	eeb0 0a67 	vmov.f32	s0, s15
 800108e:	f7ff f8c3 	bl	8000218 <cfPhaseLockedLoop>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <calcElectAngle+0x1f0>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
 800109c:	e00c      	b.n	80010b8 <calcElectAngle+0x1d8>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <calcElectAngle+0x20c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <calcElectAngle+0x228>)
 80010a4:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80010a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010aa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001100 <calcElectAngle+0x220>
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <calcElectAngle+0x1f0>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <calcElectAngle+0x228>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <calcElectAngle+0x1f0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]


}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000168 	.word	0x20000168
 80010d4:	00000000 	.word	0x00000000
 80010d8:	43fa0000 	.word	0x43fa0000
 80010dc:	3e22f983 	.word	0x3e22f983
 80010e0:	3e4ccccd 	.word	0x3e4ccccd
 80010e4:	20000150 	.word	0x20000150
 80010e8:	20000151 	.word	0x20000151
 80010ec:	20000158 	.word	0x20000158
 80010f0:	2000015c 	.word	0x2000015c
 80010f4:	20000152 	.word	0x20000152
 80010f8:	20000153 	.word	0x20000153
 80010fc:	20000154 	.word	0x20000154
 8001100:	40c90fdb 	.word	0x40c90fdb
 8001104:	20000164 	.word	0x20000164
 8001108:	20000160 	.word	0x20000160
 800110c:	461c4000 	.word	0x461c4000
 8001110:	2000016c 	.word	0x2000016c

08001114 <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3302      	adds	r3, #2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4413      	add	r3, r2
 800113e:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	3b01      	subs	r3, #1
 8001144:	2b05      	cmp	r3, #5
 8001146:	d821      	bhi.n	800118c <calcVoltageMode+0x78>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <calcVoltageMode+0x3c>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001187 	.word	0x08001187
 8001154:	0800116f 	.word	0x0800116f
 8001158:	08001169 	.word	0x08001169
 800115c:	0800117b 	.word	0x0800117b
 8001160:	08001181 	.word	0x08001181
 8001164:	08001175 	.word	0x08001175
	  case 3:
		voltageMode = 3;
 8001168:	2303      	movs	r3, #3
 800116a:	73fb      	strb	r3, [r7, #15]
		break;
 800116c:	e011      	b.n	8001192 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 800116e:	2304      	movs	r3, #4
 8001170:	73fb      	strb	r3, [r7, #15]
		break;
 8001172:	e00e      	b.n	8001192 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8001174:	2305      	movs	r3, #5
 8001176:	73fb      	strb	r3, [r7, #15]
		break;
 8001178:	e00b      	b.n	8001192 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 800117a:	2306      	movs	r3, #6
 800117c:	73fb      	strb	r3, [r7, #15]
		break;
 800117e:	e008      	b.n	8001192 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
		break;
 8001184:	e005      	b.n	8001192 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	73fb      	strb	r3, [r7, #15]
		break;
 800118a:	e002      	b.n	8001192 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
	  break;
 8001190:	bf00      	nop
	}

	return voltageMode;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	603a      	str	r2, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	460b      	mov	r3, r1
 80011ae:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 80011b0:	79ba      	ldrb	r2, [r7, #6]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	dd04      	ble.n	80011cc <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	3b06      	subs	r3, #6
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e008      	b.n	80011de <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 80011cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	da03      	bge.n	80011de <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	3306      	adds	r3, #6
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	701a      	strb	r2, [r3, #0]

}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001212:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800125c <calcElectAngleFromVoltageMode+0x64>
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	edc7 7a03 	vstr	s15, [r7, #12]

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8001226:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001260 <calcElectAngleFromVoltageMode+0x68>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	ed97 7a03 	vldr	s14, [r7, #12]
 800123e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001242:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	3f860a92 	.word	0x3f860a92
 8001260:	3f060a92 	.word	0x3f060a92

08001264 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001264:	b084      	sub	sp, #16
 8001266:	b5b0      	push	{r4, r5, r7, lr}
 8001268:	b08a      	sub	sp, #40	; 0x28
 800126a:	af0a      	add	r7, sp, #40	; 0x28
 800126c:	f107 0410 	add.w	r4, r7, #16
 8001270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800127a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127c:	3301      	adds	r3, #1
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001284:	3302      	adds	r3, #2
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	493b      	ldr	r1, [pc, #236]	; (800137c <VectorControlTasks+0x118>)
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f941 	bl	8001518 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001296:	edd7 7a04 	vldr	s15, [r7, #16]
 800129a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129c:	3310      	adds	r3, #16
 800129e:	4619      	mov	r1, r3
 80012a0:	4836      	ldr	r0, [pc, #216]	; (800137c <VectorControlTasks+0x118>)
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	f000 f9d9 	bl	800165c <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 80012aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b2:	3318      	adds	r3, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8001380 <VectorControlTasks+0x11c>
 80012ba:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001384 <VectorControlTasks+0x120>
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f7ff f8aa 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ce:	331c      	adds	r3, #28
 80012d0:	4618      	mov	r0, r3
 80012d2:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001380 <VectorControlTasks+0x11c>
 80012d6:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001384 <VectorControlTasks+0x120>
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	f7ff f89c 	bl	800041a <gLPF>

	CurrentFbControl(sensData, vectorControlData);
 80012e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e4:	9309      	str	r3, [sp, #36]	; 0x24
 80012e6:	466d      	mov	r5, sp
 80012e8:	f107 0420 	add.w	r4, r7, #32
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fe:	f000 fc13 	bl	8001b28 <CurrentFbControl>
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001304:	9309      	str	r3, [sp, #36]	; 0x24
 8001306:	466d      	mov	r5, sp
 8001308:	f107 0420 	add.w	r4, r7, #32
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	602b      	str	r3, [r5, #0]
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131e:	f000 fa27 	bl	8001770 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 8001322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001324:	9309      	str	r3, [sp, #36]	; 0x24
 8001326:	466d      	mov	r5, sp
 8001328:	f107 0420 	add.w	r4, r7, #32
 800132c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133e:	f000 fa4f 	bl	80017e0 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001342:	edd7 7a04 	vldr	s15, [r7, #16]
 8001346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001348:	3320      	adds	r3, #32
 800134a:	490f      	ldr	r1, [pc, #60]	; (8001388 <VectorControlTasks+0x124>)
 800134c:	4618      	mov	r0, r3
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f000 fab5 	bl	80018c0 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <VectorControlTasks+0x128>)
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <VectorControlTasks+0x124>)
 800135a:	f000 f93d 	bl	80015d8 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800135e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001362:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <VectorControlTasks+0x128>)
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	f000 fae9 	bl	8001940 <Vuvw2Duty>

}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001376:	b004      	add	sp, #16
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000170 	.word	0x20000170
 8001380:	38d1b717 	.word	0x38d1b717
 8001384:	42fb3333 	.word	0x42fb3333
 8001388:	2000017c 	.word	0x2000017c
 800138c:	20000184 	.word	0x20000184

08001390 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001390:	b084      	sub	sp, #16
 8001392:	b5b0      	push	{r4, r5, r7, lr}
 8001394:	b08c      	sub	sp, #48	; 0x30
 8001396:	af0a      	add	r7, sp, #40	; 0x28
 8001398:	ed87 0a01 	vstr	s0, [r7, #4]
 800139c:	f107 0418 	add.w	r4, r7, #24
 80013a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80013a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80013aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ac:	3301      	adds	r3, #1
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80013b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b4:	3302      	adds	r3, #2
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4937      	ldr	r1, [pc, #220]	; (800149c <OpenLoopTasks+0x10c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f8a9 	bl	8001518 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 80013c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013cc:	3310      	adds	r3, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	4832      	ldr	r0, [pc, #200]	; (800149c <OpenLoopTasks+0x10c>)
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	f000 f941 	bl	800165c <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 80013da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e2:	3318      	adds	r3, #24
 80013e4:	4618      	mov	r0, r3
 80013e6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80014a0 <OpenLoopTasks+0x110>
 80013ea:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80014a4 <OpenLoopTasks+0x114>
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	f7ff f812 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 80013f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80013fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fe:	331c      	adds	r3, #28
 8001400:	4618      	mov	r0, r3
 8001402:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80014a0 <OpenLoopTasks+0x110>
 8001406:	eddf 0a27 	vldr	s1, [pc, #156]	; 80014a4 <OpenLoopTasks+0x114>
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	f7ff f804 	bl	800041a <gLPF>

	vectorControlData->Vdq[0] = 0.0f;
 8001412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
	vectorControlData->Vdq[1] = VamRef;
 800141a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	625a      	str	r2, [r3, #36]	; 0x24


	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001422:	9309      	str	r3, [sp, #36]	; 0x24
 8001424:	466d      	mov	r5, sp
 8001426:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143c:	f000 f998 	bl	8001770 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001442:	9309      	str	r3, [sp, #36]	; 0x24
 8001444:	466d      	mov	r5, sp
 8001446:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145c:	f000 f9c0 	bl	80017e0 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001460:	edd7 7a06 	vldr	s15, [r7, #24]
 8001464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001466:	3320      	adds	r3, #32
 8001468:	490f      	ldr	r1, [pc, #60]	; (80014a8 <OpenLoopTasks+0x118>)
 800146a:	4618      	mov	r0, r3
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f000 fa26 	bl	80018c0 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <OpenLoopTasks+0x11c>)
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <OpenLoopTasks+0x118>)
 8001478:	f000 f8ae 	bl	80015d8 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800147c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001480:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <OpenLoopTasks+0x11c>)
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f000 fa5a 	bl	8001940 <Vuvw2Duty>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001496:	b004      	add	sp, #16
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000170 	.word	0x20000170
 80014a0:	38d1b717 	.word	0x38d1b717
 80014a4:	42fb3333 	.word	0x42fb3333
 80014a8:	2000017c 	.word	0x2000017c
 80014ac:	20000184 	.word	0x20000184

080014b0 <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80014b0:	b084      	sub	sp, #16
 80014b2:	b5b0      	push	{r4, r5, r7, lr}
 80014b4:	b08a      	sub	sp, #40	; 0x28
 80014b6:	af0a      	add	r7, sp, #40	; 0x28
 80014b8:	f107 0410 	add.w	r4, r7, #16
 80014bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	calcVdqFeedForword(sensData, vectorControlData);
 80014c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c2:	9309      	str	r3, [sp, #36]	; 0x24
 80014c4:	466d      	mov	r5, sp
 80014c6:	f107 0420 	add.w	r4, r7, #32
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	602b      	str	r3, [r5, #0]
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	f000 fbcc 	bl	8001c78 <calcVdqFeedForword>
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 80014e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80014e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 80014f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001508:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001514:	b004      	add	sp, #16
 8001516:	4770      	bx	lr

08001518 <uvw2ab>:

static inline void uvw2ab(float* uvw, float* ab){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3304      	adds	r3, #4
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001534:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001538:	ee37 7a67 	vsub.f32	s14, s14, s15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3308      	adds	r3, #8
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800154c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001550:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80015cc <uvw2ab+0xb4>
 8001554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80015d0 <uvw2ab+0xb8>
 800156a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3308      	adds	r3, #8
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	eddf 6a16 	vldr	s13, [pc, #88]	; 80015d0 <uvw2ab+0xb8>
 800157a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3304      	adds	r3, #4
 8001586:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80015cc <uvw2ab+0xb4>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	ed93 7a00 	vldr	s14, [r3]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3308      	adds	r3, #8
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3308      	adds	r3, #8
 80015b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015d4 <uvw2ab+0xbc>
 80015b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015bc:	edc3 7a00 	vstr	s15, [r3]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	3f5105ec 	.word	0x3f5105ec
 80015d0:	3f5db3d7 	.word	0x3f5db3d7
 80015d4:	3f13cd3a 	.word	0x3f13cd3a

080015d8 <ab2uvw>:

static inline void ab2uvw(float* ab, float* uvw){
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001654 <ab2uvw+0x7c>
 80015ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001600:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001658 <ab2uvw+0x80>
 8001610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3304      	adds	r3, #4
 800161c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001654 <ab2uvw+0x7c>
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eeb1 7a67 	vneg.f32	s14, s15
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3308      	adds	r3, #8
 800163e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001642:	edc3 7a00 	vstr	s15, [r3]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	3f5105ec 	.word	0x3f5105ec
 8001658:	3f5db3d7 	.word	0x3f5db3d7

0800165c <ab2dq>:

static inline void ab2dq(float theta, float* ab, float* dq){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	ed87 0a03 	vstr	s0, [r7, #12]
 8001666:	60b8      	str	r0, [r7, #8]
 8001668:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800166a:	ed97 0a03 	vldr	s0, [r7, #12]
 800166e:	f006 fc95 	bl	8007f9c <sinf>
 8001672:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001676:	ed97 0a03 	vldr	s0, [r7, #12]
 800167a:	f006 fc4b 	bl	8007f14 <cosf>
 800167e:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	edd7 7a04 	vldr	s15, [r7, #16]
 800168c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3304      	adds	r3, #4
 8001694:	edd3 6a00 	vldr	s13, [r3]
 8001698:	edd7 7a05 	vldr	s15, [r7, #20]
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb1 7a67 	vneg.f32	s14, s15
 80016b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3304      	adds	r3, #4
 80016c0:	edd3 6a00 	vldr	s13, [r3]
 80016c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d4:	edc3 7a00 	vstr	s15, [r3]
}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <calcAmpFromVect>:

static inline float calcAmpFromVect(float* Vect){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	edd3 6a00 	vldr	s13, [r3]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 8001714:	ed97 0a03 	vldr	s0, [r7, #12]
 8001718:	f006 fca8 	bl	800806c <sqrtf>
 800171c:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	ee07 3a90 	vmov	s15, r3
}
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <calcModFromVamp>:

static inline float calcModFromVamp(float Vamp, float twoDivVdc){
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
 800173a:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 800173e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001742:	edd7 7a00 	vldr	s15, [r7]
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800176c <calcModFromVamp+0x3c>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001752:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	ee07 3a90 	vmov	s15, r3
}
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	3f5105ec 	.word	0x3f5105ec

08001770 <calcAmpPhaseModFromVoltVect>:

static inline void calcAmpPhaseModFromVoltVect(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001770:	b084      	sub	sp, #16
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
 8001776:	f107 0c08 	add.w	ip, r7, #8
 800177a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 800177e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001780:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001786:	ed93 7a08 	vldr	s14, [r3, #32]
 800178a:	eef0 0a47 	vmov.f32	s1, s14
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	f006 fc49 	bl	8008028 <atan2f>
 8001796:	eef0 7a40 	vmov.f32	s15, s0
 800179a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800179c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 80017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a2:	3320      	adds	r3, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff9b 	bl	80016e0 <calcAmpFromVect>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 80017b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80017ba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017be:	eef0 0a47 	vmov.f32	s1, s14
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	f7ff ffb3 	bl	8001730 <calcModFromVamp>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017dc:	b004      	add	sp, #16
 80017de:	4770      	bx	lr

080017e0 <limitVoltVectAmp>:

static inline void limitVoltVectAmp(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80017e0:	b084      	sub	sp, #16
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	f107 0c10 	add.w	ip, r7, #16
 80017ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float VampLimit;

	if( vectorControlData->Mod > MODLIMIT ){
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80017f6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80018b4 <limitVoltVectAmp+0xd4>
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dc00      	bgt.n	8001806 <limitVoltVectAmp+0x26>
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
		vectorControlData->Mod = MODLIMIT;

	}
}
 8001804:	e04e      	b.n	80018a4 <limitVoltVectAmp+0xc4>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8001806:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800180a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80018b8 <limitVoltVectAmp+0xd8>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018b4 <limitVoltVectAmp+0xd4>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	edc7 7a01 	vstr	s15, [r7, #4]
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 800181e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001820:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	f006 fb74 	bl	8007f14 <cosf>
 800182c:	eeb0 7a40 	vmov.f32	s14, s0
 8001830:	edd7 7a01 	vldr	s15, [r7, #4]
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800183a:	edc3 7a08 	vstr	s15, [r3, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 800183e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001840:	ed93 7a08 	vldr	s14, [r3, #32]
 8001844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001846:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800184a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001850:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 800185e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001860:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	f006 fb98 	bl	8007f9c <sinf>
 800186c:	eeb0 7a40 	vmov.f32	s14, s0
 8001870:	edd7 7a01 	vldr	s15, [r7, #4]
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 800187e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001880:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001886:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800188a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800188e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001890:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 800189e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <limitVoltVectAmp+0xdc>)
 80018a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018ae:	b004      	add	sp, #16
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	3f933333 	.word	0x3f933333
 80018b8:	3f1cc471 	.word	0x3f1cc471
 80018bc:	3f933333 	.word	0x3f933333

080018c0 <dq2ab>:

static inline void dq2ab(float theta, float* dq, float* ab){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018ca:	60b8      	str	r0, [r7, #8]
 80018cc:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 80018ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80018d2:	f006 fb63 	bl	8007f9c <sinf>
 80018d6:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 80018da:	ed97 0a03 	vldr	s0, [r7, #12]
 80018de:	f006 fb19 	bl	8007f14 <cosf>
 80018e2:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3304      	adds	r3, #4
 80018f8:	edd3 6a00 	vldr	s13, [r3]
 80018fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	edd7 7a05 	vldr	s15, [r7, #20]
 8001918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3304      	adds	r3, #4
 8001920:	edd3 6a00 	vldr	s13, [r3]
 8001924:	edd7 7a04 	vldr	s15, [r7, #16]
 8001928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	edc3 7a00 	vstr	s15, [r3]
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <Vuvw2Duty>:

static inline void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	ed87 0a03 	vstr	s0, [r7, #12]
 800194a:	60b8      	str	r0, [r7, #8]
 800194c:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3304      	adds	r3, #4
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	d502      	bpl.n	8001970 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3308      	adds	r3, #8
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed97 7a07 	vldr	s14, [r7, #28]
 800197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d502      	bpl.n	800198c <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3304      	adds	r3, #4
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed97 7a06 	vldr	s14, [r7, #24]
 800199e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	dd02      	ble.n	80019ae <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3308      	adds	r3, #8
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	dd02      	ble.n	80019ca <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	61bb      	str	r3, [r7, #24]

	vo = 0.0f;//(max + min) * 0.5f;
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	3304      	adds	r3, #4
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	3304      	adds	r3, #4
 80019f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3308      	adds	r3, #8
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3308      	adds	r3, #8
 8001a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a10:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	3308      	adds	r3, #8
 8001a44:	ed93 7a00 	vldr	s14, [r3]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a62:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a66:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6a:	f7fe fc89 	bl	8000380 <gUpperLowerLimit>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	1d1c      	adds	r4, r3, #4
 8001a84:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001a88:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	f7fe fc76 	bl	8000380 <gUpperLowerLimit>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0408 	add.w	r4, r3, #8
 8001aaa:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001aae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	f7fe fc63 	bl	8000380 <gUpperLowerLimit>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
 8001abe:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001af6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001afa:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3308      	adds	r3, #8
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3308      	adds	r3, #8
 8001b12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1a:	edc3 7a00 	vstr	s15, [r3]

}
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
	...

08001b28 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001b28:	b084      	sub	sp, #16
 8001b2a:	b5b0      	push	{r4, r5, r7, lr}
 8001b2c:	b090      	sub	sp, #64	; 0x40
 8001b2e:	af0a      	add	r7, sp, #40	; 0x28
 8001b30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Kp;
	float Kig;
	float Kid;
	float wc;

	wc = 10.0f * TWOPI;
 8001b38:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <CurrentFbControl+0x140>)
 8001b3a:	617b      	str	r3, [r7, #20]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
 8001b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b40:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001c6c <CurrentFbControl+0x144>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	edc7 7a04 	vstr	s15, [r7, #16]
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
 8001b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b50:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001c70 <CurrentFbControl+0x148>
 8001b54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b58:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001c74 <CurrentFbControl+0x14c>
 8001b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b60:	edc7 7a03 	vstr	s15, [r7, #12]
	Kid = Kig;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	60bb      	str	r3, [r7, #8]

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8001b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a00 	vstr	s15, [r7]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8001b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b84:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8c:	edc7 7a01 	vstr	s15, [r7, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8001b90:	ed97 7a00 	vldr	s14, [r7]
 8001b94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8001ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ba6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001bba:	edd7 6a00 	vldr	s13, [r7]
 8001bbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bcc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001bd6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8001bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bee:	9309      	str	r3, [sp, #36]	; 0x24
 8001bf0:	466d      	mov	r5, sp
 8001bf2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	602b      	str	r3, [r5, #0]
 8001c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c08:	f000 f836 	bl	8001c78 <calcVdqFeedForword>

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001c0c:	ed97 7a00 	vldr	s14, [r7]
 8001c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c24:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2e:	edc3 7a08 	vstr	s15, [r3, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001c32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c62:	b004      	add	sp, #16
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	427b53d2 	.word	0x427b53d2
 8001c6c:	3949539b 	.word	0x3949539b
 8001c70:	3f75c28f 	.word	0x3f75c28f
 8001c74:	461c4000 	.word	0x461c4000

08001c78 <calcVdqFeedForword>:

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001c78:	b084      	sub	sp, #16
 8001c7a:	b490      	push	{r4, r7}
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f107 0408 	add.w	r4, r7, #8
 8001c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8001c86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8a:	eef1 7a67 	vneg.f32	s15, s15
 8001c8e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001cdc <calcVdqFeedForword+0x64>
 8001c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c96:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ce0 <calcVdqFeedForword+0x68>
 8001c9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001caa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8001cae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cb8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ce4 <calcVdqFeedForword+0x6c>
 8001cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cc0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001ce8 <calcVdqFeedForword+0x70>
 8001cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc90      	pop	{r4, r7}
 8001cd8:	b004      	add	sp, #16
 8001cda:	4770      	bx	lr
 8001cdc:	39fba882 	.word	0x39fba882
 8001ce0:	3ecccccd 	.word	0x3ecccccd
 8001ce4:	3949539b 	.word	0x3949539b
 8001ce8:	3a870111 	.word	0x3a870111

08001cec <FluxObserver>:


static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	ed87 0a01 	vstr	s0, [r7, #4]
	float angleErr;
	float Egd[2];
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001d98 <FluxObserver+0xac>
 8001d0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001d9c <FluxObserver+0xb0>
 8001d1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	edc7 7a05 	vstr	s15, [r7, #20]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3304      	adds	r3, #4
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001d98 <FluxObserver+0xac>
 8001d46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d52:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001d9c <FluxObserver+0xb0>
 8001d56:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	edc7 7a06 	vstr	s15, [r7, #24]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d70:	eef1 7a67 	vneg.f32	s15, s15
 8001d74:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d78:	eef0 0a47 	vmov.f32	s1, s14
 8001d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d80:	f006 f952 	bl	8008028 <atan2f>
 8001d84:	ed87 0a07 	vstr	s0, [r7, #28]
	return angleErr;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	ee07 3a90 	vmov	s15, r3
}
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	3f75c28f 	.word	0x3f75c28f
 8001d9c:	3949539b 	.word	0x3949539b

08001da0 <calcElectAngleEstimate>:

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001da0:	b084      	sub	sp, #16
 8001da2:	b590      	push	{r4, r7, lr}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4604      	mov	r4, r0
 8001daa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001db2:	4623      	mov	r3, r4
 8001db4:	71fb      	strb	r3, [r7, #7]
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dbe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dc2:	f103 0220 	add.w	r2, r3, #32
 8001dc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dca:	3310      	adds	r3, #16
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff8a 	bl	8001cec <FluxObserver>
 8001dd8:	eef0 7a40 	vmov.f32	s15, s0
 8001ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001de0:	edc3 7a01 	vstr	s15, [r3, #4]


	if( flgInit == 0){
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d110      	bne.n	8001e0c <calcElectAngleEstimate+0x6c>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df0:	609a      	str	r2, [r3, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df8:	60da      	str	r2, [r3, #12]
		electAngleEstimateData->wc_PLL = 0.0f;
 8001dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	4a39      	ldr	r2, [pc, #228]	; (8001eec <calcElectAngleEstimate+0x14c>)
 8001e08:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001e0a:	e067      	b.n	8001edc <calcElectAngleEstimate+0x13c>
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60bb      	str	r3, [r7, #8]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4618      	mov	r0, r3
 8001e1a:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001ef0 <calcElectAngleEstimate+0x150>
 8001e1e:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001ef4 <calcElectAngleEstimate+0x154>
 8001e22:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001ef8 <calcElectAngleEstimate+0x158>
 8001e26:	f7fe fb28 	bl	800047a <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e30:	601a      	str	r2, [r3, #0]
		Ts_PLL = CARRIERCYCLE;
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <calcElectAngleEstimate+0x15c>)
 8001e34:	617b      	str	r3, [r7, #20]
		Kp_PLL = wc_PLL;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	613b      	str	r3, [r7, #16]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e3e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001f00 <calcElectAngleEstimate+0x160>
 8001e42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	edc7 7a03 	vstr	s15, [r7, #12]
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e66:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e6a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001f04 <calcElectAngleEstimate+0x164>
 8001e6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e7a:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e82:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f7fe fa3b 	bl	8000304 <gfWrapTheta>
 8001e8e:	eef0 7a40 	vmov.f32	s15, s0
 8001e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e96:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	f7fe fa2d 	bl	8000304 <gfWrapTheta>
 8001eaa:	eef0 7a40 	vmov.f32	s15, s0
 8001eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eb2:	edc3 7a01 	vstr	s15, [r3, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eba:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <calcElectAngleEstimate+0x14c>)
 8001ec0:	ed97 1a03 	vldr	s2, [r7, #12]
 8001ec4:	edd7 0a04 	vldr	s1, [r7, #16]
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7fe f9a4 	bl	8000218 <cfPhaseLockedLoop>
 8001ed0:	eef0 7a40 	vmov.f32	s15, s0
 8001ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ed8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ee6:	b004      	add	sp, #16
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000190 	.word	0x20000190
 8001ef0:	38d1b717 	.word	0x38d1b717
 8001ef4:	42480000 	.word	0x42480000
 8001ef8:	449d1463 	.word	0x449d1463
 8001efc:	38d1b717 	.word	0x38d1b717
 8001f00:	3e4ccccd 	.word	0x3e4ccccd
 8001f04:	461c4000 	.word	0x461c4000

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0c:	f000 fd41 	bl	8002992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f10:	f000 f86a 	bl	8001fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f14:	f000 faaa 	bl	800246c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f18:	f000 f8b2 	bl	8002080 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001f1c:	f000 f97c 	bl	8002218 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f20:	f000 fa3a 	bl	8002398 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001f24:	482c      	ldr	r0, [pc, #176]	; (8001fd8 <main+0xd0>)
 8001f26:	f004 fc8b 	bl	8006840 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001f2a:	482c      	ldr	r0, [pc, #176]	; (8001fdc <main+0xd4>)
 8001f2c:	f002 fa58 	bl	80043e0 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f36:	482a      	ldr	r0, [pc, #168]	; (8001fe0 <main+0xd8>)
 8001f38:	f003 fc68 	bl	800580c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f42:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <main+0xd8>)
 8001f44:	f003 fc62 	bl	800580c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4e:	4824      	ldr	r0, [pc, #144]	; (8001fe0 <main+0xd8>)
 8001f50:	f003 fc5c 	bl	800580c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f54:	2100      	movs	r1, #0
 8001f56:	4820      	ldr	r0, [pc, #128]	; (8001fd8 <main+0xd0>)
 8001f58:	f004 fd42 	bl	80069e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	481e      	ldr	r0, [pc, #120]	; (8001fd8 <main+0xd0>)
 8001f60:	f005 fd86 	bl	8007a70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f64:	2104      	movs	r1, #4
 8001f66:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <main+0xd0>)
 8001f68:	f004 fd3a 	bl	80069e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <main+0xd0>)
 8001f70:	f005 fd7e 	bl	8007a70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001f74:	2108      	movs	r1, #8
 8001f76:	4818      	ldr	r0, [pc, #96]	; (8001fd8 <main+0xd0>)
 8001f78:	f004 fd32 	bl	80069e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <main+0xd0>)
 8001f80:	f005 fd76 	bl	8007a70 <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <main+0xdc>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <main+0xdc>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <main+0xdc>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <main+0xdc>)
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <main+0xdc>)
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <main+0xdc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <main+0xdc>)
 8001fa4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001fa8:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <main+0xdc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <main+0xdc>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <main+0xdc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <main+0xdc>)
 8001fbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fc0:	6013      	str	r3, [r2, #0]

  TIM1 -> ARR = COUNTERPERIOD;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <main+0xdc>)
 8001fc4:	f242 1233 	movw	r2, #8499	; 0x2133
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <main+0xdc>)
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <main+0xdc>)
 8001fd0:	3b28      	subs	r3, #40	; 0x28
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <main+0xcc>
 8001fd6:	bf00      	nop
 8001fd8:	20000200 	.word	0x20000200
 8001fdc:	20000194 	.word	0x20000194
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	40012c00 	.word	0x40012c00

08001fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b094      	sub	sp, #80	; 0x50
 8001fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	2238      	movs	r2, #56	; 0x38
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f005 ff84 	bl	8007f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800200a:	2000      	movs	r0, #0
 800200c:	f003 fc30 	bl	8005870 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201a:	2340      	movs	r3, #64	; 0x40
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201e:	2302      	movs	r3, #2
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002022:	2302      	movs	r3, #2
 8002024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002026:	2304      	movs	r3, #4
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800202a:	2355      	movs	r3, #85	; 0x55
 800202c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800202e:	2302      	movs	r3, #2
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002032:	2302      	movs	r3, #2
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002036:	2302      	movs	r3, #2
 8002038:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fcba 	bl	80059b8 <HAL_RCC_OscConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800204a:	f000 fa7f 	bl	800254c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204e:	230f      	movs	r3, #15
 8002050:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002052:	2303      	movs	r3, #3
 8002054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2104      	movs	r1, #4
 8002066:	4618      	mov	r0, r3
 8002068:	f003 ffb8 	bl	8005fdc <HAL_RCC_ClockConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002072:	f000 fa6b 	bl	800254c <Error_Handler>
  }
}
 8002076:	bf00      	nop
 8002078:	3750      	adds	r7, #80	; 0x50
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b09a      	sub	sp, #104	; 0x68
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002086:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002092:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002096:	2220      	movs	r2, #32
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f005 ff32 	bl	8007f04 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80020a0:	463b      	mov	r3, r7
 80020a2:	223c      	movs	r2, #60	; 0x3c
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f005 ff2c 	bl	8007f04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020ac:	4b55      	ldr	r3, [pc, #340]	; (8002204 <MX_ADC1_Init+0x184>)
 80020ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <MX_ADC1_Init+0x184>)
 80020b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020bc:	4b51      	ldr	r3, [pc, #324]	; (8002204 <MX_ADC1_Init+0x184>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <MX_ADC1_Init+0x184>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <MX_ADC1_Init+0x184>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <MX_ADC1_Init+0x184>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <MX_ADC1_Init+0x184>)
 80020d6:	2204      	movs	r2, #4
 80020d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020da:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <MX_ADC1_Init+0x184>)
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <MX_ADC1_Init+0x184>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <MX_ADC1_Init+0x184>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ec:	4b45      	ldr	r3, [pc, #276]	; (8002204 <MX_ADC1_Init+0x184>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <MX_ADC1_Init+0x184>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <MX_ADC1_Init+0x184>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002100:	4b40      	ldr	r3, [pc, #256]	; (8002204 <MX_ADC1_Init+0x184>)
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <MX_ADC1_Init+0x184>)
 800210a:	2200      	movs	r2, #0
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <MX_ADC1_Init+0x184>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002116:	483b      	ldr	r0, [pc, #236]	; (8002204 <MX_ADC1_Init+0x184>)
 8002118:	f000 fed8 	bl	8002ecc <HAL_ADC_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002122:	f000 fa13 	bl	800254c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002126:	2300      	movs	r3, #0
 8002128:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800212a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800212e:	4619      	mov	r1, r3
 8002130:	4834      	ldr	r0, [pc, #208]	; (8002204 <MX_ADC1_Init+0x184>)
 8002132:	f002 ffb9 	bl	80050a8 <HAL_ADCEx_MultiModeConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800213c:	f000 fa06 	bl	800254c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <MX_ADC1_Init+0x188>)
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002144:	2306      	movs	r3, #6
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002148:	2300      	movs	r3, #0
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800214c:	237f      	movs	r3, #127	; 0x7f
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002150:	2304      	movs	r3, #4
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002158:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800215c:	4619      	mov	r1, r3
 800215e:	4829      	ldr	r0, [pc, #164]	; (8002204 <MX_ADC1_Init+0x184>)
 8002160:	f001 faee 	bl	8003740 <HAL_ADC_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800216a:	f000 f9ef 	bl	800254c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <MX_ADC1_Init+0x18c>)
 8002170:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002172:	2309      	movs	r3, #9
 8002174:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800217a:	237f      	movs	r3, #127	; 0x7f
 800217c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800217e:	2304      	movs	r3, #4
 8002180:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002186:	2303      	movs	r3, #3
 8002188:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4815      	ldr	r0, [pc, #84]	; (8002204 <MX_ADC1_Init+0x184>)
 80021b0:	f002 fa4e 	bl	8004650 <HAL_ADCEx_InjectedConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80021ba:	f000 f9c7 	bl	800254c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_ADC1_Init+0x190>)
 80021c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80021c2:	f240 130f 	movw	r3, #271	; 0x10f
 80021c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <MX_ADC1_Init+0x184>)
 80021ce:	f002 fa3f 	bl	8004650 <HAL_ADCEx_InjectedConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 80021d8:	f000 f9b8 	bl	800254c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <MX_ADC1_Init+0x194>)
 80021de:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80021e0:	f240 2315 	movw	r3, #533	; 0x215
 80021e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_ADC1_Init+0x184>)
 80021ec:	f002 fa30 	bl	8004650 <HAL_ADCEx_InjectedConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80021f6:	f000 f9a9 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3768      	adds	r7, #104	; 0x68
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000194 	.word	0x20000194
 8002208:	21800100 	.word	0x21800100
 800220c:	04300002 	.word	0x04300002
 8002210:	1d500080 	.word	0x1d500080
 8002214:	19200040 	.word	0x19200040

08002218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b098      	sub	sp, #96	; 0x60
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800222a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]
 800223c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2234      	movs	r2, #52	; 0x34
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f005 fe5d 	bl	8007f04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <MX_TIM1_Init+0x178>)
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <MX_TIM1_Init+0x17c>)
 800224e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002250:	4b4f      	ldr	r3, [pc, #316]	; (8002390 <MX_TIM1_Init+0x178>)
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002256:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <MX_TIM1_Init+0x178>)
 8002258:	2220      	movs	r2, #32
 800225a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <MX_TIM1_Init+0x178>)
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <MX_TIM1_Init+0x178>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800226a:	4b49      	ldr	r3, [pc, #292]	; (8002390 <MX_TIM1_Init+0x178>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b47      	ldr	r3, [pc, #284]	; (8002390 <MX_TIM1_Init+0x178>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002276:	4846      	ldr	r0, [pc, #280]	; (8002390 <MX_TIM1_Init+0x178>)
 8002278:	f004 fb5a 	bl	8006930 <HAL_TIM_PWM_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002282:	f000 f963 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002286:	2370      	movs	r3, #112	; 0x70
 8002288:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002296:	4619      	mov	r1, r3
 8002298:	483d      	ldr	r0, [pc, #244]	; (8002390 <MX_TIM1_Init+0x178>)
 800229a:	f005 fcab 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022a4:	f000 f952 	bl	800254c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a8:	2360      	movs	r3, #96	; 0x60
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b0:	2300      	movs	r3, #0
 80022b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4830      	ldr	r0, [pc, #192]	; (8002390 <MX_TIM1_Init+0x178>)
 80022ce:	f004 fd8d 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022d8:	f000 f938 	bl	800254c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e0:	2204      	movs	r2, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	482a      	ldr	r0, [pc, #168]	; (8002390 <MX_TIM1_Init+0x178>)
 80022e6:	f004 fd81 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80022f0:	f000 f92c 	bl	800254c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80022f4:	2302      	movs	r3, #2
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80022f8:	2308      	movs	r3, #8
 80022fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002300:	2208      	movs	r2, #8
 8002302:	4619      	mov	r1, r3
 8002304:	4822      	ldr	r0, [pc, #136]	; (8002390 <MX_TIM1_Init+0x178>)
 8002306:	f004 fd71 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002310:	f000 f91c 	bl	800254c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002314:	2300      	movs	r3, #0
 8002316:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002318:	2300      	movs	r3, #0
 800231a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800231c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002320:	220c      	movs	r2, #12
 8002322:	4619      	mov	r1, r3
 8002324:	481a      	ldr	r0, [pc, #104]	; (8002390 <MX_TIM1_Init+0x178>)
 8002326:	f004 fd61 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8002330:	f000 f90c 	bl	800254c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800235a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4619      	mov	r1, r3
 8002370:	4807      	ldr	r0, [pc, #28]	; (8002390 <MX_TIM1_Init+0x178>)
 8002372:	f005 fcd5 	bl	8007d20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 800237c:	f000 f8e6 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <MX_TIM1_Init+0x178>)
 8002382:	f000 fa03 	bl	800278c <HAL_TIM_MspPostInit>

}
 8002386:	bf00      	nop
 8002388:	3760      	adds	r7, #96	; 0x60
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000200 	.word	0x20000200
 8002394:	40012c00 	.word	0x40012c00

08002398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d2:	4b25      	ldr	r3, [pc, #148]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023de:	4822      	ldr	r0, [pc, #136]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023e0:	f004 fc10 	bl	8006c04 <HAL_TIM_IC_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023ea:	f000 f8af 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	481a      	ldr	r0, [pc, #104]	; (8002468 <MX_TIM2_Init+0xd0>)
 80023fe:	f005 fbf9 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002408:	f000 f8a0 	bl	800254c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002410:	2301      	movs	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	4811      	ldr	r0, [pc, #68]	; (8002468 <MX_TIM2_Init+0xd0>)
 8002424:	f004 fc45 	bl	8006cb2 <HAL_TIM_IC_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800242e:	f000 f88d 	bl	800254c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2204      	movs	r2, #4
 8002436:	4619      	mov	r1, r3
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <MX_TIM2_Init+0xd0>)
 800243a:	f004 fc3a 	bl	8006cb2 <HAL_TIM_IC_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002444:	f000 f882 	bl	800254c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2208      	movs	r2, #8
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <MX_TIM2_Init+0xd0>)
 8002450:	f004 fc2f 	bl	8006cb2 <HAL_TIM_IC_ConfigChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800245a:	f000 f877 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000024c 	.word	0x2000024c

0800246c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <MX_GPIO_Init+0xd4>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <MX_GPIO_Init+0xd4>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <MX_GPIO_Init+0xd4>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <MX_GPIO_Init+0xd4>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4a28      	ldr	r2, [pc, #160]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024a0:	f043 0320 	orr.w	r3, r3, #32
 80024a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_GPIO_Init+0xd4>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80024e8:	4816      	ldr	r0, [pc, #88]	; (8002544 <MX_GPIO_Init+0xd8>)
 80024ea:	f003 f98f 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80024f4:	4814      	ldr	r0, [pc, #80]	; (8002548 <MX_GPIO_Init+0xdc>)
 80024f6:	f003 f989 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 80024fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80024fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_GPIO_Init+0xd8>)
 8002514:	f002 ffe0 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002518:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800251c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	2301      	movs	r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_GPIO_Init+0xdc>)
 8002532:	f002 ffd1 	bl	80054d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	48000400 	.word	0x48000400
 8002548:	48000800 	.word	0x48000800

0800254c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002550:	b672      	cpsid	i
}
 8002552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002554:	e7fe      	b.n	8002554 <Error_Handler+0x8>
	...

08002558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_MspInit+0x44>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_MspInit+0x44>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6613      	str	r3, [r2, #96]	; 0x60
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_MspInit+0x44>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_MspInit+0x44>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_MspInit+0x44>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_MspInit+0x44>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0a0      	sub	sp, #128	; 0x80
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	2254      	movs	r2, #84	; 0x54
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f005 fc9f 	bl	8007f04 <memset>
  if(hadc->Instance==ADC1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ce:	d154      	bne.n	800267a <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fedf 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80025ec:	f7ff ffae 	bl	800254c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 80025f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_ADC_MspInit+0xe4>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002638:	2307      	movs	r3, #7
 800263a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263c:	2303      	movs	r3, #3
 800263e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002644:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002648:	4619      	mov	r1, r3
 800264a:	480f      	ldr	r0, [pc, #60]	; (8002688 <HAL_ADC_MspInit+0xe8>)
 800264c:	f002 ff44 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002650:	2301      	movs	r3, #1
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002654:	2303      	movs	r3, #3
 8002656:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002660:	4619      	mov	r1, r3
 8002662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002666:	f002 ff37 	bl	80054d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2012      	movs	r0, #18
 8002670:	f002 fefd 	bl	800546e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002674:	2012      	movs	r0, #18
 8002676:	f002 ff14 	bl	80054a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3780      	adds	r7, #128	; 0x80
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	48000800 	.word	0x48000800

0800268c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_TIM_PWM_MspInit+0x38>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10b      	bne.n	80026b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80026a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a8:	6613      	str	r3, [r2, #96]	; 0x60
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d146      	bne.n	800277c <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_TIM_IC_MspInit+0xb8>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = H2_Pin|H1_Pin;
 8002736:	f248 0302 	movw	r3, #32770	; 0x8002
 800273a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002748:	2301      	movs	r3, #1
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4619      	mov	r1, r3
 8002752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002756:	f002 febf 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H3_Pin;
 800275a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800276c:	2301      	movs	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H3_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <HAL_TIM_IC_MspInit+0xbc>)
 8002778:	f002 feae 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	48000400 	.word	0x48000400

0800278c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a36      	ldr	r2, [pc, #216]	; (8002884 <HAL_TIM_MspPostInit+0xf8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d166      	bne.n	800287c <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	4a35      	ldr	r2, [pc, #212]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a29      	ldr	r2, [pc, #164]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_TIM_MspPostInit+0xfc>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027f6:	2308      	movs	r3, #8
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002806:	2302      	movs	r3, #2
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	481e      	ldr	r0, [pc, #120]	; (800288c <HAL_TIM_MspPostInit+0x100>)
 8002812:	f002 fe61 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002816:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800281a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002828:	2306      	movs	r3, #6
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002836:	f002 fe4f 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800283a:	2301      	movs	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800284a:	2306      	movs	r3, #6
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	480e      	ldr	r0, [pc, #56]	; (8002890 <HAL_TIM_MspPostInit+0x104>)
 8002856:	f002 fe3f 	bl	80054d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800285a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800286c:	230c      	movs	r3, #12
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	; (8002890 <HAL_TIM_MspPostInit+0x104>)
 8002878:	f002 fe2e 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40021000 	.word	0x40021000
 800288c:	48000800 	.word	0x48000800
 8002890:	48000400 	.word	0x48000400

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <NMI_Handler+0x4>

0800289a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <MemManage_Handler+0x4>

080028a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e0:	f000 f8aa 	bl	8002a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028ec:	4809      	ldr	r0, [pc, #36]	; (8002914 <ADC1_2_IRQHandler+0x2c>)
 80028ee:	f000 fca9 	bl	8003244 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80028f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f6:	4808      	ldr	r0, [pc, #32]	; (8002918 <ADC1_2_IRQHandler+0x30>)
 80028f8:	f002 ffa0 	bl	800583c <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence_Low_Freq();
 80028fc:	f7fd fdfe 	bl	80004fc <Sequence_Low_Freq>
	Sequence_High_Freq();
 8002900:	f7fd feaa 	bl	8000658 <Sequence_High_Freq>


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <ADC1_2_IRQHandler+0x30>)
 800290a:	f002 ff97 	bl	800583c <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000194 	.word	0x20000194
 8002918:	48000400 	.word	0x48000400

0800291c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <SystemInit+0x20>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <SystemInit+0x20>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002942:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002944:	f7ff ffea 	bl	800291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <LoopForever+0x6>)
  ldr r1, =_edata
 800294a:	490d      	ldr	r1, [pc, #52]	; (8002980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <LoopForever+0xe>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002960:	4c0a      	ldr	r4, [pc, #40]	; (800298c <LoopForever+0x16>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800296e:	f005 fa97 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002972:	f7ff fac9 	bl	8001f08 <main>

08002976 <LoopForever>:

LoopForever:
    b LoopForever
 8002976:	e7fe      	b.n	8002976 <LoopForever>
  ldr   r0, =_estack
 8002978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800297c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002980:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002984:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 8002988:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800298c:	2000029c 	.word	0x2000029c

08002990 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC3_IRQHandler>

08002992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f002 fd5b 	bl	8005458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f80e 	bl	80029c4 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	71fb      	strb	r3, [r7, #7]
 80029b2:	e001      	b.n	80029b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029b4:	f7ff fdd0 	bl	8002558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b8:	79fb      	ldrb	r3, [r7, #7]

}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_InitTick+0x68>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d022      	beq.n	8002a1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_InitTick+0x6c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_InitTick+0x68>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 fd66 	bl	80054be <HAL_SYSTICK_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10f      	bne.n	8002a18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b0f      	cmp	r3, #15
 80029fc:	d809      	bhi.n	8002a12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fe:	2200      	movs	r2, #0
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	f04f 30ff 	mov.w	r0, #4294967295
 8002a06:	f002 fd32 	bl	800546e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_InitTick+0x70>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e007      	b.n	8002a22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e004      	b.n	8002a22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e001      	b.n	8002a22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000004 	.word	0x20000004

08002a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_IncTick+0x1c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_IncTick+0x20>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <HAL_IncTick+0x1c>)
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20000298 	.word	0x20000298
 8002a58:	20000008 	.word	0x20000008

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000298 	.word	0x20000298

08002a74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <LL_ADC_SetOffset+0x44>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	03fff000 	.word	0x03fff000

08002b24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3360      	adds	r3, #96	; 0x60
 8002b32:	461a      	mov	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3360      	adds	r3, #96	; 0x60
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3360      	adds	r3, #96	; 0x60
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	615a      	str	r2, [r3, #20]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b087      	sub	sp, #28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3330      	adds	r3, #48	; 0x30
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	4413      	add	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	211f      	movs	r1, #31
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	401a      	ands	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	f003 011f 	and.w	r1, r3, #31
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	0e5b      	lsrs	r3, r3, #25
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	4413      	add	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	0d1b      	lsrs	r3, r3, #20
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2107      	movs	r1, #7
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	0d1b      	lsrs	r3, r3, #20
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	401a      	ands	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0318 	and.w	r3, r3, #24
 8002d36:	4908      	ldr	r1, [pc, #32]	; (8002d58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d38:	40d9      	lsrs	r1, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	400b      	ands	r3, r1
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	431a      	orrs	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	0007ffff 	.word	0x0007ffff

08002d5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 031f 	and.w	r3, r3, #31
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6093      	str	r3, [r2, #8]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_IsEnabled+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_IsEnabled+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1a9      	b.n	800323a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fb53 	bl	80025a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff53 	bl	8002db8 <LL_ADC_IsDeepPowerDownEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff39 	bl	8002d94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff6e 	bl	8002e08 <LL_ADC_IsInternalRegulatorEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff52 	bl	8002de0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f3c:	4b9c      	ldr	r3, [pc, #624]	; (80031b0 <HAL_ADC_Init+0x2e4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	4a9c      	ldr	r2, [pc, #624]	; (80031b4 <HAL_ADC_Init+0x2e8>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f50:	e002      	b.n	8002f58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f9      	bne.n	8002f52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff50 	bl	8002e08 <LL_ADC_IsInternalRegulatorEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff75 	bl	8002e7e <LL_ADC_REG_IsConversionOngoing>
 8002f94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 8142 	bne.w	8003228 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 813e 	bne.w	8003228 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fb4:	f043 0202 	orr.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff49 	bl	8002e58 <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d141      	bne.n	8003050 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_Init+0x114>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a77      	ldr	r2, [pc, #476]	; (80031b8 <HAL_ADC_Init+0x2ec>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10f      	bne.n	8003000 <HAL_ADC_Init+0x134>
 8002fe0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fe4:	f7ff ff38 	bl	8002e58 <LL_ADC_IsEnabled>
 8002fe8:	4604      	mov	r4, r0
 8002fea:	4873      	ldr	r0, [pc, #460]	; (80031b8 <HAL_ADC_Init+0x2ec>)
 8002fec:	f7ff ff34 	bl	8002e58 <LL_ADC_IsEnabled>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4323      	orrs	r3, r4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_ADC_Init+0x15a>
 8003000:	486e      	ldr	r0, [pc, #440]	; (80031bc <HAL_ADC_Init+0x2f0>)
 8003002:	f7ff ff29 	bl	8002e58 <LL_ADC_IsEnabled>
 8003006:	4604      	mov	r4, r0
 8003008:	486d      	ldr	r0, [pc, #436]	; (80031c0 <HAL_ADC_Init+0x2f4>)
 800300a:	f7ff ff25 	bl	8002e58 <LL_ADC_IsEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	431c      	orrs	r4, r3
 8003012:	486c      	ldr	r0, [pc, #432]	; (80031c4 <HAL_ADC_Init+0x2f8>)
 8003014:	f7ff ff20 	bl	8002e58 <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	4323      	orrs	r3, r4
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d012      	beq.n	8003050 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003032:	d004      	beq.n	800303e <HAL_ADC_Init+0x172>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5f      	ldr	r2, [pc, #380]	; (80031b8 <HAL_ADC_Init+0x2ec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Init+0x176>
 800303e:	4a62      	ldr	r2, [pc, #392]	; (80031c8 <HAL_ADC_Init+0x2fc>)
 8003040:	e000      	b.n	8003044 <HAL_ADC_Init+0x178>
 8003042:	4a62      	ldr	r2, [pc, #392]	; (80031cc <HAL_ADC_Init+0x300>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7ff fd12 	bl	8002a74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7f5b      	ldrb	r3, [r3, #29]
 8003054:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800305a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003060:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003066:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800306e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800307a:	2b01      	cmp	r3, #1
 800307c:	d106      	bne.n	800308c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	3b01      	subs	r3, #1
 8003084:	045b      	lsls	r3, r3, #17
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <HAL_ADC_Init+0x304>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fee4 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 80030dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d17f      	bne.n	80031e4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d17c      	bne.n	80031e4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003106:	f023 0302 	bic.w	r3, r3, #2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	430b      	orrs	r3, r1
 8003112:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d017      	beq.n	800314c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800312a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003134:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6911      	ldr	r1, [r2, #16]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800314a:	e013      	b.n	8003174 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800315a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800316c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003170:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317a:	2b01      	cmp	r3, #1
 800317c:	d12a      	bne.n	80031d4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003194:	4311      	orrs	r1, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a0:	430a      	orrs	r2, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	611a      	str	r2, [r3, #16]
 80031ae:	e019      	b.n	80031e4 <HAL_ADC_Init+0x318>
 80031b0:	20000000 	.word	0x20000000
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	50000100 	.word	0x50000100
 80031bc:	50000400 	.word	0x50000400
 80031c0:	50000500 	.word	0x50000500
 80031c4:	50000600 	.word	0x50000600
 80031c8:	50000300 	.word	0x50000300
 80031cc:	50000700 	.word	0x50000700
 80031d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10c      	bne.n	8003206 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f023 010f 	bic.w	r1, r3, #15
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	1e5a      	subs	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
 8003204:	e007      	b.n	8003216 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 020f 	bic.w	r2, r2, #15
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c
 8003226:	e007      	b.n	8003238 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	f043 0210 	orr.w	r2, r3, #16
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003238:	7ffb      	ldrb	r3, [r7, #31]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	bf00      	nop

08003244 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003268:	d004      	beq.n	8003274 <HAL_ADC_IRQHandler+0x30>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a8e      	ldr	r2, [pc, #568]	; (80034a8 <HAL_ADC_IRQHandler+0x264>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d101      	bne.n	8003278 <HAL_ADC_IRQHandler+0x34>
 8003274:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_ADC_IRQHandler+0x268>)
 8003276:	e000      	b.n	800327a <HAL_ADC_IRQHandler+0x36>
 8003278:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_ADC_IRQHandler+0x26c>)
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fd6e 	bl	8002d5c <LL_ADC_GetMultimode>
 8003280:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d017      	beq.n	80032bc <HAL_ADC_IRQHandler+0x78>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f001 f9c4 	bl	800463c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2202      	movs	r2, #2
 80032ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_ADC_IRQHandler+0x8c>
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8094 	beq.w	8003404 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 808e 	beq.w	8003404 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fc87 	bl	8002c18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d072      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a64      	ldr	r2, [pc, #400]	; (80034a8 <HAL_ADC_IRQHandler+0x264>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_ADC_IRQHandler+0xea>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <HAL_ADC_IRQHandler+0x270>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d002      	beq.n	800332a <HAL_ADC_IRQHandler+0xe6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	e003      	b.n	8003332 <HAL_ADC_IRQHandler+0xee>
 800332a:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_ADC_IRQHandler+0x274>)
 800332c:	e001      	b.n	8003332 <HAL_ADC_IRQHandler+0xee>
 800332e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	4293      	cmp	r3, r2
 8003338:	d008      	beq.n	800334c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d002      	beq.n	800334c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b09      	cmp	r3, #9
 800334a:	d104      	bne.n	8003356 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	e014      	b.n	8003380 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a53      	ldr	r2, [pc, #332]	; (80034a8 <HAL_ADC_IRQHandler+0x264>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_ADC_IRQHandler+0x130>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a53      	ldr	r2, [pc, #332]	; (80034b4 <HAL_ADC_IRQHandler+0x270>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d002      	beq.n	8003370 <HAL_ADC_IRQHandler+0x12c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e003      	b.n	8003378 <HAL_ADC_IRQHandler+0x134>
 8003370:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <HAL_ADC_IRQHandler+0x274>)
 8003372:	e001      	b.n	8003378 <HAL_ADC_IRQHandler+0x134>
 8003374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003378:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d135      	bne.n	80033f6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d12e      	bne.n	80033f6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fd6e 	bl	8002e7e <LL_ADC_REG_IsConversionOngoing>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11a      	bne.n	80033de <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 020c 	bic.w	r2, r2, #12
 80033b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d112      	bne.n	80033f6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	; 0x5c
 80033dc:	e00b      	b.n	80033f6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f043 0210 	orr.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f984 	bl	8003704 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	220c      	movs	r2, #12
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_ADC_IRQHandler+0x1d4>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80b3 	beq.w	800358a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80ad 	beq.w	800358a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fc22 	bl	8002c96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003452:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fbdd 	bl	8002c18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800345e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_ADC_IRQHandler+0x264>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_ADC_IRQHandler+0x23a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <HAL_ADC_IRQHandler+0x270>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d002      	beq.n	800347a <HAL_ADC_IRQHandler+0x236>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	e003      	b.n	8003482 <HAL_ADC_IRQHandler+0x23e>
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_ADC_IRQHandler+0x274>)
 800347c:	e001      	b.n	8003482 <HAL_ADC_IRQHandler+0x23e>
 800347e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4293      	cmp	r3, r2
 8003488:	d008      	beq.n	800349c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b06      	cmp	r3, #6
 8003494:	d002      	beq.n	800349c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b07      	cmp	r3, #7
 800349a:	d10f      	bne.n	80034bc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	e01f      	b.n	80034e6 <HAL_ADC_IRQHandler+0x2a2>
 80034a6:	bf00      	nop
 80034a8:	50000100 	.word	0x50000100
 80034ac:	50000300 	.word	0x50000300
 80034b0:	50000700 	.word	0x50000700
 80034b4:	50000500 	.word	0x50000500
 80034b8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a8b      	ldr	r2, [pc, #556]	; (80036f0 <HAL_ADC_IRQHandler+0x4ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_ADC_IRQHandler+0x296>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a8a      	ldr	r2, [pc, #552]	; (80036f4 <HAL_ADC_IRQHandler+0x4b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d002      	beq.n	80034d6 <HAL_ADC_IRQHandler+0x292>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	e003      	b.n	80034de <HAL_ADC_IRQHandler+0x29a>
 80034d6:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <HAL_ADC_IRQHandler+0x4b4>)
 80034d8:	e001      	b.n	80034de <HAL_ADC_IRQHandler+0x29a>
 80034da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d047      	beq.n	800357c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_ADC_IRQHandler+0x2c2>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03f      	beq.n	800357c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003502:	2b00      	cmp	r3, #0
 8003504:	d13a      	bne.n	800357c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d133      	bne.n	800357c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d12e      	bne.n	800357c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fcbe 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11a      	bne.n	8003564 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800353c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d112      	bne.n	800357c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c
 8003562:	e00b      	b.n	800357c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	f043 0210 	orr.w	r2, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f001 f835 	bl	80045ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2260      	movs	r2, #96	; 0x60
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	d011      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x374>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8b4 	bl	8003718 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x3a4>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f001 f81b 	bl	8004614 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_ADC_IRQHandler+0x3d4>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f001 f80d 	bl	8004628 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d043      	beq.n	80036aa <HAL_ADC_IRQHandler+0x466>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	d03e      	beq.n	80036aa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003634:	2301      	movs	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	e021      	b.n	800367e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d015      	beq.n	800366c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003648:	d004      	beq.n	8003654 <HAL_ADC_IRQHandler+0x410>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <HAL_ADC_IRQHandler+0x4ac>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_ADC_IRQHandler+0x414>
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_ADC_IRQHandler+0x4b8>)
 8003656:	e000      	b.n	800365a <HAL_ADC_IRQHandler+0x416>
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_ADC_IRQHandler+0x4bc>)
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fb8c 	bl	8002d78 <LL_ADC_GetMultiDMATransfer>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003666:	2301      	movs	r3, #1
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	e008      	b.n	800367e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800367a:	2301      	movs	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10e      	bne.n	80036a2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003694:	f043 0202 	orr.w	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f845 	bl	800372c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2210      	movs	r2, #16
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d018      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x4a2>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ce:	f043 0208 	orr.w	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 ff8d 	bl	8004600 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	50000100 	.word	0x50000100
 80036f4:	50000500 	.word	0x50000500
 80036f8:	50000400 	.word	0x50000400
 80036fc:	50000300 	.word	0x50000300
 8003700:	50000700 	.word	0x50000700

08003704 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b0b6      	sub	sp, #216	; 0xd8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x24>
 800375e:	2302      	movs	r3, #2
 8003760:	f000 bc13 	b.w	8003f8a <HAL_ADC_ConfigChannel+0x84a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fb84 	bl	8002e7e <LL_ADC_REG_IsConversionOngoing>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 83f3 	bne.w	8003f64 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f7ff fa57 	bl	8002c3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb72 	bl	8002e7e <LL_ADC_REG_IsConversionOngoing>
 800379a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fb7e 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 80037a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 81d9 	bne.w	8003b68 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 81d4 	bne.w	8003b68 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c8:	d10f      	bne.n	80037ea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	f7ff fa71 	bl	8002cbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fa05 	bl	8002bf2 <LL_ADC_SetSamplingTimeCommonConfig>
 80037e8:	e00e      	b.n	8003808 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f7ff fa60 	bl	8002cbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f9f5 	bl	8002bf2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	08db      	lsrs	r3, r3, #3
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d022      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6919      	ldr	r1, [r3, #16]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800383a:	f7ff f94f 	bl	8002adc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	461a      	mov	r2, r3
 800384c:	f7ff f99b 	bl	8002b86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x126>
 8003860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003864:	e000      	b.n	8003868 <HAL_ADC_ConfigChannel+0x128>
 8003866:	2300      	movs	r3, #0
 8003868:	461a      	mov	r2, r3
 800386a:	f7ff f9a7 	bl	8002bbc <LL_ADC_SetOffsetSaturation>
 800386e:	e17b      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f954 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 800387c:	4603      	mov	r3, r0
 800387e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_ADC_ConfigChannel+0x15c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff f949 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003892:	4603      	mov	r3, r0
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	f003 021f 	and.w	r2, r3, #31
 800389a:	e01e      	b.n	80038da <HAL_ADC_ConfigChannel+0x19a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f93e 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038ca:	2320      	movs	r3, #32
 80038cc:	e004      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x1b2>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	e018      	b.n	8003924 <HAL_ADC_ConfigChannel+0x1e4>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800390a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800390e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003916:	2320      	movs	r3, #32
 8003918:	e004      	b.n	8003924 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800391a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003924:	429a      	cmp	r2, r3
 8003926:	d106      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff f90d 	bl	8002b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f8f1 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x222>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f8e6 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	e01e      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x260>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f8db 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e004      	b.n	800399e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x278>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	e018      	b.n	80039ea <HAL_ADC_ConfigChannel+0x2aa>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e004      	b.n	80039ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80039e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d106      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff f8aa 	bl	8002b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f88e 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x2e8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2102      	movs	r1, #2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff f883 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	f003 021f 	and.w	r2, r3, #31
 8003a26:	e01e      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x326>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff f878 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a56:	2320      	movs	r3, #32
 8003a58:	e004      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x33e>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0e9b      	lsrs	r3, r3, #26
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	e016      	b.n	8003aac <HAL_ADC_ConfigChannel+0x36c>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e004      	b.n	8003aac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d106      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff f849 	bl	8002b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f82d 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x3aa>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2103      	movs	r1, #3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff f822 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	e017      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x3da>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2103      	movs	r1, #3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f817 	bl	8002b24 <LL_ADC_GetOffsetChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e003      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x3f2>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	e011      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x416>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e003      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d106      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2103      	movs	r1, #3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fff4 	bl	8002b50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f973 	bl	8002e58 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 813d 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7ff f8c4 	bl	8002d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4aa2      	ldr	r2, [pc, #648]	; (8003e1c <HAL_ADC_ConfigChannel+0x6dc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f040 812e 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x480>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e019      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x4b4>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e003      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	bf94      	ite	ls
 8003bee:	2301      	movls	r3, #1
 8003bf0:	2300      	movhi	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d079      	beq.n	8003cec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x4d4>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	069b      	lsls	r3, r3, #26
 8003c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c12:	e015      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x500>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	e003      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	069b      	lsls	r3, r3, #26
 8003c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x520>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	3301      	adds	r3, #1
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	e017      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x550>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e003      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x576>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e9b      	lsrs	r3, r3, #26
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	051b      	lsls	r3, r3, #20
 8003cb4:	e018      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x5a8>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e003      	b.n	8003cda <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	e07e      	b.n	8003dea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x5c8>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	3301      	adds	r3, #1
 8003d00:	069b      	lsls	r3, r3, #26
 8003d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d06:	e015      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x5f4>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	069b      	lsls	r3, r3, #26
 8003d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x614>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	e017      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x644>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	61fb      	str	r3, [r7, #28]
  return result;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	ea42 0103 	orr.w	r1, r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x670>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	3b1e      	subs	r3, #30
 8003da8:	051b      	lsls	r3, r3, #20
 8003daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dae:	e01b      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x6a8>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	613b      	str	r3, [r7, #16]
  return result;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e003      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f003 021f 	and.w	r2, r3, #31
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	3b1e      	subs	r3, #30
 8003de2:	051b      	lsls	r3, r3, #20
 8003de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de8:	430b      	orrs	r3, r1
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6892      	ldr	r2, [r2, #8]
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fe ff64 	bl	8002cbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_ADC_ConfigChannel+0x6e0>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80be 	beq.w	8003f7e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e0a:	d004      	beq.n	8003e16 <HAL_ADC_ConfigChannel+0x6d6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <HAL_ADC_ConfigChannel+0x6e4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10a      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x6ec>
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e18:	e009      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x6ee>
 8003e1a:	bf00      	nop
 8003e1c:	407f0000 	.word	0x407f0000
 8003e20:	80080000 	.word	0x80080000
 8003e24:	50000100 	.word	0x50000100
 8003e28:	50000300 	.word	0x50000300
 8003e2c:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_ADC_ConfigChannel+0x854>)
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fe46 	bl	8002ac0 <LL_ADC_GetCommonPathInternalCh>
 8003e34:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a56      	ldr	r2, [pc, #344]	; (8003f98 <HAL_ADC_ConfigChannel+0x858>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0x70c>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <HAL_ADC_ConfigChannel+0x85c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d13a      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d134      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e60:	d005      	beq.n	8003e6e <HAL_ADC_ConfigChannel+0x72e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <HAL_ADC_ConfigChannel+0x860>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	f040 8085 	bne.w	8003f78 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e76:	d004      	beq.n	8003e82 <HAL_ADC_ConfigChannel+0x742>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <HAL_ADC_ConfigChannel+0x864>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x746>
 8003e82:	4a49      	ldr	r2, [pc, #292]	; (8003fa8 <HAL_ADC_ConfigChannel+0x868>)
 8003e84:	e000      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x748>
 8003e86:	4a43      	ldr	r2, [pc, #268]	; (8003f94 <HAL_ADC_ConfigChannel+0x854>)
 8003e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7fe fe01 	bl	8002a9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e98:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_ADC_ConfigChannel+0x86c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	4a44      	ldr	r2, [pc, #272]	; (8003fb0 <HAL_ADC_ConfigChannel+0x870>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eb2:	e002      	b.n	8003eba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f9      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec0:	e05a      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <HAL_ADC_ConfigChannel+0x874>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d125      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11f      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_ADC_ConfigChannel+0x864>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d104      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x7ac>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a34      	ldr	r2, [pc, #208]	; (8003fb8 <HAL_ADC_ConfigChannel+0x878>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d047      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x7c0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_ADC_ConfigChannel+0x864>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x7c4>
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_ADC_ConfigChannel+0x868>)
 8003f02:	e000      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x7c6>
 8003f04:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_ADC_ConfigChannel+0x854>)
 8003f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fe fdc2 	bl	8002a9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f16:	e031      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_ADC_ConfigChannel+0x87c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12d      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d127      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_ADC_ConfigChannel+0x864>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f40:	d004      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x80c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_ADC_ConfigChannel+0x864>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x810>
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_ADC_ConfigChannel+0x868>)
 8003f4e:	e000      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x812>
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_ADC_ConfigChannel+0x854>)
 8003f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7fe fd9c 	bl	8002a9a <LL_ADC_SetCommonPathInternalCh>
 8003f62:	e00c      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f76:	e002      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f86:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	37d8      	adds	r7, #216	; 0xd8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	50000700 	.word	0x50000700
 8003f98:	c3210000 	.word	0xc3210000
 8003f9c:	90c00010 	.word	0x90c00010
 8003fa0:	50000600 	.word	0x50000600
 8003fa4:	50000100 	.word	0x50000100
 8003fa8:	50000300 	.word	0x50000300
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	053e2d63 	.word	0x053e2d63
 8003fb4:	c7520000 	.word	0xc7520000
 8003fb8:	50000500 	.word	0x50000500
 8003fbc:	cb840000 	.word	0xcb840000

08003fc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe ff41 	bl	8002e58 <LL_ADC_IsEnabled>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d176      	bne.n	80040ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	4b3c      	ldr	r3, [pc, #240]	; (80040d4 <ADC_Enable+0x114>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	f043 0210 	orr.w	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e062      	b.n	80040cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe ff10 	bl	8002e30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004018:	d004      	beq.n	8004024 <ADC_Enable+0x64>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <ADC_Enable+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <ADC_Enable+0x68>
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <ADC_Enable+0x11c>)
 8004026:	e000      	b.n	800402a <ADC_Enable+0x6a>
 8004028:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <ADC_Enable+0x120>)
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fd48 	bl	8002ac0 <LL_ADC_GetCommonPathInternalCh>
 8004030:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004036:	2b00      	cmp	r3, #0
 8004038:	d013      	beq.n	8004062 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800403a:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <ADC_Enable+0x124>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <ADC_Enable+0x128>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	4613      	mov	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004054:	e002      	b.n	800405c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3b01      	subs	r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f9      	bne.n	8004056 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004062:	f7fe fcfb 	bl	8002a5c <HAL_GetTick>
 8004066:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004068:	e028      	b.n	80040bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fef2 	bl	8002e58 <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fed6 	bl	8002e30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004084:	f7fe fcea 	bl	8002a5c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d914      	bls.n	80040bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00d      	beq.n	80040bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e007      	b.n	80040cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d1cf      	bne.n	800406a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	8000003f 	.word	0x8000003f
 80040d8:	50000100 	.word	0x50000100
 80040dc:	50000300 	.word	0x50000300
 80040e0:	50000700 	.word	0x50000700
 80040e4:	20000000 	.word	0x20000000
 80040e8:	053e2d63 	.word	0x053e2d63

080040ec <LL_ADC_SetCommonPathInternalCh>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_GetCommonPathInternalCh>:
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <LL_ADC_SetOffset>:
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3360      	adds	r3, #96	; 0x60
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <LL_ADC_SetOffset+0x44>)
 8004152:	4013      	ands	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	4313      	orrs	r3, r2
 8004160:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	03fff000 	.word	0x03fff000

08004178 <LL_ADC_GetOffsetChannel>:
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3360      	adds	r3, #96	; 0x60
 8004186:	461a      	mov	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_ADC_SetOffsetState>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3360      	adds	r3, #96	; 0x60
 80041b4:	461a      	mov	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <LL_ADC_SetOffsetSign>:
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3360      	adds	r3, #96	; 0x60
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	431a      	orrs	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_ADC_SetOffsetSaturation>:
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3360      	adds	r3, #96	; 0x60
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	431a      	orrs	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	601a      	str	r2, [r3, #0]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	615a      	str	r2, [r3, #20]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_INJ_GetTrigAuto>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_SetChannelSamplingTime>:
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3314      	adds	r3, #20
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	0e5b      	lsrs	r3, r3, #25
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	0d1b      	lsrs	r3, r3, #20
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2107      	movs	r1, #7
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	401a      	ands	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <LL_ADC_SetChannelSingleDiff>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 0318 	and.w	r3, r3, #24
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004304:	40d9      	lsrs	r1, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	400b      	ands	r3, r1
 800430a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430e:	431a      	orrs	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	0007ffff 	.word	0x0007ffff

08004328 <LL_ADC_GetMultimode>:
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 031f 	and.w	r3, r3, #31
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_ADC_IsEnabled>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <LL_ADC_IsEnabled+0x18>
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <LL_ADC_IsEnabled+0x1a>
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_ADC_REG_IsConversionOngoing>:
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d101      	bne.n	8004382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_ADC_INJ_StartConversion>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043a4:	f043 0208 	orr.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	609a      	str	r2, [r3, #8]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_ADC_INJ_IsConversionOngoing>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d101      	bne.n	80043d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f0:	d004      	beq.n	80043fc <HAL_ADCEx_InjectedStart_IT+0x1c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a78      	ldr	r2, [pc, #480]	; (80045d8 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d101      	bne.n	8004400 <HAL_ADCEx_InjectedStart_IT+0x20>
 80043fc:	4b77      	ldr	r3, [pc, #476]	; (80045dc <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 80043fe:	e000      	b.n	8004402 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004400:	4b77      	ldr	r3, [pc, #476]	; (80045e0 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff ff90 	bl	8004328 <LL_ADC_GetMultimode>
 8004408:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ffd2 	bl	80043b8 <LL_ADC_INJ_IsConversionOngoing>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
 800441c:	e0d8      	b.n	80045d0 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004428:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0c0      	b.n	80045d0 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004458:	2302      	movs	r3, #2
 800445a:	e0b9      	b.n	80045d0 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fdab 	bl	8003fc0 <ADC_Enable>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 80a8 	bne.w	80045c6 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004486:	f023 0208 	bic.w	r2, r3, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	; 0x60
 800448e:	e002      	b.n	8004496 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_ADCEx_InjectedStart_IT+0xe8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d002      	beq.n	80044c4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	e003      	b.n	80044cc <HAL_ADCEx_InjectedStart_IT+0xec>
 80044c4:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80044c6:	e001      	b.n	80044cc <HAL_ADCEx_InjectedStart_IT+0xec>
 80044c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d002      	beq.n	80044da <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2260      	movs	r2, #96	; 0x60
 80044ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004512:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d110      	bne.n	800453e <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0220 	bic.w	r2, r2, #32
 800452a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453a:	605a      	str	r2, [r3, #4]
          break;
 800453c:	e010      	b.n	8004560 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0220 	orr.w	r2, r2, #32
 800455c:	605a      	str	r2, [r3, #4]
          break;
 800455e:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_ADCEx_InjectedStart_IT+0x19e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d002      	beq.n	800457a <HAL_ADCEx_InjectedStart_IT+0x19a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	e003      	b.n	8004582 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_ADCEx_InjectedStart_IT+0x208>)
 800457c:	e001      	b.n	8004582 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 800457e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	4293      	cmp	r3, r2
 8004588:	d008      	beq.n	800459c <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d002      	beq.n	800459c <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b07      	cmp	r3, #7
 800459a:	d10d      	bne.n	80045b8 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fe63 	bl	800426c <LL_ADC_INJ_GetTrigAuto>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff feed 	bl	8004390 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80045b6:	e00a      	b.n	80045ce <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80045c4:	e003      	b.n	80045ce <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	50000100 	.word	0x50000100
 80045dc:	50000300 	.word	0x50000300
 80045e0:	50000700 	.word	0x50000700
 80045e4:	50000500 	.word	0x50000500
 80045e8:	50000400 	.word	0x50000400

080045ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0b6      	sub	sp, #216	; 0xd8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004674:	2302      	movs	r3, #2
 8004676:	f000 bcfd 	b.w	8005074 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800468e:	2b01      	cmp	r3, #1
 8004690:	d130      	bne.n	80046f4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b09      	cmp	r3, #9
 8004698:	d179      	bne.n	800478e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0e9b      	lsrs	r3, r3, #26
 80046a8:	025b      	lsls	r3, r3, #9
 80046aa:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80046b6:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c2:	e007      	b.n	80046d4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	025b      	lsls	r3, r3, #9
 80046cc:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046da:	4b84      	ldr	r3, [pc, #528]	; (80048ec <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80046e6:	430b      	orrs	r3, r1
 80046e8:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80046f2:	e04c      	b.n	800478e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11d      	bne.n	8004738 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004720:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800472c:	e004      	b.n	8004738 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	3b01      	subs	r3, #1
 8004734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	f003 021f 	and.w	r2, r3, #31
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004766:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800477e:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	430b      	orrs	r3, r1
 800478c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fe10 	bl	80043b8 <LL_ADC_INJ_IsConversionOngoing>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d124      	bne.n	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d112      	bne.n	80047ce <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80047b8:	055a      	lsls	r2, r3, #21
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047c0:	051b      	lsls	r3, r3, #20
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	e00c      	b.n	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80047de:	055a      	lsls	r2, r3, #21
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fdbc 	bl	800436a <LL_ADC_REG_IsConversionOngoing>
 80047f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fddc 	bl	80043b8 <LL_ADC_INJ_IsConversionOngoing>
 8004800:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 822e 	bne.w	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800480e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 8229 	bne.w	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800482e:	2b01      	cmp	r3, #1
 8004830:	d108      	bne.n	8004844 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004840:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004842:	e01f      	b.n	8004884 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004852:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004854:	e016      	b.n	8004884 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800485c:	2b01      	cmp	r3, #1
 800485e:	d109      	bne.n	8004874 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004872:	e007      	b.n	8004884 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004882:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800488a:	2b01      	cmp	r3, #1
 800488c:	d110      	bne.n	80048b0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	430b      	orrs	r3, r1
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0202 	orr.w	r2, r2, #2
 80048ac:	611a      	str	r2, [r3, #16]
 80048ae:	e007      	b.n	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0202 	bic.w	r2, r2, #2
 80048be:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c8:	d112      	bne.n	80048f0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	4619      	mov	r1, r3
 80048d6:	f7ff fcd7 	bl	8004288 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fcaf 	bl	8004246 <LL_ADC_SetSamplingTimeCommonConfig>
 80048e8:	e011      	b.n	800490e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80048ea:	bf00      	nop
 80048ec:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	6819      	ldr	r1, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f7ff fcc3 	bl	8004288 <LL_ADC_SetChannelSamplingTime>
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fc9c 	bl	8004246 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d022      	beq.n	8004976 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6919      	ldr	r1, [r3, #16]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004940:	f7ff fbf6 	bl	8004130 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6919      	ldr	r1, [r3, #16]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	461a      	mov	r2, r3
 8004952:	f7ff fc42 	bl	80041da <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800496a:	e000      	b.n	800496e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800496c:	2300      	movs	r3, #0
 800496e:	461a      	mov	r2, r3
 8004970:	f7ff fc4e 	bl	8004210 <LL_ADC_SetOffsetSaturation>
 8004974:	e179      	b.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fbfb 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fbf0 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004998:	4603      	mov	r3, r0
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	e01e      	b.n	80049e0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fbe5 	bl	8004178 <LL_ADC_GetOffsetChannel>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80049c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80049c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80049d0:	2320      	movs	r3, #32
 80049d2:	e004      	b.n	80049de <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80049d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0e9b      	lsrs	r3, r3, #26
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	e018      	b.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004a14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	e004      	b.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a24:	fab3 f383 	clz	r3, r3
 8004a28:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d106      	bne.n	8004a3c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fbb4 	bl	80041a4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fb98 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2101      	movs	r1, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fb8d 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	f003 021f 	and.w	r2, r3, #31
 8004a66:	e01e      	b.n	8004aa6 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fb82 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004a96:	2320      	movs	r3, #32
 8004a98:	e004      	b.n	8004aa4 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0e9b      	lsrs	r3, r3, #26
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	e018      	b.n	8004af0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	e004      	b.n	8004af0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d106      	bne.n	8004b02 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2101      	movs	r1, #1
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fb51 	bl	80041a4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2102      	movs	r1, #2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fb35 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fb2a 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004b24:	4603      	mov	r3, r0
 8004b26:	0e9b      	lsrs	r3, r3, #26
 8004b28:	f003 021f 	and.w	r2, r3, #31
 8004b2c:	e01e      	b.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2102      	movs	r1, #2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fb1f 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b44:	fa93 f3a3 	rbit	r3, r3
 8004b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	e004      	b.n	8004b6a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	0e9b      	lsrs	r3, r3, #26
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	e014      	b.n	8004bae <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	e004      	b.n	8004bae <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ba8:	fab3 f383 	clz	r3, r3
 8004bac:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d106      	bne.n	8004bc0 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2102      	movs	r1, #2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff faf2 	bl	80041a4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2103      	movs	r1, #3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fad6 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2103      	movs	r1, #3
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff facb 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004be2:	4603      	mov	r3, r0
 8004be4:	0e9b      	lsrs	r3, r3, #26
 8004be6:	f003 021f 	and.w	r2, r3, #31
 8004bea:	e017      	b.n	8004c1c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2103      	movs	r1, #3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fac0 	bl	8004178 <LL_ADC_GetOffsetChannel>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004c0e:	2320      	movs	r3, #32
 8004c10:	e003      	b.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	0e9b      	lsrs	r3, r3, #26
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	e011      	b.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c44:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	e003      	b.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d106      	bne.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2103      	movs	r1, #3
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fa9d 	bl	80041a4 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fb68 	bl	8004344 <LL_ADC_IsEnabled>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 813d 	bne.w	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f7ff fb29 	bl	80042e0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4aa2      	ldr	r2, [pc, #648]	; (8004f1c <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f040 812e 	bne.w	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	0e9b      	lsrs	r3, r3, #26
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	bf94      	ite	ls
 8004cba:	2301      	movls	r3, #1
 8004cbc:	2300      	movhi	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	e019      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004cda:	2320      	movs	r3, #32
 8004cdc:	e003      	b.n	8004ce6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	bf94      	ite	ls
 8004cf0:	2301      	movls	r3, #1
 8004cf2:	2300      	movhi	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d079      	beq.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	069b      	lsls	r3, r3, #26
 8004d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d14:	e015      	b.n	8004d42 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d26:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	e003      	b.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	069b      	lsls	r3, r3, #26
 8004d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	0e9b      	lsrs	r3, r3, #26
 8004d54:	3301      	adds	r3, #1
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	e017      	b.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e003      	b.n	8004d86 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d92:	ea42 0103 	orr.w	r1, r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0e9b      	lsrs	r3, r3, #26
 8004da8:	3301      	adds	r3, #1
 8004daa:	f003 021f 	and.w	r2, r3, #31
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	051b      	lsls	r3, r3, #20
 8004db6:	e018      	b.n	8004dea <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	e003      	b.n	8004ddc <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f003 021f 	and.w	r2, r3, #31
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dea:	430b      	orrs	r3, r1
 8004dec:	e07e      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	0e9b      	lsrs	r3, r3, #26
 8004e00:	3301      	adds	r3, #1
 8004e02:	069b      	lsls	r3, r3, #26
 8004e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e08:	e015      	b.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004e22:	2320      	movs	r3, #32
 8004e24:	e003      	b.n	8004e2e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	069b      	lsls	r3, r3, #26
 8004e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	0e9b      	lsrs	r3, r3, #26
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2101      	movs	r1, #1
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	e017      	b.n	8004e86 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	61bb      	str	r3, [r7, #24]
  return result;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004e6e:	2320      	movs	r3, #32
 8004e70:	e003      	b.n	8004e7a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2101      	movs	r1, #1
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	ea42 0103 	orr.w	r1, r2, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	0e9b      	lsrs	r3, r3, #26
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	f003 021f 	and.w	r2, r3, #31
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3b1e      	subs	r3, #30
 8004eaa:	051b      	lsls	r3, r3, #20
 8004eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	e01b      	b.n	8004eea <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
  return result;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	e003      	b.n	8004ed6 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f003 021f 	and.w	r2, r3, #31
 8004edc:	4613      	mov	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3b1e      	subs	r3, #30
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eea:	430b      	orrs	r3, r1
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f7ff f9c9 	bl	8004288 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80b2 	beq.w	8005068 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f0c:	d004      	beq.n	8004f18 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d109      	bne.n	8004f2c <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8004f1a:	e008      	b.n	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004f1c:	407f0000 	.word	0x407f0000
 8004f20:	80080000 	.word	0x80080000
 8004f24:	50000100 	.word	0x50000100
 8004f28:	50000300 	.word	0x50000300
 8004f2c:	4b53      	ldr	r3, [pc, #332]	; (800507c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff f8ef 	bl	8004112 <LL_ADC_GetCommonPathInternalCh>
 8004f34:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a50      	ldr	r2, [pc, #320]	; (8005080 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a4f      	ldr	r2, [pc, #316]	; (8005084 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d139      	bne.n	8004fc0 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d133      	bne.n	8004fc0 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f60:	d004      	beq.n	8004f6c <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a48      	ldr	r2, [pc, #288]	; (8005088 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d17a      	bne.n	8005062 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f74:	d004      	beq.n	8004f80 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a44      	ldr	r2, [pc, #272]	; (800508c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004f80:	4a43      	ldr	r2, [pc, #268]	; (8005090 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004f82:	e000      	b.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004f84:	4a3d      	ldr	r2, [pc, #244]	; (800507c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7ff f8ab 	bl	80040ec <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	099a      	lsrs	r2, r3, #6
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004fae:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004fb0:	e002      	b.n	8004fb8 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f9      	bne.n	8004fb2 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fbe:	e050      	b.n	8005062 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a35      	ldr	r2, [pc, #212]	; (800509c <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d125      	bne.n	8005016 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d11f      	bne.n	8005016 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2c      	ldr	r2, [pc, #176]	; (800508c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d104      	bne.n	8004fea <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d03d      	beq.n	8005066 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ff2:	d004      	beq.n	8004ffe <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d101      	bne.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8004ffe:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005000:	e000      	b.n	8005004 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8005002:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7ff f86c 	bl	80040ec <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005014:	e027      	b.n	8005066 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d123      	bne.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d11d      	bne.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a16      	ldr	r2, [pc, #88]	; (800508c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800503e:	d004      	beq.n	800504a <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800504a:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800504c:	e000      	b.n	8005050 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800504e:	4a0b      	ldr	r2, [pc, #44]	; (800507c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7ff f846 	bl	80040ec <LL_ADC_SetCommonPathInternalCh>
 8005060:	e002      	b.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005066:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005070:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005074:	4618      	mov	r0, r3
 8005076:	37d8      	adds	r7, #216	; 0xd8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	50000700 	.word	0x50000700
 8005080:	c3210000 	.word	0xc3210000
 8005084:	90c00010 	.word	0x90c00010
 8005088:	50000600 	.word	0x50000600
 800508c:	50000100 	.word	0x50000100
 8005090:	50000300 	.word	0x50000300
 8005094:	20000000 	.word	0x20000000
 8005098:	053e2d63 	.word	0x053e2d63
 800509c:	c7520000 	.word	0xc7520000
 80050a0:	50000500 	.word	0x50000500
 80050a4:	cb840000 	.word	0xcb840000

080050a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b0a1      	sub	sp, #132	; 0x84
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0e7      	b.n	8005296 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80050ce:	2300      	movs	r3, #0
 80050d0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050d2:	2300      	movs	r3, #0
 80050d4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050de:	d102      	bne.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050e0:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	e009      	b.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6e      	ldr	r2, [pc, #440]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d102      	bne.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80050f0:	4b6d      	ldr	r3, [pc, #436]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	e001      	b.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0be      	b.n	8005296 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f925 	bl	800436a <LL_ADC_REG_IsConversionOngoing>
 8005120:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff f91f 	bl	800436a <LL_ADC_REG_IsConversionOngoing>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 80a0 	bne.w	8005274 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 809c 	bne.w	8005274 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005144:	d004      	beq.n	8005150 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a55      	ldr	r2, [pc, #340]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005150:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005152:	e000      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005154:	4b56      	ldr	r3, [pc, #344]	; (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005156:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04b      	beq.n	80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005172:	035b      	lsls	r3, r3, #13
 8005174:	430b      	orrs	r3, r1
 8005176:	431a      	orrs	r2, r3
 8005178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800517a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005184:	d004      	beq.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a45      	ldr	r2, [pc, #276]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10f      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005190:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005194:	f7ff f8d6 	bl	8004344 <LL_ADC_IsEnabled>
 8005198:	4604      	mov	r4, r0
 800519a:	4841      	ldr	r0, [pc, #260]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800519c:	f7ff f8d2 	bl	8004344 <LL_ADC_IsEnabled>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4323      	orrs	r3, r4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e012      	b.n	80051d6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80051b0:	483c      	ldr	r0, [pc, #240]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051b2:	f7ff f8c7 	bl	8004344 <LL_ADC_IsEnabled>
 80051b6:	4604      	mov	r4, r0
 80051b8:	483b      	ldr	r0, [pc, #236]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051ba:	f7ff f8c3 	bl	8004344 <LL_ADC_IsEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	431c      	orrs	r4, r3
 80051c2:	483c      	ldr	r0, [pc, #240]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051c4:	f7ff f8be 	bl	8004344 <LL_ADC_IsEnabled>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4323      	orrs	r3, r4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d056      	beq.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051e2:	f023 030f 	bic.w	r3, r3, #15
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	6811      	ldr	r1, [r2, #0]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	6892      	ldr	r2, [r2, #8]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	431a      	orrs	r2, r3
 80051f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051f6:	e047      	b.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005202:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800520c:	d004      	beq.n	8005218 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a23      	ldr	r2, [pc, #140]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10f      	bne.n	8005238 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005218:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800521c:	f7ff f892 	bl	8004344 <LL_ADC_IsEnabled>
 8005220:	4604      	mov	r4, r0
 8005222:	481f      	ldr	r0, [pc, #124]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005224:	f7ff f88e 	bl	8004344 <LL_ADC_IsEnabled>
 8005228:	4603      	mov	r3, r0
 800522a:	4323      	orrs	r3, r4
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e012      	b.n	800525e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005238:	481a      	ldr	r0, [pc, #104]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800523a:	f7ff f883 	bl	8004344 <LL_ADC_IsEnabled>
 800523e:	4604      	mov	r4, r0
 8005240:	4819      	ldr	r0, [pc, #100]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005242:	f7ff f87f 	bl	8004344 <LL_ADC_IsEnabled>
 8005246:	4603      	mov	r3, r0
 8005248:	431c      	orrs	r4, r3
 800524a:	481a      	ldr	r0, [pc, #104]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800524c:	f7ff f87a 	bl	8004344 <LL_ADC_IsEnabled>
 8005250:	4603      	mov	r3, r0
 8005252:	4323      	orrs	r3, r4
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d012      	beq.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800526a:	f023 030f 	bic.w	r3, r3, #15
 800526e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005270:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005272:	e009      	b.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005286:	e000      	b.n	800528a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005288:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005292:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005296:	4618      	mov	r0, r3
 8005298:	3784      	adds	r7, #132	; 0x84
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}
 800529e:	bf00      	nop
 80052a0:	50000100 	.word	0x50000100
 80052a4:	50000400 	.word	0x50000400
 80052a8:	50000500 	.word	0x50000500
 80052ac:	50000300 	.word	0x50000300
 80052b0:	50000700 	.word	0x50000700
 80052b4:	50000600 	.word	0x50000600

080052b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <__NVIC_SetPriorityGrouping+0x44>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052d4:	4013      	ands	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ea:	4a04      	ldr	r2, [pc, #16]	; (80052fc <__NVIC_SetPriorityGrouping+0x44>)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	60d3      	str	r3, [r2, #12]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <__NVIC_GetPriorityGrouping+0x18>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	f003 0307 	and.w	r3, r3, #7
}
 800530e:	4618      	mov	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	e000ed00 	.word	0xe000ed00

0800531c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532a:	2b00      	cmp	r3, #0
 800532c:	db0b      	blt.n	8005346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	f003 021f 	and.w	r2, r3, #31
 8005334:	4907      	ldr	r1, [pc, #28]	; (8005354 <__NVIC_EnableIRQ+0x38>)
 8005336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2001      	movs	r0, #1
 800533e:	fa00 f202 	lsl.w	r2, r0, r2
 8005342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	e000e100 	.word	0xe000e100

08005358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	6039      	str	r1, [r7, #0]
 8005362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005368:	2b00      	cmp	r3, #0
 800536a:	db0a      	blt.n	8005382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	490c      	ldr	r1, [pc, #48]	; (80053a4 <__NVIC_SetPriority+0x4c>)
 8005372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005376:	0112      	lsls	r2, r2, #4
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	440b      	add	r3, r1
 800537c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005380:	e00a      	b.n	8005398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	4908      	ldr	r1, [pc, #32]	; (80053a8 <__NVIC_SetPriority+0x50>)
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	3b04      	subs	r3, #4
 8005390:	0112      	lsls	r2, r2, #4
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	440b      	add	r3, r1
 8005396:	761a      	strb	r2, [r3, #24]
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	e000e100 	.word	0xe000e100
 80053a8:	e000ed00 	.word	0xe000ed00

080053ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b089      	sub	sp, #36	; 0x24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f1c3 0307 	rsb	r3, r3, #7
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	bf28      	it	cs
 80053ca:	2304      	movcs	r3, #4
 80053cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d902      	bls.n	80053dc <NVIC_EncodePriority+0x30>
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3b03      	subs	r3, #3
 80053da:	e000      	b.n	80053de <NVIC_EncodePriority+0x32>
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e0:	f04f 32ff 	mov.w	r2, #4294967295
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43da      	mvns	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	401a      	ands	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053f4:	f04f 31ff 	mov.w	r1, #4294967295
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	43d9      	mvns	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005404:	4313      	orrs	r3, r2
         );
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3b01      	subs	r3, #1
 8005420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005424:	d301      	bcc.n	800542a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005426:	2301      	movs	r3, #1
 8005428:	e00f      	b.n	800544a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800542a:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <SysTick_Config+0x40>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3b01      	subs	r3, #1
 8005430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005432:	210f      	movs	r1, #15
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	f7ff ff8e 	bl	8005358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <SysTick_Config+0x40>)
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <SysTick_Config+0x40>)
 8005444:	2207      	movs	r2, #7
 8005446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	e000e010 	.word	0xe000e010

08005458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff29 	bl	80052b8 <__NVIC_SetPriorityGrouping>
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	4603      	mov	r3, r0
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800547c:	f7ff ff40 	bl	8005300 <__NVIC_GetPriorityGrouping>
 8005480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f7ff ff90 	bl	80053ac <NVIC_EncodePriority>
 800548c:	4602      	mov	r2, r0
 800548e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ff5f 	bl	8005358 <__NVIC_SetPriority>
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff33 	bl	800531c <__NVIC_EnableIRQ>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ffa4 	bl	8005414 <SysTick_Config>
 80054cc:	4603      	mov	r3, r0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054e6:	e15a      	b.n	800579e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2101      	movs	r1, #1
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 814c 	beq.w	8005798 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d005      	beq.n	8005518 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005514:	2b02      	cmp	r3, #2
 8005516:	d130      	bne.n	800557a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	2203      	movs	r2, #3
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554e:	2201      	movs	r2, #1
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0201 	and.w	r2, r3, #1
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d017      	beq.n	80055b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	2203      	movs	r2, #3
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4013      	ands	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d123      	bne.n	800560a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	08da      	lsrs	r2, r3, #3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3208      	adds	r2, #8
 80055ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	220f      	movs	r2, #15
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	08da      	lsrs	r2, r3, #3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3208      	adds	r2, #8
 8005604:	6939      	ldr	r1, [r7, #16]
 8005606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	2203      	movs	r2, #3
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4013      	ands	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 0203 	and.w	r2, r3, #3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a6 	beq.w	8005798 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564c:	4b5b      	ldr	r3, [pc, #364]	; (80057bc <HAL_GPIO_Init+0x2e4>)
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	4a5a      	ldr	r2, [pc, #360]	; (80057bc <HAL_GPIO_Init+0x2e4>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6613      	str	r3, [r2, #96]	; 0x60
 8005658:	4b58      	ldr	r3, [pc, #352]	; (80057bc <HAL_GPIO_Init+0x2e4>)
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005664:	4a56      	ldr	r2, [pc, #344]	; (80057c0 <HAL_GPIO_Init+0x2e8>)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	089b      	lsrs	r3, r3, #2
 800566a:	3302      	adds	r3, #2
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	220f      	movs	r2, #15
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4013      	ands	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800568e:	d01f      	beq.n	80056d0 <HAL_GPIO_Init+0x1f8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a4c      	ldr	r2, [pc, #304]	; (80057c4 <HAL_GPIO_Init+0x2ec>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d019      	beq.n	80056cc <HAL_GPIO_Init+0x1f4>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <HAL_GPIO_Init+0x2f0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <HAL_GPIO_Init+0x1f0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a4a      	ldr	r2, [pc, #296]	; (80057cc <HAL_GPIO_Init+0x2f4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00d      	beq.n	80056c4 <HAL_GPIO_Init+0x1ec>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a49      	ldr	r2, [pc, #292]	; (80057d0 <HAL_GPIO_Init+0x2f8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <HAL_GPIO_Init+0x1e8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a48      	ldr	r2, [pc, #288]	; (80057d4 <HAL_GPIO_Init+0x2fc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_GPIO_Init+0x1e4>
 80056b8:	2305      	movs	r3, #5
 80056ba:	e00a      	b.n	80056d2 <HAL_GPIO_Init+0x1fa>
 80056bc:	2306      	movs	r3, #6
 80056be:	e008      	b.n	80056d2 <HAL_GPIO_Init+0x1fa>
 80056c0:	2304      	movs	r3, #4
 80056c2:	e006      	b.n	80056d2 <HAL_GPIO_Init+0x1fa>
 80056c4:	2303      	movs	r3, #3
 80056c6:	e004      	b.n	80056d2 <HAL_GPIO_Init+0x1fa>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e002      	b.n	80056d2 <HAL_GPIO_Init+0x1fa>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_GPIO_Init+0x1fa>
 80056d0:	2300      	movs	r3, #0
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	f002 0203 	and.w	r2, r2, #3
 80056d8:	0092      	lsls	r2, r2, #2
 80056da:	4093      	lsls	r3, r2
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e2:	4937      	ldr	r1, [pc, #220]	; (80057c0 <HAL_GPIO_Init+0x2e8>)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	3302      	adds	r3, #2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056f0:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <HAL_GPIO_Init+0x300>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4013      	ands	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005714:	4a30      	ldr	r2, [pc, #192]	; (80057d8 <HAL_GPIO_Init+0x300>)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800571a:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <HAL_GPIO_Init+0x300>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	43db      	mvns	r3, r3
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4013      	ands	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800573e:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <HAL_GPIO_Init+0x300>)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005744:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <HAL_GPIO_Init+0x300>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	43db      	mvns	r3, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4013      	ands	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_GPIO_Init+0x300>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_GPIO_Init+0x300>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	43db      	mvns	r3, r3
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4013      	ands	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005792:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <HAL_GPIO_Init+0x300>)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	3301      	adds	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f47f ae9d 	bne.w	80054e8 <HAL_GPIO_Init+0x10>
  }
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40010000 	.word	0x40010000
 80057c4:	48000400 	.word	0x48000400
 80057c8:	48000800 	.word	0x48000800
 80057cc:	48000c00 	.word	0x48000c00
 80057d0:	48001000 	.word	0x48001000
 80057d4:	48001400 	.word	0x48001400
 80057d8:	40010400 	.word	0x40010400

080057dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e001      	b.n	80057fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800581c:	787b      	ldrb	r3, [r7, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005828:	e002      	b.n	8005830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4013      	ands	r3, r2
 8005854:	041a      	lsls	r2, r3, #16
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	43d9      	mvns	r1, r3
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	400b      	ands	r3, r1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d141      	bne.n	8005902 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800587e:	4b4b      	ldr	r3, [pc, #300]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d131      	bne.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800588c:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005892:	4a46      	ldr	r2, [pc, #280]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800589c:	4b43      	ldr	r3, [pc, #268]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058a4:	4a41      	ldr	r2, [pc, #260]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058ac:	4b40      	ldr	r3, [pc, #256]	; (80059b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2232      	movs	r2, #50	; 0x32
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	4a3f      	ldr	r2, [pc, #252]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	0c9b      	lsrs	r3, r3, #18
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058c2:	e002      	b.n	80058ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ca:	4b38      	ldr	r3, [pc, #224]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d102      	bne.n	80058de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f2      	bne.n	80058c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ea:	d158      	bne.n	800599e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e057      	b.n	80059a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058f0:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f6:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005900:	e04d      	b.n	800599e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005908:	d141      	bne.n	800598e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800590a:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005916:	d131      	bne.n	800597c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005918:	4b24      	ldr	r3, [pc, #144]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591e:	4a23      	ldr	r2, [pc, #140]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005930:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005936:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005938:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2232      	movs	r2, #50	; 0x32
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	0c9b      	lsrs	r3, r3, #18
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800594e:	e002      	b.n	8005956 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b01      	subs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005962:	d102      	bne.n	800596a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f2      	bne.n	8005950 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800596a:	4b10      	ldr	r3, [pc, #64]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	d112      	bne.n	800599e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e011      	b.n	80059a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005982:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800598c:	e007      	b.n	800599e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800599c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	40007000 	.word	0x40007000
 80059b0:	20000000 	.word	0x20000000
 80059b4:	431bde83 	.word	0x431bde83

080059b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e2fe      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d075      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d6:	4b97      	ldr	r3, [pc, #604]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e0:	4b94      	ldr	r3, [pc, #592]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d102      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3e>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d002      	beq.n	80059fc <HAL_RCC_OscConfig+0x44>
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10b      	bne.n	8005a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	4b8d      	ldr	r3, [pc, #564]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05b      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x108>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d157      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e2d9      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCC_OscConfig+0x74>
 8005a1e:	4b85      	ldr	r3, [pc, #532]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a84      	ldr	r2, [pc, #528]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e01d      	b.n	8005a68 <HAL_RCC_OscConfig+0xb0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x98>
 8005a36:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a7e      	ldr	r2, [pc, #504]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4b7c      	ldr	r3, [pc, #496]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a7b      	ldr	r2, [pc, #492]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0xb0>
 8005a50:	4b78      	ldr	r3, [pc, #480]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a77      	ldr	r2, [pc, #476]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b75      	ldr	r3, [pc, #468]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a74      	ldr	r2, [pc, #464]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc fff4 	bl	8002a5c <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a78:	f7fc fff0 	bl	8002a5c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e29e      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0xc0>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fc ffe0 	bl	8002a5c <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa0:	f7fc ffdc 	bl	8002a5c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e28a      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ab2:	4b60      	ldr	r3, [pc, #384]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0xe8>
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d075      	beq.n	8005bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ace:	4b59      	ldr	r3, [pc, #356]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ad8:	4b56      	ldr	r3, [pc, #344]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d102      	bne.n	8005aee <HAL_RCC_OscConfig+0x136>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d002      	beq.n	8005af4 <HAL_RCC_OscConfig+0x13c>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d11f      	bne.n	8005b34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af4:	4b4f      	ldr	r3, [pc, #316]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_OscConfig+0x154>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e25d      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b0c:	4b49      	ldr	r3, [pc, #292]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	4946      	ldr	r1, [pc, #280]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b20:	4b45      	ldr	r3, [pc, #276]	; (8005c38 <HAL_RCC_OscConfig+0x280>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fc ff4d 	bl	80029c4 <HAL_InitTick>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d043      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e249      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d023      	beq.n	8005b84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b3c:	4b3d      	ldr	r3, [pc, #244]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3c      	ldr	r2, [pc, #240]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc ff88 	bl	8002a5c <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b50:	f7fc ff84 	bl	8002a5c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e232      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b62:	4b34      	ldr	r3, [pc, #208]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6e:	4b31      	ldr	r3, [pc, #196]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	061b      	lsls	r3, r3, #24
 8005b7c:	492d      	ldr	r1, [pc, #180]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	604b      	str	r3, [r1, #4]
 8005b82:	e01a      	b.n	8005bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b84:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc ff64 	bl	8002a5c <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b98:	f7fc ff60 	bl	8002a5c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e20e      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005baa:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x1e0>
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d041      	beq.n	8005c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01c      	beq.n	8005c08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd4:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bde:	f7fc ff3d 	bl	8002a5c <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be6:	f7fc ff39 	bl	8002a5c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e1e7      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ef      	beq.n	8005be6 <HAL_RCC_OscConfig+0x22e>
 8005c06:	e020      	b.n	8005c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <HAL_RCC_OscConfig+0x27c>)
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fc ff20 	bl	8002a5c <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c1e:	e00d      	b.n	8005c3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c20:	f7fc ff1c 	bl	8002a5c <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d906      	bls.n	8005c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e1ca      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c3c:	4b8c      	ldr	r3, [pc, #560]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ea      	bne.n	8005c20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80a6 	beq.w	8005da4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c5c:	4b84      	ldr	r3, [pc, #528]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_OscConfig+0x2b4>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x2b6>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00d      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	4b7f      	ldr	r3, [pc, #508]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c76:	4a7e      	ldr	r2, [pc, #504]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c7e:	4b7c      	ldr	r3, [pc, #496]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8e:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <HAL_RCC_OscConfig+0x4bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d118      	bne.n	8005ccc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c9a:	4b76      	ldr	r3, [pc, #472]	; (8005e74 <HAL_RCC_OscConfig+0x4bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a75      	ldr	r2, [pc, #468]	; (8005e74 <HAL_RCC_OscConfig+0x4bc>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca6:	f7fc fed9 	bl	8002a5c <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cae:	f7fc fed5 	bl	8002a5c <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e183      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cc0:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <HAL_RCC_OscConfig+0x4bc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d108      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x32e>
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ce4:	e024      	b.n	8005d30 <HAL_RCC_OscConfig+0x378>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d110      	bne.n	8005d10 <HAL_RCC_OscConfig+0x358>
 8005cee:	4b60      	ldr	r3, [pc, #384]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	4a5e      	ldr	r2, [pc, #376]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005cf6:	f043 0304 	orr.w	r3, r3, #4
 8005cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cfe:	4b5c      	ldr	r3, [pc, #368]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d04:	4a5a      	ldr	r2, [pc, #360]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d0e:	e00f      	b.n	8005d30 <HAL_RCC_OscConfig+0x378>
 8005d10:	4b57      	ldr	r3, [pc, #348]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d16:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d20:	4b53      	ldr	r3, [pc, #332]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	4a52      	ldr	r2, [pc, #328]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d016      	beq.n	8005d66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d38:	f7fc fe90 	bl	8002a5c <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d40:	f7fc fe8c 	bl	8002a5c <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e138      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d56:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ed      	beq.n	8005d40 <HAL_RCC_OscConfig+0x388>
 8005d64:	e015      	b.n	8005d92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d66:	f7fc fe79 	bl	8002a5c <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fc fe75 	bl	8002a5c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e121      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d84:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1ed      	bne.n	8005d6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d92:	7ffb      	ldrb	r3, [r7, #31]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d98:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d03c      	beq.n	8005e2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01c      	beq.n	8005df2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005db8:	4b2d      	ldr	r3, [pc, #180]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dbe:	4a2c      	ldr	r2, [pc, #176]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc8:	f7fc fe48 	bl	8002a5c <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd0:	f7fc fe44 	bl	8002a5c <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e0f2      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005de2:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ef      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x418>
 8005df0:	e01b      	b.n	8005e2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005df2:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e02:	f7fc fe2b 	bl	8002a5c <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e0a:	f7fc fe27 	bl	8002a5c <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e0d5      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1ef      	bne.n	8005e0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80c9 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e34:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 030c 	and.w	r3, r3, #12
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	f000 8083 	beq.w	8005f48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d15e      	bne.n	8005f08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <HAL_RCC_OscConfig+0x4b8>)
 8005e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fc fe01 	bl	8002a5c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5c:	e00c      	b.n	8005e78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fc fdfd 	bl	8002a5c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d905      	bls.n	8005e78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e0ab      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e78:	4b55      	ldr	r3, [pc, #340]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1ec      	bne.n	8005e5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e84:	4b52      	ldr	r3, [pc, #328]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	4b52      	ldr	r3, [pc, #328]	; (8005fd4 <HAL_RCC_OscConfig+0x61c>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6a11      	ldr	r1, [r2, #32]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e94:	3a01      	subs	r2, #1
 8005e96:	0112      	lsls	r2, r2, #4
 8005e98:	4311      	orrs	r1, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e9e:	0212      	lsls	r2, r2, #8
 8005ea0:	4311      	orrs	r1, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ea6:	0852      	lsrs	r2, r2, #1
 8005ea8:	3a01      	subs	r2, #1
 8005eaa:	0552      	lsls	r2, r2, #21
 8005eac:	4311      	orrs	r1, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eb2:	0852      	lsrs	r2, r2, #1
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	0652      	lsls	r2, r2, #25
 8005eb8:	4311      	orrs	r1, r2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ebe:	06d2      	lsls	r2, r2, #27
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	4943      	ldr	r1, [pc, #268]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec8:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ed4:	4b3e      	ldr	r3, [pc, #248]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4a3d      	ldr	r2, [pc, #244]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ede:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fc fdbc 	bl	8002a5c <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fc fdb8 	bl	8002a5c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e066      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005efa:	4b35      	ldr	r3, [pc, #212]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x530>
 8005f06:	e05e      	b.n	8005fc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f08:	4b31      	ldr	r3, [pc, #196]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a30      	ldr	r2, [pc, #192]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fc fda2 	bl	8002a5c <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fc fd9e 	bl	8002a5c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e04c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f2e:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f3a:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	4924      	ldr	r1, [pc, #144]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <HAL_RCC_OscConfig+0x620>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	60cb      	str	r3, [r1, #12]
 8005f46:	e03e      	b.n	8005fc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e039      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f54:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <HAL_RCC_OscConfig+0x618>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0203 	and.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d12c      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	3b01      	subs	r3, #1
 8005f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d123      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d11b      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d113      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d109      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	019f800c 	.word	0x019f800c
 8005fd8:	feeefffc 	.word	0xfeeefffc

08005fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e11e      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff4:	4b91      	ldr	r3, [pc, #580]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d910      	bls.n	8006024 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006002:	4b8e      	ldr	r3, [pc, #568]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f023 020f 	bic.w	r2, r3, #15
 800600a:	498c      	ldr	r1, [pc, #560]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	4313      	orrs	r3, r2
 8006010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006012:	4b8a      	ldr	r3, [pc, #552]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e106      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d073      	beq.n	8006118 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d129      	bne.n	800608c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006038:	4b81      	ldr	r3, [pc, #516]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0f4      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006048:	f000 f966 	bl	8006318 <RCC_GetSysClockFreqFromPLLSource>
 800604c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	4a7c      	ldr	r2, [pc, #496]	; (8006244 <HAL_RCC_ClockConfig+0x268>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d93f      	bls.n	80060d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006056:	4b7a      	ldr	r3, [pc, #488]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800606a:	2b00      	cmp	r3, #0
 800606c:	d033      	beq.n	80060d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006072:	2b00      	cmp	r3, #0
 8006074:	d12f      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006076:	4b72      	ldr	r3, [pc, #456]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607e:	4a70      	ldr	r2, [pc, #448]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e024      	b.n	80060d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006094:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0c6      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060a4:	4b66      	ldr	r3, [pc, #408]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0be      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80060b4:	f000 f8ce 	bl	8006254 <HAL_RCC_GetSysClockFreq>
 80060b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4a61      	ldr	r2, [pc, #388]	; (8006244 <HAL_RCC_ClockConfig+0x268>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d909      	bls.n	80060d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060c2:	4b5f      	ldr	r3, [pc, #380]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ca:	4a5d      	ldr	r2, [pc, #372]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80060cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060d6:	4b5a      	ldr	r3, [pc, #360]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f023 0203 	bic.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4957      	ldr	r1, [pc, #348]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e8:	f7fc fcb8 	bl	8002a5c <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f0:	f7fc fcb4 	bl	8002a5c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e095      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006106:	4b4e      	ldr	r3, [pc, #312]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 020c 	and.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	429a      	cmp	r2, r3
 8006116:	d1eb      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d023      	beq.n	800616c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006130:	4b43      	ldr	r3, [pc, #268]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4a42      	ldr	r2, [pc, #264]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800613a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006148:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006150:	4a3b      	ldr	r2, [pc, #236]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006158:	4b39      	ldr	r3, [pc, #228]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4936      	ldr	r1, [pc, #216]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006166:	4313      	orrs	r3, r2
 8006168:	608b      	str	r3, [r1, #8]
 800616a:	e008      	b.n	800617e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d105      	bne.n	800617e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006172:	4b33      	ldr	r3, [pc, #204]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	4a32      	ldr	r2, [pc, #200]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800617c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800617e:	4b2f      	ldr	r3, [pc, #188]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d21d      	bcs.n	80061c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618c:	4b2b      	ldr	r3, [pc, #172]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 020f 	bic.w	r2, r3, #15
 8006194:	4929      	ldr	r1, [pc, #164]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800619c:	f7fc fc5e 	bl	8002a5c <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a4:	f7fc fc5a 	bl	8002a5c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e03b      	b.n	8006232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <HAL_RCC_ClockConfig+0x260>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1ed      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d4:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4917      	ldr	r1, [pc, #92]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	490f      	ldr	r1, [pc, #60]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 8006202:	4313      	orrs	r3, r2
 8006204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006206:	f000 f825 	bl	8006254 <HAL_RCC_GetSysClockFreq>
 800620a:	4602      	mov	r2, r0
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_RCC_ClockConfig+0x264>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	490c      	ldr	r1, [pc, #48]	; (8006248 <HAL_RCC_ClockConfig+0x26c>)
 8006218:	5ccb      	ldrb	r3, [r1, r3]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	4a0a      	ldr	r2, [pc, #40]	; (800624c <HAL_RCC_ClockConfig+0x270>)
 8006224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <HAL_RCC_ClockConfig+0x274>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fc fbca 	bl	80029c4 <HAL_InitTick>
 8006230:	4603      	mov	r3, r0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40022000 	.word	0x40022000
 8006240:	40021000 	.word	0x40021000
 8006244:	04c4b400 	.word	0x04c4b400
 8006248:	08008ee0 	.word	0x08008ee0
 800624c:	20000000 	.word	0x20000000
 8006250:	20000004 	.word	0x20000004

08006254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800625a:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b04      	cmp	r3, #4
 8006264:	d102      	bne.n	800626c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006266:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e047      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800626c:	4b27      	ldr	r3, [pc, #156]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 030c 	and.w	r3, r3, #12
 8006274:	2b08      	cmp	r3, #8
 8006276:	d102      	bne.n	800627e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006278:	4b26      	ldr	r3, [pc, #152]	; (8006314 <HAL_RCC_GetSysClockFreq+0xc0>)
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	e03e      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800627e:	4b23      	ldr	r3, [pc, #140]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b0c      	cmp	r3, #12
 8006288:	d136      	bne.n	80062f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006294:	4b1d      	ldr	r3, [pc, #116]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	091b      	lsrs	r3, r3, #4
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	3301      	adds	r3, #1
 80062a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d10c      	bne.n	80062c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062a8:	4a1a      	ldr	r2, [pc, #104]	; (8006314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062b2:	68d2      	ldr	r2, [r2, #12]
 80062b4:	0a12      	lsrs	r2, r2, #8
 80062b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	617b      	str	r3, [r7, #20]
      break;
 80062c0:	e00c      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	4a10      	ldr	r2, [pc, #64]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062cc:	68d2      	ldr	r2, [r2, #12]
 80062ce:	0a12      	lsrs	r2, r2, #8
 80062d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	617b      	str	r3, [r7, #20]
      break;
 80062da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	0e5b      	lsrs	r3, r3, #25
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	3301      	adds	r3, #1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	e001      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062fc:	693b      	ldr	r3, [r7, #16]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40021000 	.word	0x40021000
 8006310:	00f42400 	.word	0x00f42400
 8006314:	016e3600 	.word	0x016e3600

08006318 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800631e:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d10c      	bne.n	8006356 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800633c:	4a17      	ldr	r2, [pc, #92]	; (800639c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	fbb2 f3f3 	udiv	r3, r2, r3
 8006344:	4a14      	ldr	r2, [pc, #80]	; (8006398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006346:	68d2      	ldr	r2, [r2, #12]
 8006348:	0a12      	lsrs	r2, r2, #8
 800634a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	617b      	str	r3, [r7, #20]
    break;
 8006354:	e00c      	b.n	8006370 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	fbb2 f3f3 	udiv	r3, r2, r3
 800635e:	4a0e      	ldr	r2, [pc, #56]	; (8006398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006360:	68d2      	ldr	r2, [r2, #12]
 8006362:	0a12      	lsrs	r2, r2, #8
 8006364:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006368:	fb02 f303 	mul.w	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]
    break;
 800636e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006370:	4b09      	ldr	r3, [pc, #36]	; (8006398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	0e5b      	lsrs	r3, r3, #25
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	3301      	adds	r3, #1
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800638a:	687b      	ldr	r3, [r7, #4]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40021000 	.word	0x40021000
 800639c:	016e3600 	.word	0x016e3600
 80063a0:	00f42400 	.word	0x00f42400

080063a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063ac:	2300      	movs	r3, #0
 80063ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063b0:	2300      	movs	r3, #0
 80063b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8098 	beq.w	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063c2:	2300      	movs	r3, #0
 80063c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c6:	4b43      	ldr	r3, [pc, #268]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063d2:	4b40      	ldr	r3, [pc, #256]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d6:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6593      	str	r3, [r2, #88]	; 0x58
 80063de:	4b3d      	ldr	r3, [pc, #244]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ea:	2301      	movs	r3, #1
 80063ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a39      	ldr	r2, [pc, #228]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063fa:	f7fc fb2f 	bl	8002a5c <HAL_GetTick>
 80063fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006400:	e009      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006402:	f7fc fb2b 	bl	8002a5c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d902      	bls.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	74fb      	strb	r3, [r7, #19]
        break;
 8006414:	e005      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006416:	4b30      	ldr	r3, [pc, #192]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0ef      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006422:	7cfb      	ldrb	r3, [r7, #19]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d159      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006428:	4b2a      	ldr	r3, [pc, #168]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01e      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	429a      	cmp	r2, r3
 8006442:	d019      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006444:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006450:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006460:	4b1c      	ldr	r3, [pc, #112]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	4a1b      	ldr	r2, [pc, #108]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006470:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d016      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006482:	f7fc faeb 	bl	8002a5c <HAL_GetTick>
 8006486:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006488:	e00b      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fc fae7 	bl	8002a5c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	; 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d902      	bls.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	74fb      	strb	r3, [r7, #19]
            break;
 80064a0:	e006      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0ec      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064b6:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c4:	4903      	ldr	r1, [pc, #12]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064cc:	e008      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ce:	7cfb      	ldrb	r3, [r7, #19]
 80064d0:	74bb      	strb	r3, [r7, #18]
 80064d2:	e005      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064d4:	40021000 	.word	0x40021000
 80064d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064e0:	7c7b      	ldrb	r3, [r7, #17]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e6:	4ba7      	ldr	r3, [pc, #668]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ea:	4aa6      	ldr	r2, [pc, #664]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064fe:	4ba1      	ldr	r3, [pc, #644]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006504:	f023 0203 	bic.w	r2, r3, #3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	499d      	ldr	r1, [pc, #628]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006520:	4b98      	ldr	r3, [pc, #608]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f023 020c 	bic.w	r2, r3, #12
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	4995      	ldr	r1, [pc, #596]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006542:	4b90      	ldr	r3, [pc, #576]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	498c      	ldr	r1, [pc, #560]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006564:	4b87      	ldr	r3, [pc, #540]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	4984      	ldr	r1, [pc, #528]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006586:	4b7f      	ldr	r3, [pc, #508]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	497b      	ldr	r1, [pc, #492]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065a8:	4b76      	ldr	r3, [pc, #472]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	4973      	ldr	r1, [pc, #460]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ca:	4b6e      	ldr	r3, [pc, #440]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	496a      	ldr	r1, [pc, #424]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ec:	4b65      	ldr	r3, [pc, #404]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4962      	ldr	r1, [pc, #392]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800660e:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	4959      	ldr	r1, [pc, #356]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006630:	4b54      	ldr	r3, [pc, #336]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006636:	f023 0203 	bic.w	r2, r3, #3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	4951      	ldr	r1, [pc, #324]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006652:	4b4c      	ldr	r3, [pc, #304]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4948      	ldr	r1, [pc, #288]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006674:	4b43      	ldr	r3, [pc, #268]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	4940      	ldr	r1, [pc, #256]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006694:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a3a      	ldr	r2, [pc, #232]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d015      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066ac:	4b35      	ldr	r3, [pc, #212]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	4932      	ldr	r1, [pc, #200]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ca:	d105      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066cc:	4b2d      	ldr	r3, [pc, #180]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4a2c      	ldr	r2, [pc, #176]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d015      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	4924      	ldr	r1, [pc, #144]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006702:	d105      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006704:	4b1f      	ldr	r3, [pc, #124]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800670e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d015      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	4916      	ldr	r1, [pc, #88]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800673a:	d105      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800673c:	4b11      	ldr	r3, [pc, #68]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a10      	ldr	r2, [pc, #64]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006746:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d019      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	4908      	ldr	r1, [pc, #32]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006772:	d109      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006774:	4b03      	ldr	r3, [pc, #12]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a02      	ldr	r2, [pc, #8]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800677e:	60d3      	str	r3, [r2, #12]
 8006780:	e002      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006794:	4b29      	ldr	r3, [pc, #164]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	4926      	ldr	r1, [pc, #152]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b2:	d105      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067b4:	4b21      	ldr	r3, [pc, #132]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a20      	ldr	r2, [pc, #128]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d015      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067cc:	4b1b      	ldr	r3, [pc, #108]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067da:	4918      	ldr	r1, [pc, #96]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ea:	d105      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067ec:	4b13      	ldr	r3, [pc, #76]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4a12      	ldr	r2, [pc, #72]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d015      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800680a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	490a      	ldr	r1, [pc, #40]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006822:	d105      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800682a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006830:	7cbb      	ldrb	r3, [r7, #18]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40021000 	.word	0x40021000

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d001      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e054      	b.n	8006902 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <HAL_TIM_Base_Start_IT+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006882:	d01d      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a22      	ldr	r2, [pc, #136]	; (8006914 <HAL_TIM_Base_Start_IT+0xd4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <HAL_TIM_Base_Start_IT+0xd8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <HAL_TIM_Base_Start_IT+0xdc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <HAL_TIM_Base_Start_IT+0xe0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <HAL_TIM_Base_Start_IT+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <HAL_TIM_Base_Start_IT+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d115      	bne.n	80068ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	4b19      	ldr	r3, [pc, #100]	; (800692c <HAL_TIM_Base_Start_IT+0xec>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d015      	beq.n	80068fe <HAL_TIM_Base_Start_IT+0xbe>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d8:	d011      	beq.n	80068fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	e008      	b.n	80068fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	e000      	b.n	8006900 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40013400 	.word	0x40013400
 8006924:	40014000 	.word	0x40014000
 8006928:	40015000 	.word	0x40015000
 800692c:	00010007 	.word	0x00010007

08006930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e049      	b.n	80069d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb fe98 	bl	800268c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 fb50 	bl	8007014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <HAL_TIM_PWM_Start+0x24>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e03c      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d109      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x3e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e02f      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d109      	bne.n	8006a38 <HAL_TIM_PWM_Start+0x58>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	bf14      	ite	ne
 8006a30:	2301      	movne	r3, #1
 8006a32:	2300      	moveq	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e022      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b0c      	cmp	r3, #12
 8006a3c:	d109      	bne.n	8006a52 <HAL_TIM_PWM_Start+0x72>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	bf14      	ite	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	2300      	moveq	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e015      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d109      	bne.n	8006a6c <HAL_TIM_PWM_Start+0x8c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	bf14      	ite	ne
 8006a64:	2301      	movne	r3, #1
 8006a66:	2300      	moveq	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	e008      	b.n	8006a7e <HAL_TIM_PWM_Start+0x9e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e0a6      	b.n	8006bd4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start+0xb6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a94:	e023      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0xc6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa4:	e01b      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d104      	bne.n	8006ab6 <HAL_TIM_PWM_Start+0xd6>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab4:	e013      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0xe6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac4:	e00b      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0xf6>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad4:	e003      	b.n	8006ade <HAL_TIM_PWM_Start+0xfe>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 ff9c 	bl	8007a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a3a      	ldr	r2, [pc, #232]	; (8006bdc <HAL_TIM_PWM_Start+0x1fc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_TIM_PWM_Start+0x148>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a39      	ldr	r2, [pc, #228]	; (8006be0 <HAL_TIM_PWM_Start+0x200>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <HAL_TIM_PWM_Start+0x148>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a37      	ldr	r2, [pc, #220]	; (8006be4 <HAL_TIM_PWM_Start+0x204>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_TIM_PWM_Start+0x148>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a36      	ldr	r2, [pc, #216]	; (8006be8 <HAL_TIM_PWM_Start+0x208>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_TIM_PWM_Start+0x148>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a34      	ldr	r2, [pc, #208]	; (8006bec <HAL_TIM_PWM_Start+0x20c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIM_PWM_Start+0x148>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a33      	ldr	r2, [pc, #204]	; (8006bf0 <HAL_TIM_PWM_Start+0x210>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d101      	bne.n	8006b2c <HAL_TIM_PWM_Start+0x14c>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <HAL_TIM_PWM_Start+0x14e>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_TIM_PWM_Start+0x1fc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d022      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d01d      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a26      	ldr	r2, [pc, #152]	; (8006bf4 <HAL_TIM_PWM_Start+0x214>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a24      	ldr	r2, [pc, #144]	; (8006bf8 <HAL_TIM_PWM_Start+0x218>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <HAL_TIM_PWM_Start+0x21c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_TIM_PWM_Start+0x200>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_TIM_PWM_Start+0x204>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x1b2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_TIM_PWM_Start+0x210>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d115      	bne.n	8006bbe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <HAL_TIM_PWM_Start+0x220>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b06      	cmp	r3, #6
 8006ba2:	d015      	beq.n	8006bd0 <HAL_TIM_PWM_Start+0x1f0>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006baa:	d011      	beq.n	8006bd0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bbc:	e008      	b.n	8006bd0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0201 	orr.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e000      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	40015000 	.word	0x40015000
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	00010007 	.word	0x00010007

08006c04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e049      	b.n	8006caa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fb fd4e 	bl	80026cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 f9e6 	bl	8007014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e088      	b.n	8006de2 <HAL_TIM_IC_ConfigChannel+0x130>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11b      	bne.n	8006d16 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f000 fd6f 	bl	80077d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699a      	ldr	r2, [r3, #24]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 020c 	bic.w	r2, r2, #12
 8006d00:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6999      	ldr	r1, [r3, #24]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	619a      	str	r2, [r3, #24]
 8006d14:	e060      	b.n	8006dd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d11c      	bne.n	8006d56 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f000 fdc4 	bl	80078b8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d3e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6999      	ldr	r1, [r3, #24]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	021a      	lsls	r2, r3, #8
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	619a      	str	r2, [r3, #24]
 8006d54:	e040      	b.n	8006dd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f000 fde1 	bl	8007932 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 020c 	bic.w	r2, r2, #12
 8006d7e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69d9      	ldr	r1, [r3, #28]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	61da      	str	r2, [r3, #28]
 8006d92:	e021      	b.n	8006dd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b0c      	cmp	r3, #12
 8006d98:	d11c      	bne.n	8006dd4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f000 fdfe 	bl	80079aa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006dbc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69d9      	ldr	r1, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	61da      	str	r2, [r3, #28]
 8006dd2:	e001      	b.n	8006dd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e0ff      	b.n	800700a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b14      	cmp	r3, #20
 8006e16:	f200 80f0 	bhi.w	8006ffa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006e75 	.word	0x08006e75
 8006e24:	08006ffb 	.word	0x08006ffb
 8006e28:	08006ffb 	.word	0x08006ffb
 8006e2c:	08006ffb 	.word	0x08006ffb
 8006e30:	08006eb5 	.word	0x08006eb5
 8006e34:	08006ffb 	.word	0x08006ffb
 8006e38:	08006ffb 	.word	0x08006ffb
 8006e3c:	08006ffb 	.word	0x08006ffb
 8006e40:	08006ef7 	.word	0x08006ef7
 8006e44:	08006ffb 	.word	0x08006ffb
 8006e48:	08006ffb 	.word	0x08006ffb
 8006e4c:	08006ffb 	.word	0x08006ffb
 8006e50:	08006f37 	.word	0x08006f37
 8006e54:	08006ffb 	.word	0x08006ffb
 8006e58:	08006ffb 	.word	0x08006ffb
 8006e5c:	08006ffb 	.word	0x08006ffb
 8006e60:	08006f79 	.word	0x08006f79
 8006e64:	08006ffb 	.word	0x08006ffb
 8006e68:	08006ffb 	.word	0x08006ffb
 8006e6c:	08006ffb 	.word	0x08006ffb
 8006e70:	08006fb9 	.word	0x08006fb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f97e 	bl	800717c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0208 	orr.w	r2, r2, #8
 8006e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0204 	bic.w	r2, r2, #4
 8006e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6999      	ldr	r1, [r3, #24]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	619a      	str	r2, [r3, #24]
      break;
 8006eb2:	e0a5      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f9f8 	bl	80072b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6999      	ldr	r1, [r3, #24]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	021a      	lsls	r2, r3, #8
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	619a      	str	r2, [r3, #24]
      break;
 8006ef4:	e084      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fa6b 	bl	80073d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0208 	orr.w	r2, r2, #8
 8006f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0204 	bic.w	r2, r2, #4
 8006f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69d9      	ldr	r1, [r3, #28]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	61da      	str	r2, [r3, #28]
      break;
 8006f34:	e064      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fadd 	bl	80074fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69da      	ldr	r2, [r3, #28]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69d9      	ldr	r1, [r3, #28]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	021a      	lsls	r2, r3, #8
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	61da      	str	r2, [r3, #28]
      break;
 8006f76:	e043      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fb50 	bl	8007624 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0208 	orr.w	r2, r2, #8
 8006f92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0204 	bic.w	r2, r2, #4
 8006fa2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	691a      	ldr	r2, [r3, #16]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006fb6:	e023      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fb9a 	bl	80076f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	021a      	lsls	r2, r3, #8
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ff8:	e002      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop

08007014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a4c      	ldr	r2, [pc, #304]	; (8007158 <TIM_Base_SetConfig+0x144>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d017      	beq.n	800705c <TIM_Base_SetConfig+0x48>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007032:	d013      	beq.n	800705c <TIM_Base_SetConfig+0x48>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a49      	ldr	r2, [pc, #292]	; (800715c <TIM_Base_SetConfig+0x148>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00f      	beq.n	800705c <TIM_Base_SetConfig+0x48>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a48      	ldr	r2, [pc, #288]	; (8007160 <TIM_Base_SetConfig+0x14c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00b      	beq.n	800705c <TIM_Base_SetConfig+0x48>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a47      	ldr	r2, [pc, #284]	; (8007164 <TIM_Base_SetConfig+0x150>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d007      	beq.n	800705c <TIM_Base_SetConfig+0x48>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a46      	ldr	r2, [pc, #280]	; (8007168 <TIM_Base_SetConfig+0x154>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_Base_SetConfig+0x48>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a45      	ldr	r2, [pc, #276]	; (800716c <TIM_Base_SetConfig+0x158>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d108      	bne.n	800706e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a39      	ldr	r2, [pc, #228]	; (8007158 <TIM_Base_SetConfig+0x144>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d023      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707c:	d01f      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a36      	ldr	r2, [pc, #216]	; (800715c <TIM_Base_SetConfig+0x148>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01b      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a35      	ldr	r2, [pc, #212]	; (8007160 <TIM_Base_SetConfig+0x14c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d017      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a34      	ldr	r2, [pc, #208]	; (8007164 <TIM_Base_SetConfig+0x150>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a33      	ldr	r2, [pc, #204]	; (8007168 <TIM_Base_SetConfig+0x154>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00f      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a33      	ldr	r2, [pc, #204]	; (8007170 <TIM_Base_SetConfig+0x15c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00b      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a32      	ldr	r2, [pc, #200]	; (8007174 <TIM_Base_SetConfig+0x160>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d007      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a31      	ldr	r2, [pc, #196]	; (8007178 <TIM_Base_SetConfig+0x164>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_Base_SetConfig+0xaa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a2c      	ldr	r2, [pc, #176]	; (800716c <TIM_Base_SetConfig+0x158>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d108      	bne.n	80070d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a18      	ldr	r2, [pc, #96]	; (8007158 <TIM_Base_SetConfig+0x144>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <TIM_Base_SetConfig+0x110>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <TIM_Base_SetConfig+0x154>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00f      	beq.n	8007124 <TIM_Base_SetConfig+0x110>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <TIM_Base_SetConfig+0x15c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00b      	beq.n	8007124 <TIM_Base_SetConfig+0x110>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a19      	ldr	r2, [pc, #100]	; (8007174 <TIM_Base_SetConfig+0x160>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_Base_SetConfig+0x110>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <TIM_Base_SetConfig+0x164>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_Base_SetConfig+0x110>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a13      	ldr	r2, [pc, #76]	; (800716c <TIM_Base_SetConfig+0x158>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d103      	bne.n	800712c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b01      	cmp	r3, #1
 800713c:	d105      	bne.n	800714a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f023 0201 	bic.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]
  }
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40013400 	.word	0x40013400
 800716c:	40015000 	.word	0x40015000
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800

0800717c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	f023 0201 	bic.w	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 0302 	bic.w	r3, r3, #2
 80071c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a30      	ldr	r2, [pc, #192]	; (8007298 <TIM_OC1_SetConfig+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <TIM_OC1_SetConfig+0x88>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a2f      	ldr	r2, [pc, #188]	; (800729c <TIM_OC1_SetConfig+0x120>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00f      	beq.n	8007204 <TIM_OC1_SetConfig+0x88>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a2e      	ldr	r2, [pc, #184]	; (80072a0 <TIM_OC1_SetConfig+0x124>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00b      	beq.n	8007204 <TIM_OC1_SetConfig+0x88>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <TIM_OC1_SetConfig+0x128>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d007      	beq.n	8007204 <TIM_OC1_SetConfig+0x88>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <TIM_OC1_SetConfig+0x12c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_OC1_SetConfig+0x88>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a2b      	ldr	r2, [pc, #172]	; (80072ac <TIM_OC1_SetConfig+0x130>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d10c      	bne.n	800721e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0308 	bic.w	r3, r3, #8
 800720a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f023 0304 	bic.w	r3, r3, #4
 800721c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <TIM_OC1_SetConfig+0x11c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <TIM_OC1_SetConfig+0xd2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1c      	ldr	r2, [pc, #112]	; (800729c <TIM_OC1_SetConfig+0x120>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00f      	beq.n	800724e <TIM_OC1_SetConfig+0xd2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a1b      	ldr	r2, [pc, #108]	; (80072a0 <TIM_OC1_SetConfig+0x124>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00b      	beq.n	800724e <TIM_OC1_SetConfig+0xd2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <TIM_OC1_SetConfig+0x128>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d007      	beq.n	800724e <TIM_OC1_SetConfig+0xd2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a19      	ldr	r2, [pc, #100]	; (80072a8 <TIM_OC1_SetConfig+0x12c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d003      	beq.n	800724e <TIM_OC1_SetConfig+0xd2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a18      	ldr	r2, [pc, #96]	; (80072ac <TIM_OC1_SetConfig+0x130>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d111      	bne.n	8007272 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800725c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	621a      	str	r2, [r3, #32]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40012c00 	.word	0x40012c00
 800729c:	40013400 	.word	0x40013400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40014400 	.word	0x40014400
 80072a8:	40014800 	.word	0x40014800
 80072ac:	40015000 	.word	0x40015000

080072b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f023 0210 	bic.w	r2, r3, #16
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 0320 	bic.w	r3, r3, #32
 80072fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a2c      	ldr	r2, [pc, #176]	; (80073c0 <TIM_OC2_SetConfig+0x110>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_OC2_SetConfig+0x74>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a2b      	ldr	r2, [pc, #172]	; (80073c4 <TIM_OC2_SetConfig+0x114>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_OC2_SetConfig+0x74>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a2a      	ldr	r2, [pc, #168]	; (80073c8 <TIM_OC2_SetConfig+0x118>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d10d      	bne.n	8007340 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <TIM_OC2_SetConfig+0x110>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <TIM_OC2_SetConfig+0xc0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <TIM_OC2_SetConfig+0x114>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00f      	beq.n	8007370 <TIM_OC2_SetConfig+0xc0>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <TIM_OC2_SetConfig+0x11c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00b      	beq.n	8007370 <TIM_OC2_SetConfig+0xc0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <TIM_OC2_SetConfig+0x120>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d007      	beq.n	8007370 <TIM_OC2_SetConfig+0xc0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <TIM_OC2_SetConfig+0x124>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d003      	beq.n	8007370 <TIM_OC2_SetConfig+0xc0>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a17      	ldr	r2, [pc, #92]	; (80073c8 <TIM_OC2_SetConfig+0x118>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d113      	bne.n	8007398 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	621a      	str	r2, [r3, #32]
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40012c00 	.word	0x40012c00
 80073c4:	40013400 	.word	0x40013400
 80073c8:	40015000 	.word	0x40015000
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800

080073d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <TIM_OC3_SetConfig+0x10c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d007      	beq.n	800744a <TIM_OC3_SetConfig+0x72>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <TIM_OC3_SetConfig+0x110>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d003      	beq.n	800744a <TIM_OC3_SetConfig+0x72>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a29      	ldr	r2, [pc, #164]	; (80074ec <TIM_OC3_SetConfig+0x114>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d10d      	bne.n	8007466 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1e      	ldr	r2, [pc, #120]	; (80074e4 <TIM_OC3_SetConfig+0x10c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d013      	beq.n	8007496 <TIM_OC3_SetConfig+0xbe>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <TIM_OC3_SetConfig+0x110>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00f      	beq.n	8007496 <TIM_OC3_SetConfig+0xbe>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a1d      	ldr	r2, [pc, #116]	; (80074f0 <TIM_OC3_SetConfig+0x118>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00b      	beq.n	8007496 <TIM_OC3_SetConfig+0xbe>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1c      	ldr	r2, [pc, #112]	; (80074f4 <TIM_OC3_SetConfig+0x11c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d007      	beq.n	8007496 <TIM_OC3_SetConfig+0xbe>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1b      	ldr	r2, [pc, #108]	; (80074f8 <TIM_OC3_SetConfig+0x120>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d003      	beq.n	8007496 <TIM_OC3_SetConfig+0xbe>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a16      	ldr	r2, [pc, #88]	; (80074ec <TIM_OC3_SetConfig+0x114>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d113      	bne.n	80074be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800749c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	621a      	str	r2, [r3, #32]
}
 80074d8:	bf00      	nop
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40012c00 	.word	0x40012c00
 80074e8:	40013400 	.word	0x40013400
 80074ec:	40015000 	.word	0x40015000
 80074f0:	40014000 	.word	0x40014000
 80074f4:	40014400 	.word	0x40014400
 80074f8:	40014800 	.word	0x40014800

080074fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800754a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	031b      	lsls	r3, r3, #12
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a2c      	ldr	r2, [pc, #176]	; (800760c <TIM_OC4_SetConfig+0x110>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d007      	beq.n	8007570 <TIM_OC4_SetConfig+0x74>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a2b      	ldr	r2, [pc, #172]	; (8007610 <TIM_OC4_SetConfig+0x114>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_OC4_SetConfig+0x74>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a2a      	ldr	r2, [pc, #168]	; (8007614 <TIM_OC4_SetConfig+0x118>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d10d      	bne.n	800758c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	031b      	lsls	r3, r3, #12
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <TIM_OC4_SetConfig+0x110>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <TIM_OC4_SetConfig+0xc0>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a1e      	ldr	r2, [pc, #120]	; (8007610 <TIM_OC4_SetConfig+0x114>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00f      	beq.n	80075bc <TIM_OC4_SetConfig+0xc0>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <TIM_OC4_SetConfig+0x11c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <TIM_OC4_SetConfig+0xc0>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a1d      	ldr	r2, [pc, #116]	; (800761c <TIM_OC4_SetConfig+0x120>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_OC4_SetConfig+0xc0>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <TIM_OC4_SetConfig+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC4_SetConfig+0xc0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <TIM_OC4_SetConfig+0x118>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d113      	bne.n	80075e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	019b      	lsls	r3, r3, #6
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	019b      	lsls	r3, r3, #6
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	621a      	str	r2, [r3, #32]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40012c00 	.word	0x40012c00
 8007610:	40013400 	.word	0x40013400
 8007614:	40015000 	.word	0x40015000
 8007618:	40014000 	.word	0x40014000
 800761c:	40014400 	.word	0x40014400
 8007620:	40014800 	.word	0x40014800

08007624 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <TIM_OC5_SetConfig+0xbc>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d013      	beq.n	80076a6 <TIM_OC5_SetConfig+0x82>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <TIM_OC5_SetConfig+0xc0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00f      	beq.n	80076a6 <TIM_OC5_SetConfig+0x82>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <TIM_OC5_SetConfig+0xc4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00b      	beq.n	80076a6 <TIM_OC5_SetConfig+0x82>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a16      	ldr	r2, [pc, #88]	; (80076ec <TIM_OC5_SetConfig+0xc8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d007      	beq.n	80076a6 <TIM_OC5_SetConfig+0x82>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <TIM_OC5_SetConfig+0xcc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d003      	beq.n	80076a6 <TIM_OC5_SetConfig+0x82>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a14      	ldr	r2, [pc, #80]	; (80076f4 <TIM_OC5_SetConfig+0xd0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d109      	bne.n	80076ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	621a      	str	r2, [r3, #32]
}
 80076d4:	bf00      	nop
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	40012c00 	.word	0x40012c00
 80076e4:	40013400 	.word	0x40013400
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40014400 	.word	0x40014400
 80076f0:	40014800 	.word	0x40014800
 80076f4:	40015000 	.word	0x40015000

080076f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800773e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	051b      	lsls	r3, r3, #20
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	4313      	orrs	r3, r2
 800774a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a1a      	ldr	r2, [pc, #104]	; (80077b8 <TIM_OC6_SetConfig+0xc0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d013      	beq.n	800777c <TIM_OC6_SetConfig+0x84>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a19      	ldr	r2, [pc, #100]	; (80077bc <TIM_OC6_SetConfig+0xc4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00f      	beq.n	800777c <TIM_OC6_SetConfig+0x84>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <TIM_OC6_SetConfig+0xc8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00b      	beq.n	800777c <TIM_OC6_SetConfig+0x84>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <TIM_OC6_SetConfig+0xcc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d007      	beq.n	800777c <TIM_OC6_SetConfig+0x84>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <TIM_OC6_SetConfig+0xd0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d003      	beq.n	800777c <TIM_OC6_SetConfig+0x84>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a15      	ldr	r2, [pc, #84]	; (80077cc <TIM_OC6_SetConfig+0xd4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d109      	bne.n	8007790 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	029b      	lsls	r3, r3, #10
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40013400 	.word	0x40013400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40014400 	.word	0x40014400
 80077c8:	40014800 	.word	0x40014800
 80077cc:	40015000 	.word	0x40015000

080077d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	f023 0201 	bic.w	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4a28      	ldr	r2, [pc, #160]	; (800789c <TIM_TI1_SetConfig+0xcc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d01b      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007804:	d017      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a25      	ldr	r2, [pc, #148]	; (80078a0 <TIM_TI1_SetConfig+0xd0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a24      	ldr	r2, [pc, #144]	; (80078a4 <TIM_TI1_SetConfig+0xd4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00f      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4a23      	ldr	r2, [pc, #140]	; (80078a8 <TIM_TI1_SetConfig+0xd8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00b      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4a22      	ldr	r2, [pc, #136]	; (80078ac <TIM_TI1_SetConfig+0xdc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d007      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <TIM_TI1_SetConfig+0xe0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <TIM_TI1_SetConfig+0x66>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <TIM_TI1_SetConfig+0xe4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d101      	bne.n	800783a <TIM_TI1_SetConfig+0x6a>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <TIM_TI1_SetConfig+0x6c>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4313      	orrs	r3, r2
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e003      	b.n	800785a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f043 0301 	orr.w	r3, r3, #1
 8007858:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	b2db      	uxtb	r3, r3
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f023 030a 	bic.w	r3, r3, #10
 8007874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f003 030a 	and.w	r3, r3, #10
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	bf00      	nop
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40000800 	.word	0x40000800
 80078a8:	40000c00 	.word	0x40000c00
 80078ac:	40013400 	.word	0x40013400
 80078b0:	40014000 	.word	0x40014000
 80078b4:	40015000 	.word	0x40015000

080078b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	f023 0210 	bic.w	r2, r3, #16
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	031b      	lsls	r3, r3, #12
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800790a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	b2db      	uxtb	r3, r3
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007982:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	621a      	str	r2, [r3, #32]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b087      	sub	sp, #28
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	031b      	lsls	r3, r3, #12
 8007a02:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	621a      	str	r2, [r3, #32]
}
 8007a18:	bf00      	nop
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	2201      	movs	r2, #1
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1a      	ldr	r2, [r3, #32]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	401a      	ands	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <HAL_TIMEx_PWMN_Start+0x24>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e022      	b.n	8007ada <HAL_TIMEx_PWMN_Start+0x6a>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d109      	bne.n	8007aae <HAL_TIMEx_PWMN_Start+0x3e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e015      	b.n	8007ada <HAL_TIMEx_PWMN_Start+0x6a>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d109      	bne.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x58>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e008      	b.n	8007ada <HAL_TIMEx_PWMN_Start+0x6a>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e073      	b.n	8007bca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIMEx_PWMN_Start+0x82>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af0:	e013      	b.n	8007b1a <HAL_TIMEx_PWMN_Start+0xaa>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d104      	bne.n	8007b02 <HAL_TIMEx_PWMN_Start+0x92>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b00:	e00b      	b.n	8007b1a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d104      	bne.n	8007b12 <HAL_TIMEx_PWMN_Start+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b10:	e003      	b.n	8007b1a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f990 	bl	8007e48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a25      	ldr	r2, [pc, #148]	; (8007bd4 <HAL_TIMEx_PWMN_Start+0x164>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d022      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b4a:	d01d      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a21      	ldr	r2, [pc, #132]	; (8007bd8 <HAL_TIMEx_PWMN_Start+0x168>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d018      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <HAL_TIMEx_PWMN_Start+0x16c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <HAL_TIMEx_PWMN_Start+0x170>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <HAL_TIMEx_PWMN_Start+0x174>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_TIMEx_PWMN_Start+0x178>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <HAL_TIMEx_PWMN_Start+0x17c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d115      	bne.n	8007bb4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	4b18      	ldr	r3, [pc, #96]	; (8007bf0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b06      	cmp	r3, #6
 8007b98:	d015      	beq.n	8007bc6 <HAL_TIMEx_PWMN_Start+0x156>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba0:	d011      	beq.n	8007bc6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb2:	e008      	b.n	8007bc6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800
 8007be0:	40000c00 	.word	0x40000c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40015000 	.word	0x40015000
 8007bf0:	00010007 	.word	0x00010007

08007bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e074      	b.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a34      	ldr	r2, [pc, #208]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d009      	beq.n	8007c4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a33      	ldr	r2, [pc, #204]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d004      	beq.n	8007c4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a31      	ldr	r2, [pc, #196]	; (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a21      	ldr	r2, [pc, #132]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d022      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8c:	d01d      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1d      	ldr	r2, [pc, #116]	; (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a1c      	ldr	r2, [pc, #112]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40012c00 	.word	0x40012c00
 8007d08:	40013400 	.word	0x40013400
 8007d0c:	40015000 	.word	0x40015000
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40014000 	.word	0x40014000

08007d20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e078      	b.n	8007e2e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1c      	ldr	r2, [pc, #112]	; (8007e3c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d004      	beq.n	8007de2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d11c      	bne.n	8007e1c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	051b      	lsls	r3, r3, #20
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40012c00 	.word	0x40012c00
 8007e40:	40013400 	.word	0x40013400
 8007e44:	40015000 	.word	0x40015000

08007e48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	401a      	ands	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e80:	431a      	orrs	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
	...

08007e94 <__errno>:
 8007e94:	4b01      	ldr	r3, [pc, #4]	; (8007e9c <__errno+0x8>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	2000000c 	.word	0x2000000c

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f001 f808 	bl	8008ec8 <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	08009300 	.word	0x08009300
 8007edc:	08009300 	.word	0x08009300
 8007ee0:	08009300 	.word	0x08009300
 8007ee4:	08009304 	.word	0x08009304

08007ee8 <memcpy>:
 8007ee8:	440a      	add	r2, r1
 8007eea:	4291      	cmp	r1, r2
 8007eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef0:	d100      	bne.n	8007ef4 <memcpy+0xc>
 8007ef2:	4770      	bx	lr
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efe:	4291      	cmp	r1, r2
 8007f00:	d1f9      	bne.n	8007ef6 <memcpy+0xe>
 8007f02:	bd10      	pop	{r4, pc}

08007f04 <memset>:
 8007f04:	4402      	add	r2, r0
 8007f06:	4603      	mov	r3, r0
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d100      	bne.n	8007f0e <memset+0xa>
 8007f0c:	4770      	bx	lr
 8007f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f12:	e7f9      	b.n	8007f08 <memset+0x4>

08007f14 <cosf>:
 8007f14:	ee10 3a10 	vmov	r3, s0
 8007f18:	b507      	push	{r0, r1, r2, lr}
 8007f1a:	4a1e      	ldr	r2, [pc, #120]	; (8007f94 <cosf+0x80>)
 8007f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f20:	4293      	cmp	r3, r2
 8007f22:	dc06      	bgt.n	8007f32 <cosf+0x1e>
 8007f24:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007f98 <cosf+0x84>
 8007f28:	b003      	add	sp, #12
 8007f2a:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f2e:	f000 bb1d 	b.w	800856c <__kernel_cosf>
 8007f32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007f36:	db04      	blt.n	8007f42 <cosf+0x2e>
 8007f38:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007f3c:	b003      	add	sp, #12
 8007f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f42:	4668      	mov	r0, sp
 8007f44:	f000 f9d2 	bl	80082ec <__ieee754_rem_pio2f>
 8007f48:	f000 0003 	and.w	r0, r0, #3
 8007f4c:	2801      	cmp	r0, #1
 8007f4e:	d009      	beq.n	8007f64 <cosf+0x50>
 8007f50:	2802      	cmp	r0, #2
 8007f52:	d010      	beq.n	8007f76 <cosf+0x62>
 8007f54:	b9b0      	cbnz	r0, 8007f84 <cosf+0x70>
 8007f56:	eddd 0a01 	vldr	s1, [sp, #4]
 8007f5a:	ed9d 0a00 	vldr	s0, [sp]
 8007f5e:	f000 fb05 	bl	800856c <__kernel_cosf>
 8007f62:	e7eb      	b.n	8007f3c <cosf+0x28>
 8007f64:	eddd 0a01 	vldr	s1, [sp, #4]
 8007f68:	ed9d 0a00 	vldr	s0, [sp]
 8007f6c:	f000 fdd4 	bl	8008b18 <__kernel_sinf>
 8007f70:	eeb1 0a40 	vneg.f32	s0, s0
 8007f74:	e7e2      	b.n	8007f3c <cosf+0x28>
 8007f76:	eddd 0a01 	vldr	s1, [sp, #4]
 8007f7a:	ed9d 0a00 	vldr	s0, [sp]
 8007f7e:	f000 faf5 	bl	800856c <__kernel_cosf>
 8007f82:	e7f5      	b.n	8007f70 <cosf+0x5c>
 8007f84:	eddd 0a01 	vldr	s1, [sp, #4]
 8007f88:	ed9d 0a00 	vldr	s0, [sp]
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	f000 fdc3 	bl	8008b18 <__kernel_sinf>
 8007f92:	e7d3      	b.n	8007f3c <cosf+0x28>
 8007f94:	3f490fd8 	.word	0x3f490fd8
 8007f98:	00000000 	.word	0x00000000

08007f9c <sinf>:
 8007f9c:	ee10 3a10 	vmov	r3, s0
 8007fa0:	b507      	push	{r0, r1, r2, lr}
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <sinf+0x84>)
 8007fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	dc07      	bgt.n	8007fbc <sinf+0x20>
 8007fac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008024 <sinf+0x88>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	b003      	add	sp, #12
 8007fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb8:	f000 bdae 	b.w	8008b18 <__kernel_sinf>
 8007fbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007fc0:	db04      	blt.n	8007fcc <sinf+0x30>
 8007fc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007fc6:	b003      	add	sp, #12
 8007fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fcc:	4668      	mov	r0, sp
 8007fce:	f000 f98d 	bl	80082ec <__ieee754_rem_pio2f>
 8007fd2:	f000 0003 	and.w	r0, r0, #3
 8007fd6:	2801      	cmp	r0, #1
 8007fd8:	d00a      	beq.n	8007ff0 <sinf+0x54>
 8007fda:	2802      	cmp	r0, #2
 8007fdc:	d00f      	beq.n	8007ffe <sinf+0x62>
 8007fde:	b9c0      	cbnz	r0, 8008012 <sinf+0x76>
 8007fe0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007fe4:	ed9d 0a00 	vldr	s0, [sp]
 8007fe8:	2001      	movs	r0, #1
 8007fea:	f000 fd95 	bl	8008b18 <__kernel_sinf>
 8007fee:	e7ea      	b.n	8007fc6 <sinf+0x2a>
 8007ff0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ff4:	ed9d 0a00 	vldr	s0, [sp]
 8007ff8:	f000 fab8 	bl	800856c <__kernel_cosf>
 8007ffc:	e7e3      	b.n	8007fc6 <sinf+0x2a>
 8007ffe:	eddd 0a01 	vldr	s1, [sp, #4]
 8008002:	ed9d 0a00 	vldr	s0, [sp]
 8008006:	2001      	movs	r0, #1
 8008008:	f000 fd86 	bl	8008b18 <__kernel_sinf>
 800800c:	eeb1 0a40 	vneg.f32	s0, s0
 8008010:	e7d9      	b.n	8007fc6 <sinf+0x2a>
 8008012:	eddd 0a01 	vldr	s1, [sp, #4]
 8008016:	ed9d 0a00 	vldr	s0, [sp]
 800801a:	f000 faa7 	bl	800856c <__kernel_cosf>
 800801e:	e7f5      	b.n	800800c <sinf+0x70>
 8008020:	3f490fd8 	.word	0x3f490fd8
 8008024:	00000000 	.word	0x00000000

08008028 <atan2f>:
 8008028:	f000 b83e 	b.w	80080a8 <__ieee754_atan2f>

0800802c <fmodf>:
 800802c:	b508      	push	{r3, lr}
 800802e:	ed2d 8b02 	vpush	{d8}
 8008032:	eef0 8a40 	vmov.f32	s17, s0
 8008036:	eeb0 8a60 	vmov.f32	s16, s1
 800803a:	f000 f8d5 	bl	80081e8 <__ieee754_fmodf>
 800803e:	eef4 8a48 	vcmp.f32	s17, s16
 8008042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008046:	d60c      	bvs.n	8008062 <fmodf+0x36>
 8008048:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008068 <fmodf+0x3c>
 800804c:	eeb4 8a68 	vcmp.f32	s16, s17
 8008050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008054:	d105      	bne.n	8008062 <fmodf+0x36>
 8008056:	f7ff ff1d 	bl	8007e94 <__errno>
 800805a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800805e:	2321      	movs	r3, #33	; 0x21
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	ecbd 8b02 	vpop	{d8}
 8008066:	bd08      	pop	{r3, pc}
 8008068:	00000000 	.word	0x00000000

0800806c <sqrtf>:
 800806c:	b508      	push	{r3, lr}
 800806e:	ed2d 8b02 	vpush	{d8}
 8008072:	eeb0 8a40 	vmov.f32	s16, s0
 8008076:	f000 fa75 	bl	8008564 <__ieee754_sqrtf>
 800807a:	eeb4 8a48 	vcmp.f32	s16, s16
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	d60c      	bvs.n	800809e <sqrtf+0x32>
 8008084:	eddf 8a07 	vldr	s17, [pc, #28]	; 80080a4 <sqrtf+0x38>
 8008088:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800808c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008090:	d505      	bpl.n	800809e <sqrtf+0x32>
 8008092:	f7ff feff 	bl	8007e94 <__errno>
 8008096:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800809a:	2321      	movs	r3, #33	; 0x21
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	ecbd 8b02 	vpop	{d8}
 80080a2:	bd08      	pop	{r3, pc}
 80080a4:	00000000 	.word	0x00000000

080080a8 <__ieee754_atan2f>:
 80080a8:	ee10 2a90 	vmov	r2, s1
 80080ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80080b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80080b4:	b510      	push	{r4, lr}
 80080b6:	eef0 7a40 	vmov.f32	s15, s0
 80080ba:	dc06      	bgt.n	80080ca <__ieee754_atan2f+0x22>
 80080bc:	ee10 0a10 	vmov	r0, s0
 80080c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80080c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80080c8:	dd04      	ble.n	80080d4 <__ieee754_atan2f+0x2c>
 80080ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80080ce:	eeb0 0a67 	vmov.f32	s0, s15
 80080d2:	bd10      	pop	{r4, pc}
 80080d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80080d8:	d103      	bne.n	80080e2 <__ieee754_atan2f+0x3a>
 80080da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080de:	f000 bd63 	b.w	8008ba8 <atanf>
 80080e2:	1794      	asrs	r4, r2, #30
 80080e4:	f004 0402 	and.w	r4, r4, #2
 80080e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80080ec:	b943      	cbnz	r3, 8008100 <__ieee754_atan2f+0x58>
 80080ee:	2c02      	cmp	r4, #2
 80080f0:	d05e      	beq.n	80081b0 <__ieee754_atan2f+0x108>
 80080f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80081c4 <__ieee754_atan2f+0x11c>
 80080f6:	2c03      	cmp	r4, #3
 80080f8:	bf08      	it	eq
 80080fa:	eef0 7a47 	vmoveq.f32	s15, s14
 80080fe:	e7e6      	b.n	80080ce <__ieee754_atan2f+0x26>
 8008100:	b941      	cbnz	r1, 8008114 <__ieee754_atan2f+0x6c>
 8008102:	eddf 7a31 	vldr	s15, [pc, #196]	; 80081c8 <__ieee754_atan2f+0x120>
 8008106:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80081cc <__ieee754_atan2f+0x124>
 800810a:	2800      	cmp	r0, #0
 800810c:	bfb8      	it	lt
 800810e:	eef0 7a40 	vmovlt.f32	s15, s0
 8008112:	e7dc      	b.n	80080ce <__ieee754_atan2f+0x26>
 8008114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008118:	d110      	bne.n	800813c <__ieee754_atan2f+0x94>
 800811a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800811e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008122:	d107      	bne.n	8008134 <__ieee754_atan2f+0x8c>
 8008124:	2c02      	cmp	r4, #2
 8008126:	d846      	bhi.n	80081b6 <__ieee754_atan2f+0x10e>
 8008128:	4b29      	ldr	r3, [pc, #164]	; (80081d0 <__ieee754_atan2f+0x128>)
 800812a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800812e:	edd4 7a00 	vldr	s15, [r4]
 8008132:	e7cc      	b.n	80080ce <__ieee754_atan2f+0x26>
 8008134:	2c02      	cmp	r4, #2
 8008136:	d841      	bhi.n	80081bc <__ieee754_atan2f+0x114>
 8008138:	4b26      	ldr	r3, [pc, #152]	; (80081d4 <__ieee754_atan2f+0x12c>)
 800813a:	e7f6      	b.n	800812a <__ieee754_atan2f+0x82>
 800813c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008140:	d0df      	beq.n	8008102 <__ieee754_atan2f+0x5a>
 8008142:	1a5b      	subs	r3, r3, r1
 8008144:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008148:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800814c:	da1a      	bge.n	8008184 <__ieee754_atan2f+0xdc>
 800814e:	2a00      	cmp	r2, #0
 8008150:	da01      	bge.n	8008156 <__ieee754_atan2f+0xae>
 8008152:	313c      	adds	r1, #60	; 0x3c
 8008154:	db19      	blt.n	800818a <__ieee754_atan2f+0xe2>
 8008156:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800815a:	f000 fdf9 	bl	8008d50 <fabsf>
 800815e:	f000 fd23 	bl	8008ba8 <atanf>
 8008162:	eef0 7a40 	vmov.f32	s15, s0
 8008166:	2c01      	cmp	r4, #1
 8008168:	d012      	beq.n	8008190 <__ieee754_atan2f+0xe8>
 800816a:	2c02      	cmp	r4, #2
 800816c:	d017      	beq.n	800819e <__ieee754_atan2f+0xf6>
 800816e:	2c00      	cmp	r4, #0
 8008170:	d0ad      	beq.n	80080ce <__ieee754_atan2f+0x26>
 8008172:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80081d8 <__ieee754_atan2f+0x130>
 8008176:	ee77 7a80 	vadd.f32	s15, s15, s0
 800817a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80081dc <__ieee754_atan2f+0x134>
 800817e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008182:	e7a4      	b.n	80080ce <__ieee754_atan2f+0x26>
 8008184:	eddf 7a10 	vldr	s15, [pc, #64]	; 80081c8 <__ieee754_atan2f+0x120>
 8008188:	e7ed      	b.n	8008166 <__ieee754_atan2f+0xbe>
 800818a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80081e0 <__ieee754_atan2f+0x138>
 800818e:	e7ea      	b.n	8008166 <__ieee754_atan2f+0xbe>
 8008190:	ee17 3a90 	vmov	r3, s15
 8008194:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	e797      	b.n	80080ce <__ieee754_atan2f+0x26>
 800819e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80081d8 <__ieee754_atan2f+0x130>
 80081a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80081a6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80081dc <__ieee754_atan2f+0x134>
 80081aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80081ae:	e78e      	b.n	80080ce <__ieee754_atan2f+0x26>
 80081b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80081dc <__ieee754_atan2f+0x134>
 80081b4:	e78b      	b.n	80080ce <__ieee754_atan2f+0x26>
 80081b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80081e4 <__ieee754_atan2f+0x13c>
 80081ba:	e788      	b.n	80080ce <__ieee754_atan2f+0x26>
 80081bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80081e0 <__ieee754_atan2f+0x138>
 80081c0:	e785      	b.n	80080ce <__ieee754_atan2f+0x26>
 80081c2:	bf00      	nop
 80081c4:	c0490fdb 	.word	0xc0490fdb
 80081c8:	3fc90fdb 	.word	0x3fc90fdb
 80081cc:	bfc90fdb 	.word	0xbfc90fdb
 80081d0:	08008ef0 	.word	0x08008ef0
 80081d4:	08008efc 	.word	0x08008efc
 80081d8:	33bbbd2e 	.word	0x33bbbd2e
 80081dc:	40490fdb 	.word	0x40490fdb
 80081e0:	00000000 	.word	0x00000000
 80081e4:	3f490fdb 	.word	0x3f490fdb

080081e8 <__ieee754_fmodf>:
 80081e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ea:	ee10 5a90 	vmov	r5, s1
 80081ee:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80081f2:	d009      	beq.n	8008208 <__ieee754_fmodf+0x20>
 80081f4:	ee10 2a10 	vmov	r2, s0
 80081f8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80081fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008200:	da02      	bge.n	8008208 <__ieee754_fmodf+0x20>
 8008202:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008206:	dd04      	ble.n	8008212 <__ieee754_fmodf+0x2a>
 8008208:	ee60 0a20 	vmul.f32	s1, s0, s1
 800820c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8008210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008212:	42a3      	cmp	r3, r4
 8008214:	dbfc      	blt.n	8008210 <__ieee754_fmodf+0x28>
 8008216:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800821a:	d105      	bne.n	8008228 <__ieee754_fmodf+0x40>
 800821c:	4b32      	ldr	r3, [pc, #200]	; (80082e8 <__ieee754_fmodf+0x100>)
 800821e:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8008222:	ed93 0a00 	vldr	s0, [r3]
 8008226:	e7f3      	b.n	8008210 <__ieee754_fmodf+0x28>
 8008228:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800822c:	d13f      	bne.n	80082ae <__ieee754_fmodf+0xc6>
 800822e:	0219      	lsls	r1, r3, #8
 8008230:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008234:	2900      	cmp	r1, #0
 8008236:	dc37      	bgt.n	80082a8 <__ieee754_fmodf+0xc0>
 8008238:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800823c:	d13d      	bne.n	80082ba <__ieee754_fmodf+0xd2>
 800823e:	0227      	lsls	r7, r4, #8
 8008240:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008244:	2f00      	cmp	r7, #0
 8008246:	da35      	bge.n	80082b4 <__ieee754_fmodf+0xcc>
 8008248:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800824c:	bfbb      	ittet	lt
 800824e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008252:	1a12      	sublt	r2, r2, r0
 8008254:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008258:	4093      	lsllt	r3, r2
 800825a:	bfa8      	it	ge
 800825c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008260:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008264:	bfb5      	itete	lt
 8008266:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800826a:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800826e:	1a52      	sublt	r2, r2, r1
 8008270:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8008274:	bfb8      	it	lt
 8008276:	4094      	lsllt	r4, r2
 8008278:	1a40      	subs	r0, r0, r1
 800827a:	1b1a      	subs	r2, r3, r4
 800827c:	bb00      	cbnz	r0, 80082c0 <__ieee754_fmodf+0xd8>
 800827e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8008282:	bf38      	it	cc
 8008284:	4613      	movcc	r3, r2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0c8      	beq.n	800821c <__ieee754_fmodf+0x34>
 800828a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800828e:	db1f      	blt.n	80082d0 <__ieee754_fmodf+0xe8>
 8008290:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008294:	db1f      	blt.n	80082d6 <__ieee754_fmodf+0xee>
 8008296:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800829a:	317f      	adds	r1, #127	; 0x7f
 800829c:	4333      	orrs	r3, r6
 800829e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80082a2:	ee00 3a10 	vmov	s0, r3
 80082a6:	e7b3      	b.n	8008210 <__ieee754_fmodf+0x28>
 80082a8:	3801      	subs	r0, #1
 80082aa:	0049      	lsls	r1, r1, #1
 80082ac:	e7c2      	b.n	8008234 <__ieee754_fmodf+0x4c>
 80082ae:	15d8      	asrs	r0, r3, #23
 80082b0:	387f      	subs	r0, #127	; 0x7f
 80082b2:	e7c1      	b.n	8008238 <__ieee754_fmodf+0x50>
 80082b4:	3901      	subs	r1, #1
 80082b6:	007f      	lsls	r7, r7, #1
 80082b8:	e7c4      	b.n	8008244 <__ieee754_fmodf+0x5c>
 80082ba:	15e1      	asrs	r1, r4, #23
 80082bc:	397f      	subs	r1, #127	; 0x7f
 80082be:	e7c3      	b.n	8008248 <__ieee754_fmodf+0x60>
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	da02      	bge.n	80082ca <__ieee754_fmodf+0xe2>
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	3801      	subs	r0, #1
 80082c8:	e7d7      	b.n	800827a <__ieee754_fmodf+0x92>
 80082ca:	d0a7      	beq.n	800821c <__ieee754_fmodf+0x34>
 80082cc:	0053      	lsls	r3, r2, #1
 80082ce:	e7fa      	b.n	80082c6 <__ieee754_fmodf+0xde>
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	3901      	subs	r1, #1
 80082d4:	e7d9      	b.n	800828a <__ieee754_fmodf+0xa2>
 80082d6:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80082da:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80082de:	3182      	adds	r1, #130	; 0x82
 80082e0:	410b      	asrs	r3, r1
 80082e2:	4333      	orrs	r3, r6
 80082e4:	e7dd      	b.n	80082a2 <__ieee754_fmodf+0xba>
 80082e6:	bf00      	nop
 80082e8:	08008f08 	.word	0x08008f08

080082ec <__ieee754_rem_pio2f>:
 80082ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ee:	ee10 6a10 	vmov	r6, s0
 80082f2:	4b8e      	ldr	r3, [pc, #568]	; (800852c <__ieee754_rem_pio2f+0x240>)
 80082f4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80082f8:	429d      	cmp	r5, r3
 80082fa:	b087      	sub	sp, #28
 80082fc:	eef0 7a40 	vmov.f32	s15, s0
 8008300:	4604      	mov	r4, r0
 8008302:	dc05      	bgt.n	8008310 <__ieee754_rem_pio2f+0x24>
 8008304:	2300      	movs	r3, #0
 8008306:	ed80 0a00 	vstr	s0, [r0]
 800830a:	6043      	str	r3, [r0, #4]
 800830c:	2000      	movs	r0, #0
 800830e:	e01a      	b.n	8008346 <__ieee754_rem_pio2f+0x5a>
 8008310:	4b87      	ldr	r3, [pc, #540]	; (8008530 <__ieee754_rem_pio2f+0x244>)
 8008312:	429d      	cmp	r5, r3
 8008314:	dc46      	bgt.n	80083a4 <__ieee754_rem_pio2f+0xb8>
 8008316:	2e00      	cmp	r6, #0
 8008318:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008534 <__ieee754_rem_pio2f+0x248>
 800831c:	4b86      	ldr	r3, [pc, #536]	; (8008538 <__ieee754_rem_pio2f+0x24c>)
 800831e:	f025 050f 	bic.w	r5, r5, #15
 8008322:	dd1f      	ble.n	8008364 <__ieee754_rem_pio2f+0x78>
 8008324:	429d      	cmp	r5, r3
 8008326:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800832a:	d00e      	beq.n	800834a <__ieee754_rem_pio2f+0x5e>
 800832c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800853c <__ieee754_rem_pio2f+0x250>
 8008330:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008334:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008338:	ed80 0a00 	vstr	s0, [r0]
 800833c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008340:	2001      	movs	r0, #1
 8008342:	edc4 7a01 	vstr	s15, [r4, #4]
 8008346:	b007      	add	sp, #28
 8008348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008540 <__ieee754_rem_pio2f+0x254>
 800834e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008544 <__ieee754_rem_pio2f+0x258>
 8008352:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008356:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800835a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800835e:	edc0 6a00 	vstr	s13, [r0]
 8008362:	e7eb      	b.n	800833c <__ieee754_rem_pio2f+0x50>
 8008364:	429d      	cmp	r5, r3
 8008366:	ee77 7a80 	vadd.f32	s15, s15, s0
 800836a:	d00e      	beq.n	800838a <__ieee754_rem_pio2f+0x9e>
 800836c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800853c <__ieee754_rem_pio2f+0x250>
 8008370:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008374:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008378:	ed80 0a00 	vstr	s0, [r0]
 800837c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	edc4 7a01 	vstr	s15, [r4, #4]
 8008388:	e7dd      	b.n	8008346 <__ieee754_rem_pio2f+0x5a>
 800838a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008540 <__ieee754_rem_pio2f+0x254>
 800838e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008544 <__ieee754_rem_pio2f+0x258>
 8008392:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008396:	ee77 6a87 	vadd.f32	s13, s15, s14
 800839a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800839e:	edc0 6a00 	vstr	s13, [r0]
 80083a2:	e7eb      	b.n	800837c <__ieee754_rem_pio2f+0x90>
 80083a4:	4b68      	ldr	r3, [pc, #416]	; (8008548 <__ieee754_rem_pio2f+0x25c>)
 80083a6:	429d      	cmp	r5, r3
 80083a8:	dc72      	bgt.n	8008490 <__ieee754_rem_pio2f+0x1a4>
 80083aa:	f000 fcd1 	bl	8008d50 <fabsf>
 80083ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800854c <__ieee754_rem_pio2f+0x260>
 80083b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80083b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80083ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083c2:	ee17 0a90 	vmov	r0, s15
 80083c6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008534 <__ieee754_rem_pio2f+0x248>
 80083ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 80083ce:	281f      	cmp	r0, #31
 80083d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800853c <__ieee754_rem_pio2f+0x250>
 80083d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d8:	eeb1 6a47 	vneg.f32	s12, s14
 80083dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80083e0:	ee16 2a90 	vmov	r2, s13
 80083e4:	dc1c      	bgt.n	8008420 <__ieee754_rem_pio2f+0x134>
 80083e6:	495a      	ldr	r1, [pc, #360]	; (8008550 <__ieee754_rem_pio2f+0x264>)
 80083e8:	1e47      	subs	r7, r0, #1
 80083ea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80083ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80083f2:	428b      	cmp	r3, r1
 80083f4:	d014      	beq.n	8008420 <__ieee754_rem_pio2f+0x134>
 80083f6:	6022      	str	r2, [r4, #0]
 80083f8:	ed94 7a00 	vldr	s14, [r4]
 80083fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008400:	2e00      	cmp	r6, #0
 8008402:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008406:	ed84 0a01 	vstr	s0, [r4, #4]
 800840a:	da9c      	bge.n	8008346 <__ieee754_rem_pio2f+0x5a>
 800840c:	eeb1 7a47 	vneg.f32	s14, s14
 8008410:	eeb1 0a40 	vneg.f32	s0, s0
 8008414:	ed84 7a00 	vstr	s14, [r4]
 8008418:	ed84 0a01 	vstr	s0, [r4, #4]
 800841c:	4240      	negs	r0, r0
 800841e:	e792      	b.n	8008346 <__ieee754_rem_pio2f+0x5a>
 8008420:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008424:	15eb      	asrs	r3, r5, #23
 8008426:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800842a:	2d08      	cmp	r5, #8
 800842c:	dde3      	ble.n	80083f6 <__ieee754_rem_pio2f+0x10a>
 800842e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008540 <__ieee754_rem_pio2f+0x254>
 8008432:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008544 <__ieee754_rem_pio2f+0x258>
 8008436:	eef0 6a40 	vmov.f32	s13, s0
 800843a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800843e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008442:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008446:	eef0 7a40 	vmov.f32	s15, s0
 800844a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800844e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008452:	ee15 2a90 	vmov	r2, s11
 8008456:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800845a:	1a5b      	subs	r3, r3, r1
 800845c:	2b19      	cmp	r3, #25
 800845e:	dc04      	bgt.n	800846a <__ieee754_rem_pio2f+0x17e>
 8008460:	edc4 5a00 	vstr	s11, [r4]
 8008464:	eeb0 0a66 	vmov.f32	s0, s13
 8008468:	e7c6      	b.n	80083f8 <__ieee754_rem_pio2f+0x10c>
 800846a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008554 <__ieee754_rem_pio2f+0x268>
 800846e:	eeb0 0a66 	vmov.f32	s0, s13
 8008472:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008476:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800847a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008558 <__ieee754_rem_pio2f+0x26c>
 800847e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008482:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008486:	ee30 7a67 	vsub.f32	s14, s0, s15
 800848a:	ed84 7a00 	vstr	s14, [r4]
 800848e:	e7b3      	b.n	80083f8 <__ieee754_rem_pio2f+0x10c>
 8008490:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008494:	db06      	blt.n	80084a4 <__ieee754_rem_pio2f+0x1b8>
 8008496:	ee70 7a40 	vsub.f32	s15, s0, s0
 800849a:	edc0 7a01 	vstr	s15, [r0, #4]
 800849e:	edc0 7a00 	vstr	s15, [r0]
 80084a2:	e733      	b.n	800830c <__ieee754_rem_pio2f+0x20>
 80084a4:	15ea      	asrs	r2, r5, #23
 80084a6:	3a86      	subs	r2, #134	; 0x86
 80084a8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80084ac:	ee07 3a90 	vmov	s15, r3
 80084b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800855c <__ieee754_rem_pio2f+0x270>
 80084b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084c0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80084c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084d4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80084d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e4:	edcd 7a05 	vstr	s15, [sp, #20]
 80084e8:	d11e      	bne.n	8008528 <__ieee754_rem_pio2f+0x23c>
 80084ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80084ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f2:	bf14      	ite	ne
 80084f4:	2302      	movne	r3, #2
 80084f6:	2301      	moveq	r3, #1
 80084f8:	4919      	ldr	r1, [pc, #100]	; (8008560 <__ieee754_rem_pio2f+0x274>)
 80084fa:	9101      	str	r1, [sp, #4]
 80084fc:	2102      	movs	r1, #2
 80084fe:	9100      	str	r1, [sp, #0]
 8008500:	a803      	add	r0, sp, #12
 8008502:	4621      	mov	r1, r4
 8008504:	f000 f892 	bl	800862c <__kernel_rem_pio2f>
 8008508:	2e00      	cmp	r6, #0
 800850a:	f6bf af1c 	bge.w	8008346 <__ieee754_rem_pio2f+0x5a>
 800850e:	edd4 7a00 	vldr	s15, [r4]
 8008512:	eef1 7a67 	vneg.f32	s15, s15
 8008516:	edc4 7a00 	vstr	s15, [r4]
 800851a:	edd4 7a01 	vldr	s15, [r4, #4]
 800851e:	eef1 7a67 	vneg.f32	s15, s15
 8008522:	edc4 7a01 	vstr	s15, [r4, #4]
 8008526:	e779      	b.n	800841c <__ieee754_rem_pio2f+0x130>
 8008528:	2303      	movs	r3, #3
 800852a:	e7e5      	b.n	80084f8 <__ieee754_rem_pio2f+0x20c>
 800852c:	3f490fd8 	.word	0x3f490fd8
 8008530:	4016cbe3 	.word	0x4016cbe3
 8008534:	3fc90f80 	.word	0x3fc90f80
 8008538:	3fc90fd0 	.word	0x3fc90fd0
 800853c:	37354443 	.word	0x37354443
 8008540:	37354400 	.word	0x37354400
 8008544:	2e85a308 	.word	0x2e85a308
 8008548:	43490f80 	.word	0x43490f80
 800854c:	3f22f984 	.word	0x3f22f984
 8008550:	08008f10 	.word	0x08008f10
 8008554:	2e85a300 	.word	0x2e85a300
 8008558:	248d3132 	.word	0x248d3132
 800855c:	43800000 	.word	0x43800000
 8008560:	08008f90 	.word	0x08008f90

08008564 <__ieee754_sqrtf>:
 8008564:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008568:	4770      	bx	lr
	...

0800856c <__kernel_cosf>:
 800856c:	ee10 3a10 	vmov	r3, s0
 8008570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008574:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008578:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800857c:	da05      	bge.n	800858a <__kernel_cosf+0x1e>
 800857e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008582:	ee17 2a90 	vmov	r2, s15
 8008586:	2a00      	cmp	r2, #0
 8008588:	d03d      	beq.n	8008606 <__kernel_cosf+0x9a>
 800858a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800858e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800860c <__kernel_cosf+0xa0>
 8008592:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008610 <__kernel_cosf+0xa4>
 8008596:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008614 <__kernel_cosf+0xa8>
 800859a:	4a1f      	ldr	r2, [pc, #124]	; (8008618 <__kernel_cosf+0xac>)
 800859c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80085a0:	4293      	cmp	r3, r2
 80085a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800861c <__kernel_cosf+0xb0>
 80085a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80085aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008620 <__kernel_cosf+0xb4>
 80085ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80085b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008624 <__kernel_cosf+0xb8>
 80085b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80085ba:	eeb0 7a66 	vmov.f32	s14, s13
 80085be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80085c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80085c6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80085ca:	ee67 6a25 	vmul.f32	s13, s14, s11
 80085ce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80085d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80085d6:	dc04      	bgt.n	80085e2 <__kernel_cosf+0x76>
 80085d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80085dc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80085e0:	4770      	bx	lr
 80085e2:	4a11      	ldr	r2, [pc, #68]	; (8008628 <__kernel_cosf+0xbc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	bfda      	itte	le
 80085e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80085ec:	ee06 3a90 	vmovle	s13, r3
 80085f0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80085f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085f8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80085fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008600:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008604:	4770      	bx	lr
 8008606:	eeb0 0a46 	vmov.f32	s0, s12
 800860a:	4770      	bx	lr
 800860c:	ad47d74e 	.word	0xad47d74e
 8008610:	310f74f6 	.word	0x310f74f6
 8008614:	3d2aaaab 	.word	0x3d2aaaab
 8008618:	3e999999 	.word	0x3e999999
 800861c:	b493f27c 	.word	0xb493f27c
 8008620:	37d00d01 	.word	0x37d00d01
 8008624:	bab60b61 	.word	0xbab60b61
 8008628:	3f480000 	.word	0x3f480000

0800862c <__kernel_rem_pio2f>:
 800862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	ed2d 8b04 	vpush	{d8-d9}
 8008634:	b0d9      	sub	sp, #356	; 0x164
 8008636:	4688      	mov	r8, r1
 8008638:	9002      	str	r0, [sp, #8]
 800863a:	49bb      	ldr	r1, [pc, #748]	; (8008928 <__kernel_rem_pio2f+0x2fc>)
 800863c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008644:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008648:	1e59      	subs	r1, r3, #1
 800864a:	1d13      	adds	r3, r2, #4
 800864c:	db27      	blt.n	800869e <__kernel_rem_pio2f+0x72>
 800864e:	f1b2 0b03 	subs.w	fp, r2, #3
 8008652:	bf48      	it	mi
 8008654:	f102 0b04 	addmi.w	fp, r2, #4
 8008658:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800865c:	1c45      	adds	r5, r0, #1
 800865e:	00ec      	lsls	r4, r5, #3
 8008660:	1a47      	subs	r7, r0, r1
 8008662:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008938 <__kernel_rem_pio2f+0x30c>
 8008666:	9403      	str	r4, [sp, #12]
 8008668:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800866c:	eb0a 0c01 	add.w	ip, sl, r1
 8008670:	ae1c      	add	r6, sp, #112	; 0x70
 8008672:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008676:	2400      	movs	r4, #0
 8008678:	4564      	cmp	r4, ip
 800867a:	dd12      	ble.n	80086a2 <__kernel_rem_pio2f+0x76>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	ac1c      	add	r4, sp, #112	; 0x70
 8008680:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008684:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008688:	f04f 0c00 	mov.w	ip, #0
 800868c:	45d4      	cmp	ip, sl
 800868e:	dc27      	bgt.n	80086e0 <__kernel_rem_pio2f+0xb4>
 8008690:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008694:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008938 <__kernel_rem_pio2f+0x30c>
 8008698:	4627      	mov	r7, r4
 800869a:	2600      	movs	r6, #0
 800869c:	e016      	b.n	80086cc <__kernel_rem_pio2f+0xa0>
 800869e:	2000      	movs	r0, #0
 80086a0:	e7dc      	b.n	800865c <__kernel_rem_pio2f+0x30>
 80086a2:	42e7      	cmn	r7, r4
 80086a4:	bf5d      	ittte	pl
 80086a6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80086aa:	ee07 3a90 	vmovpl	s15, r3
 80086ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80086b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80086b6:	ece6 7a01 	vstmia	r6!, {s15}
 80086ba:	3401      	adds	r4, #1
 80086bc:	e7dc      	b.n	8008678 <__kernel_rem_pio2f+0x4c>
 80086be:	ecf9 6a01 	vldmia	r9!, {s13}
 80086c2:	ed97 7a00 	vldr	s14, [r7]
 80086c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80086ca:	3601      	adds	r6, #1
 80086cc:	428e      	cmp	r6, r1
 80086ce:	f1a7 0704 	sub.w	r7, r7, #4
 80086d2:	ddf4      	ble.n	80086be <__kernel_rem_pio2f+0x92>
 80086d4:	eceb 7a01 	vstmia	fp!, {s15}
 80086d8:	f10c 0c01 	add.w	ip, ip, #1
 80086dc:	3404      	adds	r4, #4
 80086de:	e7d5      	b.n	800868c <__kernel_rem_pio2f+0x60>
 80086e0:	ab08      	add	r3, sp, #32
 80086e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80086e6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008934 <__kernel_rem_pio2f+0x308>
 80086ea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008930 <__kernel_rem_pio2f+0x304>
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80086f4:	4656      	mov	r6, sl
 80086f6:	00b3      	lsls	r3, r6, #2
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	ab58      	add	r3, sp, #352	; 0x160
 80086fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008700:	ac08      	add	r4, sp, #32
 8008702:	ab44      	add	r3, sp, #272	; 0x110
 8008704:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008708:	46a4      	mov	ip, r4
 800870a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800870e:	4637      	mov	r7, r6
 8008710:	2f00      	cmp	r7, #0
 8008712:	f1a0 0004 	sub.w	r0, r0, #4
 8008716:	dc4f      	bgt.n	80087b8 <__kernel_rem_pio2f+0x18c>
 8008718:	4628      	mov	r0, r5
 800871a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800871e:	f000 fb61 	bl	8008de4 <scalbnf>
 8008722:	eeb0 8a40 	vmov.f32	s16, s0
 8008726:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800872a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800872e:	f000 fb17 	bl	8008d60 <floorf>
 8008732:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008736:	eea0 8a67 	vfms.f32	s16, s0, s15
 800873a:	2d00      	cmp	r5, #0
 800873c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008740:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008744:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008748:	ee17 9a90 	vmov	r9, s15
 800874c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008750:	dd44      	ble.n	80087dc <__kernel_rem_pio2f+0x1b0>
 8008752:	f106 3cff 	add.w	ip, r6, #4294967295
 8008756:	ab08      	add	r3, sp, #32
 8008758:	f1c5 0e08 	rsb	lr, r5, #8
 800875c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008760:	fa47 f00e 	asr.w	r0, r7, lr
 8008764:	4481      	add	r9, r0
 8008766:	fa00 f00e 	lsl.w	r0, r0, lr
 800876a:	1a3f      	subs	r7, r7, r0
 800876c:	f1c5 0007 	rsb	r0, r5, #7
 8008770:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008774:	4107      	asrs	r7, r0
 8008776:	2f00      	cmp	r7, #0
 8008778:	dd3f      	ble.n	80087fa <__kernel_rem_pio2f+0x1ce>
 800877a:	f04f 0e00 	mov.w	lr, #0
 800877e:	f109 0901 	add.w	r9, r9, #1
 8008782:	4673      	mov	r3, lr
 8008784:	4576      	cmp	r6, lr
 8008786:	dc6b      	bgt.n	8008860 <__kernel_rem_pio2f+0x234>
 8008788:	2d00      	cmp	r5, #0
 800878a:	dd04      	ble.n	8008796 <__kernel_rem_pio2f+0x16a>
 800878c:	2d01      	cmp	r5, #1
 800878e:	d078      	beq.n	8008882 <__kernel_rem_pio2f+0x256>
 8008790:	2d02      	cmp	r5, #2
 8008792:	f000 8081 	beq.w	8008898 <__kernel_rem_pio2f+0x26c>
 8008796:	2f02      	cmp	r7, #2
 8008798:	d12f      	bne.n	80087fa <__kernel_rem_pio2f+0x1ce>
 800879a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800879e:	ee30 8a48 	vsub.f32	s16, s0, s16
 80087a2:	b353      	cbz	r3, 80087fa <__kernel_rem_pio2f+0x1ce>
 80087a4:	4628      	mov	r0, r5
 80087a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80087aa:	f000 fb1b 	bl	8008de4 <scalbnf>
 80087ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80087b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80087b6:	e020      	b.n	80087fa <__kernel_rem_pio2f+0x1ce>
 80087b8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80087bc:	3f01      	subs	r7, #1
 80087be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80087ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80087ce:	ecac 0a01 	vstmia	ip!, {s0}
 80087d2:	ed90 0a00 	vldr	s0, [r0]
 80087d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80087da:	e799      	b.n	8008710 <__kernel_rem_pio2f+0xe4>
 80087dc:	d105      	bne.n	80087ea <__kernel_rem_pio2f+0x1be>
 80087de:	1e70      	subs	r0, r6, #1
 80087e0:	ab08      	add	r3, sp, #32
 80087e2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80087e6:	11ff      	asrs	r7, r7, #7
 80087e8:	e7c5      	b.n	8008776 <__kernel_rem_pio2f+0x14a>
 80087ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80087ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80087f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f6:	da31      	bge.n	800885c <__kernel_rem_pio2f+0x230>
 80087f8:	2700      	movs	r7, #0
 80087fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	f040 809b 	bne.w	800893c <__kernel_rem_pio2f+0x310>
 8008806:	1e74      	subs	r4, r6, #1
 8008808:	46a4      	mov	ip, r4
 800880a:	2000      	movs	r0, #0
 800880c:	45d4      	cmp	ip, sl
 800880e:	da4a      	bge.n	80088a6 <__kernel_rem_pio2f+0x27a>
 8008810:	2800      	cmp	r0, #0
 8008812:	d07a      	beq.n	800890a <__kernel_rem_pio2f+0x2de>
 8008814:	ab08      	add	r3, sp, #32
 8008816:	3d08      	subs	r5, #8
 8008818:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8081 	beq.w	8008924 <__kernel_rem_pio2f+0x2f8>
 8008822:	4628      	mov	r0, r5
 8008824:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008828:	00a5      	lsls	r5, r4, #2
 800882a:	f000 fadb 	bl	8008de4 <scalbnf>
 800882e:	aa44      	add	r2, sp, #272	; 0x110
 8008830:	1d2b      	adds	r3, r5, #4
 8008832:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008934 <__kernel_rem_pio2f+0x308>
 8008836:	18d1      	adds	r1, r2, r3
 8008838:	4622      	mov	r2, r4
 800883a:	2a00      	cmp	r2, #0
 800883c:	f280 80ae 	bge.w	800899c <__kernel_rem_pio2f+0x370>
 8008840:	4622      	mov	r2, r4
 8008842:	2a00      	cmp	r2, #0
 8008844:	f2c0 80cc 	blt.w	80089e0 <__kernel_rem_pio2f+0x3b4>
 8008848:	a944      	add	r1, sp, #272	; 0x110
 800884a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800884e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800892c <__kernel_rem_pio2f+0x300>
 8008852:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008938 <__kernel_rem_pio2f+0x30c>
 8008856:	2000      	movs	r0, #0
 8008858:	1aa1      	subs	r1, r4, r2
 800885a:	e0b6      	b.n	80089ca <__kernel_rem_pio2f+0x39e>
 800885c:	2702      	movs	r7, #2
 800885e:	e78c      	b.n	800877a <__kernel_rem_pio2f+0x14e>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	b94b      	cbnz	r3, 8008878 <__kernel_rem_pio2f+0x24c>
 8008864:	b118      	cbz	r0, 800886e <__kernel_rem_pio2f+0x242>
 8008866:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800886a:	6020      	str	r0, [r4, #0]
 800886c:	2001      	movs	r0, #1
 800886e:	f10e 0e01 	add.w	lr, lr, #1
 8008872:	3404      	adds	r4, #4
 8008874:	4603      	mov	r3, r0
 8008876:	e785      	b.n	8008784 <__kernel_rem_pio2f+0x158>
 8008878:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800887c:	6020      	str	r0, [r4, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	e7f5      	b.n	800886e <__kernel_rem_pio2f+0x242>
 8008882:	1e74      	subs	r4, r6, #1
 8008884:	a808      	add	r0, sp, #32
 8008886:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800888a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800888e:	f10d 0c20 	add.w	ip, sp, #32
 8008892:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008896:	e77e      	b.n	8008796 <__kernel_rem_pio2f+0x16a>
 8008898:	1e74      	subs	r4, r6, #1
 800889a:	a808      	add	r0, sp, #32
 800889c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80088a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80088a4:	e7f3      	b.n	800888e <__kernel_rem_pio2f+0x262>
 80088a6:	ab08      	add	r3, sp, #32
 80088a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80088ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088b0:	4318      	orrs	r0, r3
 80088b2:	e7ab      	b.n	800880c <__kernel_rem_pio2f+0x1e0>
 80088b4:	f10c 0c01 	add.w	ip, ip, #1
 80088b8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80088bc:	2c00      	cmp	r4, #0
 80088be:	d0f9      	beq.n	80088b4 <__kernel_rem_pio2f+0x288>
 80088c0:	9b05      	ldr	r3, [sp, #20]
 80088c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80088c6:	eb0d 0003 	add.w	r0, sp, r3
 80088ca:	9b01      	ldr	r3, [sp, #4]
 80088cc:	18f4      	adds	r4, r6, r3
 80088ce:	ab1c      	add	r3, sp, #112	; 0x70
 80088d0:	1c77      	adds	r7, r6, #1
 80088d2:	384c      	subs	r0, #76	; 0x4c
 80088d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088d8:	4466      	add	r6, ip
 80088da:	42be      	cmp	r6, r7
 80088dc:	f6ff af0b 	blt.w	80086f6 <__kernel_rem_pio2f+0xca>
 80088e0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80088e4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088f0:	f04f 0c00 	mov.w	ip, #0
 80088f4:	ece4 7a01 	vstmia	r4!, {s15}
 80088f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008938 <__kernel_rem_pio2f+0x30c>
 80088fc:	46a1      	mov	r9, r4
 80088fe:	458c      	cmp	ip, r1
 8008900:	dd07      	ble.n	8008912 <__kernel_rem_pio2f+0x2e6>
 8008902:	ece0 7a01 	vstmia	r0!, {s15}
 8008906:	3701      	adds	r7, #1
 8008908:	e7e7      	b.n	80088da <__kernel_rem_pio2f+0x2ae>
 800890a:	9804      	ldr	r0, [sp, #16]
 800890c:	f04f 0c01 	mov.w	ip, #1
 8008910:	e7d2      	b.n	80088b8 <__kernel_rem_pio2f+0x28c>
 8008912:	ecfe 6a01 	vldmia	lr!, {s13}
 8008916:	ed39 7a01 	vldmdb	r9!, {s14}
 800891a:	f10c 0c01 	add.w	ip, ip, #1
 800891e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008922:	e7ec      	b.n	80088fe <__kernel_rem_pio2f+0x2d2>
 8008924:	3c01      	subs	r4, #1
 8008926:	e775      	b.n	8008814 <__kernel_rem_pio2f+0x1e8>
 8008928:	080092d4 	.word	0x080092d4
 800892c:	080092a8 	.word	0x080092a8
 8008930:	43800000 	.word	0x43800000
 8008934:	3b800000 	.word	0x3b800000
 8008938:	00000000 	.word	0x00000000
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	eeb0 0a48 	vmov.f32	s0, s16
 8008942:	1a98      	subs	r0, r3, r2
 8008944:	f000 fa4e 	bl	8008de4 <scalbnf>
 8008948:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008930 <__kernel_rem_pio2f+0x304>
 800894c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008954:	db19      	blt.n	800898a <__kernel_rem_pio2f+0x35e>
 8008956:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008934 <__kernel_rem_pio2f+0x308>
 800895a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800895e:	aa08      	add	r2, sp, #32
 8008960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008964:	1c74      	adds	r4, r6, #1
 8008966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800896a:	3508      	adds	r5, #8
 800896c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008974:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008978:	ee10 3a10 	vmov	r3, s0
 800897c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008980:	ee17 3a90 	vmov	r3, s15
 8008984:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008988:	e74b      	b.n	8008822 <__kernel_rem_pio2f+0x1f6>
 800898a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800898e:	aa08      	add	r2, sp, #32
 8008990:	ee10 3a10 	vmov	r3, s0
 8008994:	4634      	mov	r4, r6
 8008996:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800899a:	e742      	b.n	8008822 <__kernel_rem_pio2f+0x1f6>
 800899c:	a808      	add	r0, sp, #32
 800899e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80089a2:	9001      	str	r0, [sp, #4]
 80089a4:	ee07 0a90 	vmov	s15, r0
 80089a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089ac:	3a01      	subs	r2, #1
 80089ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80089b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80089b6:	ed61 7a01 	vstmdb	r1!, {s15}
 80089ba:	e73e      	b.n	800883a <__kernel_rem_pio2f+0x20e>
 80089bc:	ecfc 6a01 	vldmia	ip!, {s13}
 80089c0:	ecb6 7a01 	vldmia	r6!, {s14}
 80089c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80089c8:	3001      	adds	r0, #1
 80089ca:	4550      	cmp	r0, sl
 80089cc:	dc01      	bgt.n	80089d2 <__kernel_rem_pio2f+0x3a6>
 80089ce:	4288      	cmp	r0, r1
 80089d0:	ddf4      	ble.n	80089bc <__kernel_rem_pio2f+0x390>
 80089d2:	a858      	add	r0, sp, #352	; 0x160
 80089d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089d8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80089dc:	3a01      	subs	r2, #1
 80089de:	e730      	b.n	8008842 <__kernel_rem_pio2f+0x216>
 80089e0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80089e2:	2a02      	cmp	r2, #2
 80089e4:	dc09      	bgt.n	80089fa <__kernel_rem_pio2f+0x3ce>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	dc2a      	bgt.n	8008a40 <__kernel_rem_pio2f+0x414>
 80089ea:	d043      	beq.n	8008a74 <__kernel_rem_pio2f+0x448>
 80089ec:	f009 0007 	and.w	r0, r9, #7
 80089f0:	b059      	add	sp, #356	; 0x164
 80089f2:	ecbd 8b04 	vpop	{d8-d9}
 80089f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d1f5      	bne.n	80089ec <__kernel_rem_pio2f+0x3c0>
 8008a00:	ab30      	add	r3, sp, #192	; 0xc0
 8008a02:	442b      	add	r3, r5
 8008a04:	461a      	mov	r2, r3
 8008a06:	4619      	mov	r1, r3
 8008a08:	4620      	mov	r0, r4
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f1a1 0104 	sub.w	r1, r1, #4
 8008a10:	dc51      	bgt.n	8008ab6 <__kernel_rem_pio2f+0x48a>
 8008a12:	4621      	mov	r1, r4
 8008a14:	2901      	cmp	r1, #1
 8008a16:	f1a2 0204 	sub.w	r2, r2, #4
 8008a1a:	dc5c      	bgt.n	8008ad6 <__kernel_rem_pio2f+0x4aa>
 8008a1c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008938 <__kernel_rem_pio2f+0x30c>
 8008a20:	3304      	adds	r3, #4
 8008a22:	2c01      	cmp	r4, #1
 8008a24:	dc67      	bgt.n	8008af6 <__kernel_rem_pio2f+0x4ca>
 8008a26:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008a2a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008a2e:	2f00      	cmp	r7, #0
 8008a30:	d167      	bne.n	8008b02 <__kernel_rem_pio2f+0x4d6>
 8008a32:	edc8 6a00 	vstr	s13, [r8]
 8008a36:	ed88 7a01 	vstr	s14, [r8, #4]
 8008a3a:	edc8 7a02 	vstr	s15, [r8, #8]
 8008a3e:	e7d5      	b.n	80089ec <__kernel_rem_pio2f+0x3c0>
 8008a40:	aa30      	add	r2, sp, #192	; 0xc0
 8008a42:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008938 <__kernel_rem_pio2f+0x30c>
 8008a46:	4413      	add	r3, r2
 8008a48:	4622      	mov	r2, r4
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	da24      	bge.n	8008a98 <__kernel_rem_pio2f+0x46c>
 8008a4e:	b34f      	cbz	r7, 8008aa4 <__kernel_rem_pio2f+0x478>
 8008a50:	eef1 7a47 	vneg.f32	s15, s14
 8008a54:	edc8 7a00 	vstr	s15, [r8]
 8008a58:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a60:	aa31      	add	r2, sp, #196	; 0xc4
 8008a62:	2301      	movs	r3, #1
 8008a64:	429c      	cmp	r4, r3
 8008a66:	da20      	bge.n	8008aaa <__kernel_rem_pio2f+0x47e>
 8008a68:	b10f      	cbz	r7, 8008a6e <__kernel_rem_pio2f+0x442>
 8008a6a:	eef1 7a67 	vneg.f32	s15, s15
 8008a6e:	edc8 7a01 	vstr	s15, [r8, #4]
 8008a72:	e7bb      	b.n	80089ec <__kernel_rem_pio2f+0x3c0>
 8008a74:	aa30      	add	r2, sp, #192	; 0xc0
 8008a76:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008938 <__kernel_rem_pio2f+0x30c>
 8008a7a:	4413      	add	r3, r2
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	da05      	bge.n	8008a8c <__kernel_rem_pio2f+0x460>
 8008a80:	b10f      	cbz	r7, 8008a86 <__kernel_rem_pio2f+0x45a>
 8008a82:	eef1 7a67 	vneg.f32	s15, s15
 8008a86:	edc8 7a00 	vstr	s15, [r8]
 8008a8a:	e7af      	b.n	80089ec <__kernel_rem_pio2f+0x3c0>
 8008a8c:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a90:	3c01      	subs	r4, #1
 8008a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a96:	e7f1      	b.n	8008a7c <__kernel_rem_pio2f+0x450>
 8008a98:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a9c:	3a01      	subs	r2, #1
 8008a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008aa2:	e7d2      	b.n	8008a4a <__kernel_rem_pio2f+0x41e>
 8008aa4:	eef0 7a47 	vmov.f32	s15, s14
 8008aa8:	e7d4      	b.n	8008a54 <__kernel_rem_pio2f+0x428>
 8008aaa:	ecb2 7a01 	vldmia	r2!, {s14}
 8008aae:	3301      	adds	r3, #1
 8008ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ab4:	e7d6      	b.n	8008a64 <__kernel_rem_pio2f+0x438>
 8008ab6:	edd1 7a00 	vldr	s15, [r1]
 8008aba:	edd1 6a01 	vldr	s13, [r1, #4]
 8008abe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ac2:	3801      	subs	r0, #1
 8008ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ac8:	ed81 7a00 	vstr	s14, [r1]
 8008acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad0:	edc1 7a01 	vstr	s15, [r1, #4]
 8008ad4:	e799      	b.n	8008a0a <__kernel_rem_pio2f+0x3de>
 8008ad6:	edd2 7a00 	vldr	s15, [r2]
 8008ada:	edd2 6a01 	vldr	s13, [r2, #4]
 8008ade:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ae2:	3901      	subs	r1, #1
 8008ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ae8:	ed82 7a00 	vstr	s14, [r2]
 8008aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af0:	edc2 7a01 	vstr	s15, [r2, #4]
 8008af4:	e78e      	b.n	8008a14 <__kernel_rem_pio2f+0x3e8>
 8008af6:	ed33 7a01 	vldmdb	r3!, {s14}
 8008afa:	3c01      	subs	r4, #1
 8008afc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b00:	e78f      	b.n	8008a22 <__kernel_rem_pio2f+0x3f6>
 8008b02:	eef1 6a66 	vneg.f32	s13, s13
 8008b06:	eeb1 7a47 	vneg.f32	s14, s14
 8008b0a:	edc8 6a00 	vstr	s13, [r8]
 8008b0e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008b12:	eef1 7a67 	vneg.f32	s15, s15
 8008b16:	e790      	b.n	8008a3a <__kernel_rem_pio2f+0x40e>

08008b18 <__kernel_sinf>:
 8008b18:	ee10 3a10 	vmov	r3, s0
 8008b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008b24:	da04      	bge.n	8008b30 <__kernel_sinf+0x18>
 8008b26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008b2a:	ee17 3a90 	vmov	r3, s15
 8008b2e:	b35b      	cbz	r3, 8008b88 <__kernel_sinf+0x70>
 8008b30:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008b34:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b8c <__kernel_sinf+0x74>
 8008b38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008b90 <__kernel_sinf+0x78>
 8008b3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b40:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008b94 <__kernel_sinf+0x7c>
 8008b44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b48:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008b98 <__kernel_sinf+0x80>
 8008b4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008b50:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008b9c <__kernel_sinf+0x84>
 8008b54:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008b58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b5c:	b930      	cbnz	r0, 8008b6c <__kernel_sinf+0x54>
 8008b5e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008ba0 <__kernel_sinf+0x88>
 8008b62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b66:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008b6a:	4770      	bx	lr
 8008b6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008b70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008b74:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008b78:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008b7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008ba4 <__kernel_sinf+0x8c>
 8008b80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008b84:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008b90:	b2d72f34 	.word	0xb2d72f34
 8008b94:	3638ef1b 	.word	0x3638ef1b
 8008b98:	b9500d01 	.word	0xb9500d01
 8008b9c:	3c088889 	.word	0x3c088889
 8008ba0:	be2aaaab 	.word	0xbe2aaaab
 8008ba4:	3e2aaaab 	.word	0x3e2aaaab

08008ba8 <atanf>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	ee10 5a10 	vmov	r5, s0
 8008bae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008bb2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008bb6:	eef0 7a40 	vmov.f32	s15, s0
 8008bba:	db10      	blt.n	8008bde <atanf+0x36>
 8008bbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008bc0:	dd04      	ble.n	8008bcc <atanf+0x24>
 8008bc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008d04 <atanf+0x15c>
 8008bd0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008d08 <atanf+0x160>
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	bfd8      	it	le
 8008bd8:	eef0 7a40 	vmovle.f32	s15, s0
 8008bdc:	e7f3      	b.n	8008bc6 <atanf+0x1e>
 8008bde:	4b4b      	ldr	r3, [pc, #300]	; (8008d0c <atanf+0x164>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	dc10      	bgt.n	8008c06 <atanf+0x5e>
 8008be4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008be8:	da0a      	bge.n	8008c00 <atanf+0x58>
 8008bea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008d10 <atanf+0x168>
 8008bee:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfe:	dce2      	bgt.n	8008bc6 <atanf+0x1e>
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	e013      	b.n	8008c2e <atanf+0x86>
 8008c06:	f000 f8a3 	bl	8008d50 <fabsf>
 8008c0a:	4b42      	ldr	r3, [pc, #264]	; (8008d14 <atanf+0x16c>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	dc4f      	bgt.n	8008cb0 <atanf+0x108>
 8008c10:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008c14:	429c      	cmp	r4, r3
 8008c16:	dc41      	bgt.n	8008c9c <atanf+0xf4>
 8008c18:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008c1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008c20:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008c24:	2300      	movs	r3, #0
 8008c26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008c34:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008d18 <atanf+0x170>
 8008c38:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008d1c <atanf+0x174>
 8008c3c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008d20 <atanf+0x178>
 8008c40:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008c44:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008c48:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008d24 <atanf+0x17c>
 8008c4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008c50:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008d28 <atanf+0x180>
 8008c54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008c58:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008d2c <atanf+0x184>
 8008c5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008c60:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d30 <atanf+0x188>
 8008c64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008c68:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008d34 <atanf+0x18c>
 8008c6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008c70:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008d38 <atanf+0x190>
 8008c74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008c78:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008d3c <atanf+0x194>
 8008c7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008c80:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008d40 <atanf+0x198>
 8008c84:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008c88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008c8c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008c94:	d121      	bne.n	8008cda <atanf+0x132>
 8008c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c9a:	e794      	b.n	8008bc6 <atanf+0x1e>
 8008c9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008ca0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008ca4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ca8:	2301      	movs	r3, #1
 8008caa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008cae:	e7be      	b.n	8008c2e <atanf+0x86>
 8008cb0:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <atanf+0x19c>)
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	dc0b      	bgt.n	8008cce <atanf+0x126>
 8008cb6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cbe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ccc:	e7af      	b.n	8008c2e <atanf+0x86>
 8008cce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008cd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e7a9      	b.n	8008c2e <atanf+0x86>
 8008cda:	4a1b      	ldr	r2, [pc, #108]	; (8008d48 <atanf+0x1a0>)
 8008cdc:	491b      	ldr	r1, [pc, #108]	; (8008d4c <atanf+0x1a4>)
 8008cde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008ce2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008ce6:	ed93 0a00 	vldr	s0, [r3]
 8008cea:	ee37 7a40 	vsub.f32	s14, s14, s0
 8008cee:	ed92 0a00 	vldr	s0, [r2]
 8008cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008cfc:	bfb8      	it	lt
 8008cfe:	eef1 7a67 	vneglt.f32	s15, s15
 8008d02:	e760      	b.n	8008bc6 <atanf+0x1e>
 8008d04:	3fc90fdb 	.word	0x3fc90fdb
 8008d08:	bfc90fdb 	.word	0xbfc90fdb
 8008d0c:	3edfffff 	.word	0x3edfffff
 8008d10:	7149f2ca 	.word	0x7149f2ca
 8008d14:	3f97ffff 	.word	0x3f97ffff
 8008d18:	3c8569d7 	.word	0x3c8569d7
 8008d1c:	3d4bda59 	.word	0x3d4bda59
 8008d20:	bd6ef16b 	.word	0xbd6ef16b
 8008d24:	3d886b35 	.word	0x3d886b35
 8008d28:	3dba2e6e 	.word	0x3dba2e6e
 8008d2c:	3e124925 	.word	0x3e124925
 8008d30:	3eaaaaab 	.word	0x3eaaaaab
 8008d34:	bd15a221 	.word	0xbd15a221
 8008d38:	bd9d8795 	.word	0xbd9d8795
 8008d3c:	bde38e38 	.word	0xbde38e38
 8008d40:	be4ccccd 	.word	0xbe4ccccd
 8008d44:	401bffff 	.word	0x401bffff
 8008d48:	080092e0 	.word	0x080092e0
 8008d4c:	080092f0 	.word	0x080092f0

08008d50 <fabsf>:
 8008d50:	ee10 3a10 	vmov	r3, s0
 8008d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d58:	ee00 3a10 	vmov	s0, r3
 8008d5c:	4770      	bx	lr
	...

08008d60 <floorf>:
 8008d60:	ee10 3a10 	vmov	r3, s0
 8008d64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008d68:	3a7f      	subs	r2, #127	; 0x7f
 8008d6a:	2a16      	cmp	r2, #22
 8008d6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d70:	dc2a      	bgt.n	8008dc8 <floorf+0x68>
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	da11      	bge.n	8008d9a <floorf+0x3a>
 8008d76:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008dd8 <floorf+0x78>
 8008d7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d86:	dd05      	ble.n	8008d94 <floorf+0x34>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da23      	bge.n	8008dd4 <floorf+0x74>
 8008d8c:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <floorf+0x7c>)
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	bf18      	it	ne
 8008d92:	4613      	movne	r3, r2
 8008d94:	ee00 3a10 	vmov	s0, r3
 8008d98:	4770      	bx	lr
 8008d9a:	4911      	ldr	r1, [pc, #68]	; (8008de0 <floorf+0x80>)
 8008d9c:	4111      	asrs	r1, r2
 8008d9e:	420b      	tst	r3, r1
 8008da0:	d0fa      	beq.n	8008d98 <floorf+0x38>
 8008da2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008dd8 <floorf+0x78>
 8008da6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008daa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db2:	ddef      	ble.n	8008d94 <floorf+0x34>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bfbe      	ittt	lt
 8008db8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008dbc:	fa40 f202 	asrlt.w	r2, r0, r2
 8008dc0:	189b      	addlt	r3, r3, r2
 8008dc2:	ea23 0301 	bic.w	r3, r3, r1
 8008dc6:	e7e5      	b.n	8008d94 <floorf+0x34>
 8008dc8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008dcc:	d3e4      	bcc.n	8008d98 <floorf+0x38>
 8008dce:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008dd2:	4770      	bx	lr
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e7dd      	b.n	8008d94 <floorf+0x34>
 8008dd8:	7149f2ca 	.word	0x7149f2ca
 8008ddc:	bf800000 	.word	0xbf800000
 8008de0:	007fffff 	.word	0x007fffff

08008de4 <scalbnf>:
 8008de4:	ee10 3a10 	vmov	r3, s0
 8008de8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008dec:	d025      	beq.n	8008e3a <scalbnf+0x56>
 8008dee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008df2:	d302      	bcc.n	8008dfa <scalbnf+0x16>
 8008df4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008df8:	4770      	bx	lr
 8008dfa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008dfe:	d122      	bne.n	8008e46 <scalbnf+0x62>
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <scalbnf+0xc8>)
 8008e02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008eb0 <scalbnf+0xcc>
 8008e06:	4298      	cmp	r0, r3
 8008e08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e0c:	db16      	blt.n	8008e3c <scalbnf+0x58>
 8008e0e:	ee10 3a10 	vmov	r3, s0
 8008e12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e16:	3a19      	subs	r2, #25
 8008e18:	4402      	add	r2, r0
 8008e1a:	2afe      	cmp	r2, #254	; 0xfe
 8008e1c:	dd15      	ble.n	8008e4a <scalbnf+0x66>
 8008e1e:	ee10 3a10 	vmov	r3, s0
 8008e22:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008eb4 <scalbnf+0xd0>
 8008e26:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008eb8 <scalbnf+0xd4>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	eeb0 7a67 	vmov.f32	s14, s15
 8008e30:	bfb8      	it	lt
 8008e32:	eef0 7a66 	vmovlt.f32	s15, s13
 8008e36:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008e3a:	4770      	bx	lr
 8008e3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008ebc <scalbnf+0xd8>
 8008e40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e44:	4770      	bx	lr
 8008e46:	0dd2      	lsrs	r2, r2, #23
 8008e48:	e7e6      	b.n	8008e18 <scalbnf+0x34>
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	dd06      	ble.n	8008e5c <scalbnf+0x78>
 8008e4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e52:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008e56:	ee00 3a10 	vmov	s0, r3
 8008e5a:	4770      	bx	lr
 8008e5c:	f112 0f16 	cmn.w	r2, #22
 8008e60:	da1a      	bge.n	8008e98 <scalbnf+0xb4>
 8008e62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e66:	4298      	cmp	r0, r3
 8008e68:	ee10 3a10 	vmov	r3, s0
 8008e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e70:	dd0a      	ble.n	8008e88 <scalbnf+0xa4>
 8008e72:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008eb4 <scalbnf+0xd0>
 8008e76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008eb8 <scalbnf+0xd4>
 8008e7a:	eef0 7a40 	vmov.f32	s15, s0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bf18      	it	ne
 8008e82:	eeb0 0a47 	vmovne.f32	s0, s14
 8008e86:	e7db      	b.n	8008e40 <scalbnf+0x5c>
 8008e88:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008ebc <scalbnf+0xd8>
 8008e8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008ec0 <scalbnf+0xdc>
 8008e90:	eef0 7a40 	vmov.f32	s15, s0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	e7f3      	b.n	8008e80 <scalbnf+0x9c>
 8008e98:	3219      	adds	r2, #25
 8008e9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e9e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008ea2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008ec4 <scalbnf+0xe0>
 8008ea6:	ee07 3a10 	vmov	s14, r3
 8008eaa:	e7c4      	b.n	8008e36 <scalbnf+0x52>
 8008eac:	ffff3cb0 	.word	0xffff3cb0
 8008eb0:	4c000000 	.word	0x4c000000
 8008eb4:	7149f2ca 	.word	0x7149f2ca
 8008eb8:	f149f2ca 	.word	0xf149f2ca
 8008ebc:	0da24260 	.word	0x0da24260
 8008ec0:	8da24260 	.word	0x8da24260
 8008ec4:	33000000 	.word	0x33000000

08008ec8 <_init>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	bf00      	nop
 8008ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ece:	bc08      	pop	{r3}
 8008ed0:	469e      	mov	lr, r3
 8008ed2:	4770      	bx	lr

08008ed4 <_fini>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr
