
marutai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009234  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800982c  0800982c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800982c  0800982c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000070  080098a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080098a4  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c38  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab2  00000000  00000000  00033cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00036790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00037ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002883d  00000000  00000000  00038c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015885  00000000  00000000  000614ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ca24  00000000  00000000  00076d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  001837a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080093f4 	.word	0x080093f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080093f4 	.word	0x080093f4

08000218 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000222:	edc7 0a02 	vstr	s1, [r7, #8]
 8000226:	ed87 1a01 	vstr	s2, [r7, #4]
 800022a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	ed93 7a00 	vldr	s14, [r3]
 8000232:	edd7 6a03 	vldr	s13, [r7, #12]
 8000236:	edd7 7a01 	vldr	s15, [r7, #4]
 800023a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800023e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000248:	ed97 7a02 	vldr	s14, [r7, #8]
 800024c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	edd3 7a00 	vldr	s15, [r3]
 800025a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800025e:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	ee07 3a90 	vmov	s15, r3
}
 8000268:	eeb0 0a67 	vmov.f32	s0, s15
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000280:	edc7 0a02 	vstr	s1, [r7, #8]
 8000284:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000288:	edd7 7a02 	vldr	s15, [r7, #8]
 800028c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000294:	db0b      	blt.n	80002ae <gfDivideAvoidZero+0x38>
 8000296:	ed97 7a02 	vldr	s14, [r7, #8]
 800029a:	edd7 7a01 	vldr	s15, [r7, #4]
 800029e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	d502      	bpl.n	80002ae <gfDivideAvoidZero+0x38>
		den = threshold;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	e017      	b.n	80002de <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80002ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80002b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ba:	d510      	bpl.n	80002de <gfDivideAvoidZero+0x68>
 80002bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002c0:	eef1 7a67 	vneg.f32	s15, s15
 80002c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80002c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d0:	dd05      	ble.n	80002de <gfDivideAvoidZero+0x68>
		den = -threshold;
 80002d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d6:	eef1 7a67 	vneg.f32	s15, s15
 80002da:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80002de:	edd7 6a03 	vldr	s13, [r7, #12]
 80002e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80002e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002ea:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	ee07 3a90 	vmov	s15, r3
}
 80002f4:	eeb0 0a67 	vmov.f32	s0, s15
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 800030e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000374 <gfWrapTheta+0x70>
 8000312:	ed97 0a01 	vldr	s0, [r7, #4]
 8000316:	f008 f91f 	bl	8008558 <fmodf>
 800031a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 800031e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000322:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000378 <gfWrapTheta+0x74>
 8000326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	dd08      	ble.n	8000342 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000330:	edd7 7a01 	vldr	s15, [r7, #4]
 8000334:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000374 <gfWrapTheta+0x70>
 8000338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000340:	e010      	b.n	8000364 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000342:	edd7 7a01 	vldr	s15, [r7, #4]
 8000346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800037c <gfWrapTheta+0x78>
 800034a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000352:	d507      	bpl.n	8000364 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000354:	edd7 7a01 	vldr	s15, [r7, #4]
 8000358:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000374 <gfWrapTheta+0x70>
 800035c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000360:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	ee07 3a90 	vmov	s15, r3
}
 800036a:	eeb0 0a67 	vmov.f32	s0, s15
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40c90fdb 	.word	0x40c90fdb
 8000378:	40490fdb 	.word	0x40490fdb
 800037c:	c0490fdb 	.word	0xc0490fdb

08000380 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a03 	vstr	s0, [r7, #12]
 800038a:	edc7 0a02 	vstr	s1, [r7, #8]
 800038e:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000392:	ed97 7a03 	vldr	s14, [r7, #12]
 8000396:	edd7 7a02 	vldr	s15, [r7, #8]
 800039a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a2:	dd01      	ble.n	80003a8 <gUpperLowerLimit+0x28>
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80003a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80003ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80003b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b8:	d501      	bpl.n	80003be <gUpperLowerLimit+0x3e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	return input;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	ee07 3a90 	vmov	s15, r3
}
 80003c4:	eeb0 0a67 	vmov.f32	s0, s15
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	3302      	adds	r3, #2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	f04f 0200 	mov.w	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3308      	adds	r3, #8
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800041a:	b480      	push	{r7}
 800041c:	b087      	sub	sp, #28
 800041e:	af00      	add	r7, sp, #0
 8000420:	ed87 0a03 	vstr	s0, [r7, #12]
 8000424:	edc7 0a02 	vstr	s1, [r7, #8]
 8000428:	ed87 1a01 	vstr	s2, [r7, #4]
 800042c:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 800042e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000432:	edd7 7a01 	vldr	s15, [r7, #4]
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000448:	edd7 7a05 	vldr	s15, [r7, #20]
 800044c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000450:	edd7 7a04 	vldr	s15, [r7, #16]
 8000454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000458:	edd7 6a05 	vldr	s13, [r7, #20]
 800045c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	edc3 7a00 	vstr	s15, [r3]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 800047a:	b480      	push	{r7}
 800047c:	b089      	sub	sp, #36	; 0x24
 800047e:	af00      	add	r7, sp, #0
 8000480:	ed87 0a03 	vstr	s0, [r7, #12]
 8000484:	edc7 0a02 	vstr	s1, [r7, #8]
 8000488:	ed87 1a01 	vstr	s2, [r7, #4]
 800048c:	6038      	str	r0, [r7, #0]
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 800048e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000492:	edd7 7a01 	vldr	s15, [r7, #4]
 8000496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800049a:	edc7 7a06 	vstr	s15, [r7, #24]
	yn_1 = *y;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]

	if( r > yn_1 )
 80004a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80004a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80004ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b4:	dd08      	ble.n	80004c8 <gRateLimit+0x4e>
		ytmp = yn_1 + dy;
 80004b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80004ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80004be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80004c6:	e010      	b.n	80004ea <gRateLimit+0x70>
	else if( r < yn_1 )
 80004c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80004cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80004d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	d507      	bpl.n	80004ea <gRateLimit+0x70>
		ytmp = yn_1 - dy;
 80004da:	ed97 7a05 	vldr	s14, [r7, #20]
 80004de:	edd7 7a06 	vldr	s15, [r7, #24]
 80004e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004e6:	edc7 7a07 	vstr	s15, [r7, #28]

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	601a      	str	r2, [r3, #0]

}
 80004f0:	bf00      	nop
 80004f2:	3724      	adds	r7, #36	; 0x24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b08d      	sub	sp, #52	; 0x34
 8000500:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t posMode_pre;
	uint8_t drvMode_pre;


	//read IO signals
	gButton1 = readButton1();
 8000502:	f000 fb3b 	bl	8000b7c <readButton1>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b43      	ldr	r3, [pc, #268]	; (8000618 <Sequence_Low_Freq+0x11c>)
 800050c:	701a      	strb	r2, [r3, #0]
	gPropoDuty = readPropoDuty();
 800050e:	f000 fb63 	bl	8000bd8 <readPropoDuty>
 8000512:	eef0 7a40 	vmov.f32	s15, s0
 8000516:	4b41      	ldr	r3, [pc, #260]	; (800061c <Sequence_Low_Freq+0x120>)
 8000518:	edc3 7a00 	vstr	s15, [r3]
	readHallSignal(gHall);
 800051c:	4840      	ldr	r0, [pc, #256]	; (8000620 <Sequence_Low_Freq+0x124>)
 800051e:	f000 fc99 	bl	8000e54 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 8000522:	4840      	ldr	r0, [pc, #256]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000524:	f000 fcd0 	bl	8000ec8 <readElectFreqFromHallSignal>

	sSensData.Vdc = 10.0f;//readVdc();
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <Sequence_Low_Freq+0x12c>)
 800052a:	4a40      	ldr	r2, [pc, #256]	; (800062c <Sequence_Low_Freq+0x130>)
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 800052e:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <Sequence_Low_Freq+0x12c>)
 8000530:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000534:	483e      	ldr	r0, [pc, #248]	; (8000630 <Sequence_Low_Freq+0x134>)
 8000536:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8000634 <Sequence_Low_Freq+0x138>
 800053a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8000638 <Sequence_Low_Freq+0x13c>
 800053e:	eeb0 0a67 	vmov.f32	s0, s15
 8000542:	f7ff ff6a 	bl	800041a <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 8000546:	4b38      	ldr	r3, [pc, #224]	; (8000628 <Sequence_Low_Freq+0x12c>)
 8000548:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800054c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000550:	eef0 0a67 	vmov.f32	s1, s15
 8000554:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000558:	f7ff fe8d 	bl	8000276 <gfDivideAvoidZero>
 800055c:	eef0 7a40 	vmov.f32	s15, s0
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <Sequence_Low_Freq+0x12c>)
 8000562:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <Sequence_Low_Freq+0x140>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2b28      	cmp	r3, #40	; 0x28
 800056c:	d81d      	bhi.n	80005aa <Sequence_Low_Freq+0xae>
		sInitCnt++;
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <Sequence_Low_Freq+0x140>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <Sequence_Low_Freq+0x140>)
 8000578:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <Sequence_Low_Freq+0x144>)
 800057c:	2202      	movs	r2, #2
 800057e:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <Sequence_Low_Freq+0x148>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <Sequence_Low_Freq+0x14c>)
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	601a      	str	r2, [r3, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <Sequence_Low_Freq+0x140>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d83c      	bhi.n	8000610 <Sequence_Low_Freq+0x114>
			sSensData.Iuvw_AD_Offset[0] = 1997.0f;
 8000596:	4b24      	ldr	r3, [pc, #144]	; (8000628 <Sequence_Low_Freq+0x12c>)
 8000598:	4a2c      	ldr	r2, [pc, #176]	; (800064c <Sequence_Low_Freq+0x150>)
 800059a:	61da      	str	r2, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] = 1992.0f;
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <Sequence_Low_Freq+0x12c>)
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <Sequence_Low_Freq+0x154>)
 80005a0:	621a      	str	r2, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] = 1990.0f;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <Sequence_Low_Freq+0x12c>)
 80005a4:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <Sequence_Low_Freq+0x158>)
 80005a6:	625a      	str	r2, [r3, #36]	; 0x24
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 80005a8:	e032      	b.n	8000610 <Sequence_Low_Freq+0x114>
		posMode_pre = sPosMode;
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
		drvMode_pre = sDrvMode;
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <Sequence_Low_Freq+0x148>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	71bb      	strb	r3, [r7, #6]
		slctPosMode(gElectFreq, &sPosMode);
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <Sequence_Low_Freq+0x128>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005be:	eeb0 0a67 	vmov.f32	s0, s15
 80005c2:	f000 f897 	bl	80006f4 <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <Sequence_Low_Freq+0x128>)
 80005c8:	edd3 7a00 	vldr	s15, [r3]
 80005cc:	481d      	ldr	r0, [pc, #116]	; (8000644 <Sequence_Low_Freq+0x148>)
 80005ce:	eeb0 0a67 	vmov.f32	s0, s15
 80005d2:	f000 f8c4 	bl	800075e <slctDrvMode>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d113      	bne.n	8000604 <Sequence_Low_Freq+0x108>
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <Sequence_Low_Freq+0x148>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d10f      	bne.n	8000604 <Sequence_Low_Freq+0x108>
			InitVectorControl(sSensData, &sVectorControlData);
 80005e4:	4e10      	ldr	r6, [pc, #64]	; (8000628 <Sequence_Low_Freq+0x12c>)
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <Sequence_Low_Freq+0x15c>)
 80005e8:	9309      	str	r3, [sp, #36]	; 0x24
 80005ea:	466d      	mov	r5, sp
 80005ec:	f106 0410 	add.w	r4, r6, #16
 80005f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	602b      	str	r3, [r5, #0]
 80005fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000600:	f000 fffa 	bl	80015f8 <InitVectorControl>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <Sequence_Low_Freq+0x148>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4913      	ldr	r1, [pc, #76]	; (8000658 <Sequence_Low_Freq+0x15c>)
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa3e 	bl	8000a8c <calcCurrentRef>
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	2000008f 	.word	0x2000008f
 800061c:	20000098 	.word	0x20000098
 8000620:	2000008c 	.word	0x2000008c
 8000624:	20000090 	.word	0x20000090
 8000628:	200000b8 	.word	0x200000b8
 800062c:	41200000 	.word	0x41200000
 8000630:	200000e4 	.word	0x200000e4
 8000634:	3a83126f 	.word	0x3a83126f
 8000638:	42fb3333 	.word	0x42fb3333
 800063c:	2000009e 	.word	0x2000009e
 8000640:	2000009c 	.word	0x2000009c
 8000644:	2000009d 	.word	0x2000009d
 8000648:	200000a4 	.word	0x200000a4
 800064c:	44f9a000 	.word	0x44f9a000
 8000650:	44f90000 	.word	0x44f90000
 8000654:	44f8c000 	.word	0x44f8c000
 8000658:	200000ec 	.word	0x200000ec

0800065c <Sequence_High_Freq>:

void Sequence_High_Freq(void){
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b08f      	sub	sp, #60	; 0x3c
 8000660:	af0e      	add	r7, sp, #56	; 0x38
	// clear Free Running Counter
	// writeFreeRunCnt(ZERO);

	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <Sequence_High_Freq+0x6c>)
 8000664:	4919      	ldr	r1, [pc, #100]	; (80006cc <Sequence_High_Freq+0x70>)
 8000666:	481a      	ldr	r0, [pc, #104]	; (80006d0 <Sequence_High_Freq+0x74>)
 8000668:	f000 fb92 	bl	8000d90 <readCurrent>

	// for debug
	//sPosMode = POSMODE_HALL;////
	//sDrvMode = DRVMODE_OPENLOOP;
	sElectAngVeloRefRateLimit = TWOPI * 15.0f;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <Sequence_High_Freq+0x78>)
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <Sequence_High_Freq+0x7c>)
 8000670:	601a      	str	r2, [r3, #0]


	slctElectAngleFromPosMode(sPosMode, &sSensData);
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <Sequence_High_Freq+0x80>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	491a      	ldr	r1, [pc, #104]	; (80006e0 <Sequence_High_Freq+0x84>)
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f8a5 	bl	80007c8 <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <Sequence_High_Freq+0x88>)
 8000680:	f893 c000 	ldrb.w	ip, [r3]
 8000684:	4e16      	ldr	r6, [pc, #88]	; (80006e0 <Sequence_High_Freq+0x84>)
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <Sequence_High_Freq+0x8c>)
 8000688:	930c      	str	r3, [sp, #48]	; 0x30
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <Sequence_High_Freq+0x90>)
 800068c:	930b      	str	r3, [sp, #44]	; 0x2c
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <Sequence_High_Freq+0x94>)
 8000690:	930a      	str	r3, [sp, #40]	; 0x28
 8000692:	466d      	mov	r5, sp
 8000694:	f106 040c 	add.w	r4, r6, #12
 8000698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80006a8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006ac:	4660      	mov	r0, ip
 80006ae:	f000 f963 	bl	8000978 <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <Sequence_High_Freq+0x8c>)
 80006b4:	f000 fc52 	bl	8000f5c <writeOutputMode>
	writeDuty(sDuty);
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <Sequence_High_Freq+0x90>)
 80006ba:	f000 fc91 	bl	8000fe0 <writeDuty>

	// Calculate ProcessingLoad
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
 80006be:	bf00      	nop
 80006c0:	3704      	adds	r7, #4
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000c0 	.word	0x200000c0
 80006cc:	200000d4 	.word	0x200000d4
 80006d0:	200000cc 	.word	0x200000cc
 80006d4:	200000a4 	.word	0x200000a4
 80006d8:	42bc7edd 	.word	0x42bc7edd
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	200000b8 	.word	0x200000b8
 80006e4:	2000009d 	.word	0x2000009d
 80006e8:	200000a8 	.word	0x200000a8
 80006ec:	200000ac 	.word	0x200000ac
 80006f0:	200000ec 	.word	0x200000ec

080006f4 <slctPosMode>:
void inline slctPosMode(float electFreq, uint8_t* posMode){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80006fe:	6038      	str	r0, [r7, #0]

	if(*posMode != POSMODE_HALL_PLL){
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d010      	beq.n	800072a <slctPosMode+0x36>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000708:	edd7 7a01 	vldr	s15, [r7, #4]
 800070c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000718:	dd03      	ble.n	8000722 <slctPosMode+0x2e>
			*posMode = POSMODE_HALL_PLL;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2203      	movs	r2, #3
 800071e:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 8000720:	e017      	b.n	8000752 <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2202      	movs	r2, #2
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	e013      	b.n	8000752 <slctPosMode+0x5e>
	else if(*posMode == POSMODE_HALL_PLL){
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d10f      	bne.n	8000752 <slctPosMode+0x5e>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 8000732:	edd7 7a01 	vldr	s15, [r7, #4]
 8000736:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800073a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	d503      	bpl.n	800074c <slctPosMode+0x58>
			*posMode = POSMODE_HALL;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	2202      	movs	r2, #2
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	e002      	b.n	8000752 <slctPosMode+0x5e>
			*posMode = POSMODE_HALL_PLL;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2203      	movs	r2, #3
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <slctDrvMode>:

void inline slctDrvMode(float electFreq, uint8_t* drvMode){
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	ed87 0a01 	vstr	s0, [r7, #4]
 8000768:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d010      	beq.n	8000794 <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 8000772:	edd7 7a01 	vldr	s15, [r7, #4]
 8000776:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800077a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000782:	dd03      	ble.n	800078c <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2204      	movs	r2, #4
 8000788:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 800078a:	e017      	b.n	80007bc <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2202      	movs	r2, #2
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	e013      	b.n	80007bc <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b04      	cmp	r3, #4
 800079a:	d10f      	bne.n	80007bc <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 800079c:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80007a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ac:	d503      	bpl.n	80007b6 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
}
 80007b4:	e002      	b.n	80007bc <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2204      	movs	r2, #4
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <slctElectAngleFromPosMode>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 80007c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007cc:	b0a4      	sub	sp, #144	; 0x90
 80007ce:	af1e      	add	r7, sp, #120	; 0x78
 80007d0:	4603      	mov	r3, r0
 80007d2:	6039      	str	r1, [r7, #0]
 80007d4:	71fb      	strb	r3, [r7, #7]
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	f200 80ad 	bhi.w	8000938 <slctElectAngleFromPosMode+0x170>
 80007de:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <slctElectAngleFromPosMode+0x1c>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	08000829 	.word	0x08000829
 80007ec:	08000887 	.word	0x08000887
 80007f0:	080008b3 	.word	0x080008b3
 80007f4:	080008eb 	.word	0x080008eb
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f04f 0200 	mov.w	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
		flgPLL = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 800080c:	4b51      	ldr	r3, [pc, #324]	; (8000954 <slctElectAngleFromPosMode+0x18c>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	f107 0210 	add.w	r2, r7, #16
 800081a:	7db9      	ldrb	r1, [r7, #22]
 800081c:	eeb0 0a67 	vmov.f32	s0, s15
 8000820:	484d      	ldr	r0, [pc, #308]	; (8000958 <slctElectAngleFromPosMode+0x190>)
 8000822:	f000 fc1f 	bl	8001064 <calcElectAngle>
		break;
 8000826:	e090      	b.n	800094a <slctElectAngleFromPosMode+0x182>

	case POSMODE_FREERUN:
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000828:	4b4c      	ldr	r3, [pc, #304]	; (800095c <slctElectAngleFromPosMode+0x194>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	605a      	str	r2, [r3, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000830:	4b4a      	ldr	r3, [pc, #296]	; (800095c <slctElectAngleFromPosMode+0x194>)
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000960 <slctElectAngleFromPosMode+0x198>
 800083a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <slctElectAngleFromPosMode+0x19c>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000848:	4b46      	ldr	r3, [pc, #280]	; (8000964 <slctElectAngleFromPosMode+0x19c>)
 800084a:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <slctElectAngleFromPosMode+0x19c>)
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eeb0 0a67 	vmov.f32	s0, s15
 8000858:	f7ff fd54 	bl	8000304 <gfWrapTheta>
 800085c:	eef0 7a40 	vmov.f32	s15, s0
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	edc3 7a00 	vstr	s15, [r3]

		flgPLL = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 800086a:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <slctElectAngleFromPosMode+0x18c>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	f107 0210 	add.w	r2, r7, #16
 8000878:	7db9      	ldrb	r1, [r7, #22]
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	4836      	ldr	r0, [pc, #216]	; (8000958 <slctElectAngleFromPosMode+0x190>)
 8000880:	f000 fbf0 	bl	8001064 <calcElectAngle>

		break;
 8000884:	e061      	b.n	800094a <slctElectAngleFromPosMode+0x182>
	case POSMODE_HALL:
		flgPLL = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <slctElectAngleFromPosMode+0x18c>)
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	f107 0210 	add.w	r2, r7, #16
 8000898:	7db9      	ldrb	r1, [r7, #22]
 800089a:	eeb0 0a67 	vmov.f32	s0, s15
 800089e:	482e      	ldr	r0, [pc, #184]	; (8000958 <slctElectAngleFromPosMode+0x190>)
 80008a0:	f000 fbe0 	bl	8001064 <calcElectAngle>
		sensData->electAngle = electAngle;
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	605a      	str	r2, [r3, #4]
		break;
 80008b0:	e04b      	b.n	800094a <slctElectAngleFromPosMode+0x182>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <slctElectAngleFromPosMode+0x18c>)
 80008b8:	edd3 7a00 	vldr	s15, [r3]
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	7db9      	ldrb	r1, [r7, #22]
 80008c6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <slctElectAngleFromPosMode+0x190>)
 80008cc:	f000 fbca 	bl	8001064 <calcElectAngle>
		sensData->electAngle = electAngle - PIDIV6;
 80008d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80008d4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000968 <slctElectAngleFromPosMode+0x1a0>
 80008d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngVelo = electAngVelo;
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	605a      	str	r2, [r3, #4]
		break;
 80008e8:	e02f      	b.n	800094a <slctElectAngleFromPosMode+0x182>
	case POSMODE_SENSORLESS:
		flgInit = 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 80008ee:	4e1f      	ldr	r6, [pc, #124]	; (800096c <slctElectAngleFromPosMode+0x1a4>)
 80008f0:	f897 8017 	ldrb.w	r8, [r7, #23]
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <slctElectAngleFromPosMode+0x1a8>)
 80008f6:	931d      	str	r3, [sp, #116]	; 0x74
 80008f8:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <slctElectAngleFromPosMode+0x1ac>)
 80008fa:	ab0a      	add	r3, sp, #40	; 0x28
 80008fc:	4611      	mov	r1, r2
 80008fe:	224c      	movs	r2, #76	; 0x4c
 8000900:	4618      	mov	r0, r3
 8000902:	f007 fd87 	bl	8008414 <memcpy>
 8000906:	466d      	mov	r5, sp
 8000908:	f106 040c 	add.w	r4, r6, #12
 800090c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000914:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000918:	e885 0003 	stmia.w	r5, {r0, r1}
 800091c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000920:	4640      	mov	r0, r8
 8000922:	f001 fae1 	bl	8001ee8 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <slctElectAngleFromPosMode+0x1a8>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <slctElectAngleFromPosMode+0x1a8>)
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	605a      	str	r2, [r3, #4]
		break;
 8000936:	e008      	b.n	800094a <slctElectAngleFromPosMode+0x182>
	default:
		sensData->electAngle = 0.0f;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f04f 0200 	mov.w	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
		break;
 8000948:	bf00      	nop
	}
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000954:	20000090 	.word	0x20000090
 8000958:	2000008c 	.word	0x2000008c
 800095c:	200000a4 	.word	0x200000a4
 8000960:	461c4000 	.word	0x461c4000
 8000964:	200000a0 	.word	0x200000a0
 8000968:	3f060a92 	.word	0x3f060a92
 800096c:	200000b8 	.word	0x200000b8
 8000970:	20000138 	.word	0x20000138
 8000974:	200000ec 	.word	0x200000ec

08000978 <slctCntlFromDrvMode>:

void inline slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000978:	b084      	sub	sp, #16
 800097a:	b5b0      	push	{r4, r5, r7, lr}
 800097c:	b090      	sub	sp, #64	; 0x40
 800097e:	af0c      	add	r7, sp, #48	; 0x30
 8000980:	4604      	mov	r4, r0
 8000982:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800098a:	4623      	mov	r3, r4
 800098c:	71fb      	strb	r3, [r7, #7]

	float VamRef;
	float ModRef = 1.13;
 800098e:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <slctCntlFromDrvMode+0x100>)
 8000990:	60fb      	str	r3, [r7, #12]
	float ModErr;

	vectorControlData->Idq_ref[0] = 0.0f;
 8000992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
	vectorControlData->Idq_ref[1] = IQREFMAX * gPropoDuty;
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <slctCntlFromDrvMode+0x104>)
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009aa:	edc3 7a01 	vstr	s15, [r3, #4]
	vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_ref[0];
 80009ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b4:	609a      	str	r2, [r3, #8]
	vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_ref[1];//IQREFMAX * gVolume;
 80009b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009bc:	60da      	str	r2, [r3, #12]
	if( sId_ref_i < -1.0f)
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;*/

	switch(drvMode){
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d038      	beq.n	8000a36 <slctCntlFromDrvMode+0xbe>
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	dc4b      	bgt.n	8000a60 <slctCntlFromDrvMode+0xe8>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <slctCntlFromDrvMode+0x5a>
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d005      	beq.n	80009dc <slctCntlFromDrvMode+0x64>
 80009d0:	e046      	b.n	8000a60 <slctCntlFromDrvMode+0xe8>
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 80009d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009d4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80009d6:	f7ff fcfc 	bl	80003d2 <gOffDuty>
			break;
 80009da:	e046      	b.n	8000a6a <slctCntlFromDrvMode+0xf2>
		case DRVMODE_OPENLOOP:
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * gPropoDuty * gButton1;//gVolume;
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <slctCntlFromDrvMode+0x108>)
 80009de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009e2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000a84 <slctCntlFromDrvMode+0x10c>
 80009e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <slctCntlFromDrvMode+0x104>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <slctCntlFromDrvMode+0x110>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	ee07 3a90 	vmov	s15, r3
 80009fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a04:	edc7 7a02 	vstr	s15, [r7, #8]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8000a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a12:	9309      	str	r3, [sp, #36]	; 0x24
 8000a14:	466d      	mov	r5, sp
 8000a16:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	602b      	str	r3, [r5, #0]
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a2c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a30:	f000 fd52 	bl	80014d8 <OpenLoopTasks>
			break;
 8000a34:	e019      	b.n	8000a6a <slctCntlFromDrvMode+0xf2>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 8000a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a3c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a40:	9309      	str	r3, [sp, #36]	; 0x24
 8000a42:	466d      	mov	r5, sp
 8000a44:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	602b      	str	r3, [r5, #0]
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5a:	f000 fca7 	bl	80013ac <VectorControlTasks>
			break;
 8000a5e:	e004      	b.n	8000a6a <slctCntlFromDrvMode+0xf2>
		default :
			gOffDuty(Duty, outputMode);
 8000a60:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000a64:	f7ff fcb5 	bl	80003d2 <gOffDuty>
	}
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a74:	b004      	add	sp, #16
 8000a76:	4770      	bx	lr
 8000a78:	3f90a3d7 	.word	0x3f90a3d7
 8000a7c:	20000098 	.word	0x20000098
 8000a80:	200000b8 	.word	0x200000b8
 8000a84:	3f1cc471 	.word	0x3f1cc471
 8000a88:	2000008f 	.word	0x2000008f

08000a8c <calcCurrentRef>:

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
	switch(drvMode){
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d028      	beq.n	8000af0 <calcCurrentRef+0x64>
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	dc51      	bgt.n	8000b46 <calcCurrentRef+0xba>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <calcCurrentRef+0x20>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d011      	beq.n	8000ace <calcCurrentRef+0x42>
 8000aaa:	e04c      	b.n	8000b46 <calcCurrentRef+0xba>
		case DRVMODE_OFFDUTY:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
			break;
 8000acc:	e04c      	b.n	8000b68 <calcCurrentRef+0xdc>
		case DRVMODE_OPENLOOP:
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	69da      	ldr	r2, [r3, #28]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	69da      	ldr	r2, [r3, #28]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	60da      	str	r2, [r3, #12]
			break;
 8000aee:	e03b      	b.n	8000b68 <calcCurrentRef+0xdc>
		case DRVMODE_VECTORCONTROL:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <calcCurrentRef+0xe4>)
 8000afa:	edd3 7a00 	vldr	s15, [r3]
 8000afe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	edc3 7a01 	vstr	s15, [r3, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	edd3 7a00 	vldr	s15, [r3]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	3308      	adds	r3, #8
 8000b16:	4618      	mov	r0, r3
 8000b18:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000b74 <calcCurrentRef+0xe8>
 8000b1c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000b78 <calcCurrentRef+0xec>
 8000b20:	eeb0 0a67 	vmov.f32	s0, s15
 8000b24:	f7ff fc79 	bl	800041a <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	330c      	adds	r3, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000b74 <calcCurrentRef+0xe8>
 8000b38:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000b78 <calcCurrentRef+0xec>
 8000b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b40:	f7ff fc6b 	bl	800041a <gLPF>
			break;
 8000b44:	e010      	b.n	8000b68 <calcCurrentRef+0xdc>
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
	}
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000094 	.word	0x20000094
 8000b74:	3a83126f 	.word	0x3a83126f
 8000b78:	41fb53d1 	.word	0x41fb53d1

08000b7c <readButton1>:
float propoInputCaptureCntDiff;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = 1;//HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
	//B1 = 0b00000001 & (~B1);
	return B1;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	b2db      	uxtb	r3, r3
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <readHallInputCaptureCnt>:

uint32_t readHallInputCaptureCnt(void){
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <readPropoInputCaptureCnt>:

uint16_t readPropoInputCaptureCnt(void){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR2:TIM3 Channel2 = Propo
	volatile uint16_t inputCaptureCnt;

	inputCaptureCnt = TIM3 -> CCR2;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <readPropoInputCaptureCnt+0x20>)
 8000bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	80fb      	strh	r3, [r7, #6]

	return inputCaptureCnt;
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	b29b      	uxth	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <readPropoDuty>:

float readPropoDuty(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;
	float preScaler;

	sPropoState_pre = sPropoState;
 8000bde:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <readPropoDuty+0x100>)
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <readPropoDuty+0x104>)
 8000be4:	701a      	strb	r2, [r3, #0]
	sPropoState = HAL_GPIO_ReadPin(GPIOC, Propo_Pin) & 0b00000001;
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	483d      	ldr	r0, [pc, #244]	; (8000ce0 <readPropoDuty+0x108>)
 8000bea:	f004 ff3d 	bl	8005a68 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <readPropoDuty+0x100>)
 8000bf8:	701a      	strb	r2, [r3, #0]

	if(sPropoState) // sPropoState = ON
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <readPropoDuty+0x100>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <readPropoDuty+0x38>
		sPropoInputCaptureCntRise = readPropoInputCaptureCnt();
 8000c02:	f7ff ffd7 	bl	8000bb4 <readPropoInputCaptureCnt>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <readPropoDuty+0x10c>)
 8000c0c:	801a      	strh	r2, [r3, #0]
 8000c0e:	e057      	b.n	8000cc0 <readPropoDuty+0xe8>
	else			// sPropoState = OFF
	{
		sPropoInputCaptureCntFall = readPropoInputCaptureCnt();
 8000c10:	f7ff ffd0 	bl	8000bb4 <readPropoInputCaptureCnt>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <readPropoDuty+0x110>)
 8000c1a:	801a      	strh	r2, [r3, #0]

		// Detect Falling Edge, Update propoDuty
		if(sPropoState == 0 && sPropoState_pre == 1)
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <readPropoDuty+0x100>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14d      	bne.n	8000cc0 <readPropoDuty+0xe8>
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <readPropoDuty+0x104>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d149      	bne.n	8000cc0 <readPropoDuty+0xe8>
		{

			inputCaptureCntMax = TIM3 -> ARR;
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <readPropoDuty+0x114>)
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	60fb      	str	r3, [r7, #12]
			inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
			preScaler = (float)(TIM3 -> PSC);
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <readPropoDuty+0x114>)
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c46:	edc7 7a01 	vstr	s15, [r7, #4]

			propoInputCaptureCntDiff = (float)sPropoInputCaptureCntFall - (float)sPropoInputCaptureCntRise;
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <readPropoDuty+0x110>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <readPropoDuty+0x10c>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <readPropoDuty+0x118>)
 8000c68:	edc3 7a00 	vstr	s15, [r3]

			if( propoInputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c76:	eeb1 7a67 	vneg.f32	s14, s15
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <readPropoDuty+0x118>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	dd0c      	ble.n	8000ca4 <readPropoDuty+0xcc>
				propoInputCaptureCntDiff += (float)inputCaptureCntMax;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <readPropoDuty+0x118>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <readPropoDuty+0x118>)
 8000ca0:	edc3 7a00 	vstr	s15, [r3]

			// Default 1489 Max 1857 Min 1119 Ampritude:370
			sPropoDuty = (propoInputCaptureCntDiff - 1499.0f) * 0.0027f;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <readPropoDuty+0x118>)
 8000ca6:	edd3 7a00 	vldr	s15, [r3]
 8000caa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000cf4 <readPropoDuty+0x11c>
 8000cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cb2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000cf8 <readPropoDuty+0x120>
 8000cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <readPropoDuty+0x124>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
			//if(sPropoDuty < 0.0f) sPropoDuty = 0.0f;

		}
	}

	propoDuty = sPropoDuty;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <readPropoDuty+0x124>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	603b      	str	r3, [r7, #0]
	return propoDuty;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	ee07 3a90 	vmov	s15, r3

}
 8000ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000158 	.word	0x20000158
 8000cdc:	20000159 	.word	0x20000159
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	20000154 	.word	0x20000154
 8000ce8:	20000156 	.word	0x20000156
 8000cec:	40000400 	.word	0x40000400
 8000cf0:	20000160 	.word	0x20000160
 8000cf4:	44bb6000 	.word	0x44bb6000
 8000cf8:	3b30f27c 	.word	0x3b30f27c
 8000cfc:	2000015c 	.word	0x2000015c

08000d00 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3301      	adds	r3, #1
 8000d16:	085b      	lsrs	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d32:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d40:	eef1 7a67 	vneg.f32	s15, s15
 8000d44:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	d50a      	bpl.n	8000d68 <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d64:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000d68:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d6c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d8c <readTimeInterval+0x8c>
 8000d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d74:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	ee07 3a90 	vmov	s15, r3
}
 8000d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	4d221fe8 	.word	0x4d221fe8

08000d90 <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000d9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000daa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3302      	adds	r3, #2
 8000db6:	b292      	uxth	r2, r2
 8000db8:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000dba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000e50 <readCurrent+0xc0>
 8000de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3302      	adds	r3, #2
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	3304      	adds	r3, #4
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e50 <readCurrent+0xc0>
 8000e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e14:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3308      	adds	r3, #8
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3308      	adds	r3, #8
 8000e36:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e50 <readCurrent+0xc0>
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	edc3 7a00 	vstr	s15, [r3]
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	3daf5c29 	.word	0x3daf5c29

08000e54 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w

	Hall[0] = ~HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin) & 0b00000001;
 8000e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f004 fe00 	bl	8005a68 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	701a      	strb	r2, [r3, #0]
	Hall[1] = ~HAL_GPIO_ReadPin(GPIOB, H2_Pin) & 0b00000001;
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <readHallSignal+0x70>)
 8000e82:	f004 fdf1 	bl	8005a68 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf0c      	ite	eq
 8000e90:	2301      	moveq	r3, #1
 8000e92:	2300      	movne	r3, #0
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
	Hall[2] = ~HAL_GPIO_ReadPin(GPIOB, H3_Pin) & 0b00000001;
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <readHallSignal+0x70>)
 8000ea2:	f004 fde1 	bl	8005a68 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3302      	adds	r3, #2
 8000eba:	701a      	strb	r2, [r3, #0]

}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	float timeInterval;

	sHallInputCaptureCnt_pre = sHallInputCaptureCnt;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <readElectFreqFromHallSignal+0x84>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <readElectFreqFromHallSignal+0x88>)
 8000ed6:	6013      	str	r3, [r2, #0]
	sHallInputCaptureCnt = readHallInputCaptureCnt();
 8000ed8:	f7ff fe5d 	bl	8000b96 <readHallInputCaptureCnt>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <readElectFreqFromHallSignal+0x84>)
 8000ee0:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sHallInputCaptureCnt != sHallInputCaptureCnt_pre){
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <readElectFreqFromHallSignal+0x84>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <readElectFreqFromHallSignal+0x88>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d01a      	beq.n	8000f24 <readElectFreqFromHallSignal+0x5c>
		timeInterval = readTimeInterval(sHallInputCaptureCnt, sHallInputCaptureCnt_pre);
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <readElectFreqFromHallSignal+0x84>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <readElectFreqFromHallSignal+0x88>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff01 	bl	8000d00 <readTimeInterval>
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
		*electFreq = gfDivideAvoidZero(1.0f, timeInterval, 0.0001f);
 8000f02:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000f54 <readElectFreqFromHallSignal+0x8c>
 8000f06:	edd7 0a03 	vldr	s1, [r7, #12]
 8000f0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f0e:	f7ff f9b2 	bl	8000276 <gfDivideAvoidZero>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <readElectFreqFromHallSignal+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	801a      	strh	r2, [r3, #0]
	// If Input Capture Count keep same value, Set Electrical Freq Zero
	else if(sNoInputCaptureCnt < 2000)
		sNoInputCaptureCnt ++;
	else
		*electFreq = 0;
}
 8000f22:	e00f      	b.n	8000f44 <readElectFreqFromHallSignal+0x7c>
	else if(sNoInputCaptureCnt < 2000)
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <readElectFreqFromHallSignal+0x90>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f2c:	d206      	bcs.n	8000f3c <readElectFreqFromHallSignal+0x74>
		sNoInputCaptureCnt ++;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <readElectFreqFromHallSignal+0x90>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <readElectFreqFromHallSignal+0x90>)
 8000f38:	801a      	strh	r2, [r3, #0]
}
 8000f3a:	e003      	b.n	8000f44 <readElectFreqFromHallSignal+0x7c>
		*electFreq = 0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000014c 	.word	0x2000014c
 8000f50:	20000150 	.word	0x20000150
 8000f54:	38d1b717 	.word	0x38d1b717
 8000f58:	20000148 	.word	0x20000148

08000f5c <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f74:	4819      	ldr	r0, [pc, #100]	; (8000fdc <writeOutputMode+0x80>)
 8000f76:	f004 fd8f 	bl	8005a98 <HAL_GPIO_WritePin>
 8000f7a:	e005      	b.n	8000f88 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	4816      	ldr	r0, [pc, #88]	; (8000fdc <writeOutputMode+0x80>)
 8000f84:	f004 fd88 	bl	8005a98 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	4810      	ldr	r0, [pc, #64]	; (8000fdc <writeOutputMode+0x80>)
 8000f9c:	f004 fd7c 	bl	8005a98 <HAL_GPIO_WritePin>
 8000fa0:	e005      	b.n	8000fae <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <writeOutputMode+0x80>)
 8000faa:	f004 fd75 	bl	8005a98 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc0:	4806      	ldr	r0, [pc, #24]	; (8000fdc <writeOutputMode+0x80>)
 8000fc2:	f004 fd69 	bl	8005a98 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000fc6:	e005      	b.n	8000fd4 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <writeOutputMode+0x80>)
 8000fd0:	f004 fd62 	bl	8005a98 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <writeDuty>:

void writeDuty(float* Duty){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	ed93 7a00 	vldr	s14, [r3]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <writeDuty+0x80>)
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <writeDuty+0x80>)
 8001000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001004:	ee17 2a90 	vmov	r2, s15
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	ed93 7a00 	vldr	s14, [r3]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <writeDuty+0x80>)
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <writeDuty+0x80>)
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 2a90 	vmov	r2, s15
 800102c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3308      	adds	r3, #8
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <writeDuty+0x80>)
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <writeDuty+0x80>)
 8001048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104c:	ee17 2a90 	vmov	r2, s15
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
	//TIM1 -> CCR1 = 0.55f * (TIM1 -> ARR);
	//TIM1 -> CCR2 = 0.5f * (TIM1 -> ARR);
	//TIM1 -> CCR3 = 0.5f * (TIM1 -> ARR);

}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40012c00 	.word	0x40012c00

08001064 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6178      	str	r0, [r7, #20]
 800106c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.25f;
 8001078:	4b68      	ldr	r3, [pc, #416]	; (800121c <calcElectAngle+0x1b8>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001086:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 800108a:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8001220 <calcElectAngle+0x1bc>
 800108e:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001224 <calcElectAngle+0x1c0>
 8001092:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001096:	f7ff f973 	bl	8000380 <gUpperLowerLimit>
 800109a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
	Kp_PLL = wc_PLL;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	623b      	str	r3, [r7, #32]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * CARRIERCYCLE;//Ts_PLL;
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001228 <calcElectAngle+0x1c4>
 80010aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b6:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800122c <calcElectAngle+0x1c8>
 80010ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010be:	edc7 7a07 	vstr	s15, [r7, #28]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <calcElectAngle+0x1cc>)
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <calcElectAngle+0x1d0>)
 80010c8:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f000 f8c6 	bl	800125c <calcVoltageMode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b56      	ldr	r3, [pc, #344]	; (8001230 <calcElectAngle+0x1cc>)
 80010d6:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 80010d8:	4b57      	ldr	r3, [pc, #348]	; (8001238 <calcElectAngle+0x1d4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a57      	ldr	r2, [pc, #348]	; (800123c <calcElectAngle+0x1d8>)
 80010de:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 80010e0:	4b54      	ldr	r3, [pc, #336]	; (8001234 <calcElectAngle+0x1d0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <calcElectAngle+0x1cc>)
 80010e6:	7811      	ldrb	r1, [r2, #0]
 80010e8:	4a55      	ldr	r2, [pc, #340]	; (8001240 <calcElectAngle+0x1dc>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f8fc 	bl	80012e8 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 80010f0:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <calcElectAngle+0x1cc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4a52      	ldr	r2, [pc, #328]	; (8001240 <calcElectAngle+0x1dc>)
 80010f6:	f992 2000 	ldrsb.w	r2, [r2]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f91f 	bl	8001340 <calcElectAngleFromVoltageMode>
 8001102:	eef0 7a40 	vmov.f32	s15, s0
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <calcElectAngle+0x1d4>)
 8001108:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <calcElectAngle+0x1d4>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	f7ff f8f5 	bl	8000304 <gfWrapTheta>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <calcElectAngle+0x1d4>)
 8001120:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8001124:	4b47      	ldr	r3, [pc, #284]	; (8001244 <calcElectAngle+0x1e0>)
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b47      	ldr	r3, [pc, #284]	; (8001248 <calcElectAngle+0x1e4>)
 800112a:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 800112c:	4a45      	ldr	r2, [pc, #276]	; (8001244 <calcElectAngle+0x1e0>)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d158      	bne.n	80011ea <calcElectAngle+0x186>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <calcElectAngle+0x1e4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d110      	bne.n	8001162 <calcElectAngle+0xfe>
			sElectAngVeloEstimate = electFreq * TWOPI;
 8001140:	edd7 7a04 	vldr	s15, [r7, #16]
 8001144:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800124c <calcElectAngle+0x1e8>
 8001148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <calcElectAngle+0x1b8>)
 800114e:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <calcElectAngle+0x1b8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <calcElectAngle+0x1ec>)
 8001158:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <calcElectAngle+0x1d4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <calcElectAngle+0x1f0>)
 8001160:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <calcElectAngle+0x1b8>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	eddf 6a30 	vldr	s13, [pc, #192]	; 800122c <calcElectAngle+0x1c8>
 800116c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <calcElectAngle+0x1f0>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <calcElectAngle+0x1f0>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <calcElectAngle+0x1f0>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	f7ff f8bb 	bl	8000304 <gfWrapTheta>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <calcElectAngle+0x1f0>)
 8001194:	edc3 7a00 	vstr	s15, [r3]

		// Change Hall Signal, Update sElectAngVeloEstimate
		//if( sElectAngleActual != sElectAngleActual_pre){
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <calcElectAngle+0x1d4>)
 800119a:	ed93 7a00 	vldr	s14, [r3]
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <calcElectAngle+0x1f0>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <calcElectAngle+0x1f4>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <calcElectAngle+0x1f4>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f7ff f8a4 	bl	8000304 <gfWrapTheta>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <calcElectAngle+0x1f4>)
 80011c2:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <calcElectAngle+0x1f4>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	4820      	ldr	r0, [pc, #128]	; (8001250 <calcElectAngle+0x1ec>)
 80011ce:	ed97 1a07 	vldr	s2, [r7, #28]
 80011d2:	edd7 0a08 	vldr	s1, [r7, #32]
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f7ff f81d 	bl	8000218 <cfPhaseLockedLoop>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <calcElectAngle+0x1b8>)
 80011e4:	edc3 7a00 	vstr	s15, [r3]
 80011e8:	e00c      	b.n	8001204 <calcElectAngle+0x1a0>
		//}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <calcElectAngle+0x1d4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <calcElectAngle+0x1f0>)
 80011f0:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80011f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800124c <calcElectAngle+0x1e8>
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <calcElectAngle+0x1b8>)
 8001200:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <calcElectAngle+0x1f0>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <calcElectAngle+0x1b8>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]


}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000017c 	.word	0x2000017c
 8001220:	00000000 	.word	0x00000000
 8001224:	43fa0000 	.word	0x43fa0000
 8001228:	3e4ccccd 	.word	0x3e4ccccd
 800122c:	461c4000 	.word	0x461c4000
 8001230:	20000164 	.word	0x20000164
 8001234:	20000165 	.word	0x20000165
 8001238:	2000016c 	.word	0x2000016c
 800123c:	20000170 	.word	0x20000170
 8001240:	20000166 	.word	0x20000166
 8001244:	20000167 	.word	0x20000167
 8001248:	20000168 	.word	0x20000168
 800124c:	40c90fdb 	.word	0x40c90fdb
 8001250:	20000178 	.word	0x20000178
 8001254:	20000174 	.word	0x20000174
 8001258:	20000180 	.word	0x20000180

0800125c <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3302      	adds	r3, #2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3301      	adds	r3, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	3b01      	subs	r3, #1
 800128c:	2b05      	cmp	r3, #5
 800128e:	d821      	bhi.n	80012d4 <calcVoltageMode+0x78>
 8001290:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <calcVoltageMode+0x3c>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080012cf 	.word	0x080012cf
 800129c:	080012b7 	.word	0x080012b7
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012c3 	.word	0x080012c3
 80012a8:	080012c9 	.word	0x080012c9
 80012ac:	080012bd 	.word	0x080012bd
	  case 3:
		voltageMode = 3;
 80012b0:	2303      	movs	r3, #3
 80012b2:	73fb      	strb	r3, [r7, #15]
		break;
 80012b4:	e011      	b.n	80012da <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	73fb      	strb	r3, [r7, #15]
		break;
 80012ba:	e00e      	b.n	80012da <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 80012bc:	2305      	movs	r3, #5
 80012be:	73fb      	strb	r3, [r7, #15]
		break;
 80012c0:	e00b      	b.n	80012da <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 80012c2:	2306      	movs	r3, #6
 80012c4:	73fb      	strb	r3, [r7, #15]
		break;
 80012c6:	e008      	b.n	80012da <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
		break;
 80012cc:	e005      	b.n	80012da <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	73fb      	strb	r3, [r7, #15]
		break;
 80012d2:	e002      	b.n	80012da <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
	  break;
 80012d8:	bf00      	nop
	}

	return voltageMode;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	603a      	str	r2, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	460b      	mov	r3, r1
 80012f6:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	2b01      	cmp	r3, #1
 8001308:	dd04      	ble.n	8001314 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3b06      	subs	r3, #6
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e008      	b.n	8001326 <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8001314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	da03      	bge.n	8001326 <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	3306      	adds	r3, #6
 8001322:	b2db      	uxtb	r3, r3
 8001324:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	701a      	strb	r2, [r3, #0]

}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800135e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001362:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80013a4 <calcElectAngleFromVoltageMode+0x64>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	edc7 7a03 	vstr	s15, [r7, #12]

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 800136e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013a8 <calcElectAngleFromVoltageMode+0x68>
 800137e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001382:	ed97 7a03 	vldr	s14, [r7, #12]
 8001386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138a:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	ee07 3a90 	vmov	s15, r3
}
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	3f860a92 	.word	0x3f860a92
 80013a8:	3f060a92 	.word	0x3f060a92

080013ac <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80013ac:	b084      	sub	sp, #16
 80013ae:	b5b0      	push	{r4, r5, r7, lr}
 80013b0:	b08a      	sub	sp, #40	; 0x28
 80013b2:	af0a      	add	r7, sp, #40	; 0x28
 80013b4:	f107 0410 	add.w	r4, r7, #16
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 80013bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80013c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c4:	3301      	adds	r3, #1
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80013ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013cc:	3302      	adds	r3, #2
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	493b      	ldr	r1, [pc, #236]	; (80014c4 <VectorControlTasks+0x118>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f941 	bl	8001660 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 80013de:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e4:	3310      	adds	r3, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	4836      	ldr	r0, [pc, #216]	; (80014c4 <VectorControlTasks+0x118>)
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	f000 f9d9 	bl	80017a4 <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 80013f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	3318      	adds	r3, #24
 80013fc:	4618      	mov	r0, r3
 80013fe:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80014c8 <VectorControlTasks+0x11c>
 8001402:	eddf 0a32 	vldr	s1, [pc, #200]	; 80014cc <VectorControlTasks+0x120>
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	f7ff f806 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 800140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001410:	edd3 7a05 	vldr	s15, [r3, #20]
 8001414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001416:	331c      	adds	r3, #28
 8001418:	4618      	mov	r0, r3
 800141a:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80014c8 <VectorControlTasks+0x11c>
 800141e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80014cc <VectorControlTasks+0x120>
 8001422:	eeb0 0a67 	vmov.f32	s0, s15
 8001426:	f7fe fff8 	bl	800041a <gLPF>

	CurrentFbControl(sensData, vectorControlData);
 800142a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800142c:	9309      	str	r3, [sp, #36]	; 0x24
 800142e:	466d      	mov	r5, sp
 8001430:	f107 0420 	add.w	r4, r7, #32
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001446:	f000 fc13 	bl	8001c70 <CurrentFbControl>
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 800144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144c:	9309      	str	r3, [sp, #36]	; 0x24
 800144e:	466d      	mov	r5, sp
 8001450:	f107 0420 	add.w	r4, r7, #32
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001466:	f000 fa27 	bl	80018b8 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 800146a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	466d      	mov	r5, sp
 8001470:	f107 0420 	add.w	r4, r7, #32
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001486:	f000 fa4f 	bl	8001928 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 800148a:	edd7 7a04 	vldr	s15, [r7, #16]
 800148e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001490:	3320      	adds	r3, #32
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <VectorControlTasks+0x124>)
 8001494:	4618      	mov	r0, r3
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	f000 fab5 	bl	8001a08 <dq2ab>
	ab2uvw(sVab, sVuvw);
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <VectorControlTasks+0x128>)
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <VectorControlTasks+0x124>)
 80014a2:	f000 f93d 	bl	8001720 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 80014a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80014aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <VectorControlTasks+0x128>)
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f000 fae9 	bl	8001a88 <Vuvw2Duty>

}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014be:	b004      	add	sp, #16
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000184 	.word	0x20000184
 80014c8:	38d1b717 	.word	0x38d1b717
 80014cc:	42fb3333 	.word	0x42fb3333
 80014d0:	20000190 	.word	0x20000190
 80014d4:	20000198 	.word	0x20000198

080014d8 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80014d8:	b084      	sub	sp, #16
 80014da:	b5b0      	push	{r4, r5, r7, lr}
 80014dc:	b08c      	sub	sp, #48	; 0x30
 80014de:	af0a      	add	r7, sp, #40	; 0x28
 80014e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80014e4:	f107 0418 	add.w	r4, r7, #24
 80014e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80014f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f4:	3301      	adds	r3, #1
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80014fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014fc:	3302      	adds	r3, #2
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4937      	ldr	r1, [pc, #220]	; (80015e4 <OpenLoopTasks+0x10c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f8a9 	bl	8001660 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 800150e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001514:	3310      	adds	r3, #16
 8001516:	4619      	mov	r1, r3
 8001518:	4832      	ldr	r0, [pc, #200]	; (80015e4 <OpenLoopTasks+0x10c>)
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	f000 f941 	bl	80017a4 <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 8001522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001524:	edd3 7a04 	vldr	s15, [r3, #16]
 8001528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800152a:	3318      	adds	r3, #24
 800152c:	4618      	mov	r0, r3
 800152e:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80015e8 <OpenLoopTasks+0x110>
 8001532:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80015ec <OpenLoopTasks+0x114>
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	f7fe ff6e 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 800153e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001540:	edd3 7a05 	vldr	s15, [r3, #20]
 8001544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001546:	331c      	adds	r3, #28
 8001548:	4618      	mov	r0, r3
 800154a:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80015e8 <OpenLoopTasks+0x110>
 800154e:	eddf 0a27 	vldr	s1, [pc, #156]	; 80015ec <OpenLoopTasks+0x114>
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f7fe ff60 	bl	800041a <gLPF>

	vectorControlData->Vdq[0] = 0.0f;
 800155a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
	vectorControlData->Vdq[1] = VamRef;//0.0f;
 8001562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	625a      	str	r2, [r3, #36]	; 0x24


	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	9309      	str	r3, [sp, #36]	; 0x24
 800156c:	466d      	mov	r5, sp
 800156e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	602b      	str	r3, [r5, #0]
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001584:	f000 f998 	bl	80018b8 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 8001588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158a:	9309      	str	r3, [sp, #36]	; 0x24
 800158c:	466d      	mov	r5, sp
 800158e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	602b      	str	r3, [r5, #0]
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a4:	f000 f9c0 	bl	8001928 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 80015a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ae:	3320      	adds	r3, #32
 80015b0:	490f      	ldr	r1, [pc, #60]	; (80015f0 <OpenLoopTasks+0x118>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	f000 fa26 	bl	8001a08 <dq2ab>
	ab2uvw(sVab, sVuvw);
 80015bc:	490d      	ldr	r1, [pc, #52]	; (80015f4 <OpenLoopTasks+0x11c>)
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <OpenLoopTasks+0x118>)
 80015c0:	f000 f8ae 	bl	8001720 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 80015c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <OpenLoopTasks+0x11c>)
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f000 fa5a 	bl	8001a88 <Vuvw2Duty>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015de:	b004      	add	sp, #16
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000184 	.word	0x20000184
 80015e8:	38d1b717 	.word	0x38d1b717
 80015ec:	42fb3333 	.word	0x42fb3333
 80015f0:	20000190 	.word	0x20000190
 80015f4:	20000198 	.word	0x20000198

080015f8 <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80015f8:	b084      	sub	sp, #16
 80015fa:	b5b0      	push	{r4, r5, r7, lr}
 80015fc:	b08a      	sub	sp, #40	; 0x28
 80015fe:	af0a      	add	r7, sp, #40	; 0x28
 8001600:	f107 0410 	add.w	r4, r7, #16
 8001604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	calcVdqFeedForword(sensData, vectorControlData);
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	9309      	str	r3, [sp, #36]	; 0x24
 800160c:	466d      	mov	r5, sp
 800160e:	f107 0420 	add.w	r4, r7, #32
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	602b      	str	r3, [r5, #0]
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001624:	f000 fbcc 	bl	8001dc0 <calcVdqFeedForword>
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8001628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162a:	ed93 7a08 	vldr	s14, [r3, #32]
 800162e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001630:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800163a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 800163e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001640:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001646:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001650:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800165c:	b004      	add	sp, #16
 800165e:	4770      	bx	lr

08001660 <uvw2ab>:

static inline void uvw2ab(float* uvw, float* ab){
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3304      	adds	r3, #4
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800167c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3308      	adds	r3, #8
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001690:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001714 <uvw2ab+0xb4>
 800169c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001718 <uvw2ab+0xb8>
 80016b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3308      	adds	r3, #8
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001718 <uvw2ab+0xb8>
 80016c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3304      	adds	r3, #4
 80016ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001714 <uvw2ab+0xb4>
 80016d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d6:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3304      	adds	r3, #4
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3308      	adds	r3, #8
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3308      	adds	r3, #8
 80016fc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800171c <uvw2ab+0xbc>
 8001700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001704:	edc3 7a00 	vstr	s15, [r3]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	3f5105ec 	.word	0x3f5105ec
 8001718:	3f5db3d7 	.word	0x3f5db3d7
 800171c:	3f13cd3a 	.word	0x3f13cd3a

08001720 <ab2uvw>:

static inline void ab2uvw(float* ab, float* uvw){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800179c <ab2uvw+0x7c>
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	eddf 6a12 	vldr	s13, [pc, #72]	; 80017a0 <ab2uvw+0x80>
 8001758:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3304      	adds	r3, #4
 8001764:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800179c <ab2uvw+0x7c>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb1 7a67 	vneg.f32	s14, s15
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	3304      	adds	r3, #4
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3308      	adds	r3, #8
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	edc3 7a00 	vstr	s15, [r3]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	3f5105ec 	.word	0x3f5105ec
 80017a0:	3f5db3d7 	.word	0x3f5db3d7

080017a4 <ab2dq>:

static inline void ab2dq(float theta, float* ab, float* dq){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80017ae:	60b8      	str	r0, [r7, #8]
 80017b0:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 80017b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80017b6:	f006 fe87 	bl	80084c8 <sinf>
 80017ba:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 80017be:	ed97 0a03 	vldr	s0, [r7, #12]
 80017c2:	f006 fe3d 	bl	8008440 <cosf>
 80017c6:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	ed93 7a00 	vldr	s14, [r3]
 80017d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3304      	adds	r3, #4
 80017dc:	edd3 6a00 	vldr	s13, [r3]
 80017e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eeb1 7a67 	vneg.f32	s14, s15
 80017fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3304      	adds	r3, #4
 8001808:	edd3 6a00 	vldr	s13, [r3]
 800180c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3304      	adds	r3, #4
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	edc3 7a00 	vstr	s15, [r3]
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <calcAmpFromVect>:

static inline float calcAmpFromVect(float* Vect){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3304      	adds	r3, #4
 8001844:	edd3 6a00 	vldr	s13, [r3]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3304      	adds	r3, #4
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001858:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 800185c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001860:	f006 fe9a 	bl	8008598 <sqrtf>
 8001864:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	ee07 3a90 	vmov	s15, r3
}
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <calcModFromVamp>:

static inline float calcModFromVamp(float Vamp, float twoDivVdc){
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001882:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001886:	ed97 7a01 	vldr	s14, [r7, #4]
 800188a:	edd7 7a00 	vldr	s15, [r7]
 800188e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001892:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018b4 <calcModFromVamp+0x3c>
 8001896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189a:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	ee07 3a90 	vmov	s15, r3
}
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	3f5105ec 	.word	0x3f5105ec

080018b8 <calcAmpPhaseModFromVoltVect>:

static inline void calcAmpPhaseModFromVoltVect(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80018b8:	b084      	sub	sp, #16
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
 80018be:	f107 0c08 	add.w	ip, r7, #8
 80018c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80018d2:	eef0 0a47 	vmov.f32	s1, s14
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	f006 fe3b 	bl	8008554 <atan2f>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 80018e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ea:	3320      	adds	r3, #32
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff9b 	bl	8001828 <calcAmpFromVect>
 80018f2:	eef0 7a40 	vmov.f32	s15, s0
 80018f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001902:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001906:	eef0 0a47 	vmov.f32	s1, s14
 800190a:	eeb0 0a67 	vmov.f32	s0, s15
 800190e:	f7ff ffb3 	bl	8001878 <calcModFromVamp>
 8001912:	eef0 7a40 	vmov.f32	s15, s0
 8001916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001918:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001924:	b004      	add	sp, #16
 8001926:	4770      	bx	lr

08001928 <limitVoltVectAmp>:

static inline void limitVoltVectAmp(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001928:	b084      	sub	sp, #16
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	f107 0c10 	add.w	ip, r7, #16
 8001934:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float VampLimit;

	if( vectorControlData->Mod > MODLIMIT ){
 8001938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800193a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800193e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80019fc <limitVoltVectAmp+0xd4>
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	dc00      	bgt.n	800194e <limitVoltVectAmp+0x26>
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
		vectorControlData->Mod = MODLIMIT;

	}
}
 800194c:	e04e      	b.n	80019ec <limitVoltVectAmp+0xc4>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 800194e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001952:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001a00 <limitVoltVectAmp+0xd8>
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80019fc <limitVoltVectAmp+0xd4>
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	edc7 7a01 	vstr	s15, [r7, #4]
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8001966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001968:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	f006 fd66 	bl	8008440 <cosf>
 8001974:	eeb0 7a40 	vmov.f32	s14, s0
 8001978:	edd7 7a01 	vldr	s15, [r7, #4]
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001982:	edc3 7a08 	vstr	s15, [r3, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 8001986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001988:	ed93 7a08 	vldr	s14, [r3, #32]
 800198c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001998:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 80019a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	f006 fd8a 	bl	80084c8 <sinf>
 80019b4:	eeb0 7a40 	vmov.f32	s14, s0
 80019b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 80019c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 80019e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <limitVoltVectAmp+0xdc>)
 80019ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019f6:	b004      	add	sp, #16
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	3f933333 	.word	0x3f933333
 8001a00:	3f1cc471 	.word	0x3f1cc471
 8001a04:	3f933333 	.word	0x3f933333

08001a08 <dq2ab>:

static inline void dq2ab(float theta, float* dq, float* ab){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a12:	60b8      	str	r0, [r7, #8]
 8001a14:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001a16:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a1a:	f006 fd55 	bl	80084c8 <sinf>
 8001a1e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001a22:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a26:	f006 fd0b 	bl	8008440 <cosf>
 8001a2a:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	ed93 7a00 	vldr	s14, [r3]
 8001a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	edd3 6a00 	vldr	s13, [r3]
 8001a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	ed93 7a00 	vldr	s14, [r3]
 8001a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3304      	adds	r3, #4
 8001a68:	edd3 6a00 	vldr	s13, [r3]
 8001a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3304      	adds	r3, #4
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <Vuvw2Duty>:

static inline void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a92:	60b8      	str	r0, [r7, #8]
 8001a94:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	d502      	bpl.n	8001ab8 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3308      	adds	r3, #8
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	d502      	bpl.n	8001ad4 <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3304      	adds	r3, #4
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	dd02      	ble.n	8001af6 <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3308      	adds	r3, #8
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	dd02      	ble.n	8001b12 <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	61bb      	str	r3, [r7, #24]

	vo = 0.0f;//(max + min) * 0.5f;
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	ed93 7a00 	vldr	s14, [r3]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3304      	adds	r3, #4
 8001b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3308      	adds	r3, #8
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3304      	adds	r3, #4
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3308      	adds	r3, #8
 8001b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001baa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bae:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb2:	f7fe fbe5 	bl	8000380 <gUpperLowerLimit>
 8001bb6:	eef0 7a40 	vmov.f32	s15, s0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1d1c      	adds	r4, r3, #4
 8001bcc:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001bd0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd8:	f7fe fbd2 	bl	8000380 <gUpperLowerLimit>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3308      	adds	r3, #8
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f103 0408 	add.w	r4, r3, #8
 8001bf2:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001bf6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	f7fe fbbf 	bl	8000380 <gUpperLowerLimit>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c42:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3308      	adds	r3, #8
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3308      	adds	r3, #8
 8001c5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c62:	edc3 7a00 	vstr	s15, [r3]

}
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
	...

08001c70 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001c70:	b084      	sub	sp, #16
 8001c72:	b5b0      	push	{r4, r5, r7, lr}
 8001c74:	b090      	sub	sp, #64	; 0x40
 8001c76:	af0a      	add	r7, sp, #40	; 0x28
 8001c78:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Kp;
	float Kig;
	float Kid;
	float wc;

	wc = 10.0f * TWOPI;
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <CurrentFbControl+0x140>)
 8001c82:	617b      	str	r3, [r7, #20]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
 8001c84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c88:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001db4 <CurrentFbControl+0x144>
 8001c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c90:	edc7 7a04 	vstr	s15, [r7, #16]
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
 8001c94:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001db8 <CurrentFbControl+0x148>
 8001c9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca0:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001dbc <CurrentFbControl+0x14c>
 8001ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca8:	edc7 7a03 	vstr	s15, [r7, #12]
	Kid = Kig;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	60bb      	str	r3, [r7, #8]

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	edc7 7a00 	vstr	s15, [r7]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ccc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd4:	edc7 7a01 	vstr	s15, [r7, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8001cd8:	ed97 7a00 	vldr	s14, [r7]
 8001cdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8001cea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d02:	edd7 6a00 	vldr	s13, [r7]
 8001d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d14:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001d1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d30:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8001d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d36:	9309      	str	r3, [sp, #36]	; 0x24
 8001d38:	466d      	mov	r5, sp
 8001d3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	602b      	str	r3, [r5, #0]
 8001d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d50:	f000 f836 	bl	8001dc0 <calcVdqFeedForword>

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001d54:	ed97 7a00 	vldr	s14, [r7]
 8001d58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d62:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d76:	edc3 7a08 	vstr	s15, [r3, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001d7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d88:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d92:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001daa:	b004      	add	sp, #16
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	427b53d2 	.word	0x427b53d2
 8001db4:	3949539b 	.word	0x3949539b
 8001db8:	3f75c28f 	.word	0x3f75c28f
 8001dbc:	461c4000 	.word	0x461c4000

08001dc0 <calcVdqFeedForword>:

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	b490      	push	{r4, r7}
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	f107 0408 	add.w	r4, r7, #8
 8001dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8001dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dd2:	eef1 7a67 	vneg.f32	s15, s15
 8001dd6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001e24 <calcVdqFeedForword+0x64>
 8001dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dde:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e28 <calcVdqFeedForword+0x68>
 8001de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8001df6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e00:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001e2c <calcVdqFeedForword+0x6c>
 8001e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e08:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001e30 <calcVdqFeedForword+0x70>
 8001e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e16:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc90      	pop	{r4, r7}
 8001e20:	b004      	add	sp, #16
 8001e22:	4770      	bx	lr
 8001e24:	39fba882 	.word	0x39fba882
 8001e28:	3ecccccd 	.word	0x3ecccccd
 8001e2c:	3949539b 	.word	0x3949539b
 8001e30:	3a870111 	.word	0x3a870111

08001e34 <FluxObserver>:


static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	ed87 0a01 	vstr	s0, [r7, #4]
	float angleErr;
	float Egd[2];
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001ee0 <FluxObserver+0xac>
 8001e52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e5e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001ee4 <FluxObserver+0xb0>
 8001e62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	edc7 7a05 	vstr	s15, [r7, #20]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3304      	adds	r3, #4
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001ee0 <FluxObserver+0xac>
 8001e8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001ee4 <FluxObserver+0xb0>
 8001e9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	edc7 7a06 	vstr	s15, [r7, #24]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001eb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb8:	eef1 7a67 	vneg.f32	s15, s15
 8001ebc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ec0:	eef0 0a47 	vmov.f32	s1, s14
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	f006 fb44 	bl	8008554 <atan2f>
 8001ecc:	ed87 0a07 	vstr	s0, [r7, #28]
	return angleErr;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	ee07 3a90 	vmov	s15, r3
}
 8001ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	3f75c28f 	.word	0x3f75c28f
 8001ee4:	3949539b 	.word	0x3949539b

08001ee8 <calcElectAngleEstimate>:

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001ee8:	b084      	sub	sp, #16
 8001eea:	b590      	push	{r4, r7, lr}
 8001eec:	b087      	sub	sp, #28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001efa:	4623      	mov	r3, r4
 8001efc:	71fb      	strb	r3, [r7, #7]
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f0a:	f103 0220 	add.w	r2, r3, #32
 8001f0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f12:	3310      	adds	r3, #16
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff8a 	bl	8001e34 <FluxObserver>
 8001f20:	eef0 7a40 	vmov.f32	s15, s0
 8001f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f28:	edc3 7a01 	vstr	s15, [r3, #4]


	if( flgInit == 0){
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d110      	bne.n	8001f54 <calcElectAngleEstimate+0x6c>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f38:	609a      	str	r2, [r3, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f40:	60da      	str	r2, [r3, #12]
		electAngleEstimateData->wc_PLL = 0.0f;
 8001f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	4a39      	ldr	r2, [pc, #228]	; (8002034 <calcElectAngleEstimate+0x14c>)
 8001f50:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001f52:	e067      	b.n	8002024 <calcElectAngleEstimate+0x13c>
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60bb      	str	r3, [r7, #8]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8002038 <calcElectAngleEstimate+0x150>
 8001f66:	eddf 0a35 	vldr	s1, [pc, #212]	; 800203c <calcElectAngleEstimate+0x154>
 8001f6a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002040 <calcElectAngleEstimate+0x158>
 8001f6e:	f7fe fa84 	bl	800047a <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f78:	601a      	str	r2, [r3, #0]
		Ts_PLL = CARRIERCYCLE;
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <calcElectAngleEstimate+0x15c>)
 8001f7c:	617b      	str	r3, [r7, #20]
		Kp_PLL = wc_PLL;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	613b      	str	r3, [r7, #16]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001f82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f86:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002048 <calcElectAngleEstimate+0x160>
 8001f8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	edc7 7a03 	vstr	s15, [r7, #12]
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fae:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fb2:	ed9f 6a26 	vldr	s12, [pc, #152]	; 800204c <calcElectAngleEstimate+0x164>
 8001fb6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc2:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fce:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd2:	f7fe f997 	bl	8000304 <gfWrapTheta>
 8001fd6:	eef0 7a40 	vmov.f32	s15, s0
 8001fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fde:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fe6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	f7fe f989 	bl	8000304 <gfWrapTheta>
 8001ff2:	eef0 7a40 	vmov.f32	s15, s0
 8001ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ffa:	edc3 7a01 	vstr	s15, [r3, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002002:	edd3 7a01 	vldr	s15, [r3, #4]
 8002006:	480b      	ldr	r0, [pc, #44]	; (8002034 <calcElectAngleEstimate+0x14c>)
 8002008:	ed97 1a03 	vldr	s2, [r7, #12]
 800200c:	edd7 0a04 	vldr	s1, [r7, #16]
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	f7fe f900 	bl	8000218 <cfPhaseLockedLoop>
 8002018:	eef0 7a40 	vmov.f32	s15, s0
 800201c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002020:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800202e:	b004      	add	sp, #16
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200001a4 	.word	0x200001a4
 8002038:	38d1b717 	.word	0x38d1b717
 800203c:	42480000 	.word	0x42480000
 8002040:	449d1463 	.word	0x449d1463
 8002044:	38d1b717 	.word	0x38d1b717
 8002048:	3e4ccccd 	.word	0x3e4ccccd
 800204c:	461c4000 	.word	0x461c4000

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002054:	f000 fde3 	bl	8002c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002058:	f000 f886 	bl	8002168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800205c:	f000 fb1a 	bl	8002694 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002060:	f000 f8ce 	bl	8002200 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002064:	f000 f998 	bl	8002398 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002068:	f000 fa56 	bl	8002518 <MX_TIM2_Init>
  MX_TIM3_Init();
 800206c:	f000 fabe 	bl	80025ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8002070:	4837      	ldr	r0, [pc, #220]	; (8002150 <main+0x100>)
 8002072:	f004 fd2b 	bl	8006acc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002076:	4837      	ldr	r0, [pc, #220]	; (8002154 <main+0x104>)
 8002078:	f002 faf8 	bl	800466c <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002082:	4835      	ldr	r0, [pc, #212]	; (8002158 <main+0x108>)
 8002084:	f003 fd08 	bl	8005a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208e:	4832      	ldr	r0, [pc, #200]	; (8002158 <main+0x108>)
 8002090:	f003 fd02 	bl	8005a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209a:	482f      	ldr	r0, [pc, #188]	; (8002158 <main+0x108>)
 800209c:	f003 fcfc 	bl	8005a98 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020a0:	2100      	movs	r1, #0
 80020a2:	482b      	ldr	r0, [pc, #172]	; (8002150 <main+0x100>)
 80020a4:	f004 fde2 	bl	8006c6c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80020a8:	2100      	movs	r1, #0
 80020aa:	4829      	ldr	r0, [pc, #164]	; (8002150 <main+0x100>)
 80020ac:	f005 ff76 	bl	8007f9c <HAL_TIMEx_PWMN_Start>
  //HAL_GPIO_WritePin(CH1_GPIO_Port, CH1_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(CH1N_GPIO_Port, CH1N_Pin, GPIO_PIN_RESET);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80020b0:	2104      	movs	r1, #4
 80020b2:	4827      	ldr	r0, [pc, #156]	; (8002150 <main+0x100>)
 80020b4:	f004 fdda 	bl	8006c6c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80020b8:	2104      	movs	r1, #4
 80020ba:	4825      	ldr	r0, [pc, #148]	; (8002150 <main+0x100>)
 80020bc:	f005 ff6e 	bl	8007f9c <HAL_TIMEx_PWMN_Start>
  //HAL_GPIO_WritePin(CH2_GPIO_Port, CH2_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(CH2N_GPIO_Port, CH2N_Pin, GPIO_PIN_RESET);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80020c0:	2108      	movs	r1, #8
 80020c2:	4823      	ldr	r0, [pc, #140]	; (8002150 <main+0x100>)
 80020c4:	f004 fdd2 	bl	8006c6c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80020c8:	2108      	movs	r1, #8
 80020ca:	4821      	ldr	r0, [pc, #132]	; (8002150 <main+0x100>)
 80020cc:	f005 ff66 	bl	8007f9c <HAL_TIMEx_PWMN_Start>
  //HAL_GPIO_WritePin(CH3_GPIO_Port, CH3_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(CH3N_GPIO_Port, CH3N_Pin, GPIO_PIN_RESET);

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <main+0x10c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <main+0x10c>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <main+0x10c>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <main+0x10c>)
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <main+0x10c>)
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <main+0x10c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1b      	ldr	r2, [pc, #108]	; (800215c <main+0x10c>)
 80020f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80020f4:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <main+0x10c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <main+0x10c>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <main+0x10c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <main+0x10c>)
 8002108:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800210c:	6013      	str	r3, [r2, #0]

  TIM1 -> ARR = COUNTERPERIOD;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <main+0x10c>)
 8002110:	f242 1233 	movw	r2, #8499	; 0x2133
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <main+0x10c>)
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <main+0x10c>)
 800211c:	3b28      	subs	r3, #40	; 0x28
 800211e:	6413      	str	r3, [r2, #64]	; 0x40


  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8002120:	480f      	ldr	r0, [pc, #60]	; (8002160 <main+0x110>)
 8002122:	f004 fcd3 	bl	8006acc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002126:	2100      	movs	r1, #0
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <main+0x110>)
 800212a:	f004 ff09 	bl	8006f40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800212e:	2104      	movs	r1, #4
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <main+0x110>)
 8002132:	f004 ff05 	bl	8006f40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002136:	2108      	movs	r1, #8
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <main+0x110>)
 800213a:	f004 ff01 	bl	8006f40 <HAL_TIM_IC_Start_IT>

  // Start TIM3 Input Capture
  HAL_TIM_Base_Start_IT(&htim3);
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <main+0x114>)
 8002140:	f004 fcc4 	bl	8006acc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_2);
 8002144:	2104      	movs	r1, #4
 8002146:	4807      	ldr	r0, [pc, #28]	; (8002164 <main+0x114>)
 8002148:	f004 fefa 	bl	8006f40 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800214c:	e7fe      	b.n	800214c <main+0xfc>
 800214e:	bf00      	nop
 8002150:	20000214 	.word	0x20000214
 8002154:	200001a8 	.word	0x200001a8
 8002158:	48000800 	.word	0x48000800
 800215c:	40012c00 	.word	0x40012c00
 8002160:	20000260 	.word	0x20000260
 8002164:	200002ac 	.word	0x200002ac

08002168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b094      	sub	sp, #80	; 0x50
 800216c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216e:	f107 0318 	add.w	r3, r7, #24
 8002172:	2238      	movs	r2, #56	; 0x38
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f006 f95a 	bl	8008430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800218a:	2000      	movs	r0, #0
 800218c:	f003 fcb6 	bl	8005afc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219e:	2302      	movs	r3, #2
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021a2:	2302      	movs	r3, #2
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80021a6:	2304      	movs	r3, #4
 80021a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80021aa:	2355      	movs	r3, #85	; 0x55
 80021ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ae:	2302      	movs	r3, #2
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021b2:	2302      	movs	r3, #2
 80021b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021b6:	2302      	movs	r3, #2
 80021b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fd40 	bl	8005c44 <HAL_RCC_OscConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021ca:	f000 fad3 	bl	8002774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ce:	230f      	movs	r3, #15
 80021d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d2:	2303      	movs	r3, #3
 80021d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2104      	movs	r1, #4
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 f83e 	bl	8006268 <HAL_RCC_ClockConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80021f2:	f000 fabf 	bl	8002774 <Error_Handler>
  }
}
 80021f6:	bf00      	nop
 80021f8:	3750      	adds	r7, #80	; 0x50
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b09a      	sub	sp, #104	; 0x68
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002206:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002212:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002216:	2220      	movs	r2, #32
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f006 f908 	bl	8008430 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002220:	463b      	mov	r3, r7
 8002222:	223c      	movs	r2, #60	; 0x3c
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f006 f902 	bl	8008430 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800222c:	4b55      	ldr	r3, [pc, #340]	; (8002384 <MX_ADC1_Init+0x184>)
 800222e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002232:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <MX_ADC1_Init+0x184>)
 8002236:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800223a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800223c:	4b51      	ldr	r3, [pc, #324]	; (8002384 <MX_ADC1_Init+0x184>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002242:	4b50      	ldr	r3, [pc, #320]	; (8002384 <MX_ADC1_Init+0x184>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002248:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <MX_ADC1_Init+0x184>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800224e:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <MX_ADC1_Init+0x184>)
 8002250:	2201      	movs	r2, #1
 8002252:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002254:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <MX_ADC1_Init+0x184>)
 8002256:	2204      	movs	r2, #4
 8002258:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <MX_ADC1_Init+0x184>)
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <MX_ADC1_Init+0x184>)
 8002262:	2200      	movs	r2, #0
 8002264:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <MX_ADC1_Init+0x184>)
 8002268:	2201      	movs	r2, #1
 800226a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <MX_ADC1_Init+0x184>)
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <MX_ADC1_Init+0x184>)
 8002276:	2200      	movs	r2, #0
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800227a:	4b42      	ldr	r3, [pc, #264]	; (8002384 <MX_ADC1_Init+0x184>)
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <MX_ADC1_Init+0x184>)
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002288:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <MX_ADC1_Init+0x184>)
 800228a:	2200      	movs	r2, #0
 800228c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <MX_ADC1_Init+0x184>)
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002296:	483b      	ldr	r0, [pc, #236]	; (8002384 <MX_ADC1_Init+0x184>)
 8002298:	f000 ff5e 	bl	8003158 <HAL_ADC_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80022a2:	f000 fa67 	bl	8002774 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4834      	ldr	r0, [pc, #208]	; (8002384 <MX_ADC1_Init+0x184>)
 80022b2:	f003 f83f 	bl	8005334 <HAL_ADCEx_MultiModeConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80022bc:	f000 fa5a 	bl	8002774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <MX_ADC1_Init+0x188>)
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022c4:	2306      	movs	r3, #6
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80022c8:	2300      	movs	r3, #0
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022cc:	237f      	movs	r3, #127	; 0x7f
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022d0:	2304      	movs	r3, #4
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022dc:	4619      	mov	r1, r3
 80022de:	4829      	ldr	r0, [pc, #164]	; (8002384 <MX_ADC1_Init+0x184>)
 80022e0:	f001 fb74 	bl	80039cc <HAL_ADC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80022ea:	f000 fa43 	bl	8002774 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <MX_ADC1_Init+0x18c>)
 80022f0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80022f2:	2309      	movs	r3, #9
 80022f4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80022fa:	237f      	movs	r3, #127	; 0x7f
 80022fc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80022fe:	2304      	movs	r3, #4
 8002300:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002306:	2303      	movs	r3, #3
 8002308:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800232a:	463b      	mov	r3, r7
 800232c:	4619      	mov	r1, r3
 800232e:	4815      	ldr	r0, [pc, #84]	; (8002384 <MX_ADC1_Init+0x184>)
 8002330:	f002 fad4 	bl	80048dc <HAL_ADCEx_InjectedConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800233a:	f000 fa1b 	bl	8002774 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_ADC1_Init+0x190>)
 8002340:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002342:	f240 130f 	movw	r3, #271	; 0x10f
 8002346:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <MX_ADC1_Init+0x184>)
 800234e:	f002 fac5 	bl	80048dc <HAL_ADCEx_InjectedConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8002358:	f000 fa0c 	bl	8002774 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <MX_ADC1_Init+0x194>)
 800235e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8002360:	f240 2315 	movw	r3, #533	; 0x215
 8002364:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <MX_ADC1_Init+0x184>)
 800236c:	f002 fab6 	bl	80048dc <HAL_ADCEx_InjectedConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8002376:	f000 f9fd 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3768      	adds	r7, #104	; 0x68
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200001a8 	.word	0x200001a8
 8002388:	21800100 	.word	0x21800100
 800238c:	04300002 	.word	0x04300002
 8002390:	1d500080 	.word	0x1d500080
 8002394:	19200040 	.word	0x19200040

08002398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b098      	sub	sp, #96	; 0x60
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2234      	movs	r2, #52	; 0x34
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f006 f833 	bl	8008430 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <MX_TIM1_Init+0x178>)
 80023cc:	4a51      	ldr	r2, [pc, #324]	; (8002514 <MX_TIM1_Init+0x17c>)
 80023ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <MX_TIM1_Init+0x178>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <MX_TIM1_Init+0x178>)
 80023d8:	2220      	movs	r2, #32
 80023da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80023dc:	4b4c      	ldr	r3, [pc, #304]	; (8002510 <MX_TIM1_Init+0x178>)
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <MX_TIM1_Init+0x178>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <MX_TIM1_Init+0x178>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <MX_TIM1_Init+0x178>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023f6:	4846      	ldr	r0, [pc, #280]	; (8002510 <MX_TIM1_Init+0x178>)
 80023f8:	f004 fbe0 	bl	8006bbc <HAL_TIM_PWM_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002402:	f000 f9b7 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002406:	2370      	movs	r3, #112	; 0x70
 8002408:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002412:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002416:	4619      	mov	r1, r3
 8002418:	483d      	ldr	r0, [pc, #244]	; (8002510 <MX_TIM1_Init+0x178>)
 800241a:	f005 fe81 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002424:	f000 f9a6 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002428:	2360      	movs	r3, #96	; 0x60
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002434:	2300      	movs	r3, #0
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002444:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4830      	ldr	r0, [pc, #192]	; (8002510 <MX_TIM1_Init+0x178>)
 800244e:	f004 ff63 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002458:	f000 f98c 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800245c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002460:	2204      	movs	r2, #4
 8002462:	4619      	mov	r1, r3
 8002464:	482a      	ldr	r0, [pc, #168]	; (8002510 <MX_TIM1_Init+0x178>)
 8002466:	f004 ff57 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002470:	f000 f980 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002474:	2302      	movs	r3, #2
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002478:	2308      	movs	r3, #8
 800247a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800247c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002480:	2208      	movs	r2, #8
 8002482:	4619      	mov	r1, r3
 8002484:	4822      	ldr	r0, [pc, #136]	; (8002510 <MX_TIM1_Init+0x178>)
 8002486:	f004 ff47 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002490:	f000 f970 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002494:	2300      	movs	r3, #0
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002498:	2300      	movs	r3, #0
 800249a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800249c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024a0:	220c      	movs	r2, #12
 80024a2:	4619      	mov	r1, r3
 80024a4:	481a      	ldr	r0, [pc, #104]	; (8002510 <MX_TIM1_Init+0x178>)
 80024a6:	f004 ff37 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80024b0:	f000 f960 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4807      	ldr	r0, [pc, #28]	; (8002510 <MX_TIM1_Init+0x178>)
 80024f2:	f005 feab 	bl	800824c <HAL_TIMEx_ConfigBreakDeadTime>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80024fc:	f000 f93a 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002500:	4803      	ldr	r0, [pc, #12]	; (8002510 <MX_TIM1_Init+0x178>)
 8002502:	f000 fa89 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 8002506:	bf00      	nop
 8002508:	3760      	adds	r7, #96	; 0x60
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000214 	.word	0x20000214
 8002514:	40012c00 	.word	0x40012c00

08002518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <MX_TIM2_Init+0xcc>)
 8002538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <MX_TIM2_Init+0xcc>)
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <MX_TIM2_Init+0xcc>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.29496729E8;
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <MX_TIM2_Init+0xcc>)
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <MX_TIM2_Init+0xd0>)
 800254e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <MX_TIM2_Init+0xcc>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <MX_TIM2_Init+0xcc>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800255c:	4821      	ldr	r0, [pc, #132]	; (80025e4 <MX_TIM2_Init+0xcc>)
 800255e:	f004 fc97 	bl	8006e90 <HAL_TIM_IC_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002568:	f000 f904 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	481a      	ldr	r0, [pc, #104]	; (80025e4 <MX_TIM2_Init+0xcc>)
 800257c:	f005 fdd0 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002586:	f000 f8f5 	bl	8002774 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800258e:	2301      	movs	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 8002596:	230a      	movs	r3, #10
 8002598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <MX_TIM2_Init+0xcc>)
 80025a2:	f004 fe1d 	bl	80071e0 <HAL_TIM_IC_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80025ac:	f000 f8e2 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2204      	movs	r2, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	480b      	ldr	r0, [pc, #44]	; (80025e4 <MX_TIM2_Init+0xcc>)
 80025b8:	f004 fe12 	bl	80071e0 <HAL_TIM_IC_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80025c2:	f000 f8d7 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2208      	movs	r2, #8
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_TIM2_Init+0xcc>)
 80025ce:	f004 fe07 	bl	80071e0 <HAL_TIM_IC_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80025d8:	f000 f8cc 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000260 	.word	0x20000260
 80025e8:	19999999 	.word	0x19999999

080025ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <MX_TIM3_Init+0xa0>)
 800260c:	4a20      	ldr	r2, [pc, #128]	; (8002690 <MX_TIM3_Init+0xa4>)
 800260e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170;
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <MX_TIM3_Init+0xa0>)
 8002612:	22aa      	movs	r2, #170	; 0xaa
 8002614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <MX_TIM3_Init+0xa0>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MX_TIM3_Init+0xa0>)
 800261e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <MX_TIM3_Init+0xa0>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <MX_TIM3_Init+0xa0>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002630:	4816      	ldr	r0, [pc, #88]	; (800268c <MX_TIM3_Init+0xa0>)
 8002632:	f004 fc2d 	bl	8006e90 <HAL_TIM_IC_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800263c:	f000 f89a 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	480f      	ldr	r0, [pc, #60]	; (800268c <MX_TIM3_Init+0xa0>)
 8002650:	f005 fd66 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800265a:	f000 f88b 	bl	8002774 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800265e:	230a      	movs	r3, #10
 8002660:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002662:	2301      	movs	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 800266a:	230a      	movs	r3, #10
 800266c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2204      	movs	r2, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_TIM3_Init+0xa0>)
 8002676:	f004 fdb3 	bl	80071e0 <HAL_TIM_IC_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002680:	f000 f878 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200002ac 	.word	0x200002ac
 8002690:	40000400 	.word	0x40000400

08002694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b6:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a28      	ldr	r2, [pc, #160]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a22      	ldr	r2, [pc, #136]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <MX_GPIO_Init+0xd4>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_GPIO_Init+0xd4>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002710:	4816      	ldr	r0, [pc, #88]	; (800276c <MX_GPIO_Init+0xd8>)
 8002712:	f003 f9c1 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800271c:	4814      	ldr	r0, [pc, #80]	; (8002770 <MX_GPIO_Init+0xdc>)
 800271e:	f003 f9bb 	bl	8005a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8002722:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <MX_GPIO_Init+0xd8>)
 800273c:	f003 f812 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002740:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_GPIO_Init+0xdc>)
 800275a:	f003 f803 	bl	8005764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	; 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	48000400 	.word	0x48000400
 8002770:	48000800 	.word	0x48000800

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800277c:	e7fe      	b.n	800277c <Error_Handler+0x8>
	...

08002780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_MspInit+0x44>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_MspInit+0x44>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6613      	str	r3, [r2, #96]	; 0x60
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_MspInit+0x44>)
 8002794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_MspInit+0x44>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_MspInit+0x44>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_MspInit+0x44>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0a0      	sub	sp, #128	; 0x80
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e0:	f107 0318 	add.w	r3, r7, #24
 80027e4:	2254      	movs	r2, #84	; 0x54
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 fe21 	bl	8008430 <memset>
  if(hadc->Instance==ADC1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f6:	d154      	bne.n	80028a2 <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80027f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80027fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002802:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002804:	f107 0318 	add.w	r3, r7, #24
 8002808:	4618      	mov	r0, r3
 800280a:	f003 ff11 	bl	8006630 <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002814:	f7ff ffae 	bl	8002774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 800281e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_ADC_MspInit+0xe4>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002860:	2307      	movs	r3, #7
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002864:	2303      	movs	r3, #3
 8002866:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002870:	4619      	mov	r1, r3
 8002872:	480f      	ldr	r0, [pc, #60]	; (80028b0 <HAL_ADC_MspInit+0xe8>)
 8002874:	f002 ff76 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002878:	2301      	movs	r3, #1
 800287a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287c:	2303      	movs	r3, #3
 800287e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002888:	4619      	mov	r1, r3
 800288a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288e:	f002 ff69 	bl	8005764 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2101      	movs	r1, #1
 8002896:	2012      	movs	r0, #18
 8002898:	f002 ff2f 	bl	80056fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800289c:	2012      	movs	r0, #18
 800289e:	f002 ff46 	bl	800572e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3780      	adds	r7, #128	; 0x80
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	48000800 	.word	0x48000800

080028b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_TIM_PWM_MspInit+0x38>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10b      	bne.n	80028de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80028cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d0:	6613      	str	r3, [r2, #96]	; 0x60
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d147      	bne.n	80029a6 <HAL_TIM_IC_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6593      	str	r3, [r2, #88]	; 0x58
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	4a35      	ldr	r2, [pc, #212]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293a:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 800295e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002970:	2301      	movs	r3, #1
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4824      	ldr	r0, [pc, #144]	; (8002a0c <HAL_TIM_IC_MspInit+0x118>)
 800297c:	f002 fef2 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 8002980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002992:	2301      	movs	r3, #1
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a0:	f002 fee0 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029a4:	e02c      	b.n	8002a00 <HAL_TIM_IC_MspInit+0x10c>
  else if(htim_ic->Instance==TIM3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <HAL_TIM_IC_MspInit+0x11c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d127      	bne.n	8002a00 <HAL_TIM_IC_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_TIM_IC_MspInit+0x114>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Propo_Pin;
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Propo_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4806      	ldr	r0, [pc, #24]	; (8002a14 <HAL_TIM_IC_MspInit+0x120>)
 80029fc:	f002 feb2 	bl	8005764 <HAL_GPIO_Init>
}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	48000400 	.word	0x48000400
 8002a10:	40000400 	.word	0x40000400
 8002a14:	48000800 	.word	0x48000800

08002a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <HAL_TIM_MspPostInit+0xf8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d166      	bne.n	8002b08 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a46:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_TIM_MspPostInit+0xfc>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a82:	2308      	movs	r3, #8
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a92:	2302      	movs	r3, #2
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481e      	ldr	r0, [pc, #120]	; (8002b18 <HAL_TIM_MspPostInit+0x100>)
 8002a9e:	f002 fe61 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002aa2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ab4:	2306      	movs	r3, #6
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f002 fe4f 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480e      	ldr	r0, [pc, #56]	; (8002b1c <HAL_TIM_MspPostInit+0x104>)
 8002ae2:	f002 fe3f 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002af8:	230c      	movs	r3, #12
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4806      	ldr	r0, [pc, #24]	; (8002b1c <HAL_TIM_MspPostInit+0x104>)
 8002b04:	f002 fe2e 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	48000400 	.word	0x48000400

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6c:	f000 f8aa 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b78:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <ADC1_2_IRQHandler+0x2c>)
 8002b7a:	f000 fca9 	bl	80034d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b82:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <ADC1_2_IRQHandler+0x30>)
 8002b84:	f002 ffa0 	bl	8005ac8 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence_Low_Freq();
 8002b88:	f7fd fcb8 	bl	80004fc <Sequence_Low_Freq>
	Sequence_High_Freq();
 8002b8c:	f7fd fd66 	bl	800065c <Sequence_High_Freq>


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b94:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <ADC1_2_IRQHandler+0x30>)
 8002b96:	f002 ff97 	bl	8005ac8 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001a8 	.word	0x200001a8
 8002ba4:	48000400 	.word	0x48000400

08002ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bd0:	f7ff ffea 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <LoopForever+0xe>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bec:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <LoopForever+0x16>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f005 fbe7 	bl	80083cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bfe:	f7ff fa27 	bl	8002050 <main>

08002c02 <LoopForever>:

LoopForever:
    b LoopForever
 8002c02:	e7fe      	b.n	8002c02 <LoopForever>
  ldr   r0, =_estack
 8002c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c10:	08009834 	.word	0x08009834
  ldr r2, =_sbss
 8002c14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c18:	200002fc 	.word	0x200002fc

08002c1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC3_IRQHandler>

08002c1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f002 fd5b 	bl	80056e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c2e:	200f      	movs	r0, #15
 8002c30:	f000 f80e 	bl	8002c50 <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	71fb      	strb	r3, [r7, #7]
 8002c3e:	e001      	b.n	8002c44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c40:	f7ff fd9e 	bl	8002780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c44:	79fb      	ldrb	r3, [r7, #7]

}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_InitTick+0x68>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_InitTick+0x6c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_InitTick+0x68>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fd66 	bl	800574a <HAL_SYSTICK_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10f      	bne.n	8002ca4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	d809      	bhi.n	8002c9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	f002 fd32 	bl	80056fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_InitTick+0x70>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e004      	b.n	8002cae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	200002f8 	.word	0x200002f8
 8002ce4:	20000008 	.word	0x20000008

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_GetTick+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	200002f8 	.word	0x200002f8

08002d00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <LL_ADC_SetOffset+0x44>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	03fff000 	.word	0x03fff000

08002db0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3360      	adds	r3, #96	; 0x60
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3360      	adds	r3, #96	; 0x60
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3360      	adds	r3, #96	; 0x60
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	615a      	str	r2, [r3, #20]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3330      	adds	r3, #48	; 0x30
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	211f      	movs	r1, #31
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 011f 	and.w	r1, r3, #31
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3314      	adds	r3, #20
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0e5b      	lsrs	r3, r3, #25
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	4413      	add	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0d1b      	lsrs	r3, r3, #20
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2107      	movs	r1, #7
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0d1b      	lsrs	r3, r3, #20
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	401a      	ands	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0318 	and.w	r3, r3, #24
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fc4:	40d9      	lsrs	r1, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	400b      	ands	r3, r1
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	0007ffff 	.word	0x0007ffff

08002fe8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6093      	str	r3, [r2, #8]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d101      	bne.n	800305e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800307c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a8:	d101      	bne.n	80030ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <LL_ADC_IsEnabled+0x18>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LL_ADC_IsEnabled+0x1a>
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d101      	bne.n	8003122 <LL_ADC_REG_IsConversionOngoing+0x18>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b08      	cmp	r3, #8
 8003142:	d101      	bne.n	8003148 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1a9      	b.n	80034c6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fb21 	bl	80027c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff53 	bl	8003044 <LL_ADC_IsDeepPowerDownEnabled>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff39 	bl	8003020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff6e 	bl	8003094 <LL_ADC_IsInternalRegulatorEnabled>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d115      	bne.n	80031ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff52 	bl	800306c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c8:	4b9c      	ldr	r3, [pc, #624]	; (800343c <HAL_ADC_Init+0x2e4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	4a9c      	ldr	r2, [pc, #624]	; (8003440 <HAL_ADC_Init+0x2e8>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ff50 	bl	8003094 <LL_ADC_IsInternalRegulatorEnabled>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff75 	bl	800310a <LL_ADC_REG_IsConversionOngoing>
 8003220:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 8142 	bne.w	80034b4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 813e 	bne.w	80034b4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003240:	f043 0202 	orr.w	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff49 	bl	80030e4 <LL_ADC_IsEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d141      	bne.n	80032dc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003260:	d004      	beq.n	800326c <HAL_ADC_Init+0x114>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a77      	ldr	r2, [pc, #476]	; (8003444 <HAL_ADC_Init+0x2ec>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10f      	bne.n	800328c <HAL_ADC_Init+0x134>
 800326c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003270:	f7ff ff38 	bl	80030e4 <LL_ADC_IsEnabled>
 8003274:	4604      	mov	r4, r0
 8003276:	4873      	ldr	r0, [pc, #460]	; (8003444 <HAL_ADC_Init+0x2ec>)
 8003278:	f7ff ff34 	bl	80030e4 <LL_ADC_IsEnabled>
 800327c:	4603      	mov	r3, r0
 800327e:	4323      	orrs	r3, r4
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e012      	b.n	80032b2 <HAL_ADC_Init+0x15a>
 800328c:	486e      	ldr	r0, [pc, #440]	; (8003448 <HAL_ADC_Init+0x2f0>)
 800328e:	f7ff ff29 	bl	80030e4 <LL_ADC_IsEnabled>
 8003292:	4604      	mov	r4, r0
 8003294:	486d      	ldr	r0, [pc, #436]	; (800344c <HAL_ADC_Init+0x2f4>)
 8003296:	f7ff ff25 	bl	80030e4 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	431c      	orrs	r4, r3
 800329e:	486c      	ldr	r0, [pc, #432]	; (8003450 <HAL_ADC_Init+0x2f8>)
 80032a0:	f7ff ff20 	bl	80030e4 <LL_ADC_IsEnabled>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4323      	orrs	r3, r4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032be:	d004      	beq.n	80032ca <HAL_ADC_Init+0x172>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5f      	ldr	r2, [pc, #380]	; (8003444 <HAL_ADC_Init+0x2ec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Init+0x176>
 80032ca:	4a62      	ldr	r2, [pc, #392]	; (8003454 <HAL_ADC_Init+0x2fc>)
 80032cc:	e000      	b.n	80032d0 <HAL_ADC_Init+0x178>
 80032ce:	4a62      	ldr	r2, [pc, #392]	; (8003458 <HAL_ADC_Init+0x300>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7ff fd12 	bl	8002d00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7f5b      	ldrb	r3, [r3, #29]
 80032e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	045b      	lsls	r3, r3, #17
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_ADC_Init+0x304>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	69b9      	ldr	r1, [r7, #24]
 8003344:	430b      	orrs	r3, r1
 8003346:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fee4 	bl	8003130 <LL_ADC_INJ_IsConversionOngoing>
 8003368:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d17f      	bne.n	8003470 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d17c      	bne.n	8003470 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800337a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003382:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003392:	f023 0302 	bic.w	r3, r3, #2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	430b      	orrs	r3, r1
 800339e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d017      	beq.n	80033d8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6911      	ldr	r1, [r2, #16]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80033d6:	e013      	b.n	8003400 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003406:	2b01      	cmp	r3, #1
 8003408:	d12a      	bne.n	8003460 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800342c:	430a      	orrs	r2, r1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0201 	orr.w	r2, r2, #1
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e019      	b.n	8003470 <HAL_ADC_Init+0x318>
 800343c:	20000000 	.word	0x20000000
 8003440:	053e2d63 	.word	0x053e2d63
 8003444:	50000100 	.word	0x50000100
 8003448:	50000400 	.word	0x50000400
 800344c:	50000500 	.word	0x50000500
 8003450:	50000600 	.word	0x50000600
 8003454:	50000300 	.word	0x50000300
 8003458:	50000700 	.word	0x50000700
 800345c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f023 010f 	bic.w	r1, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	1e5a      	subs	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
 8003490:	e007      	b.n	80034a2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020f 	bic.w	r2, r2, #15
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034b2:	e007      	b.n	80034c4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f043 0210 	orr.w	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}
 80034ce:	bf00      	nop

080034d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f4:	d004      	beq.n	8003500 <HAL_ADC_IRQHandler+0x30>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a8e      	ldr	r2, [pc, #568]	; (8003734 <HAL_ADC_IRQHandler+0x264>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_IRQHandler+0x34>
 8003500:	4b8d      	ldr	r3, [pc, #564]	; (8003738 <HAL_ADC_IRQHandler+0x268>)
 8003502:	e000      	b.n	8003506 <HAL_ADC_IRQHandler+0x36>
 8003504:	4b8d      	ldr	r3, [pc, #564]	; (800373c <HAL_ADC_IRQHandler+0x26c>)
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fd6e 	bl	8002fe8 <LL_ADC_GetMultimode>
 800350c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d017      	beq.n	8003548 <HAL_ADC_IRQHandler+0x78>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 f9c4 	bl	80048c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2202      	movs	r2, #2
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_ADC_IRQHandler+0x8c>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8094 	beq.w	8003690 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 808e 	beq.w	8003690 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fc87 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d072      	beq.n	8003682 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a64      	ldr	r2, [pc, #400]	; (8003734 <HAL_ADC_IRQHandler+0x264>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_ADC_IRQHandler+0xea>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_ADC_IRQHandler+0x270>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d002      	beq.n	80035b6 <HAL_ADC_IRQHandler+0xe6>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e003      	b.n	80035be <HAL_ADC_IRQHandler+0xee>
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_ADC_IRQHandler+0x274>)
 80035b8:	e001      	b.n	80035be <HAL_ADC_IRQHandler+0xee>
 80035ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d008      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d002      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	d104      	bne.n	80035e2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	e014      	b.n	800360c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_ADC_IRQHandler+0x264>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_ADC_IRQHandler+0x130>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a53      	ldr	r2, [pc, #332]	; (8003740 <HAL_ADC_IRQHandler+0x270>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d002      	beq.n	80035fc <HAL_ADC_IRQHandler+0x12c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e003      	b.n	8003604 <HAL_ADC_IRQHandler+0x134>
 80035fc:	4b51      	ldr	r3, [pc, #324]	; (8003744 <HAL_ADC_IRQHandler+0x274>)
 80035fe:	e001      	b.n	8003604 <HAL_ADC_IRQHandler+0x134>
 8003600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003604:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d135      	bne.n	8003682 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d12e      	bne.n	8003682 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fd6e 	bl	800310a <LL_ADC_REG_IsConversionOngoing>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11a      	bne.n	800366a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 020c 	bic.w	r2, r2, #12
 8003642:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d112      	bne.n	8003682 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	; 0x5c
 8003668:	e00b      	b.n	8003682 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f984 	bl	8003990 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	220c      	movs	r2, #12
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_ADC_IRQHandler+0x1d4>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80b3 	beq.w	8003816 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80ad 	beq.w	8003816 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fc22 	bl	8002f22 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036de:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fbdd 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036ea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_ADC_IRQHandler+0x264>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_ADC_IRQHandler+0x23a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_ADC_IRQHandler+0x270>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d002      	beq.n	8003706 <HAL_ADC_IRQHandler+0x236>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	e003      	b.n	800370e <HAL_ADC_IRQHandler+0x23e>
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_ADC_IRQHandler+0x274>)
 8003708:	e001      	b.n	800370e <HAL_ADC_IRQHandler+0x23e>
 800370a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	4293      	cmp	r3, r2
 8003714:	d008      	beq.n	8003728 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b06      	cmp	r3, #6
 8003720:	d002      	beq.n	8003728 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b07      	cmp	r3, #7
 8003726:	d10f      	bne.n	8003748 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	e01f      	b.n	8003772 <HAL_ADC_IRQHandler+0x2a2>
 8003732:	bf00      	nop
 8003734:	50000100 	.word	0x50000100
 8003738:	50000300 	.word	0x50000300
 800373c:	50000700 	.word	0x50000700
 8003740:	50000500 	.word	0x50000500
 8003744:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a8b      	ldr	r2, [pc, #556]	; (800397c <HAL_ADC_IRQHandler+0x4ac>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_ADC_IRQHandler+0x296>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a8a      	ldr	r2, [pc, #552]	; (8003980 <HAL_ADC_IRQHandler+0x4b0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d002      	beq.n	8003762 <HAL_ADC_IRQHandler+0x292>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	e003      	b.n	800376a <HAL_ADC_IRQHandler+0x29a>
 8003762:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_ADC_IRQHandler+0x4b4>)
 8003764:	e001      	b.n	800376a <HAL_ADC_IRQHandler+0x29a>
 8003766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800376a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d047      	beq.n	8003808 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_ADC_IRQHandler+0x2c2>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d03f      	beq.n	8003808 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800378e:	2b00      	cmp	r3, #0
 8003790:	d13a      	bne.n	8003808 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d133      	bne.n	8003808 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d12e      	bne.n	8003808 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fcbe 	bl	8003130 <LL_ADC_INJ_IsConversionOngoing>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d11a      	bne.n	80037f0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d112      	bne.n	8003808 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ee:	e00b      	b.n	8003808 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	f043 0210 	orr.w	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f001 f835 	bl	8004878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2260      	movs	r2, #96	; 0x60
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d011      	beq.n	8003844 <HAL_ADC_IRQHandler+0x374>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8b4 	bl	80039a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <HAL_ADC_IRQHandler+0x3a4>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 f81b 	bl	80048a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <HAL_ADC_IRQHandler+0x3d4>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 f80d 	bl	80048b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d043      	beq.n	8003936 <HAL_ADC_IRQHandler+0x466>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d03e      	beq.n	8003936 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80038c0:	2301      	movs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	e021      	b.n	800390a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d4:	d004      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x410>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a28      	ldr	r2, [pc, #160]	; (800397c <HAL_ADC_IRQHandler+0x4ac>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_IRQHandler+0x414>
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_ADC_IRQHandler+0x4b8>)
 80038e2:	e000      	b.n	80038e6 <HAL_ADC_IRQHandler+0x416>
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_ADC_IRQHandler+0x4bc>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fb8c 	bl	8003004 <LL_ADC_GetMultiDMATransfer>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80038f2:	2301      	movs	r3, #1
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	e008      	b.n	800390a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003906:	2301      	movs	r3, #1
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10e      	bne.n	800392e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	f043 0202 	orr.w	r2, r3, #2
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f845 	bl	80039b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2210      	movs	r2, #16
 8003934:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d018      	beq.n	8003972 <HAL_ADC_IRQHandler+0x4a2>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d013      	beq.n	8003972 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395a:	f043 0208 	orr.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 ff8d 	bl	800488c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003972:	bf00      	nop
 8003974:	3728      	adds	r7, #40	; 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	50000100 	.word	0x50000100
 8003980:	50000500 	.word	0x50000500
 8003984:	50000400 	.word	0x50000400
 8003988:	50000300 	.word	0x50000300
 800398c:	50000700 	.word	0x50000700

08003990 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b0b6      	sub	sp, #216	; 0xd8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x24>
 80039ea:	2302      	movs	r3, #2
 80039ec:	f000 bc13 	b.w	8004216 <HAL_ADC_ConfigChannel+0x84a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fb84 	bl	800310a <LL_ADC_REG_IsConversionOngoing>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 83f3 	bne.w	80041f0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7ff fa57 	bl	8002eca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fb72 	bl	800310a <LL_ADC_REG_IsConversionOngoing>
 8003a26:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fb7e 	bl	8003130 <LL_ADC_INJ_IsConversionOngoing>
 8003a34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 81d9 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 81d4 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a54:	d10f      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4619      	mov	r1, r3
 8003a62:	f7ff fa71 	bl	8002f48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fa05 	bl	8002e7e <LL_ADC_SetSamplingTimeCommonConfig>
 8003a74:	e00e      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f7ff fa60 	bl	8002f48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f9f5 	bl	8002e7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d022      	beq.n	8003afc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6919      	ldr	r1, [r3, #16]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ac6:	f7ff f94f 	bl	8002d68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6919      	ldr	r1, [r3, #16]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7ff f99b 	bl	8002e12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d102      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x126>
 8003aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af0:	e000      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x128>
 8003af2:	2300      	movs	r3, #0
 8003af4:	461a      	mov	r2, r3
 8003af6:	f7ff f9a7 	bl	8002e48 <LL_ADC_SetOffsetSaturation>
 8003afa:	e17b      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f954 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x15c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f949 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	f003 021f 	and.w	r2, r3, #31
 8003b26:	e01e      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x19a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff f93e 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003b56:	2320      	movs	r3, #32
 8003b58:	e004      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x1b2>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	0e9b      	lsrs	r3, r3, #26
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	e018      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e4>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e004      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d106      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f90d 	bl	8002ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff f8f1 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x222>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff f8e6 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	e01e      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x260>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f8db 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	e004      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x278>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	e018      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x2aa>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e004      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d106      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f8aa 	bl	8002ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f88e 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x2e8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff f883 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	0e9b      	lsrs	r3, r3, #26
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	e01e      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x326>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff f878 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e004      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x33e>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0e9b      	lsrs	r3, r3, #26
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	e016      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x36c>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	e004      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d106      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff f849 	bl	8002ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2103      	movs	r1, #3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff f82d 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x3aa>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2103      	movs	r1, #3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f822 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	0e9b      	lsrs	r3, r3, #26
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	e017      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x3da>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2103      	movs	r1, #3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff f817 	bl	8002db0 <LL_ADC_GetOffsetChannel>
 8003d82:	4603      	mov	r3, r0
 8003d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003d98:	2320      	movs	r3, #32
 8003d9a:	e003      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d105      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x3f2>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	e011      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x416>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e003      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d106      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2103      	movs	r1, #3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fff4 	bl	8002ddc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f973 	bl	80030e4 <LL_ADC_IsEnabled>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 813d 	bne.w	8004080 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f7ff f8c4 	bl	8002fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4aa2      	ldr	r2, [pc, #648]	; (80040a8 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f040 812e 	bne.w	8004080 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x480>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	0e9b      	lsrs	r3, r3, #26
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2b09      	cmp	r3, #9
 8003e42:	bf94      	ite	ls
 8003e44:	2301      	movls	r3, #1
 8003e46:	2300      	movhi	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e019      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x4b4>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e64:	2320      	movs	r3, #32
 8003e66:	e003      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2b09      	cmp	r3, #9
 8003e78:	bf94      	ite	ls
 8003e7a:	2301      	movls	r3, #1
 8003e7c:	2300      	movhi	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d079      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x4d4>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e9b      	lsrs	r3, r3, #26
 8003e96:	3301      	adds	r3, #1
 8003e98:	069b      	lsls	r3, r3, #26
 8003e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e9e:	e015      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x500>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	e003      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x520>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	e017      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x550>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x576>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	051b      	lsls	r3, r3, #20
 8003f40:	e018      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x5a8>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003f5a:	2320      	movs	r3, #32
 8003f5c:	e003      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	fab3 f383 	clz	r3, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	f003 021f 	and.w	r2, r3, #31
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f74:	430b      	orrs	r3, r1
 8003f76:	e07e      	b.n	8004076 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x5c8>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	0e9b      	lsrs	r3, r3, #26
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	069b      	lsls	r3, r3, #26
 8003f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f92:	e015      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x5f4>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003fac:	2320      	movs	r3, #32
 8003fae:	e003      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	069b      	lsls	r3, r3, #26
 8003fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x614>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	e017      	b.n	8004010 <HAL_ADC_ConfigChannel+0x644>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	61fb      	str	r3, [r7, #28]
  return result;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e003      	b.n	8004004 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	ea42 0103 	orr.w	r1, r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_ADC_ConfigChannel+0x670>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0e9b      	lsrs	r3, r3, #26
 8004026:	3301      	adds	r3, #1
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	3b1e      	subs	r3, #30
 8004034:	051b      	lsls	r3, r3, #20
 8004036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800403a:	e01b      	b.n	8004074 <HAL_ADC_ConfigChannel+0x6a8>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	613b      	str	r3, [r7, #16]
  return result;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e003      	b.n	8004060 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f003 021f 	and.w	r2, r3, #31
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	3b1e      	subs	r3, #30
 800406e:	051b      	lsls	r3, r3, #20
 8004070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004074:	430b      	orrs	r3, r1
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	4619      	mov	r1, r3
 800407c:	f7fe ff64 	bl	8002f48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_ADC_ConfigChannel+0x6e0>)
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80be 	beq.w	800420a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004096:	d004      	beq.n	80040a2 <HAL_ADC_ConfigChannel+0x6d6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x6ec>
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80040a4:	e009      	b.n	80040ba <HAL_ADC_ConfigChannel+0x6ee>
 80040a6:	bf00      	nop
 80040a8:	407f0000 	.word	0x407f0000
 80040ac:	80080000 	.word	0x80080000
 80040b0:	50000100 	.word	0x50000100
 80040b4:	50000300 	.word	0x50000300
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_ADC_ConfigChannel+0x854>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fe46 	bl	8002d4c <LL_ADC_GetCommonPathInternalCh>
 80040c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a56      	ldr	r2, [pc, #344]	; (8004224 <HAL_ADC_ConfigChannel+0x858>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x70c>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a55      	ldr	r2, [pc, #340]	; (8004228 <HAL_ADC_ConfigChannel+0x85c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d13a      	bne.n	800414e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d134      	bne.n	800414e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ec:	d005      	beq.n	80040fa <HAL_ADC_ConfigChannel+0x72e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a4e      	ldr	r2, [pc, #312]	; (800422c <HAL_ADC_ConfigChannel+0x860>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	f040 8085 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004102:	d004      	beq.n	800410e <HAL_ADC_ConfigChannel+0x742>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a49      	ldr	r2, [pc, #292]	; (8004230 <HAL_ADC_ConfigChannel+0x864>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x746>
 800410e:	4a49      	ldr	r2, [pc, #292]	; (8004234 <HAL_ADC_ConfigChannel+0x868>)
 8004110:	e000      	b.n	8004114 <HAL_ADC_ConfigChannel+0x748>
 8004112:	4a43      	ldr	r2, [pc, #268]	; (8004220 <HAL_ADC_ConfigChannel+0x854>)
 8004114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004118:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7fe fe01 	bl	8002d26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004124:	4b44      	ldr	r3, [pc, #272]	; (8004238 <HAL_ADC_ConfigChannel+0x86c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	4a44      	ldr	r2, [pc, #272]	; (800423c <HAL_ADC_ConfigChannel+0x870>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	099b      	lsrs	r3, r3, #6
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800413e:	e002      	b.n	8004146 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b01      	subs	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f9      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800414c:	e05a      	b.n	8004204 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a3b      	ldr	r2, [pc, #236]	; (8004240 <HAL_ADC_ConfigChannel+0x874>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d125      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11f      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_ADC_ConfigChannel+0x864>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d104      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x7ac>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a34      	ldr	r2, [pc, #208]	; (8004244 <HAL_ADC_ConfigChannel+0x878>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d047      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004180:	d004      	beq.n	800418c <HAL_ADC_ConfigChannel+0x7c0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <HAL_ADC_ConfigChannel+0x864>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x7c4>
 800418c:	4a29      	ldr	r2, [pc, #164]	; (8004234 <HAL_ADC_ConfigChannel+0x868>)
 800418e:	e000      	b.n	8004192 <HAL_ADC_ConfigChannel+0x7c6>
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_ADC_ConfigChannel+0x854>)
 8004192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7fe fdc2 	bl	8002d26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041a2:	e031      	b.n	8004208 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a27      	ldr	r2, [pc, #156]	; (8004248 <HAL_ADC_ConfigChannel+0x87c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d12d      	bne.n	800420a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d127      	bne.n	800420a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_ADC_ConfigChannel+0x864>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041cc:	d004      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0x80c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_ADC_ConfigChannel+0x864>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x810>
 80041d8:	4a16      	ldr	r2, [pc, #88]	; (8004234 <HAL_ADC_ConfigChannel+0x868>)
 80041da:	e000      	b.n	80041de <HAL_ADC_ConfigChannel+0x812>
 80041dc:	4a10      	ldr	r2, [pc, #64]	; (8004220 <HAL_ADC_ConfigChannel+0x854>)
 80041de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe fd9c 	bl	8002d26 <LL_ADC_SetCommonPathInternalCh>
 80041ee:	e00c      	b.n	800420a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004202:	e002      	b.n	800420a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004208:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004212:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004216:	4618      	mov	r0, r3
 8004218:	37d8      	adds	r7, #216	; 0xd8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	50000700 	.word	0x50000700
 8004224:	c3210000 	.word	0xc3210000
 8004228:	90c00010 	.word	0x90c00010
 800422c:	50000600 	.word	0x50000600
 8004230:	50000100 	.word	0x50000100
 8004234:	50000300 	.word	0x50000300
 8004238:	20000000 	.word	0x20000000
 800423c:	053e2d63 	.word	0x053e2d63
 8004240:	c7520000 	.word	0xc7520000
 8004244:	50000500 	.word	0x50000500
 8004248:	cb840000 	.word	0xcb840000

0800424c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe ff41 	bl	80030e4 <LL_ADC_IsEnabled>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d176      	bne.n	8004356 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	4b3c      	ldr	r3, [pc, #240]	; (8004360 <ADC_Enable+0x114>)
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	f043 0210 	orr.w	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e062      	b.n	8004358 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe ff10 	bl	80030bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a4:	d004      	beq.n	80042b0 <ADC_Enable+0x64>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2e      	ldr	r2, [pc, #184]	; (8004364 <ADC_Enable+0x118>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <ADC_Enable+0x68>
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <ADC_Enable+0x11c>)
 80042b2:	e000      	b.n	80042b6 <ADC_Enable+0x6a>
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <ADC_Enable+0x120>)
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe fd48 	bl	8002d4c <LL_ADC_GetCommonPathInternalCh>
 80042bc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80042be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d013      	beq.n	80042ee <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <ADC_Enable+0x124>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	4a29      	ldr	r2, [pc, #164]	; (8004374 <ADC_Enable+0x128>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	4613      	mov	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042e0:	e002      	b.n	80042e8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f9      	bne.n	80042e2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042ee:	f7fe fcfb 	bl	8002ce8 <HAL_GetTick>
 80042f2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042f4:	e028      	b.n	8004348 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fef2 	bl	80030e4 <LL_ADC_IsEnabled>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fed6 	bl	80030bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004310:	f7fe fcea 	bl	8002ce8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d914      	bls.n	8004348 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d00d      	beq.n	8004348 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e007      	b.n	8004358 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d1cf      	bne.n	80042f6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	8000003f 	.word	0x8000003f
 8004364:	50000100 	.word	0x50000100
 8004368:	50000300 	.word	0x50000300
 800436c:	50000700 	.word	0x50000700
 8004370:	20000000 	.word	0x20000000
 8004374:	053e2d63 	.word	0x053e2d63

08004378 <LL_ADC_SetCommonPathInternalCh>:
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	609a      	str	r2, [r3, #8]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_ADC_GetCommonPathInternalCh>:
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <LL_ADC_SetOffset>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3360      	adds	r3, #96	; 0x60
 80043ce:	461a      	mov	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <LL_ADC_SetOffset+0x44>)
 80043de:	4013      	ands	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	03fff000 	.word	0x03fff000

08004404 <LL_ADC_GetOffsetChannel>:
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3360      	adds	r3, #96	; 0x60
 8004412:	461a      	mov	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_ADC_SetOffsetState>:
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3360      	adds	r3, #96	; 0x60
 8004440:	461a      	mov	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	431a      	orrs	r2, r3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_ADC_SetOffsetSign>:
{
 8004466:	b480      	push	{r7}
 8004468:	b087      	sub	sp, #28
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3360      	adds	r3, #96	; 0x60
 8004476:	461a      	mov	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	431a      	orrs	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_SetOffsetSaturation>:
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3360      	adds	r3, #96	; 0x60
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	615a      	str	r2, [r3, #20]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_ADC_INJ_GetTrigAuto>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_SetChannelSamplingTime>:
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3314      	adds	r3, #20
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	0e5b      	lsrs	r3, r3, #25
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	0d1b      	lsrs	r3, r3, #20
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	2107      	movs	r1, #7
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	401a      	ands	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	0d1b      	lsrs	r3, r3, #20
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	431a      	orrs	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <LL_ADC_SetChannelSingleDiff>:
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f003 0318 	and.w	r3, r3, #24
 800458e:	4908      	ldr	r1, [pc, #32]	; (80045b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004590:	40d9      	lsrs	r1, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	400b      	ands	r3, r1
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	431a      	orrs	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	0007ffff 	.word	0x0007ffff

080045b4 <LL_ADC_GetMultimode>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 031f 	and.w	r3, r3, #31
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_ADC_IsEnabled>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <LL_ADC_IsEnabled+0x18>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <LL_ADC_IsEnabled+0x1a>
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d101      	bne.n	800460e <LL_ADC_REG_IsConversionOngoing+0x18>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_ADC_INJ_StartConversion>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800462c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004630:	f043 0208 	orr.w	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_ADC_INJ_IsConversionOngoing>:
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d101      	bne.n	800465c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800467c:	d004      	beq.n	8004688 <HAL_ADCEx_InjectedStart_IT+0x1c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a78      	ldr	r2, [pc, #480]	; (8004864 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_ADCEx_InjectedStart_IT+0x20>
 8004688:	4b77      	ldr	r3, [pc, #476]	; (8004868 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 800468a:	e000      	b.n	800468e <HAL_ADCEx_InjectedStart_IT+0x22>
 800468c:	4b77      	ldr	r3, [pc, #476]	; (800486c <HAL_ADCEx_InjectedStart_IT+0x200>)
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff90 	bl	80045b4 <LL_ADC_GetMultimode>
 8004694:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffd2 	bl	8004644 <LL_ADC_INJ_IsConversionOngoing>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
 80046a8:	e0d8      	b.n	800485c <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b4:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0c0      	b.n	800485c <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_ADCEx_InjectedStart_IT+0x7c>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e0b9      	b.n	800485c <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fdab 	bl	800424c <ADC_Enable>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 80a8 	bne.w	8004852 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	f023 0208 	bic.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
 800471a:	e002      	b.n	8004722 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a4a      	ldr	r2, [pc, #296]	; (8004870 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d002      	beq.n	8004750 <HAL_ADCEx_InjectedStart_IT+0xe4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	e003      	b.n	8004758 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004750:	4b48      	ldr	r3, [pc, #288]	; (8004874 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004752:	e001      	b.n	8004758 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	4293      	cmp	r3, r2
 800475e:	d002      	beq.n	8004766 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2260      	movs	r2, #96	; 0x60
 8004778:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800479e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d110      	bne.n	80047ca <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0220 	bic.w	r2, r2, #32
 80047b6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	605a      	str	r2, [r3, #4]
          break;
 80047c8:	e010      	b.n	80047ec <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0220 	orr.w	r2, r2, #32
 80047e8:	605a      	str	r2, [r3, #4]
          break;
 80047ea:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1c      	ldr	r2, [pc, #112]	; (8004864 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_ADCEx_InjectedStart_IT+0x19e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d002      	beq.n	8004806 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	e003      	b.n	800480e <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004806:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004808:	e001      	b.n	800480e <HAL_ADCEx_InjectedStart_IT+0x1a2>
 800480a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	4293      	cmp	r3, r2
 8004814:	d008      	beq.n	8004828 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d002      	beq.n	8004828 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b07      	cmp	r3, #7
 8004826:	d10d      	bne.n	8004844 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fe63 	bl	80044f8 <LL_ADC_INJ_GetTrigAuto>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d110      	bne.n	800485a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff feed 	bl	800461c <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004842:	e00a      	b.n	800485a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004850:	e003      	b.n	800485a <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	50000100 	.word	0x50000100
 8004868:	50000300 	.word	0x50000300
 800486c:	50000700 	.word	0x50000700
 8004870:	50000500 	.word	0x50000500
 8004874:	50000400 	.word	0x50000400

08004878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b0b6      	sub	sp, #216	; 0xd8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004900:	2302      	movs	r3, #2
 8004902:	f000 bcfd 	b.w	8005300 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800491a:	2b01      	cmp	r3, #1
 800491c:	d130      	bne.n	8004980 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b09      	cmp	r3, #9
 8004924:	d179      	bne.n	8004a1a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	0e9b      	lsrs	r3, r3, #26
 8004934:	025b      	lsls	r3, r3, #9
 8004936:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004942:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800494e:	e007      	b.n	8004960 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800495c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004966:	4b84      	ldr	r3, [pc, #528]	; (8004b78 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004972:	430b      	orrs	r3, r1
 8004974:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800497c:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800497e:	e04c      	b.n	8004a1a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11d      	bne.n	80049c4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80049ac:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049b8:	e004      	b.n	80049c4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	3b01      	subs	r3, #1
 80049c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	f003 021f 	and.w	r2, r3, #31
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	; (8004b78 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	430b      	orrs	r3, r1
 8004a18:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fe10 	bl	8004644 <LL_ADC_INJ_IsConversionOngoing>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d124      	bne.n	8004a74 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d112      	bne.n	8004a5a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a44:	055a      	lsls	r2, r3, #21
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a4c:	051b      	lsls	r3, r3, #20
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e00c      	b.n	8004a74 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a6a:	055a      	lsls	r2, r3, #21
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fdbc 	bl	80045f6 <LL_ADC_REG_IsConversionOngoing>
 8004a7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fddc 	bl	8004644 <LL_ADC_INJ_IsConversionOngoing>
 8004a8c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 822e 	bne.w	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 8229 	bne.w	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d116      	bne.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d108      	bne.n	8004ad0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004acc:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004ace:	e01f      	b.n	8004b10 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004ade:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004ae0:	e016      	b.n	8004b10 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d109      	bne.n	8004b00 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004afe:	e007      	b.n	8004b10 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004b0e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d110      	bne.n	8004b3c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0202 	orr.w	r2, r2, #2
 8004b38:	611a      	str	r2, [r3, #16]
 8004b3a:	e007      	b.n	8004b4c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0202 	bic.w	r2, r2, #2
 8004b4a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b54:	d112      	bne.n	8004b7c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7ff fcd7 	bl	8004514 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fcaf 	bl	80044d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004b74:	e011      	b.n	8004b9a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004b76:	bf00      	nop
 8004b78:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f7ff fcc3 	bl	8004514 <LL_ADC_SetChannelSamplingTime>
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fc9c 	bl	80044d2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d022      	beq.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6919      	ldr	r1, [r3, #16]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bcc:	f7ff fbf6 	bl	80043bc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6919      	ldr	r1, [r3, #16]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f7ff fc42 	bl	8004466 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf6:	e000      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7ff fc4e 	bl	800449c <LL_ADC_SetOffsetSaturation>
 8004c00:	e179      	b.n	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fbfb 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fbf0 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004c24:	4603      	mov	r3, r0
 8004c26:	0e9b      	lsrs	r3, r3, #26
 8004c28:	f003 021f 	and.w	r2, r3, #31
 8004c2c:	e01e      	b.n	8004c6c <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fbe5 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e004      	b.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	0e9b      	lsrs	r3, r3, #26
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	e018      	b.n	8004cb6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004ca8:	2320      	movs	r3, #32
 8004caa:	e004      	b.n	8004cb6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cb0:	fab3 f383 	clz	r3, r3
 8004cb4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d106      	bne.n	8004cc8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fbb4 	bl	8004430 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fb98 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fb8d 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004cea:	4603      	mov	r3, r0
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	f003 021f 	and.w	r2, r3, #31
 8004cf2:	e01e      	b.n	8004d32 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fb82 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d0a:	fa93 f3a3 	rbit	r3, r3
 8004d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004d22:	2320      	movs	r3, #32
 8004d24:	e004      	b.n	8004d30 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	0e9b      	lsrs	r3, r3, #26
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	e018      	b.n	8004d7c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004d6e:	2320      	movs	r3, #32
 8004d70:	e004      	b.n	8004d7c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d106      	bne.n	8004d8e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fb51 	bl	8004430 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fb35 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fb2a 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004db0:	4603      	mov	r3, r0
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	e01e      	b.n	8004df8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fb1f 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd0:	fa93 f3a3 	rbit	r3, r3
 8004dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004de8:	2320      	movs	r3, #32
 8004dea:	e004      	b.n	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004df0:	fab3 f383 	clz	r3, r3
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0e9b      	lsrs	r3, r3, #26
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	e014      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e004      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e34:	fab3 f383 	clz	r3, r3
 8004e38:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d106      	bne.n	8004e4c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff faf2 	bl	8004430 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2103      	movs	r1, #3
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fad6 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2103      	movs	r1, #3
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff facb 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	0e9b      	lsrs	r3, r3, #26
 8004e72:	f003 021f 	and.w	r2, r3, #31
 8004e76:	e017      	b.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2103      	movs	r1, #3
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fac0 	bl	8004404 <LL_ADC_GetOffsetChannel>
 8004e84:	4603      	mov	r3, r0
 8004e86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e8a:	fa93 f3a3 	rbit	r3, r3
 8004e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	e003      	b.n	8004ea6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	0e9b      	lsrs	r3, r3, #26
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	e011      	b.n	8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	e003      	b.n	8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d106      	bne.n	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2200      	movs	r2, #0
 8004eee:	2103      	movs	r1, #3
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fa9d 	bl	8004430 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fb68 	bl	80045d0 <LL_ADC_IsEnabled>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 813d 	bne.w	8005182 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f7ff fb29 	bl	800456c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4aa2      	ldr	r2, [pc, #648]	; (80051a8 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	f040 812e 	bne.w	8005182 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	0e9b      	lsrs	r3, r3, #26
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2b09      	cmp	r3, #9
 8004f44:	bf94      	ite	ls
 8004f46:	2301      	movls	r3, #1
 8004f48:	2300      	movhi	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	e019      	b.n	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004f66:	2320      	movs	r3, #32
 8004f68:	e003      	b.n	8004f72 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	bf94      	ite	ls
 8004f7c:	2301      	movls	r3, #1
 8004f7e:	2300      	movhi	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d079      	beq.n	800507a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	0e9b      	lsrs	r3, r3, #26
 8004f98:	3301      	adds	r3, #1
 8004f9a:	069b      	lsls	r3, r3, #26
 8004f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fa0:	e015      	b.n	8004fce <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004faa:	fa93 f3a3 	rbit	r3, r3
 8004fae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004fba:	2320      	movs	r3, #32
 8004fbc:	e003      	b.n	8004fc6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc0:	fab3 f383 	clz	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	069b      	lsls	r3, r3, #26
 8004fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	0e9b      	lsrs	r3, r3, #26
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	e017      	b.n	800501e <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005006:	2320      	movs	r3, #32
 8005008:	e003      	b.n	8005012 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800500a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500c:	fab3 f383 	clz	r3, r3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	3301      	adds	r3, #1
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	ea42 0103 	orr.w	r1, r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	3301      	adds	r3, #1
 8005036:	f003 021f 	and.w	r2, r3, #31
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	051b      	lsls	r3, r3, #20
 8005042:	e018      	b.n	8005076 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800505c:	2320      	movs	r3, #32
 800505e:	e003      	b.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3301      	adds	r3, #1
 800506a:	f003 021f 	and.w	r2, r3, #31
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005076:	430b      	orrs	r3, r1
 8005078:	e07e      	b.n	8005178 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005082:	2b00      	cmp	r3, #0
 8005084:	d107      	bne.n	8005096 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	0e9b      	lsrs	r3, r3, #26
 800508c:	3301      	adds	r3, #1
 800508e:	069b      	lsls	r3, r3, #26
 8005090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005094:	e015      	b.n	80050c2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80050ae:	2320      	movs	r3, #32
 80050b0:	e003      	b.n	80050ba <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	fab3 f383 	clz	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	3301      	adds	r3, #1
 80050bc:	069b      	lsls	r3, r3, #26
 80050be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	0e9b      	lsrs	r3, r3, #26
 80050d4:	3301      	adds	r3, #1
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2101      	movs	r1, #1
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	e017      	b.n	8005112 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	61bb      	str	r3, [r7, #24]
  return result;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80050fa:	2320      	movs	r3, #32
 80050fc:	e003      	b.n	8005106 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	fab3 f383 	clz	r3, r3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	3301      	adds	r3, #1
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	ea42 0103 	orr.w	r1, r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	0e9b      	lsrs	r3, r3, #26
 8005128:	3301      	adds	r3, #1
 800512a:	f003 021f 	and.w	r2, r3, #31
 800512e:	4613      	mov	r3, r2
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	4413      	add	r3, r2
 8005134:	3b1e      	subs	r3, #30
 8005136:	051b      	lsls	r3, r3, #20
 8005138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800513c:	e01b      	b.n	8005176 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	60fb      	str	r3, [r7, #12]
  return result;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8005156:	2320      	movs	r3, #32
 8005158:	e003      	b.n	8005162 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	fab3 f383 	clz	r3, r3
 8005160:	b2db      	uxtb	r3, r3
 8005162:	3301      	adds	r3, #1
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	4613      	mov	r3, r2
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	4413      	add	r3, r2
 800516e:	3b1e      	subs	r3, #30
 8005170:	051b      	lsls	r3, r3, #20
 8005172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005176:	430b      	orrs	r3, r1
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	4619      	mov	r1, r3
 800517e:	f7ff f9c9 	bl	8004514 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80b2 	beq.w	80052f4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005198:	d004      	beq.n	80051a4 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a04      	ldr	r2, [pc, #16]	; (80051b0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d109      	bne.n	80051b8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80051a6:	e008      	b.n	80051ba <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80051a8:	407f0000 	.word	0x407f0000
 80051ac:	80080000 	.word	0x80080000
 80051b0:	50000100 	.word	0x50000100
 80051b4:	50000300 	.word	0x50000300
 80051b8:	4b53      	ldr	r3, [pc, #332]	; (8005308 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff f8ef 	bl	800439e <LL_ADC_GetCommonPathInternalCh>
 80051c0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a50      	ldr	r2, [pc, #320]	; (800530c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4f      	ldr	r2, [pc, #316]	; (8005310 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d139      	bne.n	800524c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d133      	bne.n	800524c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ec:	d004      	beq.n	80051f8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a48      	ldr	r2, [pc, #288]	; (8005314 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d17a      	bne.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005200:	d004      	beq.n	800520c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a44      	ldr	r2, [pc, #272]	; (8005318 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800520c:	4a43      	ldr	r2, [pc, #268]	; (800531c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800520e:	e000      	b.n	8005212 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8005210:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005216:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7ff f8ab 	bl	8004378 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005222:	4b3f      	ldr	r3, [pc, #252]	; (8005320 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	4a3e      	ldr	r2, [pc, #248]	; (8005324 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	099a      	lsrs	r2, r3, #6
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800523a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800523c:	e002      	b.n	8005244 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	3b01      	subs	r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f9      	bne.n	800523e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800524a:	e050      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a35      	ldr	r2, [pc, #212]	; (8005328 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d125      	bne.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800525a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11f      	bne.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2c      	ldr	r2, [pc, #176]	; (8005318 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d104      	bne.n	8005276 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2e      	ldr	r2, [pc, #184]	; (800532c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d03d      	beq.n	80052f2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800527e:	d004      	beq.n	800528a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 800528a:	4a24      	ldr	r2, [pc, #144]	; (800531c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800528c:	e000      	b.n	8005290 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7ff f86c 	bl	8004378 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052a0:	e027      	b.n	80052f2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a22      	ldr	r2, [pc, #136]	; (8005330 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d123      	bne.n	80052f4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11d      	bne.n	80052f4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a16      	ldr	r2, [pc, #88]	; (8005318 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ca:	d004      	beq.n	80052d6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a11      	ldr	r2, [pc, #68]	; (8005318 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80052d8:	e000      	b.n	80052dc <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80052da:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80052dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7ff f846 	bl	8004378 <LL_ADC_SetCommonPathInternalCh>
 80052ec:	e002      	b.n	80052f4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052f2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80052fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005300:	4618      	mov	r0, r3
 8005302:	37d8      	adds	r7, #216	; 0xd8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	50000700 	.word	0x50000700
 800530c:	c3210000 	.word	0xc3210000
 8005310:	90c00010 	.word	0x90c00010
 8005314:	50000600 	.word	0x50000600
 8005318:	50000100 	.word	0x50000100
 800531c:	50000300 	.word	0x50000300
 8005320:	20000000 	.word	0x20000000
 8005324:	053e2d63 	.word	0x053e2d63
 8005328:	c7520000 	.word	0xc7520000
 800532c:	50000500 	.word	0x50000500
 8005330:	cb840000 	.word	0xcb840000

08005334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b0a1      	sub	sp, #132	; 0x84
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800534e:	2302      	movs	r3, #2
 8005350:	e0e7      	b.n	8005522 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800535a:	2300      	movs	r3, #0
 800535c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800535e:	2300      	movs	r3, #0
 8005360:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800536a:	d102      	bne.n	8005372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800536c:	4b6f      	ldr	r3, [pc, #444]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	e009      	b.n	8005386 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d102      	bne.n	8005382 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800537c:	4b6d      	ldr	r3, [pc, #436]	; (8005534 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	e001      	b.n	8005386 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0be      	b.n	8005522 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff f925 	bl	80045f6 <LL_ADC_REG_IsConversionOngoing>
 80053ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f91f 	bl	80045f6 <LL_ADC_REG_IsConversionOngoing>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 80a0 	bne.w	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80053c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 809c 	bne.w	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053d0:	d004      	beq.n	80053dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a55      	ldr	r2, [pc, #340]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80053dc:	4b56      	ldr	r3, [pc, #344]	; (8005538 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80053de:	e000      	b.n	80053e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80053e0:	4b56      	ldr	r3, [pc, #344]	; (800553c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80053e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d04b      	beq.n	8005484 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80053ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053fe:	035b      	lsls	r3, r3, #13
 8005400:	430b      	orrs	r3, r1
 8005402:	431a      	orrs	r2, r3
 8005404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005406:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005410:	d004      	beq.n	800541c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a45      	ldr	r2, [pc, #276]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10f      	bne.n	800543c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800541c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005420:	f7ff f8d6 	bl	80045d0 <LL_ADC_IsEnabled>
 8005424:	4604      	mov	r4, r0
 8005426:	4841      	ldr	r0, [pc, #260]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005428:	f7ff f8d2 	bl	80045d0 <LL_ADC_IsEnabled>
 800542c:	4603      	mov	r3, r0
 800542e:	4323      	orrs	r3, r4
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e012      	b.n	8005462 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800543c:	483c      	ldr	r0, [pc, #240]	; (8005530 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800543e:	f7ff f8c7 	bl	80045d0 <LL_ADC_IsEnabled>
 8005442:	4604      	mov	r4, r0
 8005444:	483b      	ldr	r0, [pc, #236]	; (8005534 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005446:	f7ff f8c3 	bl	80045d0 <LL_ADC_IsEnabled>
 800544a:	4603      	mov	r3, r0
 800544c:	431c      	orrs	r4, r3
 800544e:	483c      	ldr	r0, [pc, #240]	; (8005540 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005450:	f7ff f8be 	bl	80045d0 <LL_ADC_IsEnabled>
 8005454:	4603      	mov	r3, r0
 8005456:	4323      	orrs	r3, r4
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d056      	beq.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800546e:	f023 030f 	bic.w	r3, r3, #15
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	6892      	ldr	r2, [r2, #8]
 800547a:	430a      	orrs	r2, r1
 800547c:	431a      	orrs	r2, r3
 800547e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005480:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005482:	e047      	b.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800548c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005498:	d004      	beq.n	80054a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a23      	ldr	r2, [pc, #140]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10f      	bne.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80054a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80054a8:	f7ff f892 	bl	80045d0 <LL_ADC_IsEnabled>
 80054ac:	4604      	mov	r4, r0
 80054ae:	481f      	ldr	r0, [pc, #124]	; (800552c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054b0:	f7ff f88e 	bl	80045d0 <LL_ADC_IsEnabled>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4323      	orrs	r3, r4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e012      	b.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80054c4:	481a      	ldr	r0, [pc, #104]	; (8005530 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80054c6:	f7ff f883 	bl	80045d0 <LL_ADC_IsEnabled>
 80054ca:	4604      	mov	r4, r0
 80054cc:	4819      	ldr	r0, [pc, #100]	; (8005534 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80054ce:	f7ff f87f 	bl	80045d0 <LL_ADC_IsEnabled>
 80054d2:	4603      	mov	r3, r0
 80054d4:	431c      	orrs	r4, r3
 80054d6:	481a      	ldr	r0, [pc, #104]	; (8005540 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80054d8:	f7ff f87a 	bl	80045d0 <LL_ADC_IsEnabled>
 80054dc:	4603      	mov	r3, r0
 80054de:	4323      	orrs	r3, r4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d012      	beq.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80054f6:	f023 030f 	bic.w	r3, r3, #15
 80054fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80054fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054fe:	e009      	b.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005512:	e000      	b.n	8005516 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005514:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800551e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005522:	4618      	mov	r0, r3
 8005524:	3784      	adds	r7, #132	; 0x84
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	bf00      	nop
 800552c:	50000100 	.word	0x50000100
 8005530:	50000400 	.word	0x50000400
 8005534:	50000500 	.word	0x50000500
 8005538:	50000300 	.word	0x50000300
 800553c:	50000700 	.word	0x50000700
 8005540:	50000600 	.word	0x50000600

08005544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <__NVIC_SetPriorityGrouping+0x44>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005560:	4013      	ands	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800556c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005576:	4a04      	ldr	r2, [pc, #16]	; (8005588 <__NVIC_SetPriorityGrouping+0x44>)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	60d3      	str	r3, [r2, #12]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	f003 0307 	and.w	r3, r3, #7
}
 800559a:	4618      	mov	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	db0b      	blt.n	80055d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f003 021f 	and.w	r2, r3, #31
 80055c0:	4907      	ldr	r1, [pc, #28]	; (80055e0 <__NVIC_EnableIRQ+0x38>)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2001      	movs	r0, #1
 80055ca:	fa00 f202 	lsl.w	r2, r0, r2
 80055ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000e100 	.word	0xe000e100

080055e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db0a      	blt.n	800560e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	490c      	ldr	r1, [pc, #48]	; (8005630 <__NVIC_SetPriority+0x4c>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	440b      	add	r3, r1
 8005608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800560c:	e00a      	b.n	8005624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4908      	ldr	r1, [pc, #32]	; (8005634 <__NVIC_SetPriority+0x50>)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3b04      	subs	r3, #4
 800561c:	0112      	lsls	r2, r2, #4
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	440b      	add	r3, r1
 8005622:	761a      	strb	r2, [r3, #24]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000e100 	.word	0xe000e100
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f1c3 0307 	rsb	r3, r3, #7
 8005652:	2b04      	cmp	r3, #4
 8005654:	bf28      	it	cs
 8005656:	2304      	movcs	r3, #4
 8005658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3304      	adds	r3, #4
 800565e:	2b06      	cmp	r3, #6
 8005660:	d902      	bls.n	8005668 <NVIC_EncodePriority+0x30>
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3b03      	subs	r3, #3
 8005666:	e000      	b.n	800566a <NVIC_EncodePriority+0x32>
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43da      	mvns	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	401a      	ands	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005680:	f04f 31ff 	mov.w	r1, #4294967295
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	43d9      	mvns	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	4313      	orrs	r3, r2
         );
}
 8005692:	4618      	mov	r0, r3
 8005694:	3724      	adds	r7, #36	; 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b0:	d301      	bcc.n	80056b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056b2:	2301      	movs	r3, #1
 80056b4:	e00f      	b.n	80056d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <SysTick_Config+0x40>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056be:	210f      	movs	r1, #15
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	f7ff ff8e 	bl	80055e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <SysTick_Config+0x40>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ce:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <SysTick_Config+0x40>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	e000e010 	.word	0xe000e010

080056e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff29 	bl	8005544 <__NVIC_SetPriorityGrouping>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	4603      	mov	r3, r0
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005708:	f7ff ff40 	bl	800558c <__NVIC_GetPriorityGrouping>
 800570c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	f7ff ff90 	bl	8005638 <NVIC_EncodePriority>
 8005718:	4602      	mov	r2, r0
 800571a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff5f 	bl	80055e4 <__NVIC_SetPriority>
}
 8005726:	bf00      	nop
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	4603      	mov	r3, r0
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff33 	bl	80055a8 <__NVIC_EnableIRQ>
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ffa4 	bl	80056a0 <SysTick_Config>
 8005758:	4603      	mov	r3, r0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005772:	e15a      	b.n	8005a2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	2101      	movs	r1, #1
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 814c 	beq.w	8005a24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d005      	beq.n	80057a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d130      	bne.n	8005806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	2203      	movs	r2, #3
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057da:	2201      	movs	r2, #1
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	f003 0201 	and.w	r2, r3, #1
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d017      	beq.n	8005842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	2203      	movs	r2, #3
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d123      	bne.n	8005896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	08da      	lsrs	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3208      	adds	r2, #8
 8005856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	220f      	movs	r2, #15
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4013      	ands	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	08da      	lsrs	r2, r3, #3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3208      	adds	r2, #8
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	2203      	movs	r2, #3
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4013      	ands	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f003 0203 	and.w	r2, r3, #3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80a6 	beq.w	8005a24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058d8:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <HAL_GPIO_Init+0x2e4>)
 80058da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058dc:	4a5a      	ldr	r2, [pc, #360]	; (8005a48 <HAL_GPIO_Init+0x2e4>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6613      	str	r3, [r2, #96]	; 0x60
 80058e4:	4b58      	ldr	r3, [pc, #352]	; (8005a48 <HAL_GPIO_Init+0x2e4>)
 80058e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058f0:	4a56      	ldr	r2, [pc, #344]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	220f      	movs	r2, #15
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4013      	ands	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800591a:	d01f      	beq.n	800595c <HAL_GPIO_Init+0x1f8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a4c      	ldr	r2, [pc, #304]	; (8005a50 <HAL_GPIO_Init+0x2ec>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d019      	beq.n	8005958 <HAL_GPIO_Init+0x1f4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a4b      	ldr	r2, [pc, #300]	; (8005a54 <HAL_GPIO_Init+0x2f0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <HAL_GPIO_Init+0x1f0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a4a      	ldr	r2, [pc, #296]	; (8005a58 <HAL_GPIO_Init+0x2f4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00d      	beq.n	8005950 <HAL_GPIO_Init+0x1ec>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a49      	ldr	r2, [pc, #292]	; (8005a5c <HAL_GPIO_Init+0x2f8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <HAL_GPIO_Init+0x1e8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a48      	ldr	r2, [pc, #288]	; (8005a60 <HAL_GPIO_Init+0x2fc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d101      	bne.n	8005948 <HAL_GPIO_Init+0x1e4>
 8005944:	2305      	movs	r3, #5
 8005946:	e00a      	b.n	800595e <HAL_GPIO_Init+0x1fa>
 8005948:	2306      	movs	r3, #6
 800594a:	e008      	b.n	800595e <HAL_GPIO_Init+0x1fa>
 800594c:	2304      	movs	r3, #4
 800594e:	e006      	b.n	800595e <HAL_GPIO_Init+0x1fa>
 8005950:	2303      	movs	r3, #3
 8005952:	e004      	b.n	800595e <HAL_GPIO_Init+0x1fa>
 8005954:	2302      	movs	r3, #2
 8005956:	e002      	b.n	800595e <HAL_GPIO_Init+0x1fa>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_GPIO_Init+0x1fa>
 800595c:	2300      	movs	r3, #0
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f002 0203 	and.w	r2, r2, #3
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	4093      	lsls	r3, r2
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800596e:	4937      	ldr	r1, [pc, #220]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800597c:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <HAL_GPIO_Init+0x300>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	43db      	mvns	r3, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059a0:	4a30      	ldr	r2, [pc, #192]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059ca:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	43db      	mvns	r3, r3
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4013      	ands	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <HAL_GPIO_Init+0x300>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a1e:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <HAL_GPIO_Init+0x300>)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3301      	adds	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f ae9d 	bne.w	8005774 <HAL_GPIO_Init+0x10>
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	48000400 	.word	0x48000400
 8005a54:	48000800 	.word	0x48000800
 8005a58:	48000c00 	.word	0x48000c00
 8005a5c:	48001000 	.word	0x48001000
 8005a60:	48001400 	.word	0x48001400
 8005a64:	40010400 	.word	0x40010400

08005a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	887b      	ldrh	r3, [r7, #2]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e001      	b.n	8005a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005aa8:	787b      	ldrb	r3, [r7, #1]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005aae:	887a      	ldrh	r2, [r7, #2]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ab4:	e002      	b.n	8005abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	041a      	lsls	r2, r3, #16
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	43d9      	mvns	r1, r3
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	400b      	ands	r3, r1
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d141      	bne.n	8005b8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b0a:	4b4b      	ldr	r3, [pc, #300]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d131      	bne.n	8005b7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b18:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1e:	4a46      	ldr	r2, [pc, #280]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b28:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b30:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b38:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2232      	movs	r2, #50	; 0x32
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	4a3f      	ldr	r2, [pc, #252]	; (8005c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	0c9b      	lsrs	r3, r3, #18
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b4e:	e002      	b.n	8005b56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b56:	4b38      	ldr	r3, [pc, #224]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b62:	d102      	bne.n	8005b6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f2      	bne.n	8005b50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b76:	d158      	bne.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e057      	b.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b82:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b8c:	e04d      	b.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d141      	bne.n	8005c1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b96:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba2:	d131      	bne.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005baa:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bb4:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2232      	movs	r2, #50	; 0x32
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	0c9b      	lsrs	r3, r3, #18
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bda:	e002      	b.n	8005be2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d102      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f2      	bne.n	8005bdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d112      	bne.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e011      	b.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c18:	e007      	b.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40007000 	.word	0x40007000
 8005c3c:	20000000 	.word	0x20000000
 8005c40:	431bde83 	.word	0x431bde83

08005c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e2fe      	b.n	8006254 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d075      	beq.n	8005d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c62:	4b97      	ldr	r3, [pc, #604]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 030c 	and.w	r3, r3, #12
 8005c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c6c:	4b94      	ldr	r3, [pc, #592]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCC_OscConfig+0x3e>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d002      	beq.n	8005c88 <HAL_RCC_OscConfig+0x44>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c88:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d05b      	beq.n	8005d4c <HAL_RCC_OscConfig+0x108>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d157      	bne.n	8005d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e2d9      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x74>
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a84      	ldr	r2, [pc, #528]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e01d      	b.n	8005cf4 <HAL_RCC_OscConfig+0xb0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x98>
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a7e      	ldr	r2, [pc, #504]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b7c      	ldr	r3, [pc, #496]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7b      	ldr	r2, [pc, #492]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0xb0>
 8005cdc:	4b78      	ldr	r3, [pc, #480]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a77      	ldr	r2, [pc, #476]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b75      	ldr	r3, [pc, #468]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a74      	ldr	r2, [pc, #464]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fc fff4 	bl	8002ce8 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fc fff0 	bl	8002ce8 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	; 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e29e      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d16:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0xc0>
 8005d22:	e014      	b.n	8005d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fc ffe0 	bl	8002ce8 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fc ffdc 	bl	8002ce8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e28a      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d3e:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0xe8>
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d075      	beq.n	8005e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5a:	4b59      	ldr	r3, [pc, #356]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d64:	4b56      	ldr	r3, [pc, #344]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d102      	bne.n	8005d7a <HAL_RCC_OscConfig+0x136>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d002      	beq.n	8005d80 <HAL_RCC_OscConfig+0x13c>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d11f      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d80:	4b4f      	ldr	r3, [pc, #316]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_OscConfig+0x154>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e25d      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d98:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	4946      	ldr	r1, [pc, #280]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005dac:	4b45      	ldr	r3, [pc, #276]	; (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fc ff4d 	bl	8002c50 <HAL_InitTick>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d043      	beq.n	8005e44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e249      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fc ff88 	bl	8002ce8 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ddc:	f7fc ff84 	bl	8002ce8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e232      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dee:	4b34      	ldr	r3, [pc, #208]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	061b      	lsls	r3, r3, #24
 8005e08:	492d      	ldr	r1, [pc, #180]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	604b      	str	r3, [r1, #4]
 8005e0e:	e01a      	b.n	8005e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fc ff64 	bl	8002ce8 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e24:	f7fc ff60 	bl	8002ce8 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e20e      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e36:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x1e0>
 8005e42:	e000      	b.n	8005e46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d041      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01c      	beq.n	8005e94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e5a:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fc ff3d 	bl	8002ce8 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e72:	f7fc ff39 	bl	8002ce8 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e1e7      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ef      	beq.n	8005e72 <HAL_RCC_OscConfig+0x22e>
 8005e92:	e020      	b.n	8005ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fc ff20 	bl	8002ce8 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eaa:	e00d      	b.n	8005ec8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eac:	f7fc ff1c 	bl	8002ce8 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d906      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e1ca      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ec8:	4b8c      	ldr	r3, [pc, #560]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ea      	bne.n	8005eac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a6 	beq.w	8006030 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ee8:	4b84      	ldr	r3, [pc, #528]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x2b4>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x2b6>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	4a7e      	ldr	r2, [pc, #504]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0a:	4b7c      	ldr	r3, [pc, #496]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f16:	2301      	movs	r3, #1
 8005f18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f1a:	4b79      	ldr	r3, [pc, #484]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d118      	bne.n	8005f58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f26:	4b76      	ldr	r3, [pc, #472]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a75      	ldr	r2, [pc, #468]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f32:	f7fc fed9 	bl	8002ce8 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3a:	f7fc fed5 	bl	8002ce8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e183      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f4c:	4b6c      	ldr	r3, [pc, #432]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d108      	bne.n	8005f72 <HAL_RCC_OscConfig+0x32e>
 8005f60:	4b66      	ldr	r3, [pc, #408]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	4a65      	ldr	r2, [pc, #404]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f70:	e024      	b.n	8005fbc <HAL_RCC_OscConfig+0x378>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d110      	bne.n	8005f9c <HAL_RCC_OscConfig+0x358>
 8005f7a:	4b60      	ldr	r3, [pc, #384]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f80:	4a5e      	ldr	r2, [pc, #376]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f82:	f043 0304 	orr.w	r3, r3, #4
 8005f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f8a:	4b5c      	ldr	r3, [pc, #368]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	4a5a      	ldr	r2, [pc, #360]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f9a:	e00f      	b.n	8005fbc <HAL_RCC_OscConfig+0x378>
 8005f9c:	4b57      	ldr	r3, [pc, #348]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fac:	4b53      	ldr	r3, [pc, #332]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb2:	4a52      	ldr	r2, [pc, #328]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d016      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fc fe90 	bl	8002ce8 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fcc:	f7fc fe8c 	bl	8002ce8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e138      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe2:	4b46      	ldr	r3, [pc, #280]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ed      	beq.n	8005fcc <HAL_RCC_OscConfig+0x388>
 8005ff0:	e015      	b.n	800601e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fc fe79 	bl	8002ce8 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fc fe75 	bl	8002ce8 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e121      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006010:	4b3a      	ldr	r3, [pc, #232]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ed      	bne.n	8005ffa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800601e:	7ffb      	ldrb	r3, [r7, #31]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006024:	4b35      	ldr	r3, [pc, #212]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	4a34      	ldr	r2, [pc, #208]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03c      	beq.n	80060b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01c      	beq.n	800607e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006044:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fc fe48 	bl	8002ce8 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800605c:	f7fc fe44 	bl	8002ce8 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0f2      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800606e:	4b23      	ldr	r3, [pc, #140]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ef      	beq.n	800605c <HAL_RCC_OscConfig+0x418>
 800607c:	e01b      	b.n	80060b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800607e:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006084:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608e:	f7fc fe2b 	bl	8002ce8 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006096:	f7fc fe27 	bl	8002ce8 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0d5      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1ef      	bne.n	8006096 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80c9 	beq.w	8006252 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	f000 8083 	beq.w	80061d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d15e      	bne.n	8006194 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc fe01 	bl	8002ce8 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060e8:	e00c      	b.n	8006104 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ea:	f7fc fdfd 	bl	8002ce8 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d905      	bls.n	8006104 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e0ab      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
 80060fc:	40021000 	.word	0x40021000
 8006100:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006104:	4b55      	ldr	r3, [pc, #340]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1ec      	bne.n	80060ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006110:	4b52      	ldr	r3, [pc, #328]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b52      	ldr	r3, [pc, #328]	; (8006260 <HAL_RCC_OscConfig+0x61c>)
 8006116:	4013      	ands	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6a11      	ldr	r1, [r2, #32]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006120:	3a01      	subs	r2, #1
 8006122:	0112      	lsls	r2, r2, #4
 8006124:	4311      	orrs	r1, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800612a:	0212      	lsls	r2, r2, #8
 800612c:	4311      	orrs	r1, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006132:	0852      	lsrs	r2, r2, #1
 8006134:	3a01      	subs	r2, #1
 8006136:	0552      	lsls	r2, r2, #21
 8006138:	4311      	orrs	r1, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800613e:	0852      	lsrs	r2, r2, #1
 8006140:	3a01      	subs	r2, #1
 8006142:	0652      	lsls	r2, r2, #25
 8006144:	4311      	orrs	r1, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800614a:	06d2      	lsls	r2, r2, #27
 800614c:	430a      	orrs	r2, r1
 800614e:	4943      	ldr	r1, [pc, #268]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006150:	4313      	orrs	r3, r2
 8006152:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006154:	4b41      	ldr	r3, [pc, #260]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a40      	ldr	r2, [pc, #256]	; (800625c <HAL_RCC_OscConfig+0x618>)
 800615a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800615e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006160:	4b3e      	ldr	r3, [pc, #248]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a3d      	ldr	r2, [pc, #244]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc fdbc 	bl	8002ce8 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006174:	f7fc fdb8 	bl	8002ce8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e066      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006186:	4b35      	ldr	r3, [pc, #212]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x530>
 8006192:	e05e      	b.n	8006252 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006194:	4b31      	ldr	r3, [pc, #196]	; (800625c <HAL_RCC_OscConfig+0x618>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a30      	ldr	r2, [pc, #192]	; (800625c <HAL_RCC_OscConfig+0x618>)
 800619a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800619e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fc fda2 	bl	8002ce8 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fc fd9e 	bl	8002ce8 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e04c      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ba:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_RCC_OscConfig+0x618>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061c6:	4b25      	ldr	r3, [pc, #148]	; (800625c <HAL_RCC_OscConfig+0x618>)
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	4924      	ldr	r1, [pc, #144]	; (800625c <HAL_RCC_OscConfig+0x618>)
 80061cc:	4b25      	ldr	r3, [pc, #148]	; (8006264 <HAL_RCC_OscConfig+0x620>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	60cb      	str	r3, [r1, #12]
 80061d2:	e03e      	b.n	8006252 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e039      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RCC_OscConfig+0x618>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 0203 	and.w	r2, r3, #3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d12c      	bne.n	800624e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	3b01      	subs	r3, #1
 8006200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d123      	bne.n	800624e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11b      	bne.n	800624e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d113      	bne.n	800624e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	3b01      	subs	r3, #1
 8006234:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d109      	bne.n	800624e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	3b01      	subs	r3, #1
 8006248:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d001      	beq.n	8006252 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	019f800c 	.word	0x019f800c
 8006264:	feeefffc 	.word	0xfeeefffc

08006268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e11e      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006280:	4b91      	ldr	r3, [pc, #580]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d910      	bls.n	80062b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628e:	4b8e      	ldr	r3, [pc, #568]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 020f 	bic.w	r2, r3, #15
 8006296:	498c      	ldr	r1, [pc, #560]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b8a      	ldr	r3, [pc, #552]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e106      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d073      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d129      	bne.n	8006318 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062c4:	4b81      	ldr	r3, [pc, #516]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0f4      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80062d4:	f000 f966 	bl	80065a4 <RCC_GetSysClockFreqFromPLLSource>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4a7c      	ldr	r2, [pc, #496]	; (80064d0 <HAL_RCC_ClockConfig+0x268>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d93f      	bls.n	8006362 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062e2:	4b7a      	ldr	r3, [pc, #488]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d033      	beq.n	8006362 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d12f      	bne.n	8006362 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006302:	4b72      	ldr	r3, [pc, #456]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630a:	4a70      	ldr	r2, [pc, #448]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 800630c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006310:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e024      	b.n	8006362 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d107      	bne.n	8006330 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006320:	4b6a      	ldr	r3, [pc, #424]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0c6      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006330:	4b66      	ldr	r3, [pc, #408]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e0be      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006340:	f000 f8ce 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 8006344:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4a61      	ldr	r2, [pc, #388]	; (80064d0 <HAL_RCC_ClockConfig+0x268>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d909      	bls.n	8006362 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800634e:	4b5f      	ldr	r3, [pc, #380]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006356:	4a5d      	ldr	r2, [pc, #372]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006362:	4b5a      	ldr	r3, [pc, #360]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4957      	ldr	r1, [pc, #348]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006370:	4313      	orrs	r3, r2
 8006372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006374:	f7fc fcb8 	bl	8002ce8 <HAL_GetTick>
 8006378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637a:	e00a      	b.n	8006392 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800637c:	f7fc fcb4 	bl	8002ce8 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	; 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e095      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	4b4e      	ldr	r3, [pc, #312]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 020c 	and.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d1eb      	bne.n	800637c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d023      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063bc:	4b43      	ldr	r3, [pc, #268]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a42      	ldr	r2, [pc, #264]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80063c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063d4:	4b3d      	ldr	r3, [pc, #244]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063dc:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80063de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e4:	4b39      	ldr	r3, [pc, #228]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4936      	ldr	r1, [pc, #216]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	608b      	str	r3, [r1, #8]
 80063f6:	e008      	b.n	800640a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b80      	cmp	r3, #128	; 0x80
 80063fc:	d105      	bne.n	800640a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80063fe:	4b33      	ldr	r3, [pc, #204]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	4a32      	ldr	r2, [pc, #200]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006408:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800640a:	4b2f      	ldr	r3, [pc, #188]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d21d      	bcs.n	8006454 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006418:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f023 020f 	bic.w	r2, r3, #15
 8006420:	4929      	ldr	r1, [pc, #164]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006428:	f7fc fc5e 	bl	8002ce8 <HAL_GetTick>
 800642c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	e00a      	b.n	8006446 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006430:	f7fc fc5a 	bl	8002ce8 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f241 3288 	movw	r2, #5000	; 0x1388
 800643e:	4293      	cmp	r3, r2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e03b      	b.n	80064be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006446:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <HAL_RCC_ClockConfig+0x260>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d1ed      	bne.n	8006430 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006460:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4917      	ldr	r1, [pc, #92]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	490f      	ldr	r1, [pc, #60]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 800648e:	4313      	orrs	r3, r2
 8006490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006492:	f000 f825 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 8006496:	4602      	mov	r2, r0
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <HAL_RCC_ClockConfig+0x264>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	490c      	ldr	r1, [pc, #48]	; (80064d4 <HAL_RCC_ClockConfig+0x26c>)
 80064a4:	5ccb      	ldrb	r3, [r1, r3]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	4a0a      	ldr	r2, [pc, #40]	; (80064d8 <HAL_RCC_ClockConfig+0x270>)
 80064b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_RCC_ClockConfig+0x274>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc fbca 	bl	8002c50 <HAL_InitTick>
 80064bc:	4603      	mov	r3, r0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40022000 	.word	0x40022000
 80064cc:	40021000 	.word	0x40021000
 80064d0:	04c4b400 	.word	0x04c4b400
 80064d4:	0800940c 	.word	0x0800940c
 80064d8:	20000000 	.word	0x20000000
 80064dc:	20000004 	.word	0x20000004

080064e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064e6:	4b2c      	ldr	r3, [pc, #176]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 030c 	and.w	r3, r3, #12
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d102      	bne.n	80064f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <HAL_RCC_GetSysClockFreq+0xbc>)
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	e047      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064f8:	4b27      	ldr	r3, [pc, #156]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b08      	cmp	r3, #8
 8006502:	d102      	bne.n	800650a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006504:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	e03e      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d136      	bne.n	8006584 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	3301      	adds	r3, #1
 800652c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b03      	cmp	r3, #3
 8006532:	d10c      	bne.n	800654e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006534:	4a1a      	ldr	r2, [pc, #104]	; (80065a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800653e:	68d2      	ldr	r2, [r2, #12]
 8006540:	0a12      	lsrs	r2, r2, #8
 8006542:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	617b      	str	r3, [r7, #20]
      break;
 800654c:	e00c      	b.n	8006568 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006558:	68d2      	ldr	r2, [r2, #12]
 800655a:	0a12      	lsrs	r2, r2, #8
 800655c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]
      break;
 8006566:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	0e5b      	lsrs	r3, r3, #25
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	3301      	adds	r3, #1
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e001      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006588:	693b      	ldr	r3, [r7, #16]
}
 800658a:	4618      	mov	r0, r3
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40021000 	.word	0x40021000
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	016e3600 	.word	0x016e3600

080065a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065aa:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d10c      	bne.n	80065e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065c8:	4a17      	ldr	r2, [pc, #92]	; (8006628 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065d2:	68d2      	ldr	r2, [r2, #12]
 80065d4:	0a12      	lsrs	r2, r2, #8
 80065d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	617b      	str	r3, [r7, #20]
    break;
 80065e0:	e00c      	b.n	80065fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065e2:	4a12      	ldr	r2, [pc, #72]	; (800662c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065ec:	68d2      	ldr	r2, [r2, #12]
 80065ee:	0a12      	lsrs	r2, r2, #8
 80065f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]
    break;
 80065fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	0e5b      	lsrs	r3, r3, #25
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	3301      	adds	r3, #1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006616:	687b      	ldr	r3, [r7, #4]
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40021000 	.word	0x40021000
 8006628:	016e3600 	.word	0x016e3600
 800662c:	00f42400 	.word	0x00f42400

08006630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006638:	2300      	movs	r3, #0
 800663a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800663c:	2300      	movs	r3, #0
 800663e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8098 	beq.w	800677e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800664e:	2300      	movs	r3, #0
 8006650:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006652:	4b43      	ldr	r3, [pc, #268]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665e:	4b40      	ldr	r3, [pc, #256]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006662:	4a3f      	ldr	r2, [pc, #252]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006668:	6593      	str	r3, [r2, #88]	; 0x58
 800666a:	4b3d      	ldr	r3, [pc, #244]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006676:	2301      	movs	r3, #1
 8006678:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800667a:	4b3a      	ldr	r3, [pc, #232]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a39      	ldr	r2, [pc, #228]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006684:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006686:	f7fc fb2f 	bl	8002ce8 <HAL_GetTick>
 800668a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800668c:	e009      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668e:	f7fc fb2b 	bl	8002ce8 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d902      	bls.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	74fb      	strb	r3, [r7, #19]
        break;
 80066a0:	e005      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a2:	4b30      	ldr	r3, [pc, #192]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ef      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d159      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066b4:	4b2a      	ldr	r3, [pc, #168]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01e      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d019      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066d0:	4b23      	ldr	r3, [pc, #140]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066dc:	4b20      	ldr	r3, [pc, #128]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e2:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ec:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066fc:	4a18      	ldr	r2, [pc, #96]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fc faeb 	bl	8002ce8 <HAL_GetTick>
 8006712:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006714:	e00b      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fc fae7 	bl	8002ce8 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	; 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d902      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	74fb      	strb	r3, [r7, #19]
            break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ec      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006750:	4903      	ldr	r1, [pc, #12]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006758:	e008      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	74bb      	strb	r3, [r7, #18]
 800675e:	e005      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006760:	40021000 	.word	0x40021000
 8006764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	7cfb      	ldrb	r3, [r7, #19]
 800676a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800676c:	7c7b      	ldrb	r3, [r7, #17]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d105      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006772:	4ba7      	ldr	r3, [pc, #668]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006776:	4aa6      	ldr	r2, [pc, #664]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800677c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800678a:	4ba1      	ldr	r3, [pc, #644]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	f023 0203 	bic.w	r2, r3, #3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	499d      	ldr	r1, [pc, #628]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ac:	4b98      	ldr	r3, [pc, #608]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	f023 020c 	bic.w	r2, r3, #12
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4995      	ldr	r1, [pc, #596]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067ce:	4b90      	ldr	r3, [pc, #576]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	498c      	ldr	r1, [pc, #560]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067f0:	4b87      	ldr	r3, [pc, #540]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	4984      	ldr	r1, [pc, #528]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006812:	4b7f      	ldr	r3, [pc, #508]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	497b      	ldr	r1, [pc, #492]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006834:	4b76      	ldr	r3, [pc, #472]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	4973      	ldr	r1, [pc, #460]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006856:	4b6e      	ldr	r3, [pc, #440]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	496a      	ldr	r1, [pc, #424]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006878:	4b65      	ldr	r3, [pc, #404]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	4962      	ldr	r1, [pc, #392]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800689a:	4b5d      	ldr	r3, [pc, #372]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	4959      	ldr	r1, [pc, #356]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068bc:	4b54      	ldr	r3, [pc, #336]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068c2:	f023 0203 	bic.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	4951      	ldr	r1, [pc, #324]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068de:	4b4c      	ldr	r3, [pc, #304]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	4948      	ldr	r1, [pc, #288]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d015      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006900:	4b43      	ldr	r3, [pc, #268]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	4940      	ldr	r1, [pc, #256]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691e:	d105      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006920:	4b3b      	ldr	r3, [pc, #236]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4a3a      	ldr	r2, [pc, #232]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006934:	2b00      	cmp	r3, #0
 8006936:	d015      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006938:	4b35      	ldr	r3, [pc, #212]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	4932      	ldr	r1, [pc, #200]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006956:	d105      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006958:	4b2d      	ldr	r3, [pc, #180]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006962:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d015      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006970:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	4924      	ldr	r1, [pc, #144]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800698e:	d105      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006990:	4b1f      	ldr	r3, [pc, #124]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800699a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069a8:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b6:	4916      	ldr	r1, [pc, #88]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c6:	d105      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c8:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a10      	ldr	r2, [pc, #64]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d019      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	4908      	ldr	r1, [pc, #32]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fe:	d109      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a00:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a02      	ldr	r2, [pc, #8]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a0a:	60d3      	str	r3, [r2, #12]
 8006a0c:	e002      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a0e:	bf00      	nop
 8006a10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d015      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a20:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	4926      	ldr	r1, [pc, #152]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3e:	d105      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a40:	4b21      	ldr	r3, [pc, #132]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d015      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a66:	4918      	ldr	r1, [pc, #96]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a76:	d105      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a78:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d015      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a90:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	490a      	ldr	r1, [pc, #40]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aae:	d105      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4a04      	ldr	r2, [pc, #16]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006abc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40021000 	.word	0x40021000

08006acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d001      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e054      	b.n	8006b8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d022      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d01d      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <HAL_TIM_Base_Start_IT+0xe0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x80>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d115      	bne.n	8006b78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xec>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b06      	cmp	r3, #6
 8006b5c:	d015      	beq.n	8006b8a <HAL_TIM_Base_Start_IT+0xbe>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d011      	beq.n	8006b8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b76:	e008      	b.n	8006b8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e000      	b.n	8006b8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40000c00 	.word	0x40000c00
 8006bac:	40013400 	.word	0x40013400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40015000 	.word	0x40015000
 8006bb8:	00010007 	.word	0x00010007

08006bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e049      	b.n	8006c62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fb fe66 	bl	80028b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f000 fca0 	bl	8007540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x24>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e03c      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d109      	bne.n	8006caa <HAL_TIM_PWM_Start+0x3e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e02f      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d109      	bne.n	8006cc4 <HAL_TIM_PWM_Start+0x58>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e022      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b0c      	cmp	r3, #12
 8006cc8:	d109      	bne.n	8006cde <HAL_TIM_PWM_Start+0x72>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	bf14      	ite	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	2300      	moveq	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	e015      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b10      	cmp	r3, #16
 8006ce2:	d109      	bne.n	8006cf8 <HAL_TIM_PWM_Start+0x8c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	e008      	b.n	8006d0a <HAL_TIM_PWM_Start+0x9e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	bf14      	ite	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	2300      	moveq	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0a6      	b.n	8006e60 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_PWM_Start+0xb6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d20:	e023      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_PWM_Start+0xc6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d30:	e01b      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_PWM_Start+0xd6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d40:	e013      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0xe6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d50:	e00b      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0xf6>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d60:	e003      	b.n	8006d6a <HAL_TIM_PWM_Start+0xfe>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 f8ec 	bl	8007f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a3a      	ldr	r2, [pc, #232]	; (8006e68 <HAL_TIM_PWM_Start+0x1fc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d018      	beq.n	8006db4 <HAL_TIM_PWM_Start+0x148>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a39      	ldr	r2, [pc, #228]	; (8006e6c <HAL_TIM_PWM_Start+0x200>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d013      	beq.n	8006db4 <HAL_TIM_PWM_Start+0x148>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a37      	ldr	r2, [pc, #220]	; (8006e70 <HAL_TIM_PWM_Start+0x204>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00e      	beq.n	8006db4 <HAL_TIM_PWM_Start+0x148>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a36      	ldr	r2, [pc, #216]	; (8006e74 <HAL_TIM_PWM_Start+0x208>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d009      	beq.n	8006db4 <HAL_TIM_PWM_Start+0x148>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a34      	ldr	r2, [pc, #208]	; (8006e78 <HAL_TIM_PWM_Start+0x20c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIM_PWM_Start+0x148>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a33      	ldr	r2, [pc, #204]	; (8006e7c <HAL_TIM_PWM_Start+0x210>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d101      	bne.n	8006db8 <HAL_TIM_PWM_Start+0x14c>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <HAL_TIM_PWM_Start+0x14e>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <HAL_TIM_PWM_Start+0x1fc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d022      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de0:	d01d      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <HAL_TIM_PWM_Start+0x214>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d018      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a24      	ldr	r2, [pc, #144]	; (8006e84 <HAL_TIM_PWM_Start+0x218>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a23      	ldr	r2, [pc, #140]	; (8006e88 <HAL_TIM_PWM_Start+0x21c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <HAL_TIM_PWM_Start+0x200>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_TIM_PWM_Start+0x204>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1b2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <HAL_TIM_PWM_Start+0x210>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d115      	bne.n	8006e4a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <HAL_TIM_PWM_Start+0x220>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d015      	beq.n	8006e5c <HAL_TIM_PWM_Start+0x1f0>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e36:	d011      	beq.n	8006e5c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e48:	e008      	b.n	8006e5c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40013400 	.word	0x40013400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800
 8006e7c:	40015000 	.word	0x40015000
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	00010007 	.word	0x00010007

08006e90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e049      	b.n	8006f36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fb fd1c 	bl	80028f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f000 fb36 	bl	8007540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <HAL_TIM_IC_Start_IT+0x1e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	e023      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x66>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d104      	bne.n	8006f6e <HAL_TIM_IC_Start_IT+0x2e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	e01b      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x66>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_IC_Start_IT+0x3e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	e013      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x66>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_IC_Start_IT+0x4e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	e00b      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x66>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_IC_Start_IT+0x5e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	e003      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x66>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_TIM_IC_Start_IT+0x78>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e013      	b.n	8006fe0 <HAL_TIM_IC_Start_IT+0xa0>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d104      	bne.n	8006fc8 <HAL_TIM_IC_Start_IT+0x88>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	e00b      	b.n	8006fe0 <HAL_TIM_IC_Start_IT+0xa0>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b08      	cmp	r3, #8
 8006fcc:	d104      	bne.n	8006fd8 <HAL_TIM_IC_Start_IT+0x98>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e003      	b.n	8006fe0 <HAL_TIM_IC_Start_IT+0xa0>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe8:	7b7b      	ldrb	r3, [r7, #13]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d001      	beq.n	8006ff2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e0e2      	b.n	80071b8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_IC_Start_IT+0xc2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007000:	e023      	b.n	800704a <HAL_TIM_IC_Start_IT+0x10a>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_IC_Start_IT+0xd2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007010:	e01b      	b.n	800704a <HAL_TIM_IC_Start_IT+0x10a>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_IC_Start_IT+0xe2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	e013      	b.n	800704a <HAL_TIM_IC_Start_IT+0x10a>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d104      	bne.n	8007032 <HAL_TIM_IC_Start_IT+0xf2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007030:	e00b      	b.n	800704a <HAL_TIM_IC_Start_IT+0x10a>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b10      	cmp	r3, #16
 8007036:	d104      	bne.n	8007042 <HAL_TIM_IC_Start_IT+0x102>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007040:	e003      	b.n	800704a <HAL_TIM_IC_Start_IT+0x10a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_TIM_IC_Start_IT+0x11a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007058:	e013      	b.n	8007082 <HAL_TIM_IC_Start_IT+0x142>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d104      	bne.n	800706a <HAL_TIM_IC_Start_IT+0x12a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007068:	e00b      	b.n	8007082 <HAL_TIM_IC_Start_IT+0x142>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d104      	bne.n	800707a <HAL_TIM_IC_Start_IT+0x13a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007078:	e003      	b.n	8007082 <HAL_TIM_IC_Start_IT+0x142>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d841      	bhi.n	800710c <HAL_TIM_IC_Start_IT+0x1cc>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <HAL_TIM_IC_Start_IT+0x150>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070c5 	.word	0x080070c5
 8007094:	0800710d 	.word	0x0800710d
 8007098:	0800710d 	.word	0x0800710d
 800709c:	0800710d 	.word	0x0800710d
 80070a0:	080070d7 	.word	0x080070d7
 80070a4:	0800710d 	.word	0x0800710d
 80070a8:	0800710d 	.word	0x0800710d
 80070ac:	0800710d 	.word	0x0800710d
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	0800710d 	.word	0x0800710d
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	0800710d 	.word	0x0800710d
 80070c0:	080070fb 	.word	0x080070fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0202 	orr.w	r2, r2, #2
 80070d2:	60da      	str	r2, [r3, #12]
      break;
 80070d4:	e01d      	b.n	8007112 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0204 	orr.w	r2, r2, #4
 80070e4:	60da      	str	r2, [r3, #12]
      break;
 80070e6:	e014      	b.n	8007112 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0208 	orr.w	r2, r2, #8
 80070f6:	60da      	str	r2, [r3, #12]
      break;
 80070f8:	e00b      	b.n	8007112 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0210 	orr.w	r2, r2, #16
 8007108:	60da      	str	r2, [r3, #12]
      break;
 800710a:	e002      	b.n	8007112 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
      break;
 8007110:	bf00      	nop
  }

  if (status == HAL_OK)
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d14e      	bne.n	80071b6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 ff15 	bl	8007f50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_TIM_IC_Start_IT+0x280>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007138:	d01d      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <HAL_TIM_IC_Start_IT+0x284>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <HAL_TIM_IC_Start_IT+0x288>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_TIM_IC_Start_IT+0x28c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <HAL_TIM_IC_Start_IT+0x290>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_TIM_IC_Start_IT+0x294>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_TIM_IC_Start_IT+0x236>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <HAL_TIM_IC_Start_IT+0x298>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d115      	bne.n	80071a2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	4b17      	ldr	r3, [pc, #92]	; (80071dc <HAL_TIM_IC_Start_IT+0x29c>)
 800717e:	4013      	ands	r3, r2
 8007180:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b06      	cmp	r3, #6
 8007186:	d015      	beq.n	80071b4 <HAL_TIM_IC_Start_IT+0x274>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718e:	d011      	beq.n	80071b4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a0:	e008      	b.n	80071b4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0201 	orr.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e000      	b.n	80071b6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	40013400 	.word	0x40013400
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40015000 	.word	0x40015000
 80071dc:	00010007 	.word	0x00010007

080071e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e088      	b.n	8007310 <HAL_TIM_IC_ConfigChannel+0x130>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11b      	bne.n	8007244 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f000 fd6e 	bl	8007cfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 020c 	bic.w	r2, r2, #12
 800722e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	619a      	str	r2, [r3, #24]
 8007242:	e060      	b.n	8007306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b04      	cmp	r3, #4
 8007248:	d11c      	bne.n	8007284 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f000 fdc3 	bl	8007de4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800726c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6999      	ldr	r1, [r3, #24]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	021a      	lsls	r2, r3, #8
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	619a      	str	r2, [r3, #24]
 8007282:	e040      	b.n	8007306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b08      	cmp	r3, #8
 8007288:	d11b      	bne.n	80072c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f000 fde0 	bl	8007e5e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 020c 	bic.w	r2, r2, #12
 80072ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69d9      	ldr	r1, [r3, #28]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	61da      	str	r2, [r3, #28]
 80072c0:	e021      	b.n	8007306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b0c      	cmp	r3, #12
 80072c6:	d11c      	bne.n	8007302 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f000 fdfd 	bl	8007ed6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69d9      	ldr	r1, [r3, #28]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	61da      	str	r2, [r3, #28]
 8007300:	e001      	b.n	8007306 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007332:	2302      	movs	r3, #2
 8007334:	e0ff      	b.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b14      	cmp	r3, #20
 8007342:	f200 80f0 	bhi.w	8007526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	080073a1 	.word	0x080073a1
 8007350:	08007527 	.word	0x08007527
 8007354:	08007527 	.word	0x08007527
 8007358:	08007527 	.word	0x08007527
 800735c:	080073e1 	.word	0x080073e1
 8007360:	08007527 	.word	0x08007527
 8007364:	08007527 	.word	0x08007527
 8007368:	08007527 	.word	0x08007527
 800736c:	08007423 	.word	0x08007423
 8007370:	08007527 	.word	0x08007527
 8007374:	08007527 	.word	0x08007527
 8007378:	08007527 	.word	0x08007527
 800737c:	08007463 	.word	0x08007463
 8007380:	08007527 	.word	0x08007527
 8007384:	08007527 	.word	0x08007527
 8007388:	08007527 	.word	0x08007527
 800738c:	080074a5 	.word	0x080074a5
 8007390:	08007527 	.word	0x08007527
 8007394:	08007527 	.word	0x08007527
 8007398:	08007527 	.word	0x08007527
 800739c:	080074e5 	.word	0x080074e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f97e 	bl	80076a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0208 	orr.w	r2, r2, #8
 80073ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0204 	bic.w	r2, r2, #4
 80073ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6999      	ldr	r1, [r3, #24]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	619a      	str	r2, [r3, #24]
      break;
 80073de:	e0a5      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f9f8 	bl	80077dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6999      	ldr	r1, [r3, #24]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	021a      	lsls	r2, r3, #8
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	619a      	str	r2, [r3, #24]
      break;
 8007420:	e084      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fa6b 	bl	8007904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0208 	orr.w	r2, r2, #8
 800743c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0204 	bic.w	r2, r2, #4
 800744c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69d9      	ldr	r1, [r3, #28]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	61da      	str	r2, [r3, #28]
      break;
 8007460:	e064      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fadd 	bl	8007a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800747c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69d9      	ldr	r1, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	021a      	lsls	r2, r3, #8
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	61da      	str	r2, [r3, #28]
      break;
 80074a2:	e043      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fb50 	bl	8007b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0208 	orr.w	r2, r2, #8
 80074be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0204 	bic.w	r2, r2, #4
 80074ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80074e2:	e023      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fb9a 	bl	8007c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	021a      	lsls	r2, r3, #8
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007524:	e002      	b.n	800752c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
      break;
 800752a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop

08007540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a4c      	ldr	r2, [pc, #304]	; (8007684 <TIM_Base_SetConfig+0x144>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d017      	beq.n	8007588 <TIM_Base_SetConfig+0x48>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755e:	d013      	beq.n	8007588 <TIM_Base_SetConfig+0x48>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a49      	ldr	r2, [pc, #292]	; (8007688 <TIM_Base_SetConfig+0x148>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00f      	beq.n	8007588 <TIM_Base_SetConfig+0x48>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a48      	ldr	r2, [pc, #288]	; (800768c <TIM_Base_SetConfig+0x14c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00b      	beq.n	8007588 <TIM_Base_SetConfig+0x48>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a47      	ldr	r2, [pc, #284]	; (8007690 <TIM_Base_SetConfig+0x150>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d007      	beq.n	8007588 <TIM_Base_SetConfig+0x48>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a46      	ldr	r2, [pc, #280]	; (8007694 <TIM_Base_SetConfig+0x154>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_Base_SetConfig+0x48>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a45      	ldr	r2, [pc, #276]	; (8007698 <TIM_Base_SetConfig+0x158>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a39      	ldr	r2, [pc, #228]	; (8007684 <TIM_Base_SetConfig+0x144>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d023      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a8:	d01f      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a36      	ldr	r2, [pc, #216]	; (8007688 <TIM_Base_SetConfig+0x148>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01b      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a35      	ldr	r2, [pc, #212]	; (800768c <TIM_Base_SetConfig+0x14c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d017      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a34      	ldr	r2, [pc, #208]	; (8007690 <TIM_Base_SetConfig+0x150>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a33      	ldr	r2, [pc, #204]	; (8007694 <TIM_Base_SetConfig+0x154>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00f      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a33      	ldr	r2, [pc, #204]	; (800769c <TIM_Base_SetConfig+0x15c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00b      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a32      	ldr	r2, [pc, #200]	; (80076a0 <TIM_Base_SetConfig+0x160>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a31      	ldr	r2, [pc, #196]	; (80076a4 <TIM_Base_SetConfig+0x164>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	; (8007698 <TIM_Base_SetConfig+0x158>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d108      	bne.n	80075fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a18      	ldr	r2, [pc, #96]	; (8007684 <TIM_Base_SetConfig+0x144>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d013      	beq.n	8007650 <TIM_Base_SetConfig+0x110>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <TIM_Base_SetConfig+0x154>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00f      	beq.n	8007650 <TIM_Base_SetConfig+0x110>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1a      	ldr	r2, [pc, #104]	; (800769c <TIM_Base_SetConfig+0x15c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0x110>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <TIM_Base_SetConfig+0x160>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x110>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a18      	ldr	r2, [pc, #96]	; (80076a4 <TIM_Base_SetConfig+0x164>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x110>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a13      	ldr	r2, [pc, #76]	; (8007698 <TIM_Base_SetConfig+0x158>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d103      	bne.n	8007658 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b01      	cmp	r3, #1
 8007668:	d105      	bne.n	8007676 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	611a      	str	r2, [r3, #16]
  }
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40000c00 	.word	0x40000c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40015000 	.word	0x40015000
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800

080076a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f023 0201 	bic.w	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f023 0302 	bic.w	r3, r3, #2
 80076f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a30      	ldr	r2, [pc, #192]	; (80077c4 <TIM_OC1_SetConfig+0x11c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_OC1_SetConfig+0x88>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a2f      	ldr	r2, [pc, #188]	; (80077c8 <TIM_OC1_SetConfig+0x120>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00f      	beq.n	8007730 <TIM_OC1_SetConfig+0x88>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a2e      	ldr	r2, [pc, #184]	; (80077cc <TIM_OC1_SetConfig+0x124>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_OC1_SetConfig+0x88>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a2d      	ldr	r2, [pc, #180]	; (80077d0 <TIM_OC1_SetConfig+0x128>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_OC1_SetConfig+0x88>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a2c      	ldr	r2, [pc, #176]	; (80077d4 <TIM_OC1_SetConfig+0x12c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_OC1_SetConfig+0x88>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a2b      	ldr	r2, [pc, #172]	; (80077d8 <TIM_OC1_SetConfig+0x130>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10c      	bne.n	800774a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0308 	bic.w	r3, r3, #8
 8007736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 0304 	bic.w	r3, r3, #4
 8007748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <TIM_OC1_SetConfig+0x11c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_OC1_SetConfig+0xd2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <TIM_OC1_SetConfig+0x120>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_OC1_SetConfig+0xd2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a1b      	ldr	r2, [pc, #108]	; (80077cc <TIM_OC1_SetConfig+0x124>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_OC1_SetConfig+0xd2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1a      	ldr	r2, [pc, #104]	; (80077d0 <TIM_OC1_SetConfig+0x128>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_OC1_SetConfig+0xd2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a19      	ldr	r2, [pc, #100]	; (80077d4 <TIM_OC1_SetConfig+0x12c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_OC1_SetConfig+0xd2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a18      	ldr	r2, [pc, #96]	; (80077d8 <TIM_OC1_SetConfig+0x130>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d111      	bne.n	800779e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	621a      	str	r2, [r3, #32]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40013400 	.word	0x40013400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800
 80077d8:	40015000 	.word	0x40015000

080077dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	f023 0210 	bic.w	r2, r3, #16
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f023 0320 	bic.w	r3, r3, #32
 800782a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2c      	ldr	r2, [pc, #176]	; (80078ec <TIM_OC2_SetConfig+0x110>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d007      	beq.n	8007850 <TIM_OC2_SetConfig+0x74>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a2b      	ldr	r2, [pc, #172]	; (80078f0 <TIM_OC2_SetConfig+0x114>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_OC2_SetConfig+0x74>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a2a      	ldr	r2, [pc, #168]	; (80078f4 <TIM_OC2_SetConfig+0x118>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10d      	bne.n	800786c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1f      	ldr	r2, [pc, #124]	; (80078ec <TIM_OC2_SetConfig+0x110>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <TIM_OC2_SetConfig+0xc0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a1e      	ldr	r2, [pc, #120]	; (80078f0 <TIM_OC2_SetConfig+0x114>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00f      	beq.n	800789c <TIM_OC2_SetConfig+0xc0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <TIM_OC2_SetConfig+0x11c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_OC2_SetConfig+0xc0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <TIM_OC2_SetConfig+0x120>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_OC2_SetConfig+0xc0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <TIM_OC2_SetConfig+0x124>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_OC2_SetConfig+0xc0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <TIM_OC2_SetConfig+0x118>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d113      	bne.n	80078c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40012c00 	.word	0x40012c00
 80078f0:	40013400 	.word	0x40013400
 80078f4:	40015000 	.word	0x40015000
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40014400 	.word	0x40014400
 8007900:	40014800 	.word	0x40014800

08007904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2b      	ldr	r2, [pc, #172]	; (8007a10 <TIM_OC3_SetConfig+0x10c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <TIM_OC3_SetConfig+0x72>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2a      	ldr	r2, [pc, #168]	; (8007a14 <TIM_OC3_SetConfig+0x110>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_OC3_SetConfig+0x72>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a29      	ldr	r2, [pc, #164]	; (8007a18 <TIM_OC3_SetConfig+0x114>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d10d      	bne.n	8007992 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800797c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <TIM_OC3_SetConfig+0x10c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <TIM_OC3_SetConfig+0xbe>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <TIM_OC3_SetConfig+0x110>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00f      	beq.n	80079c2 <TIM_OC3_SetConfig+0xbe>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <TIM_OC3_SetConfig+0x118>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <TIM_OC3_SetConfig+0xbe>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1c      	ldr	r2, [pc, #112]	; (8007a20 <TIM_OC3_SetConfig+0x11c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d007      	beq.n	80079c2 <TIM_OC3_SetConfig+0xbe>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a1b      	ldr	r2, [pc, #108]	; (8007a24 <TIM_OC3_SetConfig+0x120>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_OC3_SetConfig+0xbe>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <TIM_OC3_SetConfig+0x114>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d113      	bne.n	80079ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	621a      	str	r2, [r3, #32]
}
 8007a04:	bf00      	nop
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	40012c00 	.word	0x40012c00
 8007a14:	40013400 	.word	0x40013400
 8007a18:	40015000 	.word	0x40015000
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	031b      	lsls	r3, r3, #12
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2c      	ldr	r2, [pc, #176]	; (8007b38 <TIM_OC4_SetConfig+0x110>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC4_SetConfig+0x74>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2b      	ldr	r2, [pc, #172]	; (8007b3c <TIM_OC4_SetConfig+0x114>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC4_SetConfig+0x74>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2a      	ldr	r2, [pc, #168]	; (8007b40 <TIM_OC4_SetConfig+0x118>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10d      	bne.n	8007ab8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	031b      	lsls	r3, r3, #12
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1f      	ldr	r2, [pc, #124]	; (8007b38 <TIM_OC4_SetConfig+0x110>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d013      	beq.n	8007ae8 <TIM_OC4_SetConfig+0xc0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <TIM_OC4_SetConfig+0x114>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00f      	beq.n	8007ae8 <TIM_OC4_SetConfig+0xc0>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <TIM_OC4_SetConfig+0x11c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00b      	beq.n	8007ae8 <TIM_OC4_SetConfig+0xc0>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <TIM_OC4_SetConfig+0x120>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d007      	beq.n	8007ae8 <TIM_OC4_SetConfig+0xc0>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <TIM_OC4_SetConfig+0x124>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <TIM_OC4_SetConfig+0xc0>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <TIM_OC4_SetConfig+0x118>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d113      	bne.n	8007b10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007af6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	019b      	lsls	r3, r3, #6
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	019b      	lsls	r3, r3, #6
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40013400 	.word	0x40013400
 8007b40:	40015000 	.word	0x40015000
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <TIM_OC5_SetConfig+0xbc>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <TIM_OC5_SetConfig+0x82>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a18      	ldr	r2, [pc, #96]	; (8007c10 <TIM_OC5_SetConfig+0xc0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00f      	beq.n	8007bd2 <TIM_OC5_SetConfig+0x82>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a17      	ldr	r2, [pc, #92]	; (8007c14 <TIM_OC5_SetConfig+0xc4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <TIM_OC5_SetConfig+0x82>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a16      	ldr	r2, [pc, #88]	; (8007c18 <TIM_OC5_SetConfig+0xc8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d007      	beq.n	8007bd2 <TIM_OC5_SetConfig+0x82>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a15      	ldr	r2, [pc, #84]	; (8007c1c <TIM_OC5_SetConfig+0xcc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d003      	beq.n	8007bd2 <TIM_OC5_SetConfig+0x82>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <TIM_OC5_SetConfig+0xd0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d109      	bne.n	8007be6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40014000 	.word	0x40014000
 8007c18:	40014400 	.word	0x40014400
 8007c1c:	40014800 	.word	0x40014800
 8007c20:	40015000 	.word	0x40015000

08007c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	051b      	lsls	r3, r3, #20
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <TIM_OC6_SetConfig+0xc0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d013      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x84>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <TIM_OC6_SetConfig+0xc4>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00f      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x84>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a18      	ldr	r2, [pc, #96]	; (8007cec <TIM_OC6_SetConfig+0xc8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x84>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a17      	ldr	r2, [pc, #92]	; (8007cf0 <TIM_OC6_SetConfig+0xcc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x84>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <TIM_OC6_SetConfig+0xd0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x84>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <TIM_OC6_SetConfig+0xd4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d109      	bne.n	8007cbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800
 8007cf8:	40015000 	.word	0x40015000

08007cfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	f023 0201 	bic.w	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4a28      	ldr	r2, [pc, #160]	; (8007dc8 <TIM_TI1_SetConfig+0xcc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01b      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d30:	d017      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <TIM_TI1_SetConfig+0xd0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a24      	ldr	r2, [pc, #144]	; (8007dd0 <TIM_TI1_SetConfig+0xd4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00f      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a23      	ldr	r2, [pc, #140]	; (8007dd4 <TIM_TI1_SetConfig+0xd8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00b      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <TIM_TI1_SetConfig+0xdc>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d007      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <TIM_TI1_SetConfig+0xe0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_TI1_SetConfig+0x66>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <TIM_TI1_SetConfig+0xe4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d101      	bne.n	8007d66 <TIM_TI1_SetConfig+0x6a>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <TIM_TI1_SetConfig+0x6c>
 8007d66:	2300      	movs	r3, #0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	e003      	b.n	8007d86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f023 030a 	bic.w	r3, r3, #10
 8007da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f003 030a 	and.w	r3, r3, #10
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40000800 	.word	0x40000800
 8007dd4:	40000c00 	.word	0x40000c00
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40015000 	.word	0x40015000

08007de4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	f023 0210 	bic.w	r2, r3, #16
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	031b      	lsls	r3, r3, #12
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b087      	sub	sp, #28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f023 0303 	bic.w	r3, r3, #3
 8007e8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007eae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	021b      	lsls	r3, r3, #8
 8007eb4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b087      	sub	sp, #28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	031b      	lsls	r3, r3, #12
 8007f2e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	621a      	str	r2, [r3, #32]
}
 8007f44:	bf00      	nop
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2201      	movs	r2, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	43db      	mvns	r3, r3
 8007f72:	401a      	ands	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	fa01 f303 	lsl.w	r3, r1, r3
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
	...

08007f9c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <HAL_TIMEx_PWMN_Start+0x24>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	bf14      	ite	ne
 8007fb8:	2301      	movne	r3, #1
 8007fba:	2300      	moveq	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	e022      	b.n	8008006 <HAL_TIMEx_PWMN_Start+0x6a>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d109      	bne.n	8007fda <HAL_TIMEx_PWMN_Start+0x3e>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	bf14      	ite	ne
 8007fd2:	2301      	movne	r3, #1
 8007fd4:	2300      	moveq	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	e015      	b.n	8008006 <HAL_TIMEx_PWMN_Start+0x6a>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d109      	bne.n	8007ff4 <HAL_TIMEx_PWMN_Start+0x58>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	bf14      	ite	ne
 8007fec:	2301      	movne	r3, #1
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	e008      	b.n	8008006 <HAL_TIMEx_PWMN_Start+0x6a>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e073      	b.n	80080f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <HAL_TIMEx_PWMN_Start+0x82>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	e013      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0xaa>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b04      	cmp	r3, #4
 8008022:	d104      	bne.n	800802e <HAL_TIMEx_PWMN_Start+0x92>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800802c:	e00b      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0xaa>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d104      	bne.n	800803e <HAL_TIMEx_PWMN_Start+0xa2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800803c:	e003      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0xaa>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2204      	movs	r2, #4
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f990 	bl	8008374 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008062:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a25      	ldr	r2, [pc, #148]	; (8008100 <HAL_TIMEx_PWMN_Start+0x164>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d022      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008076:	d01d      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a21      	ldr	r2, [pc, #132]	; (8008104 <HAL_TIMEx_PWMN_Start+0x168>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a20      	ldr	r2, [pc, #128]	; (8008108 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1e      	ldr	r2, [pc, #120]	; (800810c <HAL_TIMEx_PWMN_Start+0x170>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00e      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1d      	ldr	r2, [pc, #116]	; (8008110 <HAL_TIMEx_PWMN_Start+0x174>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <HAL_TIMEx_PWMN_Start+0x178>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_TIMEx_PWMN_Start+0x118>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a1a      	ldr	r2, [pc, #104]	; (8008118 <HAL_TIMEx_PWMN_Start+0x17c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d115      	bne.n	80080e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <HAL_TIMEx_PWMN_Start+0x180>)
 80080bc:	4013      	ands	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b06      	cmp	r3, #6
 80080c4:	d015      	beq.n	80080f2 <HAL_TIMEx_PWMN_Start+0x156>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	d011      	beq.n	80080f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0201 	orr.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080de:	e008      	b.n	80080f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 0201 	orr.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e000      	b.n	80080f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40000400 	.word	0x40000400
 8008108:	40000800 	.word	0x40000800
 800810c:	40000c00 	.word	0x40000c00
 8008110:	40013400 	.word	0x40013400
 8008114:	40014000 	.word	0x40014000
 8008118:	40015000 	.word	0x40015000
 800811c:	00010007 	.word	0x00010007

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e074      	b.n	8008222 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a34      	ldr	r2, [pc, #208]	; (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d009      	beq.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a33      	ldr	r2, [pc, #204]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d004      	beq.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a31      	ldr	r2, [pc, #196]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d108      	bne.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800817c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800818e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a21      	ldr	r2, [pc, #132]	; (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b8:	d01d      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1f      	ldr	r2, [pc, #124]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a15      	ldr	r2, [pc, #84]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a11      	ldr	r2, [pc, #68]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d10c      	bne.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	4313      	orrs	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40012c00 	.word	0x40012c00
 8008234:	40013400 	.word	0x40013400
 8008238:	40015000 	.word	0x40015000
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40014000 	.word	0x40014000

0800824c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008264:	2302      	movs	r3, #2
 8008266:	e078      	b.n	800835a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	; (8008368 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	; (800836c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d11c      	bne.n	8008348 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40013400 	.word	0x40013400
 8008370:	40015000 	.word	0x40015000

08008374 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	2204      	movs	r2, #4
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	43db      	mvns	r3, r3
 8008396:	401a      	ands	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a1a      	ldr	r2, [r3, #32]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ac:	431a      	orrs	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <__errno>:
 80083c0:	4b01      	ldr	r3, [pc, #4]	; (80083c8 <__errno+0x8>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	2000000c 	.word	0x2000000c

080083cc <__libc_init_array>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4d0d      	ldr	r5, [pc, #52]	; (8008404 <__libc_init_array+0x38>)
 80083d0:	4c0d      	ldr	r4, [pc, #52]	; (8008408 <__libc_init_array+0x3c>)
 80083d2:	1b64      	subs	r4, r4, r5
 80083d4:	10a4      	asrs	r4, r4, #2
 80083d6:	2600      	movs	r6, #0
 80083d8:	42a6      	cmp	r6, r4
 80083da:	d109      	bne.n	80083f0 <__libc_init_array+0x24>
 80083dc:	4d0b      	ldr	r5, [pc, #44]	; (800840c <__libc_init_array+0x40>)
 80083de:	4c0c      	ldr	r4, [pc, #48]	; (8008410 <__libc_init_array+0x44>)
 80083e0:	f001 f808 	bl	80093f4 <_init>
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	2600      	movs	r6, #0
 80083ea:	42a6      	cmp	r6, r4
 80083ec:	d105      	bne.n	80083fa <__libc_init_array+0x2e>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f4:	4798      	blx	r3
 80083f6:	3601      	adds	r6, #1
 80083f8:	e7ee      	b.n	80083d8 <__libc_init_array+0xc>
 80083fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fe:	4798      	blx	r3
 8008400:	3601      	adds	r6, #1
 8008402:	e7f2      	b.n	80083ea <__libc_init_array+0x1e>
 8008404:	0800982c 	.word	0x0800982c
 8008408:	0800982c 	.word	0x0800982c
 800840c:	0800982c 	.word	0x0800982c
 8008410:	08009830 	.word	0x08009830

08008414 <memcpy>:
 8008414:	440a      	add	r2, r1
 8008416:	4291      	cmp	r1, r2
 8008418:	f100 33ff 	add.w	r3, r0, #4294967295
 800841c:	d100      	bne.n	8008420 <memcpy+0xc>
 800841e:	4770      	bx	lr
 8008420:	b510      	push	{r4, lr}
 8008422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800842a:	4291      	cmp	r1, r2
 800842c:	d1f9      	bne.n	8008422 <memcpy+0xe>
 800842e:	bd10      	pop	{r4, pc}

08008430 <memset>:
 8008430:	4402      	add	r2, r0
 8008432:	4603      	mov	r3, r0
 8008434:	4293      	cmp	r3, r2
 8008436:	d100      	bne.n	800843a <memset+0xa>
 8008438:	4770      	bx	lr
 800843a:	f803 1b01 	strb.w	r1, [r3], #1
 800843e:	e7f9      	b.n	8008434 <memset+0x4>

08008440 <cosf>:
 8008440:	ee10 3a10 	vmov	r3, s0
 8008444:	b507      	push	{r0, r1, r2, lr}
 8008446:	4a1e      	ldr	r2, [pc, #120]	; (80084c0 <cosf+0x80>)
 8008448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800844c:	4293      	cmp	r3, r2
 800844e:	dc06      	bgt.n	800845e <cosf+0x1e>
 8008450:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80084c4 <cosf+0x84>
 8008454:	b003      	add	sp, #12
 8008456:	f85d eb04 	ldr.w	lr, [sp], #4
 800845a:	f000 bb1d 	b.w	8008a98 <__kernel_cosf>
 800845e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008462:	db04      	blt.n	800846e <cosf+0x2e>
 8008464:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008468:	b003      	add	sp, #12
 800846a:	f85d fb04 	ldr.w	pc, [sp], #4
 800846e:	4668      	mov	r0, sp
 8008470:	f000 f9d2 	bl	8008818 <__ieee754_rem_pio2f>
 8008474:	f000 0003 	and.w	r0, r0, #3
 8008478:	2801      	cmp	r0, #1
 800847a:	d009      	beq.n	8008490 <cosf+0x50>
 800847c:	2802      	cmp	r0, #2
 800847e:	d010      	beq.n	80084a2 <cosf+0x62>
 8008480:	b9b0      	cbnz	r0, 80084b0 <cosf+0x70>
 8008482:	eddd 0a01 	vldr	s1, [sp, #4]
 8008486:	ed9d 0a00 	vldr	s0, [sp]
 800848a:	f000 fb05 	bl	8008a98 <__kernel_cosf>
 800848e:	e7eb      	b.n	8008468 <cosf+0x28>
 8008490:	eddd 0a01 	vldr	s1, [sp, #4]
 8008494:	ed9d 0a00 	vldr	s0, [sp]
 8008498:	f000 fdd4 	bl	8009044 <__kernel_sinf>
 800849c:	eeb1 0a40 	vneg.f32	s0, s0
 80084a0:	e7e2      	b.n	8008468 <cosf+0x28>
 80084a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80084a6:	ed9d 0a00 	vldr	s0, [sp]
 80084aa:	f000 faf5 	bl	8008a98 <__kernel_cosf>
 80084ae:	e7f5      	b.n	800849c <cosf+0x5c>
 80084b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80084b4:	ed9d 0a00 	vldr	s0, [sp]
 80084b8:	2001      	movs	r0, #1
 80084ba:	f000 fdc3 	bl	8009044 <__kernel_sinf>
 80084be:	e7d3      	b.n	8008468 <cosf+0x28>
 80084c0:	3f490fd8 	.word	0x3f490fd8
 80084c4:	00000000 	.word	0x00000000

080084c8 <sinf>:
 80084c8:	ee10 3a10 	vmov	r3, s0
 80084cc:	b507      	push	{r0, r1, r2, lr}
 80084ce:	4a1f      	ldr	r2, [pc, #124]	; (800854c <sinf+0x84>)
 80084d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d4:	4293      	cmp	r3, r2
 80084d6:	dc07      	bgt.n	80084e8 <sinf+0x20>
 80084d8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008550 <sinf+0x88>
 80084dc:	2000      	movs	r0, #0
 80084de:	b003      	add	sp, #12
 80084e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e4:	f000 bdae 	b.w	8009044 <__kernel_sinf>
 80084e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084ec:	db04      	blt.n	80084f8 <sinf+0x30>
 80084ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80084f2:	b003      	add	sp, #12
 80084f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80084f8:	4668      	mov	r0, sp
 80084fa:	f000 f98d 	bl	8008818 <__ieee754_rem_pio2f>
 80084fe:	f000 0003 	and.w	r0, r0, #3
 8008502:	2801      	cmp	r0, #1
 8008504:	d00a      	beq.n	800851c <sinf+0x54>
 8008506:	2802      	cmp	r0, #2
 8008508:	d00f      	beq.n	800852a <sinf+0x62>
 800850a:	b9c0      	cbnz	r0, 800853e <sinf+0x76>
 800850c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008510:	ed9d 0a00 	vldr	s0, [sp]
 8008514:	2001      	movs	r0, #1
 8008516:	f000 fd95 	bl	8009044 <__kernel_sinf>
 800851a:	e7ea      	b.n	80084f2 <sinf+0x2a>
 800851c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008520:	ed9d 0a00 	vldr	s0, [sp]
 8008524:	f000 fab8 	bl	8008a98 <__kernel_cosf>
 8008528:	e7e3      	b.n	80084f2 <sinf+0x2a>
 800852a:	eddd 0a01 	vldr	s1, [sp, #4]
 800852e:	ed9d 0a00 	vldr	s0, [sp]
 8008532:	2001      	movs	r0, #1
 8008534:	f000 fd86 	bl	8009044 <__kernel_sinf>
 8008538:	eeb1 0a40 	vneg.f32	s0, s0
 800853c:	e7d9      	b.n	80084f2 <sinf+0x2a>
 800853e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008542:	ed9d 0a00 	vldr	s0, [sp]
 8008546:	f000 faa7 	bl	8008a98 <__kernel_cosf>
 800854a:	e7f5      	b.n	8008538 <sinf+0x70>
 800854c:	3f490fd8 	.word	0x3f490fd8
 8008550:	00000000 	.word	0x00000000

08008554 <atan2f>:
 8008554:	f000 b83e 	b.w	80085d4 <__ieee754_atan2f>

08008558 <fmodf>:
 8008558:	b508      	push	{r3, lr}
 800855a:	ed2d 8b02 	vpush	{d8}
 800855e:	eef0 8a40 	vmov.f32	s17, s0
 8008562:	eeb0 8a60 	vmov.f32	s16, s1
 8008566:	f000 f8d5 	bl	8008714 <__ieee754_fmodf>
 800856a:	eef4 8a48 	vcmp.f32	s17, s16
 800856e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008572:	d60c      	bvs.n	800858e <fmodf+0x36>
 8008574:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008594 <fmodf+0x3c>
 8008578:	eeb4 8a68 	vcmp.f32	s16, s17
 800857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008580:	d105      	bne.n	800858e <fmodf+0x36>
 8008582:	f7ff ff1d 	bl	80083c0 <__errno>
 8008586:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800858a:	2321      	movs	r3, #33	; 0x21
 800858c:	6003      	str	r3, [r0, #0]
 800858e:	ecbd 8b02 	vpop	{d8}
 8008592:	bd08      	pop	{r3, pc}
 8008594:	00000000 	.word	0x00000000

08008598 <sqrtf>:
 8008598:	b508      	push	{r3, lr}
 800859a:	ed2d 8b02 	vpush	{d8}
 800859e:	eeb0 8a40 	vmov.f32	s16, s0
 80085a2:	f000 fa75 	bl	8008a90 <__ieee754_sqrtf>
 80085a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80085aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ae:	d60c      	bvs.n	80085ca <sqrtf+0x32>
 80085b0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80085d0 <sqrtf+0x38>
 80085b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80085b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085bc:	d505      	bpl.n	80085ca <sqrtf+0x32>
 80085be:	f7ff feff 	bl	80083c0 <__errno>
 80085c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80085c6:	2321      	movs	r3, #33	; 0x21
 80085c8:	6003      	str	r3, [r0, #0]
 80085ca:	ecbd 8b02 	vpop	{d8}
 80085ce:	bd08      	pop	{r3, pc}
 80085d0:	00000000 	.word	0x00000000

080085d4 <__ieee754_atan2f>:
 80085d4:	ee10 2a90 	vmov	r2, s1
 80085d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80085dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80085e0:	b510      	push	{r4, lr}
 80085e2:	eef0 7a40 	vmov.f32	s15, s0
 80085e6:	dc06      	bgt.n	80085f6 <__ieee754_atan2f+0x22>
 80085e8:	ee10 0a10 	vmov	r0, s0
 80085ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80085f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80085f4:	dd04      	ble.n	8008600 <__ieee754_atan2f+0x2c>
 80085f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80085fa:	eeb0 0a67 	vmov.f32	s0, s15
 80085fe:	bd10      	pop	{r4, pc}
 8008600:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008604:	d103      	bne.n	800860e <__ieee754_atan2f+0x3a>
 8008606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860a:	f000 bd63 	b.w	80090d4 <atanf>
 800860e:	1794      	asrs	r4, r2, #30
 8008610:	f004 0402 	and.w	r4, r4, #2
 8008614:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008618:	b943      	cbnz	r3, 800862c <__ieee754_atan2f+0x58>
 800861a:	2c02      	cmp	r4, #2
 800861c:	d05e      	beq.n	80086dc <__ieee754_atan2f+0x108>
 800861e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80086f0 <__ieee754_atan2f+0x11c>
 8008622:	2c03      	cmp	r4, #3
 8008624:	bf08      	it	eq
 8008626:	eef0 7a47 	vmoveq.f32	s15, s14
 800862a:	e7e6      	b.n	80085fa <__ieee754_atan2f+0x26>
 800862c:	b941      	cbnz	r1, 8008640 <__ieee754_atan2f+0x6c>
 800862e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80086f4 <__ieee754_atan2f+0x120>
 8008632:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80086f8 <__ieee754_atan2f+0x124>
 8008636:	2800      	cmp	r0, #0
 8008638:	bfb8      	it	lt
 800863a:	eef0 7a40 	vmovlt.f32	s15, s0
 800863e:	e7dc      	b.n	80085fa <__ieee754_atan2f+0x26>
 8008640:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008644:	d110      	bne.n	8008668 <__ieee754_atan2f+0x94>
 8008646:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800864a:	f104 34ff 	add.w	r4, r4, #4294967295
 800864e:	d107      	bne.n	8008660 <__ieee754_atan2f+0x8c>
 8008650:	2c02      	cmp	r4, #2
 8008652:	d846      	bhi.n	80086e2 <__ieee754_atan2f+0x10e>
 8008654:	4b29      	ldr	r3, [pc, #164]	; (80086fc <__ieee754_atan2f+0x128>)
 8008656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800865a:	edd4 7a00 	vldr	s15, [r4]
 800865e:	e7cc      	b.n	80085fa <__ieee754_atan2f+0x26>
 8008660:	2c02      	cmp	r4, #2
 8008662:	d841      	bhi.n	80086e8 <__ieee754_atan2f+0x114>
 8008664:	4b26      	ldr	r3, [pc, #152]	; (8008700 <__ieee754_atan2f+0x12c>)
 8008666:	e7f6      	b.n	8008656 <__ieee754_atan2f+0x82>
 8008668:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800866c:	d0df      	beq.n	800862e <__ieee754_atan2f+0x5a>
 800866e:	1a5b      	subs	r3, r3, r1
 8008670:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008674:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008678:	da1a      	bge.n	80086b0 <__ieee754_atan2f+0xdc>
 800867a:	2a00      	cmp	r2, #0
 800867c:	da01      	bge.n	8008682 <__ieee754_atan2f+0xae>
 800867e:	313c      	adds	r1, #60	; 0x3c
 8008680:	db19      	blt.n	80086b6 <__ieee754_atan2f+0xe2>
 8008682:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008686:	f000 fdf9 	bl	800927c <fabsf>
 800868a:	f000 fd23 	bl	80090d4 <atanf>
 800868e:	eef0 7a40 	vmov.f32	s15, s0
 8008692:	2c01      	cmp	r4, #1
 8008694:	d012      	beq.n	80086bc <__ieee754_atan2f+0xe8>
 8008696:	2c02      	cmp	r4, #2
 8008698:	d017      	beq.n	80086ca <__ieee754_atan2f+0xf6>
 800869a:	2c00      	cmp	r4, #0
 800869c:	d0ad      	beq.n	80085fa <__ieee754_atan2f+0x26>
 800869e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008704 <__ieee754_atan2f+0x130>
 80086a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086a6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008708 <__ieee754_atan2f+0x134>
 80086aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80086ae:	e7a4      	b.n	80085fa <__ieee754_atan2f+0x26>
 80086b0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80086f4 <__ieee754_atan2f+0x120>
 80086b4:	e7ed      	b.n	8008692 <__ieee754_atan2f+0xbe>
 80086b6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800870c <__ieee754_atan2f+0x138>
 80086ba:	e7ea      	b.n	8008692 <__ieee754_atan2f+0xbe>
 80086bc:	ee17 3a90 	vmov	r3, s15
 80086c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	e797      	b.n	80085fa <__ieee754_atan2f+0x26>
 80086ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008704 <__ieee754_atan2f+0x130>
 80086ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086d2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008708 <__ieee754_atan2f+0x134>
 80086d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80086da:	e78e      	b.n	80085fa <__ieee754_atan2f+0x26>
 80086dc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008708 <__ieee754_atan2f+0x134>
 80086e0:	e78b      	b.n	80085fa <__ieee754_atan2f+0x26>
 80086e2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008710 <__ieee754_atan2f+0x13c>
 80086e6:	e788      	b.n	80085fa <__ieee754_atan2f+0x26>
 80086e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800870c <__ieee754_atan2f+0x138>
 80086ec:	e785      	b.n	80085fa <__ieee754_atan2f+0x26>
 80086ee:	bf00      	nop
 80086f0:	c0490fdb 	.word	0xc0490fdb
 80086f4:	3fc90fdb 	.word	0x3fc90fdb
 80086f8:	bfc90fdb 	.word	0xbfc90fdb
 80086fc:	0800941c 	.word	0x0800941c
 8008700:	08009428 	.word	0x08009428
 8008704:	33bbbd2e 	.word	0x33bbbd2e
 8008708:	40490fdb 	.word	0x40490fdb
 800870c:	00000000 	.word	0x00000000
 8008710:	3f490fdb 	.word	0x3f490fdb

08008714 <__ieee754_fmodf>:
 8008714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008716:	ee10 5a90 	vmov	r5, s1
 800871a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800871e:	d009      	beq.n	8008734 <__ieee754_fmodf+0x20>
 8008720:	ee10 2a10 	vmov	r2, s0
 8008724:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008728:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800872c:	da02      	bge.n	8008734 <__ieee754_fmodf+0x20>
 800872e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008732:	dd04      	ble.n	800873e <__ieee754_fmodf+0x2a>
 8008734:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008738:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800873c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873e:	42a3      	cmp	r3, r4
 8008740:	dbfc      	blt.n	800873c <__ieee754_fmodf+0x28>
 8008742:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8008746:	d105      	bne.n	8008754 <__ieee754_fmodf+0x40>
 8008748:	4b32      	ldr	r3, [pc, #200]	; (8008814 <__ieee754_fmodf+0x100>)
 800874a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800874e:	ed93 0a00 	vldr	s0, [r3]
 8008752:	e7f3      	b.n	800873c <__ieee754_fmodf+0x28>
 8008754:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8008758:	d13f      	bne.n	80087da <__ieee754_fmodf+0xc6>
 800875a:	0219      	lsls	r1, r3, #8
 800875c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008760:	2900      	cmp	r1, #0
 8008762:	dc37      	bgt.n	80087d4 <__ieee754_fmodf+0xc0>
 8008764:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8008768:	d13d      	bne.n	80087e6 <__ieee754_fmodf+0xd2>
 800876a:	0227      	lsls	r7, r4, #8
 800876c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008770:	2f00      	cmp	r7, #0
 8008772:	da35      	bge.n	80087e0 <__ieee754_fmodf+0xcc>
 8008774:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008778:	bfbb      	ittet	lt
 800877a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800877e:	1a12      	sublt	r2, r2, r0
 8008780:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008784:	4093      	lsllt	r3, r2
 8008786:	bfa8      	it	ge
 8008788:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800878c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008790:	bfb5      	itete	lt
 8008792:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008796:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800879a:	1a52      	sublt	r2, r2, r1
 800879c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80087a0:	bfb8      	it	lt
 80087a2:	4094      	lsllt	r4, r2
 80087a4:	1a40      	subs	r0, r0, r1
 80087a6:	1b1a      	subs	r2, r3, r4
 80087a8:	bb00      	cbnz	r0, 80087ec <__ieee754_fmodf+0xd8>
 80087aa:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80087ae:	bf38      	it	cc
 80087b0:	4613      	movcc	r3, r2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0c8      	beq.n	8008748 <__ieee754_fmodf+0x34>
 80087b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087ba:	db1f      	blt.n	80087fc <__ieee754_fmodf+0xe8>
 80087bc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80087c0:	db1f      	blt.n	8008802 <__ieee754_fmodf+0xee>
 80087c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80087c6:	317f      	adds	r1, #127	; 0x7f
 80087c8:	4333      	orrs	r3, r6
 80087ca:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80087ce:	ee00 3a10 	vmov	s0, r3
 80087d2:	e7b3      	b.n	800873c <__ieee754_fmodf+0x28>
 80087d4:	3801      	subs	r0, #1
 80087d6:	0049      	lsls	r1, r1, #1
 80087d8:	e7c2      	b.n	8008760 <__ieee754_fmodf+0x4c>
 80087da:	15d8      	asrs	r0, r3, #23
 80087dc:	387f      	subs	r0, #127	; 0x7f
 80087de:	e7c1      	b.n	8008764 <__ieee754_fmodf+0x50>
 80087e0:	3901      	subs	r1, #1
 80087e2:	007f      	lsls	r7, r7, #1
 80087e4:	e7c4      	b.n	8008770 <__ieee754_fmodf+0x5c>
 80087e6:	15e1      	asrs	r1, r4, #23
 80087e8:	397f      	subs	r1, #127	; 0x7f
 80087ea:	e7c3      	b.n	8008774 <__ieee754_fmodf+0x60>
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	da02      	bge.n	80087f6 <__ieee754_fmodf+0xe2>
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	3801      	subs	r0, #1
 80087f4:	e7d7      	b.n	80087a6 <__ieee754_fmodf+0x92>
 80087f6:	d0a7      	beq.n	8008748 <__ieee754_fmodf+0x34>
 80087f8:	0053      	lsls	r3, r2, #1
 80087fa:	e7fa      	b.n	80087f2 <__ieee754_fmodf+0xde>
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	3901      	subs	r1, #1
 8008800:	e7d9      	b.n	80087b6 <__ieee754_fmodf+0xa2>
 8008802:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008806:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800880a:	3182      	adds	r1, #130	; 0x82
 800880c:	410b      	asrs	r3, r1
 800880e:	4333      	orrs	r3, r6
 8008810:	e7dd      	b.n	80087ce <__ieee754_fmodf+0xba>
 8008812:	bf00      	nop
 8008814:	08009434 	.word	0x08009434

08008818 <__ieee754_rem_pio2f>:
 8008818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881a:	ee10 6a10 	vmov	r6, s0
 800881e:	4b8e      	ldr	r3, [pc, #568]	; (8008a58 <__ieee754_rem_pio2f+0x240>)
 8008820:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008824:	429d      	cmp	r5, r3
 8008826:	b087      	sub	sp, #28
 8008828:	eef0 7a40 	vmov.f32	s15, s0
 800882c:	4604      	mov	r4, r0
 800882e:	dc05      	bgt.n	800883c <__ieee754_rem_pio2f+0x24>
 8008830:	2300      	movs	r3, #0
 8008832:	ed80 0a00 	vstr	s0, [r0]
 8008836:	6043      	str	r3, [r0, #4]
 8008838:	2000      	movs	r0, #0
 800883a:	e01a      	b.n	8008872 <__ieee754_rem_pio2f+0x5a>
 800883c:	4b87      	ldr	r3, [pc, #540]	; (8008a5c <__ieee754_rem_pio2f+0x244>)
 800883e:	429d      	cmp	r5, r3
 8008840:	dc46      	bgt.n	80088d0 <__ieee754_rem_pio2f+0xb8>
 8008842:	2e00      	cmp	r6, #0
 8008844:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008a60 <__ieee754_rem_pio2f+0x248>
 8008848:	4b86      	ldr	r3, [pc, #536]	; (8008a64 <__ieee754_rem_pio2f+0x24c>)
 800884a:	f025 050f 	bic.w	r5, r5, #15
 800884e:	dd1f      	ble.n	8008890 <__ieee754_rem_pio2f+0x78>
 8008850:	429d      	cmp	r5, r3
 8008852:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008856:	d00e      	beq.n	8008876 <__ieee754_rem_pio2f+0x5e>
 8008858:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008a68 <__ieee754_rem_pio2f+0x250>
 800885c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008860:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008864:	ed80 0a00 	vstr	s0, [r0]
 8008868:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800886c:	2001      	movs	r0, #1
 800886e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008872:	b007      	add	sp, #28
 8008874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008876:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008a6c <__ieee754_rem_pio2f+0x254>
 800887a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008a70 <__ieee754_rem_pio2f+0x258>
 800887e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008882:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008886:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800888a:	edc0 6a00 	vstr	s13, [r0]
 800888e:	e7eb      	b.n	8008868 <__ieee754_rem_pio2f+0x50>
 8008890:	429d      	cmp	r5, r3
 8008892:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008896:	d00e      	beq.n	80088b6 <__ieee754_rem_pio2f+0x9e>
 8008898:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008a68 <__ieee754_rem_pio2f+0x250>
 800889c:	ee37 0a87 	vadd.f32	s0, s15, s14
 80088a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80088a4:	ed80 0a00 	vstr	s0, [r0]
 80088a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	edc4 7a01 	vstr	s15, [r4, #4]
 80088b4:	e7dd      	b.n	8008872 <__ieee754_rem_pio2f+0x5a>
 80088b6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008a6c <__ieee754_rem_pio2f+0x254>
 80088ba:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008a70 <__ieee754_rem_pio2f+0x258>
 80088be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80088c2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80088c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088ca:	edc0 6a00 	vstr	s13, [r0]
 80088ce:	e7eb      	b.n	80088a8 <__ieee754_rem_pio2f+0x90>
 80088d0:	4b68      	ldr	r3, [pc, #416]	; (8008a74 <__ieee754_rem_pio2f+0x25c>)
 80088d2:	429d      	cmp	r5, r3
 80088d4:	dc72      	bgt.n	80089bc <__ieee754_rem_pio2f+0x1a4>
 80088d6:	f000 fcd1 	bl	800927c <fabsf>
 80088da:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008a78 <__ieee754_rem_pio2f+0x260>
 80088de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80088e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80088e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088ee:	ee17 0a90 	vmov	r0, s15
 80088f2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008a60 <__ieee754_rem_pio2f+0x248>
 80088f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80088fa:	281f      	cmp	r0, #31
 80088fc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008a68 <__ieee754_rem_pio2f+0x250>
 8008900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008904:	eeb1 6a47 	vneg.f32	s12, s14
 8008908:	ee70 6a67 	vsub.f32	s13, s0, s15
 800890c:	ee16 2a90 	vmov	r2, s13
 8008910:	dc1c      	bgt.n	800894c <__ieee754_rem_pio2f+0x134>
 8008912:	495a      	ldr	r1, [pc, #360]	; (8008a7c <__ieee754_rem_pio2f+0x264>)
 8008914:	1e47      	subs	r7, r0, #1
 8008916:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800891a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800891e:	428b      	cmp	r3, r1
 8008920:	d014      	beq.n	800894c <__ieee754_rem_pio2f+0x134>
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	ed94 7a00 	vldr	s14, [r4]
 8008928:	ee30 0a47 	vsub.f32	s0, s0, s14
 800892c:	2e00      	cmp	r6, #0
 800892e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008932:	ed84 0a01 	vstr	s0, [r4, #4]
 8008936:	da9c      	bge.n	8008872 <__ieee754_rem_pio2f+0x5a>
 8008938:	eeb1 7a47 	vneg.f32	s14, s14
 800893c:	eeb1 0a40 	vneg.f32	s0, s0
 8008940:	ed84 7a00 	vstr	s14, [r4]
 8008944:	ed84 0a01 	vstr	s0, [r4, #4]
 8008948:	4240      	negs	r0, r0
 800894a:	e792      	b.n	8008872 <__ieee754_rem_pio2f+0x5a>
 800894c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008950:	15eb      	asrs	r3, r5, #23
 8008952:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008956:	2d08      	cmp	r5, #8
 8008958:	dde3      	ble.n	8008922 <__ieee754_rem_pio2f+0x10a>
 800895a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008a6c <__ieee754_rem_pio2f+0x254>
 800895e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a70 <__ieee754_rem_pio2f+0x258>
 8008962:	eef0 6a40 	vmov.f32	s13, s0
 8008966:	eee6 6a27 	vfma.f32	s13, s12, s15
 800896a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800896e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008972:	eef0 7a40 	vmov.f32	s15, s0
 8008976:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800897a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800897e:	ee15 2a90 	vmov	r2, s11
 8008982:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008986:	1a5b      	subs	r3, r3, r1
 8008988:	2b19      	cmp	r3, #25
 800898a:	dc04      	bgt.n	8008996 <__ieee754_rem_pio2f+0x17e>
 800898c:	edc4 5a00 	vstr	s11, [r4]
 8008990:	eeb0 0a66 	vmov.f32	s0, s13
 8008994:	e7c6      	b.n	8008924 <__ieee754_rem_pio2f+0x10c>
 8008996:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008a80 <__ieee754_rem_pio2f+0x268>
 800899a:	eeb0 0a66 	vmov.f32	s0, s13
 800899e:	eea6 0a25 	vfma.f32	s0, s12, s11
 80089a2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80089a6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008a84 <__ieee754_rem_pio2f+0x26c>
 80089aa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80089ae:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80089b2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80089b6:	ed84 7a00 	vstr	s14, [r4]
 80089ba:	e7b3      	b.n	8008924 <__ieee754_rem_pio2f+0x10c>
 80089bc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80089c0:	db06      	blt.n	80089d0 <__ieee754_rem_pio2f+0x1b8>
 80089c2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80089c6:	edc0 7a01 	vstr	s15, [r0, #4]
 80089ca:	edc0 7a00 	vstr	s15, [r0]
 80089ce:	e733      	b.n	8008838 <__ieee754_rem_pio2f+0x20>
 80089d0:	15ea      	asrs	r2, r5, #23
 80089d2:	3a86      	subs	r2, #134	; 0x86
 80089d4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089e0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008a88 <__ieee754_rem_pio2f+0x270>
 80089e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089ec:	ed8d 7a03 	vstr	s14, [sp, #12]
 80089f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a00:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008a04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a10:	edcd 7a05 	vstr	s15, [sp, #20]
 8008a14:	d11e      	bne.n	8008a54 <__ieee754_rem_pio2f+0x23c>
 8008a16:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1e:	bf14      	ite	ne
 8008a20:	2302      	movne	r3, #2
 8008a22:	2301      	moveq	r3, #1
 8008a24:	4919      	ldr	r1, [pc, #100]	; (8008a8c <__ieee754_rem_pio2f+0x274>)
 8008a26:	9101      	str	r1, [sp, #4]
 8008a28:	2102      	movs	r1, #2
 8008a2a:	9100      	str	r1, [sp, #0]
 8008a2c:	a803      	add	r0, sp, #12
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f000 f892 	bl	8008b58 <__kernel_rem_pio2f>
 8008a34:	2e00      	cmp	r6, #0
 8008a36:	f6bf af1c 	bge.w	8008872 <__ieee754_rem_pio2f+0x5a>
 8008a3a:	edd4 7a00 	vldr	s15, [r4]
 8008a3e:	eef1 7a67 	vneg.f32	s15, s15
 8008a42:	edc4 7a00 	vstr	s15, [r4]
 8008a46:	edd4 7a01 	vldr	s15, [r4, #4]
 8008a4a:	eef1 7a67 	vneg.f32	s15, s15
 8008a4e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008a52:	e779      	b.n	8008948 <__ieee754_rem_pio2f+0x130>
 8008a54:	2303      	movs	r3, #3
 8008a56:	e7e5      	b.n	8008a24 <__ieee754_rem_pio2f+0x20c>
 8008a58:	3f490fd8 	.word	0x3f490fd8
 8008a5c:	4016cbe3 	.word	0x4016cbe3
 8008a60:	3fc90f80 	.word	0x3fc90f80
 8008a64:	3fc90fd0 	.word	0x3fc90fd0
 8008a68:	37354443 	.word	0x37354443
 8008a6c:	37354400 	.word	0x37354400
 8008a70:	2e85a308 	.word	0x2e85a308
 8008a74:	43490f80 	.word	0x43490f80
 8008a78:	3f22f984 	.word	0x3f22f984
 8008a7c:	0800943c 	.word	0x0800943c
 8008a80:	2e85a300 	.word	0x2e85a300
 8008a84:	248d3132 	.word	0x248d3132
 8008a88:	43800000 	.word	0x43800000
 8008a8c:	080094bc 	.word	0x080094bc

08008a90 <__ieee754_sqrtf>:
 8008a90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008a94:	4770      	bx	lr
	...

08008a98 <__kernel_cosf>:
 8008a98:	ee10 3a10 	vmov	r3, s0
 8008a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008aa4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008aa8:	da05      	bge.n	8008ab6 <__kernel_cosf+0x1e>
 8008aaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008aae:	ee17 2a90 	vmov	r2, s15
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	d03d      	beq.n	8008b32 <__kernel_cosf+0x9a>
 8008ab6:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008aba:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b38 <__kernel_cosf+0xa0>
 8008abe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008b3c <__kernel_cosf+0xa4>
 8008ac2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008b40 <__kernel_cosf+0xa8>
 8008ac6:	4a1f      	ldr	r2, [pc, #124]	; (8008b44 <__kernel_cosf+0xac>)
 8008ac8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008acc:	4293      	cmp	r3, r2
 8008ace:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008b48 <__kernel_cosf+0xb0>
 8008ad2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008ad6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008b4c <__kernel_cosf+0xb4>
 8008ada:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008ade:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008b50 <__kernel_cosf+0xb8>
 8008ae2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008ae6:	eeb0 7a66 	vmov.f32	s14, s13
 8008aea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008aee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008af2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008af6:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008afa:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008afe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008b02:	dc04      	bgt.n	8008b0e <__kernel_cosf+0x76>
 8008b04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008b08:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008b0c:	4770      	bx	lr
 8008b0e:	4a11      	ldr	r2, [pc, #68]	; (8008b54 <__kernel_cosf+0xbc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	bfda      	itte	le
 8008b14:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008b18:	ee06 3a90 	vmovle	s13, r3
 8008b1c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008b20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b24:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008b28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b2c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b30:	4770      	bx	lr
 8008b32:	eeb0 0a46 	vmov.f32	s0, s12
 8008b36:	4770      	bx	lr
 8008b38:	ad47d74e 	.word	0xad47d74e
 8008b3c:	310f74f6 	.word	0x310f74f6
 8008b40:	3d2aaaab 	.word	0x3d2aaaab
 8008b44:	3e999999 	.word	0x3e999999
 8008b48:	b493f27c 	.word	0xb493f27c
 8008b4c:	37d00d01 	.word	0x37d00d01
 8008b50:	bab60b61 	.word	0xbab60b61
 8008b54:	3f480000 	.word	0x3f480000

08008b58 <__kernel_rem_pio2f>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ed2d 8b04 	vpush	{d8-d9}
 8008b60:	b0d9      	sub	sp, #356	; 0x164
 8008b62:	4688      	mov	r8, r1
 8008b64:	9002      	str	r0, [sp, #8]
 8008b66:	49bb      	ldr	r1, [pc, #748]	; (8008e54 <__kernel_rem_pio2f+0x2fc>)
 8008b68:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008b70:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008b74:	1e59      	subs	r1, r3, #1
 8008b76:	1d13      	adds	r3, r2, #4
 8008b78:	db27      	blt.n	8008bca <__kernel_rem_pio2f+0x72>
 8008b7a:	f1b2 0b03 	subs.w	fp, r2, #3
 8008b7e:	bf48      	it	mi
 8008b80:	f102 0b04 	addmi.w	fp, r2, #4
 8008b84:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008b88:	1c45      	adds	r5, r0, #1
 8008b8a:	00ec      	lsls	r4, r5, #3
 8008b8c:	1a47      	subs	r7, r0, r1
 8008b8e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008b92:	9403      	str	r4, [sp, #12]
 8008b94:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008b98:	eb0a 0c01 	add.w	ip, sl, r1
 8008b9c:	ae1c      	add	r6, sp, #112	; 0x70
 8008b9e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008ba2:	2400      	movs	r4, #0
 8008ba4:	4564      	cmp	r4, ip
 8008ba6:	dd12      	ble.n	8008bce <__kernel_rem_pio2f+0x76>
 8008ba8:	9b01      	ldr	r3, [sp, #4]
 8008baa:	ac1c      	add	r4, sp, #112	; 0x70
 8008bac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008bb0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008bb4:	f04f 0c00 	mov.w	ip, #0
 8008bb8:	45d4      	cmp	ip, sl
 8008bba:	dc27      	bgt.n	8008c0c <__kernel_rem_pio2f+0xb4>
 8008bbc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008bc0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008bc4:	4627      	mov	r7, r4
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	e016      	b.n	8008bf8 <__kernel_rem_pio2f+0xa0>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e7dc      	b.n	8008b88 <__kernel_rem_pio2f+0x30>
 8008bce:	42e7      	cmn	r7, r4
 8008bd0:	bf5d      	ittte	pl
 8008bd2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008bd6:	ee07 3a90 	vmovpl	s15, r3
 8008bda:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008bde:	eef0 7a47 	vmovmi.f32	s15, s14
 8008be2:	ece6 7a01 	vstmia	r6!, {s15}
 8008be6:	3401      	adds	r4, #1
 8008be8:	e7dc      	b.n	8008ba4 <__kernel_rem_pio2f+0x4c>
 8008bea:	ecf9 6a01 	vldmia	r9!, {s13}
 8008bee:	ed97 7a00 	vldr	s14, [r7]
 8008bf2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008bf6:	3601      	adds	r6, #1
 8008bf8:	428e      	cmp	r6, r1
 8008bfa:	f1a7 0704 	sub.w	r7, r7, #4
 8008bfe:	ddf4      	ble.n	8008bea <__kernel_rem_pio2f+0x92>
 8008c00:	eceb 7a01 	vstmia	fp!, {s15}
 8008c04:	f10c 0c01 	add.w	ip, ip, #1
 8008c08:	3404      	adds	r4, #4
 8008c0a:	e7d5      	b.n	8008bb8 <__kernel_rem_pio2f+0x60>
 8008c0c:	ab08      	add	r3, sp, #32
 8008c0e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008c12:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008e60 <__kernel_rem_pio2f+0x308>
 8008c16:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008e5c <__kernel_rem_pio2f+0x304>
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008c20:	4656      	mov	r6, sl
 8008c22:	00b3      	lsls	r3, r6, #2
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	ab58      	add	r3, sp, #352	; 0x160
 8008c28:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008c2c:	ac08      	add	r4, sp, #32
 8008c2e:	ab44      	add	r3, sp, #272	; 0x110
 8008c30:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008c34:	46a4      	mov	ip, r4
 8008c36:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008c3a:	4637      	mov	r7, r6
 8008c3c:	2f00      	cmp	r7, #0
 8008c3e:	f1a0 0004 	sub.w	r0, r0, #4
 8008c42:	dc4f      	bgt.n	8008ce4 <__kernel_rem_pio2f+0x18c>
 8008c44:	4628      	mov	r0, r5
 8008c46:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008c4a:	f000 fb61 	bl	8009310 <scalbnf>
 8008c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8008c52:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008c56:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008c5a:	f000 fb17 	bl	800928c <floorf>
 8008c5e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008c62:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008c6c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008c70:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008c74:	ee17 9a90 	vmov	r9, s15
 8008c78:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008c7c:	dd44      	ble.n	8008d08 <__kernel_rem_pio2f+0x1b0>
 8008c7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8008c82:	ab08      	add	r3, sp, #32
 8008c84:	f1c5 0e08 	rsb	lr, r5, #8
 8008c88:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008c8c:	fa47 f00e 	asr.w	r0, r7, lr
 8008c90:	4481      	add	r9, r0
 8008c92:	fa00 f00e 	lsl.w	r0, r0, lr
 8008c96:	1a3f      	subs	r7, r7, r0
 8008c98:	f1c5 0007 	rsb	r0, r5, #7
 8008c9c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008ca0:	4107      	asrs	r7, r0
 8008ca2:	2f00      	cmp	r7, #0
 8008ca4:	dd3f      	ble.n	8008d26 <__kernel_rem_pio2f+0x1ce>
 8008ca6:	f04f 0e00 	mov.w	lr, #0
 8008caa:	f109 0901 	add.w	r9, r9, #1
 8008cae:	4673      	mov	r3, lr
 8008cb0:	4576      	cmp	r6, lr
 8008cb2:	dc6b      	bgt.n	8008d8c <__kernel_rem_pio2f+0x234>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	dd04      	ble.n	8008cc2 <__kernel_rem_pio2f+0x16a>
 8008cb8:	2d01      	cmp	r5, #1
 8008cba:	d078      	beq.n	8008dae <__kernel_rem_pio2f+0x256>
 8008cbc:	2d02      	cmp	r5, #2
 8008cbe:	f000 8081 	beq.w	8008dc4 <__kernel_rem_pio2f+0x26c>
 8008cc2:	2f02      	cmp	r7, #2
 8008cc4:	d12f      	bne.n	8008d26 <__kernel_rem_pio2f+0x1ce>
 8008cc6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008cca:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008cce:	b353      	cbz	r3, 8008d26 <__kernel_rem_pio2f+0x1ce>
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008cd6:	f000 fb1b 	bl	8009310 <scalbnf>
 8008cda:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008cde:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008ce2:	e020      	b.n	8008d26 <__kernel_rem_pio2f+0x1ce>
 8008ce4:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008ce8:	3f01      	subs	r7, #1
 8008cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008cf6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008cfa:	ecac 0a01 	vstmia	ip!, {s0}
 8008cfe:	ed90 0a00 	vldr	s0, [r0]
 8008d02:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008d06:	e799      	b.n	8008c3c <__kernel_rem_pio2f+0xe4>
 8008d08:	d105      	bne.n	8008d16 <__kernel_rem_pio2f+0x1be>
 8008d0a:	1e70      	subs	r0, r6, #1
 8008d0c:	ab08      	add	r3, sp, #32
 8008d0e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008d12:	11ff      	asrs	r7, r7, #7
 8008d14:	e7c5      	b.n	8008ca2 <__kernel_rem_pio2f+0x14a>
 8008d16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008d1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d22:	da31      	bge.n	8008d88 <__kernel_rem_pio2f+0x230>
 8008d24:	2700      	movs	r7, #0
 8008d26:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2e:	f040 809b 	bne.w	8008e68 <__kernel_rem_pio2f+0x310>
 8008d32:	1e74      	subs	r4, r6, #1
 8008d34:	46a4      	mov	ip, r4
 8008d36:	2000      	movs	r0, #0
 8008d38:	45d4      	cmp	ip, sl
 8008d3a:	da4a      	bge.n	8008dd2 <__kernel_rem_pio2f+0x27a>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d07a      	beq.n	8008e36 <__kernel_rem_pio2f+0x2de>
 8008d40:	ab08      	add	r3, sp, #32
 8008d42:	3d08      	subs	r5, #8
 8008d44:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 8081 	beq.w	8008e50 <__kernel_rem_pio2f+0x2f8>
 8008d4e:	4628      	mov	r0, r5
 8008d50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d54:	00a5      	lsls	r5, r4, #2
 8008d56:	f000 fadb 	bl	8009310 <scalbnf>
 8008d5a:	aa44      	add	r2, sp, #272	; 0x110
 8008d5c:	1d2b      	adds	r3, r5, #4
 8008d5e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008e60 <__kernel_rem_pio2f+0x308>
 8008d62:	18d1      	adds	r1, r2, r3
 8008d64:	4622      	mov	r2, r4
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	f280 80ae 	bge.w	8008ec8 <__kernel_rem_pio2f+0x370>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	2a00      	cmp	r2, #0
 8008d70:	f2c0 80cc 	blt.w	8008f0c <__kernel_rem_pio2f+0x3b4>
 8008d74:	a944      	add	r1, sp, #272	; 0x110
 8008d76:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008d7a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008e58 <__kernel_rem_pio2f+0x300>
 8008d7e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008d82:	2000      	movs	r0, #0
 8008d84:	1aa1      	subs	r1, r4, r2
 8008d86:	e0b6      	b.n	8008ef6 <__kernel_rem_pio2f+0x39e>
 8008d88:	2702      	movs	r7, #2
 8008d8a:	e78c      	b.n	8008ca6 <__kernel_rem_pio2f+0x14e>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	b94b      	cbnz	r3, 8008da4 <__kernel_rem_pio2f+0x24c>
 8008d90:	b118      	cbz	r0, 8008d9a <__kernel_rem_pio2f+0x242>
 8008d92:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008d96:	6020      	str	r0, [r4, #0]
 8008d98:	2001      	movs	r0, #1
 8008d9a:	f10e 0e01 	add.w	lr, lr, #1
 8008d9e:	3404      	adds	r4, #4
 8008da0:	4603      	mov	r3, r0
 8008da2:	e785      	b.n	8008cb0 <__kernel_rem_pio2f+0x158>
 8008da4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008da8:	6020      	str	r0, [r4, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	e7f5      	b.n	8008d9a <__kernel_rem_pio2f+0x242>
 8008dae:	1e74      	subs	r4, r6, #1
 8008db0:	a808      	add	r0, sp, #32
 8008db2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008db6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008dba:	f10d 0c20 	add.w	ip, sp, #32
 8008dbe:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008dc2:	e77e      	b.n	8008cc2 <__kernel_rem_pio2f+0x16a>
 8008dc4:	1e74      	subs	r4, r6, #1
 8008dc6:	a808      	add	r0, sp, #32
 8008dc8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008dcc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008dd0:	e7f3      	b.n	8008dba <__kernel_rem_pio2f+0x262>
 8008dd2:	ab08      	add	r3, sp, #32
 8008dd4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008dd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ddc:	4318      	orrs	r0, r3
 8008dde:	e7ab      	b.n	8008d38 <__kernel_rem_pio2f+0x1e0>
 8008de0:	f10c 0c01 	add.w	ip, ip, #1
 8008de4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	d0f9      	beq.n	8008de0 <__kernel_rem_pio2f+0x288>
 8008dec:	9b05      	ldr	r3, [sp, #20]
 8008dee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008df2:	eb0d 0003 	add.w	r0, sp, r3
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	18f4      	adds	r4, r6, r3
 8008dfa:	ab1c      	add	r3, sp, #112	; 0x70
 8008dfc:	1c77      	adds	r7, r6, #1
 8008dfe:	384c      	subs	r0, #76	; 0x4c
 8008e00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e04:	4466      	add	r6, ip
 8008e06:	42be      	cmp	r6, r7
 8008e08:	f6ff af0b 	blt.w	8008c22 <__kernel_rem_pio2f+0xca>
 8008e0c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008e10:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008e14:	ee07 3a90 	vmov	s15, r3
 8008e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e1c:	f04f 0c00 	mov.w	ip, #0
 8008e20:	ece4 7a01 	vstmia	r4!, {s15}
 8008e24:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008e28:	46a1      	mov	r9, r4
 8008e2a:	458c      	cmp	ip, r1
 8008e2c:	dd07      	ble.n	8008e3e <__kernel_rem_pio2f+0x2e6>
 8008e2e:	ece0 7a01 	vstmia	r0!, {s15}
 8008e32:	3701      	adds	r7, #1
 8008e34:	e7e7      	b.n	8008e06 <__kernel_rem_pio2f+0x2ae>
 8008e36:	9804      	ldr	r0, [sp, #16]
 8008e38:	f04f 0c01 	mov.w	ip, #1
 8008e3c:	e7d2      	b.n	8008de4 <__kernel_rem_pio2f+0x28c>
 8008e3e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008e42:	ed39 7a01 	vldmdb	r9!, {s14}
 8008e46:	f10c 0c01 	add.w	ip, ip, #1
 8008e4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e4e:	e7ec      	b.n	8008e2a <__kernel_rem_pio2f+0x2d2>
 8008e50:	3c01      	subs	r4, #1
 8008e52:	e775      	b.n	8008d40 <__kernel_rem_pio2f+0x1e8>
 8008e54:	08009800 	.word	0x08009800
 8008e58:	080097d4 	.word	0x080097d4
 8008e5c:	43800000 	.word	0x43800000
 8008e60:	3b800000 	.word	0x3b800000
 8008e64:	00000000 	.word	0x00000000
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	eeb0 0a48 	vmov.f32	s0, s16
 8008e6e:	1a98      	subs	r0, r3, r2
 8008e70:	f000 fa4e 	bl	8009310 <scalbnf>
 8008e74:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008e5c <__kernel_rem_pio2f+0x304>
 8008e78:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e80:	db19      	blt.n	8008eb6 <__kernel_rem_pio2f+0x35e>
 8008e82:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008e60 <__kernel_rem_pio2f+0x308>
 8008e86:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008e8a:	aa08      	add	r2, sp, #32
 8008e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e90:	1c74      	adds	r4, r6, #1
 8008e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e96:	3508      	adds	r5, #8
 8008e98:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ea0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ea4:	ee10 3a10 	vmov	r3, s0
 8008ea8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008eac:	ee17 3a90 	vmov	r3, s15
 8008eb0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008eb4:	e74b      	b.n	8008d4e <__kernel_rem_pio2f+0x1f6>
 8008eb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008eba:	aa08      	add	r2, sp, #32
 8008ebc:	ee10 3a10 	vmov	r3, s0
 8008ec0:	4634      	mov	r4, r6
 8008ec2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008ec6:	e742      	b.n	8008d4e <__kernel_rem_pio2f+0x1f6>
 8008ec8:	a808      	add	r0, sp, #32
 8008eca:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008ece:	9001      	str	r0, [sp, #4]
 8008ed0:	ee07 0a90 	vmov	s15, r0
 8008ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008ede:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008ee2:	ed61 7a01 	vstmdb	r1!, {s15}
 8008ee6:	e73e      	b.n	8008d66 <__kernel_rem_pio2f+0x20e>
 8008ee8:	ecfc 6a01 	vldmia	ip!, {s13}
 8008eec:	ecb6 7a01 	vldmia	r6!, {s14}
 8008ef0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	4550      	cmp	r0, sl
 8008ef8:	dc01      	bgt.n	8008efe <__kernel_rem_pio2f+0x3a6>
 8008efa:	4288      	cmp	r0, r1
 8008efc:	ddf4      	ble.n	8008ee8 <__kernel_rem_pio2f+0x390>
 8008efe:	a858      	add	r0, sp, #352	; 0x160
 8008f00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f04:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	e730      	b.n	8008d6e <__kernel_rem_pio2f+0x216>
 8008f0c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008f0e:	2a02      	cmp	r2, #2
 8008f10:	dc09      	bgt.n	8008f26 <__kernel_rem_pio2f+0x3ce>
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	dc2a      	bgt.n	8008f6c <__kernel_rem_pio2f+0x414>
 8008f16:	d043      	beq.n	8008fa0 <__kernel_rem_pio2f+0x448>
 8008f18:	f009 0007 	and.w	r0, r9, #7
 8008f1c:	b059      	add	sp, #356	; 0x164
 8008f1e:	ecbd 8b04 	vpop	{d8-d9}
 8008f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f26:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d1f5      	bne.n	8008f18 <__kernel_rem_pio2f+0x3c0>
 8008f2c:	ab30      	add	r3, sp, #192	; 0xc0
 8008f2e:	442b      	add	r3, r5
 8008f30:	461a      	mov	r2, r3
 8008f32:	4619      	mov	r1, r3
 8008f34:	4620      	mov	r0, r4
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f1a1 0104 	sub.w	r1, r1, #4
 8008f3c:	dc51      	bgt.n	8008fe2 <__kernel_rem_pio2f+0x48a>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	2901      	cmp	r1, #1
 8008f42:	f1a2 0204 	sub.w	r2, r2, #4
 8008f46:	dc5c      	bgt.n	8009002 <__kernel_rem_pio2f+0x4aa>
 8008f48:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	2c01      	cmp	r4, #1
 8008f50:	dc67      	bgt.n	8009022 <__kernel_rem_pio2f+0x4ca>
 8008f52:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008f56:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008f5a:	2f00      	cmp	r7, #0
 8008f5c:	d167      	bne.n	800902e <__kernel_rem_pio2f+0x4d6>
 8008f5e:	edc8 6a00 	vstr	s13, [r8]
 8008f62:	ed88 7a01 	vstr	s14, [r8, #4]
 8008f66:	edc8 7a02 	vstr	s15, [r8, #8]
 8008f6a:	e7d5      	b.n	8008f18 <__kernel_rem_pio2f+0x3c0>
 8008f6c:	aa30      	add	r2, sp, #192	; 0xc0
 8008f6e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008f72:	4413      	add	r3, r2
 8008f74:	4622      	mov	r2, r4
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	da24      	bge.n	8008fc4 <__kernel_rem_pio2f+0x46c>
 8008f7a:	b34f      	cbz	r7, 8008fd0 <__kernel_rem_pio2f+0x478>
 8008f7c:	eef1 7a47 	vneg.f32	s15, s14
 8008f80:	edc8 7a00 	vstr	s15, [r8]
 8008f84:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f8c:	aa31      	add	r2, sp, #196	; 0xc4
 8008f8e:	2301      	movs	r3, #1
 8008f90:	429c      	cmp	r4, r3
 8008f92:	da20      	bge.n	8008fd6 <__kernel_rem_pio2f+0x47e>
 8008f94:	b10f      	cbz	r7, 8008f9a <__kernel_rem_pio2f+0x442>
 8008f96:	eef1 7a67 	vneg.f32	s15, s15
 8008f9a:	edc8 7a01 	vstr	s15, [r8, #4]
 8008f9e:	e7bb      	b.n	8008f18 <__kernel_rem_pio2f+0x3c0>
 8008fa0:	aa30      	add	r2, sp, #192	; 0xc0
 8008fa2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008e64 <__kernel_rem_pio2f+0x30c>
 8008fa6:	4413      	add	r3, r2
 8008fa8:	2c00      	cmp	r4, #0
 8008faa:	da05      	bge.n	8008fb8 <__kernel_rem_pio2f+0x460>
 8008fac:	b10f      	cbz	r7, 8008fb2 <__kernel_rem_pio2f+0x45a>
 8008fae:	eef1 7a67 	vneg.f32	s15, s15
 8008fb2:	edc8 7a00 	vstr	s15, [r8]
 8008fb6:	e7af      	b.n	8008f18 <__kernel_rem_pio2f+0x3c0>
 8008fb8:	ed33 7a01 	vldmdb	r3!, {s14}
 8008fbc:	3c01      	subs	r4, #1
 8008fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fc2:	e7f1      	b.n	8008fa8 <__kernel_rem_pio2f+0x450>
 8008fc4:	ed73 7a01 	vldmdb	r3!, {s15}
 8008fc8:	3a01      	subs	r2, #1
 8008fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fce:	e7d2      	b.n	8008f76 <__kernel_rem_pio2f+0x41e>
 8008fd0:	eef0 7a47 	vmov.f32	s15, s14
 8008fd4:	e7d4      	b.n	8008f80 <__kernel_rem_pio2f+0x428>
 8008fd6:	ecb2 7a01 	vldmia	r2!, {s14}
 8008fda:	3301      	adds	r3, #1
 8008fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fe0:	e7d6      	b.n	8008f90 <__kernel_rem_pio2f+0x438>
 8008fe2:	edd1 7a00 	vldr	s15, [r1]
 8008fe6:	edd1 6a01 	vldr	s13, [r1, #4]
 8008fea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008fee:	3801      	subs	r0, #1
 8008ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ff4:	ed81 7a00 	vstr	s14, [r1]
 8008ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffc:	edc1 7a01 	vstr	s15, [r1, #4]
 8009000:	e799      	b.n	8008f36 <__kernel_rem_pio2f+0x3de>
 8009002:	edd2 7a00 	vldr	s15, [r2]
 8009006:	edd2 6a01 	vldr	s13, [r2, #4]
 800900a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800900e:	3901      	subs	r1, #1
 8009010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009014:	ed82 7a00 	vstr	s14, [r2]
 8009018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009020:	e78e      	b.n	8008f40 <__kernel_rem_pio2f+0x3e8>
 8009022:	ed33 7a01 	vldmdb	r3!, {s14}
 8009026:	3c01      	subs	r4, #1
 8009028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800902c:	e78f      	b.n	8008f4e <__kernel_rem_pio2f+0x3f6>
 800902e:	eef1 6a66 	vneg.f32	s13, s13
 8009032:	eeb1 7a47 	vneg.f32	s14, s14
 8009036:	edc8 6a00 	vstr	s13, [r8]
 800903a:	ed88 7a01 	vstr	s14, [r8, #4]
 800903e:	eef1 7a67 	vneg.f32	s15, s15
 8009042:	e790      	b.n	8008f66 <__kernel_rem_pio2f+0x40e>

08009044 <__kernel_sinf>:
 8009044:	ee10 3a10 	vmov	r3, s0
 8009048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800904c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009050:	da04      	bge.n	800905c <__kernel_sinf+0x18>
 8009052:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009056:	ee17 3a90 	vmov	r3, s15
 800905a:	b35b      	cbz	r3, 80090b4 <__kernel_sinf+0x70>
 800905c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009060:	eddf 7a15 	vldr	s15, [pc, #84]	; 80090b8 <__kernel_sinf+0x74>
 8009064:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80090bc <__kernel_sinf+0x78>
 8009068:	eea7 6a27 	vfma.f32	s12, s14, s15
 800906c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80090c0 <__kernel_sinf+0x7c>
 8009070:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009074:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80090c4 <__kernel_sinf+0x80>
 8009078:	eea7 6a87 	vfma.f32	s12, s15, s14
 800907c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80090c8 <__kernel_sinf+0x84>
 8009080:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009084:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009088:	b930      	cbnz	r0, 8009098 <__kernel_sinf+0x54>
 800908a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80090cc <__kernel_sinf+0x88>
 800908e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009092:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009096:	4770      	bx	lr
 8009098:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800909c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80090a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80090a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80090a8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80090d0 <__kernel_sinf+0x8c>
 80090ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80090b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	2f2ec9d3 	.word	0x2f2ec9d3
 80090bc:	b2d72f34 	.word	0xb2d72f34
 80090c0:	3638ef1b 	.word	0x3638ef1b
 80090c4:	b9500d01 	.word	0xb9500d01
 80090c8:	3c088889 	.word	0x3c088889
 80090cc:	be2aaaab 	.word	0xbe2aaaab
 80090d0:	3e2aaaab 	.word	0x3e2aaaab

080090d4 <atanf>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	ee10 5a10 	vmov	r5, s0
 80090da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80090de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80090e2:	eef0 7a40 	vmov.f32	s15, s0
 80090e6:	db10      	blt.n	800910a <atanf+0x36>
 80090e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80090ec:	dd04      	ble.n	80090f8 <atanf+0x24>
 80090ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80090f2:	eeb0 0a67 	vmov.f32	s0, s15
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009230 <atanf+0x15c>
 80090fc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009234 <atanf+0x160>
 8009100:	2d00      	cmp	r5, #0
 8009102:	bfd8      	it	le
 8009104:	eef0 7a40 	vmovle.f32	s15, s0
 8009108:	e7f3      	b.n	80090f2 <atanf+0x1e>
 800910a:	4b4b      	ldr	r3, [pc, #300]	; (8009238 <atanf+0x164>)
 800910c:	429c      	cmp	r4, r3
 800910e:	dc10      	bgt.n	8009132 <atanf+0x5e>
 8009110:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009114:	da0a      	bge.n	800912c <atanf+0x58>
 8009116:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800923c <atanf+0x168>
 800911a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800911e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009122:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912a:	dce2      	bgt.n	80090f2 <atanf+0x1e>
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
 8009130:	e013      	b.n	800915a <atanf+0x86>
 8009132:	f000 f8a3 	bl	800927c <fabsf>
 8009136:	4b42      	ldr	r3, [pc, #264]	; (8009240 <atanf+0x16c>)
 8009138:	429c      	cmp	r4, r3
 800913a:	dc4f      	bgt.n	80091dc <atanf+0x108>
 800913c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009140:	429c      	cmp	r4, r3
 8009142:	dc41      	bgt.n	80091c8 <atanf+0xf4>
 8009144:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009148:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800914c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009150:	2300      	movs	r3, #0
 8009152:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009156:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009160:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009244 <atanf+0x170>
 8009164:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009248 <atanf+0x174>
 8009168:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800924c <atanf+0x178>
 800916c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009170:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009174:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009250 <atanf+0x17c>
 8009178:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800917c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009254 <atanf+0x180>
 8009180:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009184:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009258 <atanf+0x184>
 8009188:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800918c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800925c <atanf+0x188>
 8009190:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009194:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009260 <atanf+0x18c>
 8009198:	eea6 5a87 	vfma.f32	s10, s13, s14
 800919c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009264 <atanf+0x190>
 80091a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80091a4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009268 <atanf+0x194>
 80091a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80091ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800926c <atanf+0x198>
 80091b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80091b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80091b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80091bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091c0:	d121      	bne.n	8009206 <atanf+0x132>
 80091c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091c6:	e794      	b.n	80090f2 <atanf+0x1e>
 80091c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80091cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80091d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80091d4:	2301      	movs	r3, #1
 80091d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80091da:	e7be      	b.n	800915a <atanf+0x86>
 80091dc:	4b24      	ldr	r3, [pc, #144]	; (8009270 <atanf+0x19c>)
 80091de:	429c      	cmp	r4, r3
 80091e0:	dc0b      	bgt.n	80091fa <atanf+0x126>
 80091e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80091e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80091ee:	2302      	movs	r3, #2
 80091f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80091f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f8:	e7af      	b.n	800915a <atanf+0x86>
 80091fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80091fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009202:	2303      	movs	r3, #3
 8009204:	e7a9      	b.n	800915a <atanf+0x86>
 8009206:	4a1b      	ldr	r2, [pc, #108]	; (8009274 <atanf+0x1a0>)
 8009208:	491b      	ldr	r1, [pc, #108]	; (8009278 <atanf+0x1a4>)
 800920a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800920e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009212:	ed93 0a00 	vldr	s0, [r3]
 8009216:	ee37 7a40 	vsub.f32	s14, s14, s0
 800921a:	ed92 0a00 	vldr	s0, [r2]
 800921e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009222:	2d00      	cmp	r5, #0
 8009224:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009228:	bfb8      	it	lt
 800922a:	eef1 7a67 	vneglt.f32	s15, s15
 800922e:	e760      	b.n	80090f2 <atanf+0x1e>
 8009230:	3fc90fdb 	.word	0x3fc90fdb
 8009234:	bfc90fdb 	.word	0xbfc90fdb
 8009238:	3edfffff 	.word	0x3edfffff
 800923c:	7149f2ca 	.word	0x7149f2ca
 8009240:	3f97ffff 	.word	0x3f97ffff
 8009244:	3c8569d7 	.word	0x3c8569d7
 8009248:	3d4bda59 	.word	0x3d4bda59
 800924c:	bd6ef16b 	.word	0xbd6ef16b
 8009250:	3d886b35 	.word	0x3d886b35
 8009254:	3dba2e6e 	.word	0x3dba2e6e
 8009258:	3e124925 	.word	0x3e124925
 800925c:	3eaaaaab 	.word	0x3eaaaaab
 8009260:	bd15a221 	.word	0xbd15a221
 8009264:	bd9d8795 	.word	0xbd9d8795
 8009268:	bde38e38 	.word	0xbde38e38
 800926c:	be4ccccd 	.word	0xbe4ccccd
 8009270:	401bffff 	.word	0x401bffff
 8009274:	0800980c 	.word	0x0800980c
 8009278:	0800981c 	.word	0x0800981c

0800927c <fabsf>:
 800927c:	ee10 3a10 	vmov	r3, s0
 8009280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009284:	ee00 3a10 	vmov	s0, r3
 8009288:	4770      	bx	lr
	...

0800928c <floorf>:
 800928c:	ee10 3a10 	vmov	r3, s0
 8009290:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009294:	3a7f      	subs	r2, #127	; 0x7f
 8009296:	2a16      	cmp	r2, #22
 8009298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800929c:	dc2a      	bgt.n	80092f4 <floorf+0x68>
 800929e:	2a00      	cmp	r2, #0
 80092a0:	da11      	bge.n	80092c6 <floorf+0x3a>
 80092a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009304 <floorf+0x78>
 80092a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	dd05      	ble.n	80092c0 <floorf+0x34>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da23      	bge.n	8009300 <floorf+0x74>
 80092b8:	4a13      	ldr	r2, [pc, #76]	; (8009308 <floorf+0x7c>)
 80092ba:	2900      	cmp	r1, #0
 80092bc:	bf18      	it	ne
 80092be:	4613      	movne	r3, r2
 80092c0:	ee00 3a10 	vmov	s0, r3
 80092c4:	4770      	bx	lr
 80092c6:	4911      	ldr	r1, [pc, #68]	; (800930c <floorf+0x80>)
 80092c8:	4111      	asrs	r1, r2
 80092ca:	420b      	tst	r3, r1
 80092cc:	d0fa      	beq.n	80092c4 <floorf+0x38>
 80092ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009304 <floorf+0x78>
 80092d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	ddef      	ble.n	80092c0 <floorf+0x34>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfbe      	ittt	lt
 80092e4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80092e8:	fa40 f202 	asrlt.w	r2, r0, r2
 80092ec:	189b      	addlt	r3, r3, r2
 80092ee:	ea23 0301 	bic.w	r3, r3, r1
 80092f2:	e7e5      	b.n	80092c0 <floorf+0x34>
 80092f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80092f8:	d3e4      	bcc.n	80092c4 <floorf+0x38>
 80092fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80092fe:	4770      	bx	lr
 8009300:	2300      	movs	r3, #0
 8009302:	e7dd      	b.n	80092c0 <floorf+0x34>
 8009304:	7149f2ca 	.word	0x7149f2ca
 8009308:	bf800000 	.word	0xbf800000
 800930c:	007fffff 	.word	0x007fffff

08009310 <scalbnf>:
 8009310:	ee10 3a10 	vmov	r3, s0
 8009314:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009318:	d025      	beq.n	8009366 <scalbnf+0x56>
 800931a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800931e:	d302      	bcc.n	8009326 <scalbnf+0x16>
 8009320:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009324:	4770      	bx	lr
 8009326:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800932a:	d122      	bne.n	8009372 <scalbnf+0x62>
 800932c:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <scalbnf+0xc8>)
 800932e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80093dc <scalbnf+0xcc>
 8009332:	4298      	cmp	r0, r3
 8009334:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009338:	db16      	blt.n	8009368 <scalbnf+0x58>
 800933a:	ee10 3a10 	vmov	r3, s0
 800933e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009342:	3a19      	subs	r2, #25
 8009344:	4402      	add	r2, r0
 8009346:	2afe      	cmp	r2, #254	; 0xfe
 8009348:	dd15      	ble.n	8009376 <scalbnf+0x66>
 800934a:	ee10 3a10 	vmov	r3, s0
 800934e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80093e0 <scalbnf+0xd0>
 8009352:	eddf 6a24 	vldr	s13, [pc, #144]	; 80093e4 <scalbnf+0xd4>
 8009356:	2b00      	cmp	r3, #0
 8009358:	eeb0 7a67 	vmov.f32	s14, s15
 800935c:	bfb8      	it	lt
 800935e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009362:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009366:	4770      	bx	lr
 8009368:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80093e8 <scalbnf+0xd8>
 800936c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009370:	4770      	bx	lr
 8009372:	0dd2      	lsrs	r2, r2, #23
 8009374:	e7e6      	b.n	8009344 <scalbnf+0x34>
 8009376:	2a00      	cmp	r2, #0
 8009378:	dd06      	ble.n	8009388 <scalbnf+0x78>
 800937a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800937e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009382:	ee00 3a10 	vmov	s0, r3
 8009386:	4770      	bx	lr
 8009388:	f112 0f16 	cmn.w	r2, #22
 800938c:	da1a      	bge.n	80093c4 <scalbnf+0xb4>
 800938e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009392:	4298      	cmp	r0, r3
 8009394:	ee10 3a10 	vmov	r3, s0
 8009398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800939c:	dd0a      	ble.n	80093b4 <scalbnf+0xa4>
 800939e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80093e0 <scalbnf+0xd0>
 80093a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80093e4 <scalbnf+0xd4>
 80093a6:	eef0 7a40 	vmov.f32	s15, s0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	bf18      	it	ne
 80093ae:	eeb0 0a47 	vmovne.f32	s0, s14
 80093b2:	e7db      	b.n	800936c <scalbnf+0x5c>
 80093b4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80093e8 <scalbnf+0xd8>
 80093b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80093ec <scalbnf+0xdc>
 80093bc:	eef0 7a40 	vmov.f32	s15, s0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	e7f3      	b.n	80093ac <scalbnf+0x9c>
 80093c4:	3219      	adds	r2, #25
 80093c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80093ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 80093f0 <scalbnf+0xe0>
 80093d2:	ee07 3a10 	vmov	s14, r3
 80093d6:	e7c4      	b.n	8009362 <scalbnf+0x52>
 80093d8:	ffff3cb0 	.word	0xffff3cb0
 80093dc:	4c000000 	.word	0x4c000000
 80093e0:	7149f2ca 	.word	0x7149f2ca
 80093e4:	f149f2ca 	.word	0xf149f2ca
 80093e8:	0da24260 	.word	0x0da24260
 80093ec:	8da24260 	.word	0x8da24260
 80093f0:	33000000 	.word	0x33000000

080093f4 <_init>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr

08009400 <_fini>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr
