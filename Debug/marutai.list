
marutai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f84  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800957c  0800957c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800957c  0800957c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800957c  0800957c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  080095f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080095f4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013acb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a74  00000000  00000000  00033b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  000365e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  000378e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028831  00000000  00000000  00038a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001574d  00000000  00000000  000612c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c91d  00000000  00000000  00076a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018332b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053fc  00000000  00000000  0018337c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009144 	.word	0x08009144

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08009144 	.word	0x08009144

08000218 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000222:	edc7 0a02 	vstr	s1, [r7, #8]
 8000226:	ed87 1a01 	vstr	s2, [r7, #4]
 800022a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	ed93 7a00 	vldr	s14, [r3]
 8000232:	edd7 6a03 	vldr	s13, [r7, #12]
 8000236:	edd7 7a01 	vldr	s15, [r7, #4]
 800023a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800023e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000248:	ed97 7a02 	vldr	s14, [r7, #8]
 800024c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	edd3 7a00 	vldr	s15, [r3]
 800025a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800025e:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	ee07 3a90 	vmov	s15, r3
}
 8000268:	eeb0 0a67 	vmov.f32	s0, s15
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000280:	edc7 0a02 	vstr	s1, [r7, #8]
 8000284:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000288:	edd7 7a02 	vldr	s15, [r7, #8]
 800028c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000294:	db0b      	blt.n	80002ae <gfDivideAvoidZero+0x38>
 8000296:	ed97 7a02 	vldr	s14, [r7, #8]
 800029a:	edd7 7a01 	vldr	s15, [r7, #4]
 800029e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	d502      	bpl.n	80002ae <gfDivideAvoidZero+0x38>
		den = threshold;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	e017      	b.n	80002de <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80002ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80002b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ba:	d510      	bpl.n	80002de <gfDivideAvoidZero+0x68>
 80002bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002c0:	eef1 7a67 	vneg.f32	s15, s15
 80002c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80002c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d0:	dd05      	ble.n	80002de <gfDivideAvoidZero+0x68>
		den = -threshold;
 80002d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d6:	eef1 7a67 	vneg.f32	s15, s15
 80002da:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80002de:	edd7 6a03 	vldr	s13, [r7, #12]
 80002e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80002e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002ea:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	ee07 3a90 	vmov	s15, r3
}
 80002f4:	eeb0 0a67 	vmov.f32	s0, s15
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 800030e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000374 <gfWrapTheta+0x70>
 8000312:	ed97 0a01 	vldr	s0, [r7, #4]
 8000316:	f007 ffc7 	bl	80082a8 <fmodf>
 800031a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 800031e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000322:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000378 <gfWrapTheta+0x74>
 8000326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	dd08      	ble.n	8000342 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000330:	edd7 7a01 	vldr	s15, [r7, #4]
 8000334:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000374 <gfWrapTheta+0x70>
 8000338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000340:	e010      	b.n	8000364 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000342:	edd7 7a01 	vldr	s15, [r7, #4]
 8000346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800037c <gfWrapTheta+0x78>
 800034a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000352:	d507      	bpl.n	8000364 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000354:	edd7 7a01 	vldr	s15, [r7, #4]
 8000358:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000374 <gfWrapTheta+0x70>
 800035c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000360:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	ee07 3a90 	vmov	s15, r3
}
 800036a:	eeb0 0a67 	vmov.f32	s0, s15
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40c90fdb 	.word	0x40c90fdb
 8000378:	40490fdb 	.word	0x40490fdb
 800037c:	c0490fdb 	.word	0xc0490fdb

08000380 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a03 	vstr	s0, [r7, #12]
 800038a:	edc7 0a02 	vstr	s1, [r7, #8]
 800038e:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000392:	ed97 7a03 	vldr	s14, [r7, #12]
 8000396:	edd7 7a02 	vldr	s15, [r7, #8]
 800039a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a2:	dd01      	ble.n	80003a8 <gUpperLowerLimit+0x28>
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80003a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80003ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80003b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b8:	d501      	bpl.n	80003be <gUpperLowerLimit+0x3e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	return input;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	ee07 3a90 	vmov	s15, r3
}
 80003c4:	eeb0 0a67 	vmov.f32	s0, s15
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	3302      	adds	r3, #2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	f04f 0200 	mov.w	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3308      	adds	r3, #8
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800041a:	b480      	push	{r7}
 800041c:	b087      	sub	sp, #28
 800041e:	af00      	add	r7, sp, #0
 8000420:	ed87 0a03 	vstr	s0, [r7, #12]
 8000424:	edc7 0a02 	vstr	s1, [r7, #8]
 8000428:	ed87 1a01 	vstr	s2, [r7, #4]
 800042c:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 800042e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000432:	edd7 7a01 	vldr	s15, [r7, #4]
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000448:	edd7 7a05 	vldr	s15, [r7, #20]
 800044c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000450:	edd7 7a04 	vldr	s15, [r7, #16]
 8000454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000458:	edd7 6a05 	vldr	s13, [r7, #20]
 800045c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	edc3 7a00 	vstr	s15, [r3]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 800047a:	b480      	push	{r7}
 800047c:	b089      	sub	sp, #36	; 0x24
 800047e:	af00      	add	r7, sp, #0
 8000480:	ed87 0a03 	vstr	s0, [r7, #12]
 8000484:	edc7 0a02 	vstr	s1, [r7, #8]
 8000488:	ed87 1a01 	vstr	s2, [r7, #4]
 800048c:	6038      	str	r0, [r7, #0]
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 800048e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000492:	edd7 7a01 	vldr	s15, [r7, #4]
 8000496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800049a:	edc7 7a06 	vstr	s15, [r7, #24]
	yn_1 = *y;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]

	if( r > yn_1 )
 80004a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80004a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80004ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b4:	dd08      	ble.n	80004c8 <gRateLimit+0x4e>
		ytmp = yn_1 + dy;
 80004b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80004ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80004be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80004c6:	e010      	b.n	80004ea <gRateLimit+0x70>
	else if( r < yn_1 )
 80004c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80004cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80004d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	d507      	bpl.n	80004ea <gRateLimit+0x70>
		ytmp = yn_1 - dy;
 80004da:	ed97 7a05 	vldr	s14, [r7, #20]
 80004de:	edd7 7a06 	vldr	s15, [r7, #24]
 80004e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004e6:	edc7 7a07 	vstr	s15, [r7, #28]

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	601a      	str	r2, [r3, #0]

}
 80004f0:	bf00      	nop
 80004f2:	3724      	adds	r7, #36	; 0x24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b08d      	sub	sp, #52	; 0x34
 8000500:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t posMode_pre;
	uint8_t drvMode_pre;


	//read IO signals
	gButton1 = readButton1();
 8000502:	f000 fb1f 	bl	8000b44 <readButton1>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <Sequence_Low_Freq+0x10c>)
 800050c:	701a      	strb	r2, [r3, #0]
	gVolume = 0; //readVolume();
 800050e:	4b3f      	ldr	r3, [pc, #252]	; (800060c <Sequence_Low_Freq+0x110>)
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	// readHallSignal(gHall);
	// readElectFreqFromHallSignal(&gElectFreq);

	sSensData.Vdc = 10.0f;//readVdc();
 8000516:	4b3e      	ldr	r3, [pc, #248]	; (8000610 <Sequence_Low_Freq+0x114>)
 8000518:	4a3e      	ldr	r2, [pc, #248]	; (8000614 <Sequence_Low_Freq+0x118>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 800051c:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <Sequence_Low_Freq+0x114>)
 800051e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000522:	483d      	ldr	r0, [pc, #244]	; (8000618 <Sequence_Low_Freq+0x11c>)
 8000524:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 800061c <Sequence_Low_Freq+0x120>
 8000528:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8000620 <Sequence_Low_Freq+0x124>
 800052c:	eeb0 0a67 	vmov.f32	s0, s15
 8000530:	f7ff ff73 	bl	800041a <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 8000534:	4b36      	ldr	r3, [pc, #216]	; (8000610 <Sequence_Low_Freq+0x114>)
 8000536:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800053a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800053e:	eef0 0a67 	vmov.f32	s1, s15
 8000542:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000546:	f7ff fe96 	bl	8000276 <gfDivideAvoidZero>
 800054a:	eef0 7a40 	vmov.f32	s15, s0
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <Sequence_Low_Freq+0x114>)
 8000550:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b28      	cmp	r3, #40	; 0x28
 800055a:	d81d      	bhi.n	8000598 <Sequence_Low_Freq+0x9c>
		sInitCnt++;
 800055c:	4b31      	ldr	r3, [pc, #196]	; (8000624 <Sequence_Low_Freq+0x128>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <Sequence_Low_Freq+0x128>)
 8000566:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <Sequence_Low_Freq+0x12c>)
 800056a:	2202      	movs	r2, #2
 800056c:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <Sequence_Low_Freq+0x130>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <Sequence_Low_Freq+0x134>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	601a      	str	r2, [r3, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <Sequence_Low_Freq+0x128>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d83c      	bhi.n	80005fe <Sequence_Low_Freq+0x102>
			sSensData.Iuvw_AD_Offset[0] = 2002.0f;
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <Sequence_Low_Freq+0x114>)
 8000586:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <Sequence_Low_Freq+0x138>)
 8000588:	61da      	str	r2, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] = 1996.0f;
 800058a:	4b21      	ldr	r3, [pc, #132]	; (8000610 <Sequence_Low_Freq+0x114>)
 800058c:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <Sequence_Low_Freq+0x13c>)
 800058e:	621a      	str	r2, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] = 2012.0f;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <Sequence_Low_Freq+0x114>)
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <Sequence_Low_Freq+0x140>)
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 8000596:	e032      	b.n	80005fe <Sequence_Low_Freq+0x102>
		posMode_pre = sPosMode;
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <Sequence_Low_Freq+0x12c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	71fb      	strb	r3, [r7, #7]
		drvMode_pre = sDrvMode;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <Sequence_Low_Freq+0x130>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	71bb      	strb	r3, [r7, #6]
		slctPosMode(gElectFreq, &sPosMode);
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005a6:	edd3 7a00 	vldr	s15, [r3]
 80005aa:	481f      	ldr	r0, [pc, #124]	; (8000628 <Sequence_Low_Freq+0x12c>)
 80005ac:	eeb0 0a67 	vmov.f32	s0, s15
 80005b0:	f000 f89c 	bl	80006ec <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <Sequence_Low_Freq+0x144>)
 80005b6:	edd3 7a00 	vldr	s15, [r3]
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <Sequence_Low_Freq+0x130>)
 80005bc:	eeb0 0a67 	vmov.f32	s0, s15
 80005c0:	f000 f8ca 	bl	8000758 <slctDrvMode>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d113      	bne.n	80005f2 <Sequence_Low_Freq+0xf6>
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <Sequence_Low_Freq+0x130>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	d10f      	bne.n	80005f2 <Sequence_Low_Freq+0xf6>
			InitVectorControl(sSensData, &sVectorControlData);
 80005d2:	4e0f      	ldr	r6, [pc, #60]	; (8000610 <Sequence_Low_Freq+0x114>)
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <Sequence_Low_Freq+0x148>)
 80005d6:	9309      	str	r3, [sp, #36]	; 0x24
 80005d8:	466d      	mov	r5, sp
 80005da:	f106 0410 	add.w	r4, r6, #16
 80005de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	602b      	str	r3, [r5, #0]
 80005ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005ee:	f000 fe85 	bl	80012fc <InitVectorControl>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <Sequence_Low_Freq+0x130>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4913      	ldr	r1, [pc, #76]	; (8000644 <Sequence_Low_Freq+0x148>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fa2b 	bl	8000a54 <calcCurrentRef>
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	bf00      	nop
 8000608:	2000008f 	.word	0x2000008f
 800060c:	20000094 	.word	0x20000094
 8000610:	200000b4 	.word	0x200000b4
 8000614:	41200000 	.word	0x41200000
 8000618:	200000e0 	.word	0x200000e0
 800061c:	3a83126f 	.word	0x3a83126f
 8000620:	42fb3333 	.word	0x42fb3333
 8000624:	2000009a 	.word	0x2000009a
 8000628:	20000098 	.word	0x20000098
 800062c:	20000099 	.word	0x20000099
 8000630:	200000a0 	.word	0x200000a0
 8000634:	44fa4000 	.word	0x44fa4000
 8000638:	44f98000 	.word	0x44f98000
 800063c:	44fb8000 	.word	0x44fb8000
 8000640:	20000090 	.word	0x20000090
 8000644:	200000e8 	.word	0x200000e8

08000648 <Sequence_High_Freq>:

void Sequence_High_Freq(void){
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	b08f      	sub	sp, #60	; 0x3c
 800064c:	af0e      	add	r7, sp, #56	; 0x38
	// clear Free Running Counter
	// writeFreeRunCnt(ZERO);

	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <Sequence_High_Freq+0x78>)
 8000650:	491c      	ldr	r1, [pc, #112]	; (80006c4 <Sequence_High_Freq+0x7c>)
 8000652:	481d      	ldr	r0, [pc, #116]	; (80006c8 <Sequence_High_Freq+0x80>)
 8000654:	f000 fa84 	bl	8000b60 <readCurrent>

	// for debug
	sPosMode = POSMODE_FREERUN;
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <Sequence_High_Freq+0x84>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
	sDrvMode = DRVMODE_OPENLOOP;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <Sequence_High_Freq+0x88>)
 8000660:	2202      	movs	r2, #2
 8000662:	701a      	strb	r2, [r3, #0]
	sElectAngVeloRefRateLimit = 62.8;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <Sequence_High_Freq+0x8c>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <Sequence_High_Freq+0x90>)
 8000668:	601a      	str	r2, [r3, #0]


	slctElectAngleFromPosMode(sPosMode, &sSensData);
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <Sequence_High_Freq+0x84>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	491b      	ldr	r1, [pc, #108]	; (80006dc <Sequence_High_Freq+0x94>)
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8ab 	bl	80007cc <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <Sequence_High_Freq+0x88>)
 8000678:	f893 c000 	ldrb.w	ip, [r3]
 800067c:	4e17      	ldr	r6, [pc, #92]	; (80006dc <Sequence_High_Freq+0x94>)
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <Sequence_High_Freq+0x98>)
 8000680:	930c      	str	r3, [sp, #48]	; 0x30
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <Sequence_High_Freq+0x9c>)
 8000684:	930b      	str	r3, [sp, #44]	; 0x2c
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <Sequence_High_Freq+0xa0>)
 8000688:	930a      	str	r3, [sp, #40]	; 0x28
 800068a:	466d      	mov	r5, sp
 800068c:	f106 040c 	add.w	r4, r6, #12
 8000690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800069c:	e885 0003 	stmia.w	r5, {r0, r1}
 80006a0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80006a4:	4660      	mov	r0, ip
 80006a6:	f000 f961 	bl	800096c <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <Sequence_High_Freq+0x98>)
 80006ac:	f000 faba 	bl	8000c24 <writeOutputMode>
	writeDuty(sDuty);
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <Sequence_High_Freq+0x9c>)
 80006b2:	f000 faf9 	bl	8000ca8 <writeDuty>

	// Calculate ProcessingLoad
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
 80006b6:	bf00      	nop
 80006b8:	3704      	adds	r7, #4
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000bc 	.word	0x200000bc
 80006c4:	200000d0 	.word	0x200000d0
 80006c8:	200000c8 	.word	0x200000c8
 80006cc:	20000098 	.word	0x20000098
 80006d0:	20000099 	.word	0x20000099
 80006d4:	200000a0 	.word	0x200000a0
 80006d8:	427b3333 	.word	0x427b3333
 80006dc:	200000b4 	.word	0x200000b4
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	200000a8 	.word	0x200000a8
 80006e8:	200000e8 	.word	0x200000e8

080006ec <slctPosMode>:
void inline slctPosMode(float electFreq, uint8_t* posMode){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80006f6:	6038      	str	r0, [r7, #0]

	if(*posMode != POSMODE_HALL_PLL){
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d010      	beq.n	8000722 <slctPosMode+0x36>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000700:	edd7 7a01 	vldr	s15, [r7, #4]
 8000704:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000710:	dd03      	ble.n	800071a <slctPosMode+0x2e>
			*posMode = POSMODE_HALL_PLL;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2203      	movs	r2, #3
 8000716:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 8000718:	e017      	b.n	800074a <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2202      	movs	r2, #2
 800071e:	701a      	strb	r2, [r3, #0]
}
 8000720:	e013      	b.n	800074a <slctPosMode+0x5e>
	else if(*posMode == POSMODE_HALL_PLL){
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b03      	cmp	r3, #3
 8000728:	d10f      	bne.n	800074a <slctPosMode+0x5e>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 800072a:	edd7 7a01 	vldr	s15, [r7, #4]
 800072e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d503      	bpl.n	8000744 <slctPosMode+0x58>
			*posMode = POSMODE_HALL;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2202      	movs	r2, #2
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	e002      	b.n	800074a <slctPosMode+0x5e>
			*posMode = POSMODE_HALL_PLL;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	2203      	movs	r2, #3
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <slctDrvMode>:

void inline slctDrvMode(float electFreq, uint8_t* drvMode){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000762:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d010      	beq.n	800078e <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 800076c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000770:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007c4 <slctDrvMode+0x6c>
 8000774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077c:	dd03      	ble.n	8000786 <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2204      	movs	r2, #4
 8000782:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 8000784:	e017      	b.n	80007b6 <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2202      	movs	r2, #2
 800078a:	701a      	strb	r2, [r3, #0]
}
 800078c:	e013      	b.n	80007b6 <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d10f      	bne.n	80007b6 <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000796:	edd7 7a01 	vldr	s15, [r7, #4]
 800079a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80007c8 <slctDrvMode+0x70>
 800079e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a6:	d503      	bpl.n	80007b0 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	2202      	movs	r2, #2
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	e002      	b.n	80007b6 <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2204      	movs	r2, #4
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	42c80000 	.word	0x42c80000
 80007c8:	42a00000 	.word	0x42a00000

080007cc <slctElectAngleFromPosMode>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 80007cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d0:	b0a4      	sub	sp, #144	; 0x90
 80007d2:	af1e      	add	r7, sp, #120	; 0x78
 80007d4:	4603      	mov	r3, r0
 80007d6:	6039      	str	r1, [r7, #0]
 80007d8:	71fb      	strb	r3, [r7, #7]
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	f200 80a7 	bhi.w	8000930 <slctElectAngleFromPosMode+0x164>
 80007e2:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <slctElectAngleFromPosMode+0x1c>)
 80007e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e8:	080007fd 	.word	0x080007fd
 80007ec:	0800080f 	.word	0x0800080f
 80007f0:	0800088b 	.word	0x0800088b
 80007f4:	080008b7 	.word	0x080008b7
 80007f8:	080008e3 	.word	0x080008e3
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
		break;
 800080c:	e099      	b.n	8000942 <slctElectAngleFromPosMode+0x176>

	case POSMODE_FREERUN:
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 800080e:	4b4f      	ldr	r3, [pc, #316]	; (800094c <slctElectAngleFromPosMode+0x180>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	605a      	str	r2, [r3, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <slctElectAngleFromPosMode+0x180>)
 8000818:	edd3 7a00 	vldr	s15, [r3]
 800081c:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8000950 <slctElectAngleFromPosMode+0x184>
 8000820:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000824:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <slctElectAngleFromPosMode+0x188>)
 8000826:	edd3 7a00 	vldr	s15, [r3]
 800082a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800082e:	4b49      	ldr	r3, [pc, #292]	; (8000954 <slctElectAngleFromPosMode+0x188>)
 8000830:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 8000834:	4b47      	ldr	r3, [pc, #284]	; (8000954 <slctElectAngleFromPosMode+0x188>)
 8000836:	edd3 7a00 	vldr	s15, [r3]
 800083a:	eeb0 0a67 	vmov.f32	s0, s15
 800083e:	f7ff fd61 	bl	8000304 <gfWrapTheta>
 8000842:	eef0 7a40 	vmov.f32	s15, s0
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	edc3 7a00 	vstr	s15, [r3]

		// For Sensorless Init
		flgInit = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 8000850:	4e41      	ldr	r6, [pc, #260]	; (8000958 <slctElectAngleFromPosMode+0x18c>)
 8000852:	f897 8017 	ldrb.w	r8, [r7, #23]
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <slctElectAngleFromPosMode+0x190>)
 8000858:	931d      	str	r3, [sp, #116]	; 0x74
 800085a:	4a41      	ldr	r2, [pc, #260]	; (8000960 <slctElectAngleFromPosMode+0x194>)
 800085c:	ab0a      	add	r3, sp, #40	; 0x28
 800085e:	4611      	mov	r1, r2
 8000860:	224c      	movs	r2, #76	; 0x4c
 8000862:	4618      	mov	r0, r3
 8000864:	f007 fc7e 	bl	8008164 <memcpy>
 8000868:	466d      	mov	r5, sp
 800086a:	f106 040c 	add.w	r4, r6, #12
 800086e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800087a:	e885 0003 	stmia.w	r5, {r0, r1}
 800087e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000882:	4640      	mov	r0, r8
 8000884:	f001 f9b2 	bl	8001bec <calcElectAngleEstimate>
		break;
 8000888:	e05b      	b.n	8000942 <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL:
		flgPLL = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <slctElectAngleFromPosMode+0x198>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	f107 0210 	add.w	r2, r7, #16
 800089c:	7db9      	ldrb	r1, [r7, #22]
 800089e:	eeb0 0a67 	vmov.f32	s0, s15
 80008a2:	4831      	ldr	r0, [pc, #196]	; (8000968 <slctElectAngleFromPosMode+0x19c>)
 80008a4:	f000 fa42 	bl	8000d2c <calcElectAngle>
		sensData->electAngle = electAngle;
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	605a      	str	r2, [r3, #4]
		break;
 80008b4:	e045      	b.n	8000942 <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <slctElectAngleFromPosMode+0x198>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	f107 0210 	add.w	r2, r7, #16
 80008c8:	7db9      	ldrb	r1, [r7, #22]
 80008ca:	eeb0 0a67 	vmov.f32	s0, s15
 80008ce:	4826      	ldr	r0, [pc, #152]	; (8000968 <slctElectAngleFromPosMode+0x19c>)
 80008d0:	f000 fa2c 	bl	8000d2c <calcElectAngle>
		sensData->electAngle = electAngle;
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	605a      	str	r2, [r3, #4]
		break;
 80008e0:	e02f      	b.n	8000942 <slctElectAngleFromPosMode+0x176>
	case POSMODE_SENSORLESS:
		flgInit = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 80008e6:	4e1c      	ldr	r6, [pc, #112]	; (8000958 <slctElectAngleFromPosMode+0x18c>)
 80008e8:	f897 8017 	ldrb.w	r8, [r7, #23]
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <slctElectAngleFromPosMode+0x190>)
 80008ee:	931d      	str	r3, [sp, #116]	; 0x74
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <slctElectAngleFromPosMode+0x194>)
 80008f2:	ab0a      	add	r3, sp, #40	; 0x28
 80008f4:	4611      	mov	r1, r2
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fc33 	bl	8008164 <memcpy>
 80008fe:	466d      	mov	r5, sp
 8000900:	f106 040c 	add.w	r4, r6, #12
 8000904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000910:	e885 0003 	stmia.w	r5, {r0, r1}
 8000914:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000918:	4640      	mov	r0, r8
 800091a:	f001 f967 	bl	8001bec <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <slctElectAngleFromPosMode+0x190>)
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <slctElectAngleFromPosMode+0x190>)
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	605a      	str	r2, [r3, #4]
		break;
 800092e:	e008      	b.n	8000942 <slctElectAngleFromPosMode+0x176>
	default:
		sensData->electAngle = 0.0f;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
		break;
 8000940:	bf00      	nop
	}
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800094c:	200000a0 	.word	0x200000a0
 8000950:	461c4000 	.word	0x461c4000
 8000954:	2000009c 	.word	0x2000009c
 8000958:	200000b4 	.word	0x200000b4
 800095c:	20000134 	.word	0x20000134
 8000960:	200000e8 	.word	0x200000e8
 8000964:	20000090 	.word	0x20000090
 8000968:	2000008c 	.word	0x2000008c

0800096c <slctCntlFromDrvMode>:

void inline slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 800096c:	b084      	sub	sp, #16
 800096e:	b5b0      	push	{r4, r5, r7, lr}
 8000970:	b090      	sub	sp, #64	; 0x40
 8000972:	af0c      	add	r7, sp, #48	; 0x30
 8000974:	4604      	mov	r4, r0
 8000976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800097a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800097e:	4623      	mov	r3, r4
 8000980:	71fb      	strb	r3, [r7, #7]

	float VamRef;
	float ModRef = 1.13;
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <slctCntlFromDrvMode+0xd4>)
 8000984:	60fb      	str	r3, [r7, #12]
	if( sId_ref_i < -1.0f)
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;*/

	switch(drvMode){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b04      	cmp	r3, #4
 800098a:	d037      	beq.n	80009fc <slctCntlFromDrvMode+0x90>
 800098c:	2b04      	cmp	r3, #4
 800098e:	dc4a      	bgt.n	8000a26 <slctCntlFromDrvMode+0xba>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <slctCntlFromDrvMode+0x2e>
 8000994:	2b02      	cmp	r3, #2
 8000996:	d005      	beq.n	80009a4 <slctCntlFromDrvMode+0x38>
 8000998:	e045      	b.n	8000a26 <slctCntlFromDrvMode+0xba>
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 800099a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800099c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800099e:	f7ff fd18 	bl	80003d2 <gOffDuty>
			break;
 80009a2:	e045      	b.n	8000a30 <slctCntlFromDrvMode+0xc4>
		case DRVMODE_OPENLOOP:
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * 0.1f * gButton1;//gVolume;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <slctCntlFromDrvMode+0xd8>)
 80009a6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009aa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000a48 <slctCntlFromDrvMode+0xdc>
 80009ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a4c <slctCntlFromDrvMode+0xe0>
 80009b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <slctCntlFromDrvMode+0xe4>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	ee07 3a90 	vmov	s15, r3
 80009c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	edc7 7a02 	vstr	s15, [r7, #8]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 80009ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80009d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009d4:	930a      	str	r3, [sp, #40]	; 0x28
 80009d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009d8:	9309      	str	r3, [sp, #36]	; 0x24
 80009da:	466d      	mov	r5, sp
 80009dc:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80009e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	602b      	str	r3, [r5, #0]
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80009f6:	f000 fbf1 	bl	80011dc <OpenLoopTasks>
			break;
 80009fa:	e019      	b.n	8000a30 <slctCntlFromDrvMode+0xc4>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 80009fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a02:	930a      	str	r3, [sp, #40]	; 0x28
 8000a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a06:	9309      	str	r3, [sp, #36]	; 0x24
 8000a08:	466d      	mov	r5, sp
 8000a0a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	602b      	str	r3, [r5, #0]
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a20:	f000 fb46 	bl	80010b0 <VectorControlTasks>
			break;
 8000a24:	e004      	b.n	8000a30 <slctCntlFromDrvMode+0xc4>
		default :
			gOffDuty(Duty, outputMode);
 8000a26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000a2a:	f7ff fcd2 	bl	80003d2 <gOffDuty>
	}
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a3a:	b004      	add	sp, #16
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	3f90a3d7 	.word	0x3f90a3d7
 8000a44:	200000b4 	.word	0x200000b4
 8000a48:	3f1cc471 	.word	0x3f1cc471
 8000a4c:	3dcccccd 	.word	0x3dcccccd
 8000a50:	2000008f 	.word	0x2000008f

08000a54 <calcCurrentRef>:

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
	switch(drvMode){
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d028      	beq.n	8000ab8 <calcCurrentRef+0x64>
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	dc51      	bgt.n	8000b0e <calcCurrentRef+0xba>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <calcCurrentRef+0x20>
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d011      	beq.n	8000a96 <calcCurrentRef+0x42>
 8000a72:	e04c      	b.n	8000b0e <calcCurrentRef+0xba>
		case DRVMODE_OFFDUTY:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
			break;
 8000a94:	e04c      	b.n	8000b30 <calcCurrentRef+0xdc>
		case DRVMODE_OPENLOOP:
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	699a      	ldr	r2, [r3, #24]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	69da      	ldr	r2, [r3, #28]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	69da      	ldr	r2, [r3, #28]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	60da      	str	r2, [r3, #12]
			break;
 8000ab6:	e03b      	b.n	8000b30 <calcCurrentRef+0xdc>
		case DRVMODE_VECTORCONTROL:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <calcCurrentRef+0xe4>)
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	edc3 7a01 	vstr	s15, [r3, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	edd3 7a00 	vldr	s15, [r3]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	3308      	adds	r3, #8
 8000ade:	4618      	mov	r0, r3
 8000ae0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000b3c <calcCurrentRef+0xe8>
 8000ae4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000b40 <calcCurrentRef+0xec>
 8000ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8000aec:	f7ff fc95 	bl	800041a <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	330c      	adds	r3, #12
 8000afa:	4618      	mov	r0, r3
 8000afc:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000b3c <calcCurrentRef+0xe8>
 8000b00:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000b40 <calcCurrentRef+0xec>
 8000b04:	eeb0 0a67 	vmov.f32	s0, s15
 8000b08:	f7ff fc87 	bl	800041a <gLPF>
			break;
 8000b0c:	e010      	b.n	8000b30 <calcCurrentRef+0xdc>
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	f04f 0200 	mov.w	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000094 	.word	0x20000094
 8000b3c:	3a83126f 	.word	0x3a83126f
 8000b40:	41fb53d1 	.word	0x41fb53d1

08000b44 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = 1;//HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
	//B1 = 0b00000001 & (~B1);
	return B1;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	b2db      	uxtb	r3, r3
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000b6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3302      	adds	r3, #2
 8000b86:	b292      	uxth	r2, r2
 8000b88:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000b8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	b292      	uxth	r2, r2
 8000b98:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c20 <readCurrent+0xc0>
 8000bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	edd3 7a00 	vldr	s15, [r3]
 8000bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c20 <readCurrent+0xc0>
 8000be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be4:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3304      	adds	r3, #4
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
 8000bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3308      	adds	r3, #8
 8000c06:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000c20 <readCurrent+0xc0>
 8000c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0e:	edc3 7a00 	vstr	s15, [r3]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	bc71f4bc 	.word	0xbc71f4bc

08000c24 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <writeOutputMode+0x80>)
 8000c3e:	f004 fd0f 	bl	8005660 <HAL_GPIO_WritePin>
 8000c42:	e005      	b.n	8000c50 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <writeOutputMode+0x80>)
 8000c4c:	f004 fd08 	bl	8005660 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3301      	adds	r3, #1
 8000c54:	f993 3000 	ldrsb.w	r3, [r3]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d106      	bne.n	8000c6a <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <writeOutputMode+0x80>)
 8000c64:	f004 fcfc 	bl	8005660 <HAL_GPIO_WritePin>
 8000c68:	e005      	b.n	8000c76 <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <writeOutputMode+0x80>)
 8000c72:	f004 fcf5 	bl	8005660 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <writeOutputMode+0x80>)
 8000c8a:	f004 fce9 	bl	8005660 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000c8e:	e005      	b.n	8000c9c <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <writeOutputMode+0x80>)
 8000c98:	f004 fce2 	bl	8005660 <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <writeDuty>:

void writeDuty(float* Duty){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <writeDuty+0x80>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <writeDuty+0x80>)
 8000cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	ed93 7a00 	vldr	s14, [r3]
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <writeDuty+0x80>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <writeDuty+0x80>)
 8000cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf0:	ee17 2a90 	vmov	r2, s15
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <writeDuty+0x80>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <writeDuty+0x80>)
 8000d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d14:	ee17 2a90 	vmov	r2, s15
 8000d18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40012c00 	.word	0x40012c00

08000d2c <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6178      	str	r0, [r7, #20]
 8000d34:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8000d40:	4b76      	ldr	r3, [pc, #472]	; (8000f1c <calcElectAngle+0x1f0>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 8000d52:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8000f20 <calcElectAngle+0x1f4>
 8000d56:	eddf 0a73 	vldr	s1, [pc, #460]	; 8000f24 <calcElectAngle+0x1f8>
 8000d5a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000d5e:	f7ff fb0f 	bl	8000380 <gUpperLowerLimit>
 8000d62:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000d66:	4b6d      	ldr	r3, [pc, #436]	; (8000f1c <calcElectAngle+0x1f0>)
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000f28 <calcElectAngle+0x1fc>
 8000d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d74:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000d78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d84:	edc7 7a08 	vstr	s15, [r7, #32]
	Kp_PLL = wc_PLL;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	61fb      	str	r3, [r7, #28]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d90:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8000f2c <calcElectAngle+0x200>
 8000d94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da0:	ed97 7a08 	vldr	s14, [r7, #32]
 8000da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da8:	edc7 7a06 	vstr	s15, [r7, #24]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000dac:	4b60      	ldr	r3, [pc, #384]	; (8000f30 <calcElectAngle+0x204>)
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <calcElectAngle+0x208>)
 8000db2:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f000 f8d3 	bl	8000f60 <calcVoltageMode>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <calcElectAngle+0x204>)
 8000dc0:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <calcElectAngle+0x20c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5d      	ldr	r2, [pc, #372]	; (8000f3c <calcElectAngle+0x210>)
 8000dc8:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8000dca:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <calcElectAngle+0x208>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4a58      	ldr	r2, [pc, #352]	; (8000f30 <calcElectAngle+0x204>)
 8000dd0:	7811      	ldrb	r1, [r2, #0]
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <calcElectAngle+0x214>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f909 	bl	8000fec <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000dda:	4b55      	ldr	r3, [pc, #340]	; (8000f30 <calcElectAngle+0x204>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <calcElectAngle+0x214>)
 8000de0:	f992 2000 	ldrsb.w	r2, [r2]
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f92c 	bl	8001044 <calcElectAngleFromVoltageMode>
 8000dec:	eef0 7a40 	vmov.f32	s15, s0
 8000df0:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <calcElectAngle+0x20c>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000df6:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <calcElectAngle+0x20c>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	f7ff fa80 	bl	8000304 <gfWrapTheta>
 8000e04:	eef0 7a40 	vmov.f32	s15, s0
 8000e08:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <calcElectAngle+0x20c>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8000e0e:	4b4d      	ldr	r3, [pc, #308]	; (8000f44 <calcElectAngle+0x218>)
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <calcElectAngle+0x21c>)
 8000e14:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 8000e16:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <calcElectAngle+0x218>)
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d163      	bne.n	8000eea <calcElectAngle+0x1be>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 8000e22:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <calcElectAngle+0x21c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d110      	bne.n	8000e4c <calcElectAngle+0x120>
			sElectAngVeloEstimate = electFreq * TWOPI;
 8000e2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e2e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000f4c <calcElectAngle+0x220>
 8000e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <calcElectAngle+0x1f0>)
 8000e38:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <calcElectAngle+0x1f0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <calcElectAngle+0x224>)
 8000e42:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8000e44:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <calcElectAngle+0x20c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a42      	ldr	r2, [pc, #264]	; (8000f54 <calcElectAngle+0x228>)
 8000e4a:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000e4c:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <calcElectAngle+0x1f0>)
 8000e4e:	edd3 7a00 	vldr	s15, [r3]
 8000e52:	eddf 6a41 	vldr	s13, [pc, #260]	; 8000f58 <calcElectAngle+0x22c>
 8000e56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <calcElectAngle+0x228>)
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e64:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <calcElectAngle+0x228>)
 8000e66:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <calcElectAngle+0x228>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	eeb0 0a67 	vmov.f32	s0, s15
 8000e74:	f7ff fa46 	bl	8000304 <gfWrapTheta>
 8000e78:	eef0 7a40 	vmov.f32	s15, s0
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <calcElectAngle+0x228>)
 8000e7e:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <calcElectAngle+0x20c>)
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <calcElectAngle+0x210>)
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	d035      	beq.n	8000f04 <calcElectAngle+0x1d8>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <calcElectAngle+0x20c>)
 8000e9a:	ed93 7a00 	vldr	s14, [r3]
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <calcElectAngle+0x228>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <calcElectAngle+0x230>)
 8000eaa:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <calcElectAngle+0x230>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb8:	f7ff fa24 	bl	8000304 <gfWrapTheta>
 8000ebc:	eef0 7a40 	vmov.f32	s15, s0
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <calcElectAngle+0x230>)
 8000ec2:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <calcElectAngle+0x230>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	4820      	ldr	r0, [pc, #128]	; (8000f50 <calcElectAngle+0x224>)
 8000ece:	ed97 1a06 	vldr	s2, [r7, #24]
 8000ed2:	edd7 0a07 	vldr	s1, [r7, #28]
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	f7ff f99d 	bl	8000218 <cfPhaseLockedLoop>
 8000ede:	eef0 7a40 	vmov.f32	s15, s0
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <calcElectAngle+0x1f0>)
 8000ee4:	edc3 7a00 	vstr	s15, [r3]
 8000ee8:	e00c      	b.n	8000f04 <calcElectAngle+0x1d8>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <calcElectAngle+0x20c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <calcElectAngle+0x228>)
 8000ef0:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 8000ef2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f4c <calcElectAngle+0x220>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <calcElectAngle+0x1f0>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <calcElectAngle+0x228>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <calcElectAngle+0x1f0>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	601a      	str	r2, [r3, #0]


}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000015c 	.word	0x2000015c
 8000f20:	00000000 	.word	0x00000000
 8000f24:	43fa0000 	.word	0x43fa0000
 8000f28:	3e22f983 	.word	0x3e22f983
 8000f2c:	3e4ccccd 	.word	0x3e4ccccd
 8000f30:	20000144 	.word	0x20000144
 8000f34:	20000145 	.word	0x20000145
 8000f38:	2000014c 	.word	0x2000014c
 8000f3c:	20000150 	.word	0x20000150
 8000f40:	20000146 	.word	0x20000146
 8000f44:	20000147 	.word	0x20000147
 8000f48:	20000148 	.word	0x20000148
 8000f4c:	40c90fdb 	.word	0x40c90fdb
 8000f50:	20000158 	.word	0x20000158
 8000f54:	20000154 	.word	0x20000154
 8000f58:	461c4000 	.word	0x461c4000
 8000f5c:	20000160 	.word	0x20000160

08000f60 <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d821      	bhi.n	8000fd8 <calcVoltageMode+0x78>
 8000f94:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <calcVoltageMode+0x3c>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08000fd3 	.word	0x08000fd3
 8000fa0:	08000fbb 	.word	0x08000fbb
 8000fa4:	08000fb5 	.word	0x08000fb5
 8000fa8:	08000fc7 	.word	0x08000fc7
 8000fac:	08000fcd 	.word	0x08000fcd
 8000fb0:	08000fc1 	.word	0x08000fc1
	  case 3:
		voltageMode = 3;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000fb8:	e011      	b.n	8000fde <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000fbe:	e00e      	b.n	8000fde <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000fc4:	e00b      	b.n	8000fde <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000fca:	e008      	b.n	8000fde <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
		break;
 8000fd0:	e005      	b.n	8000fde <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000fd6:	e002      	b.n	8000fde <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
	  break;
 8000fdc:	bf00      	nop
	}

	return voltageMode;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	603a      	str	r2, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8000ffc:	79ba      	ldrb	r2, [r7, #6]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	2b01      	cmp	r3, #1
 800100c:	dd04      	ble.n	8001018 <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3b06      	subs	r3, #6
 8001012:	b2db      	uxtb	r3, r3
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e008      	b.n	800102a <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	da03      	bge.n	800102a <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3306      	adds	r3, #6
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	701a      	strb	r2, [r3, #0]

}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001066:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010a8 <calcElectAngleFromVoltageMode+0x64>
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	edc7 7a03 	vstr	s15, [r7, #12]

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8001072:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010ac <calcElectAngleFromVoltageMode+0x68>
 8001082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001086:	ed97 7a03 	vldr	s14, [r7, #12]
 800108a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108e:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	ee07 3a90 	vmov	s15, r3
}
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	3f860a92 	.word	0x3f860a92
 80010ac:	3f060a92 	.word	0x3f060a92

080010b0 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80010b0:	b084      	sub	sp, #16
 80010b2:	b5b0      	push	{r4, r5, r7, lr}
 80010b4:	b08a      	sub	sp, #40	; 0x28
 80010b6:	af0a      	add	r7, sp, #40	; 0x28
 80010b8:	f107 0410 	add.w	r4, r7, #16
 80010bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 80010c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80010c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c8:	3301      	adds	r3, #1
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80010ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d0:	3302      	adds	r3, #2
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	493b      	ldr	r1, [pc, #236]	; (80011c8 <VectorControlTasks+0x118>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f941 	bl	8001364 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 80010e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e8:	3310      	adds	r3, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	4836      	ldr	r0, [pc, #216]	; (80011c8 <VectorControlTasks+0x118>)
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	f000 f9d9 	bl	80014a8 <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 80010f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80010fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fe:	3318      	adds	r3, #24
 8001100:	4618      	mov	r0, r3
 8001102:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80011cc <VectorControlTasks+0x11c>
 8001106:	eddf 0a32 	vldr	s1, [pc, #200]	; 80011d0 <VectorControlTasks+0x120>
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	f7ff f984 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8001112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001114:	edd3 7a05 	vldr	s15, [r3, #20]
 8001118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800111a:	331c      	adds	r3, #28
 800111c:	4618      	mov	r0, r3
 800111e:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80011cc <VectorControlTasks+0x11c>
 8001122:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80011d0 <VectorControlTasks+0x120>
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	f7ff f976 	bl	800041a <gLPF>

	CurrentFbControl(sensData, vectorControlData);
 800112e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001130:	9309      	str	r3, [sp, #36]	; 0x24
 8001132:	466d      	mov	r5, sp
 8001134:	f107 0420 	add.w	r4, r7, #32
 8001138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	602b      	str	r3, [r5, #0]
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114a:	f000 fc13 	bl	8001974 <CurrentFbControl>
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 800114e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001150:	9309      	str	r3, [sp, #36]	; 0x24
 8001152:	466d      	mov	r5, sp
 8001154:	f107 0420 	add.w	r4, r7, #32
 8001158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	602b      	str	r3, [r5, #0]
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116a:	f000 fa27 	bl	80015bc <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 800116e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001170:	9309      	str	r3, [sp, #36]	; 0x24
 8001172:	466d      	mov	r5, sp
 8001174:	f107 0420 	add.w	r4, r7, #32
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	602b      	str	r3, [r5, #0]
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118a:	f000 fa4f 	bl	800162c <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 800118e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001194:	3320      	adds	r3, #32
 8001196:	490f      	ldr	r1, [pc, #60]	; (80011d4 <VectorControlTasks+0x124>)
 8001198:	4618      	mov	r0, r3
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f000 fab5 	bl	800170c <dq2ab>
	ab2uvw(sVab, sVuvw);
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <VectorControlTasks+0x128>)
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <VectorControlTasks+0x124>)
 80011a6:	f000 f93d 	bl	8001424 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 80011aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <VectorControlTasks+0x128>)
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f000 fae9 	bl	800178c <Vuvw2Duty>

}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80011c2:	b004      	add	sp, #16
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000164 	.word	0x20000164
 80011cc:	38d1b717 	.word	0x38d1b717
 80011d0:	42fb3333 	.word	0x42fb3333
 80011d4:	20000170 	.word	0x20000170
 80011d8:	20000178 	.word	0x20000178

080011dc <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80011dc:	b084      	sub	sp, #16
 80011de:	b5b0      	push	{r4, r5, r7, lr}
 80011e0:	b08c      	sub	sp, #48	; 0x30
 80011e2:	af0a      	add	r7, sp, #40	; 0x28
 80011e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e8:	f107 0418 	add.w	r4, r7, #24
 80011ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80011f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80011f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f8:	3301      	adds	r3, #1
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 80011fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001200:	3302      	adds	r3, #2
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4937      	ldr	r1, [pc, #220]	; (80012e8 <OpenLoopTasks+0x10c>)
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f8a9 	bl	8001364 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001212:	edd7 7a06 	vldr	s15, [r7, #24]
 8001216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001218:	3310      	adds	r3, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4832      	ldr	r0, [pc, #200]	; (80012e8 <OpenLoopTasks+0x10c>)
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	f000 f941 	bl	80014a8 <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 8001226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001228:	edd3 7a04 	vldr	s15, [r3, #16]
 800122c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800122e:	3318      	adds	r3, #24
 8001230:	4618      	mov	r0, r3
 8001232:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80012ec <OpenLoopTasks+0x110>
 8001236:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80012f0 <OpenLoopTasks+0x114>
 800123a:	eeb0 0a67 	vmov.f32	s0, s15
 800123e:	f7ff f8ec 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8001242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001244:	edd3 7a05 	vldr	s15, [r3, #20]
 8001248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124a:	331c      	adds	r3, #28
 800124c:	4618      	mov	r0, r3
 800124e:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80012ec <OpenLoopTasks+0x110>
 8001252:	eddf 0a27 	vldr	s1, [pc, #156]	; 80012f0 <OpenLoopTasks+0x114>
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	f7ff f8de 	bl	800041a <gLPF>

	vectorControlData->Vdq[0] = 0.0f;
 800125e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
	vectorControlData->Vdq[1] = VamRef;
 8001266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	625a      	str	r2, [r3, #36]	; 0x24


	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 800126c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800126e:	9309      	str	r3, [sp, #36]	; 0x24
 8001270:	466d      	mov	r5, sp
 8001272:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	f000 f998 	bl	80015bc <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 800128c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800128e:	9309      	str	r3, [sp, #36]	; 0x24
 8001290:	466d      	mov	r5, sp
 8001292:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	602b      	str	r3, [r5, #0]
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	f000 f9c0 	bl	800162c <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 80012ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80012b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b2:	3320      	adds	r3, #32
 80012b4:	490f      	ldr	r1, [pc, #60]	; (80012f4 <OpenLoopTasks+0x118>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	f000 fa26 	bl	800170c <dq2ab>
	ab2uvw(sVab, sVuvw);
 80012c0:	490d      	ldr	r1, [pc, #52]	; (80012f8 <OpenLoopTasks+0x11c>)
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <OpenLoopTasks+0x118>)
 80012c4:	f000 f8ae 	bl	8001424 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 80012c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80012ce:	480a      	ldr	r0, [pc, #40]	; (80012f8 <OpenLoopTasks+0x11c>)
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	f000 fa5a 	bl	800178c <Vuvw2Duty>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012e2:	b004      	add	sp, #16
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000164 	.word	0x20000164
 80012ec:	38d1b717 	.word	0x38d1b717
 80012f0:	42fb3333 	.word	0x42fb3333
 80012f4:	20000170 	.word	0x20000170
 80012f8:	20000178 	.word	0x20000178

080012fc <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80012fc:	b084      	sub	sp, #16
 80012fe:	b5b0      	push	{r4, r5, r7, lr}
 8001300:	b08a      	sub	sp, #40	; 0x28
 8001302:	af0a      	add	r7, sp, #40	; 0x28
 8001304:	f107 0410 	add.w	r4, r7, #16
 8001308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	calcVdqFeedForword(sensData, vectorControlData);
 800130c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800130e:	9309      	str	r3, [sp, #36]	; 0x24
 8001310:	466d      	mov	r5, sp
 8001312:	f107 0420 	add.w	r4, r7, #32
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	602b      	str	r3, [r5, #0]
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001328:	f000 fbcc 	bl	8001ac4 <calcVdqFeedForword>
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 800132c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800132e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001334:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800133e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 8001342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001344:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001354:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001360:	b004      	add	sp, #16
 8001362:	4770      	bx	lr

08001364 <uvw2ab>:

static inline void uvw2ab(float* uvw, float* ab){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3304      	adds	r3, #4
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001380:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001384:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3308      	adds	r3, #8
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001394:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001418 <uvw2ab+0xb4>
 80013a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800141c <uvw2ab+0xb8>
 80013b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3308      	adds	r3, #8
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800141c <uvw2ab+0xb8>
 80013c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3304      	adds	r3, #4
 80013d2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001418 <uvw2ab+0xb4>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3304      	adds	r3, #4
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3308      	adds	r3, #8
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3308      	adds	r3, #8
 8001400:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001420 <uvw2ab+0xbc>
 8001404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001408:	edc3 7a00 	vstr	s15, [r3]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	3f5105ec 	.word	0x3f5105ec
 800141c:	3f5db3d7 	.word	0x3f5db3d7
 8001420:	3f13cd3a 	.word	0x3f13cd3a

08001424 <ab2uvw>:

static inline void ab2uvw(float* ab, float* uvw){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80014a0 <ab2uvw+0x7c>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800144c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3304      	adds	r3, #4
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eddf 6a12 	vldr	s13, [pc, #72]	; 80014a4 <ab2uvw+0x80>
 800145c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3304      	adds	r3, #4
 8001468:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80014a0 <ab2uvw+0x7c>
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eeb1 7a67 	vneg.f32	s14, s15
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3308      	adds	r3, #8
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	edc3 7a00 	vstr	s15, [r3]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	3f5105ec 	.word	0x3f5105ec
 80014a4:	3f5db3d7 	.word	0x3f5db3d7

080014a8 <ab2dq>:

static inline void ab2dq(float theta, float* ab, float* dq){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80014b2:	60b8      	str	r0, [r7, #8]
 80014b4:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 80014b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80014ba:	f006 fead 	bl	8008218 <sinf>
 80014be:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 80014c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80014c6:	f006 fe63 	bl	8008190 <cosf>
 80014ca:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3304      	adds	r3, #4
 80014e0:	edd3 6a00 	vldr	s13, [r3]
 80014e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001500:	edd7 7a05 	vldr	s15, [r7, #20]
 8001504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3304      	adds	r3, #4
 800150c:	edd3 6a00 	vldr	s13, [r3]
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3304      	adds	r3, #4
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	edc3 7a00 	vstr	s15, [r3]
}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <calcAmpFromVect>:

static inline float calcAmpFromVect(float* Vect){
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3304      	adds	r3, #4
 8001548:	edd3 6a00 	vldr	s13, [r3]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3304      	adds	r3, #4
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 8001560:	ed97 0a03 	vldr	s0, [r7, #12]
 8001564:	f006 fec0 	bl	80082e8 <sqrtf>
 8001568:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	ee07 3a90 	vmov	s15, r3
}
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <calcModFromVamp>:

static inline float calcModFromVamp(float Vamp, float twoDivVdc){
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]
 8001586:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 800158a:	ed97 7a01 	vldr	s14, [r7, #4]
 800158e:	edd7 7a00 	vldr	s15, [r7]
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80015b8 <calcModFromVamp+0x3c>
 800159a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	ee07 3a90 	vmov	s15, r3
}
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	3f5105ec 	.word	0x3f5105ec

080015bc <calcAmpPhaseModFromVoltVect>:

static inline void calcAmpPhaseModFromVoltVect(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80015bc:	b084      	sub	sp, #16
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	f107 0c08 	add.w	ip, r7, #8
 80015c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 80015ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80015d6:	eef0 0a47 	vmov.f32	s1, s14
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	f006 fe61 	bl	80082a4 <atan2f>
 80015e2:	eef0 7a40 	vmov.f32	s15, s0
 80015e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 80015ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ee:	3320      	adds	r3, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff9b 	bl	800152c <calcAmpFromVect>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001602:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001606:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800160a:	eef0 0a47 	vmov.f32	s1, s14
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f7ff ffb3 	bl	800157c <calcModFromVamp>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
 800161a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001628:	b004      	add	sp, #16
 800162a:	4770      	bx	lr

0800162c <limitVoltVectAmp>:

static inline void limitVoltVectAmp(struct SensorData sensData, struct VectorControlData *vectorControlData){
 800162c:	b084      	sub	sp, #16
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	f107 0c10 	add.w	ip, r7, #16
 8001638:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float VampLimit;

	if( vectorControlData->Mod > MODLIMIT ){
 800163c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800163e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001642:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001700 <limitVoltVectAmp+0xd4>
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	dc00      	bgt.n	8001652 <limitVoltVectAmp+0x26>
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
		vectorControlData->Mod = MODLIMIT;

	}
}
 8001650:	e04e      	b.n	80016f0 <limitVoltVectAmp+0xc4>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8001652:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001656:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001704 <limitVoltVectAmp+0xd8>
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001700 <limitVoltVectAmp+0xd4>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	edc7 7a01 	vstr	s15, [r7, #4]
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 800166a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800166c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f006 fd8c 	bl	8008190 <cosf>
 8001678:	eeb0 7a40 	vmov.f32	s14, s0
 800167c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001686:	edc3 7a08 	vstr	s15, [r3, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 800168a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800169a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800169c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 80016aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f006 fdb0 	bl	8008218 <sinf>
 80016b8:	eeb0 7a40 	vmov.f32	s14, s0
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 80016ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016cc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80016d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80016e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 80016ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <limitVoltVectAmp+0xdc>)
 80016ee:	649a      	str	r2, [r3, #72]	; 0x48
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016fa:	b004      	add	sp, #16
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	3f933333 	.word	0x3f933333
 8001704:	3f1cc471 	.word	0x3f1cc471
 8001708:	3f933333 	.word	0x3f933333

0800170c <dq2ab>:

static inline void dq2ab(float theta, float* dq, float* ab){
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	ed87 0a03 	vstr	s0, [r7, #12]
 8001716:	60b8      	str	r0, [r7, #8]
 8001718:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800171a:	ed97 0a03 	vldr	s0, [r7, #12]
 800171e:	f006 fd7b 	bl	8008218 <sinf>
 8001722:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001726:	ed97 0a03 	vldr	s0, [r7, #12]
 800172a:	f006 fd31 	bl	8008190 <cosf>
 800172e:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	ed93 7a00 	vldr	s14, [r3]
 8001738:	edd7 7a04 	vldr	s15, [r7, #16]
 800173c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3304      	adds	r3, #4
 8001744:	edd3 6a00 	vldr	s13, [r3]
 8001748:	edd7 7a05 	vldr	s15, [r7, #20]
 800174c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	ed93 7a00 	vldr	s14, [r3]
 8001760:	edd7 7a05 	vldr	s15, [r7, #20]
 8001764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3304      	adds	r3, #4
 800176c:	edd3 6a00 	vldr	s13, [r3]
 8001770:	edd7 7a04 	vldr	s15, [r7, #16]
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3304      	adds	r3, #4
 800177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001780:	edc3 7a00 	vstr	s15, [r3]
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <Vuvw2Duty>:

static inline void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	ed87 0a03 	vstr	s0, [r7, #12]
 8001796:	60b8      	str	r0, [r7, #8]
 8001798:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3304      	adds	r3, #4
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d502      	bpl.n	80017bc <Vuvw2Duty+0x30>
		max = Vuvw[1];
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3308      	adds	r3, #8
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80017c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	d502      	bpl.n	80017d8 <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3304      	adds	r3, #4
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80017ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	dd02      	ble.n	80017fa <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3308      	adds	r3, #8
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ed97 7a06 	vldr	s14, [r7, #24]
 8001806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	dd02      	ble.n	8001816 <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	61bb      	str	r3, [r7, #24]

	vo = 0.0f;//(max + min) * 0.5f;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	ed93 7a00 	vldr	s14, [r3]
 8001822:	edd7 7a05 	vldr	s15, [r7, #20]
 8001826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3304      	adds	r3, #4
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3304      	adds	r3, #4
 800183c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3308      	adds	r3, #8
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3308      	adds	r3, #8
 8001854:	edd7 7a05 	vldr	s15, [r7, #20]
 8001858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185c:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	ed93 7a00 	vldr	s14, [r3]
 8001866:	edd7 7a03 	vldr	s15, [r7, #12]
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3304      	adds	r3, #4
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001888:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3308      	adds	r3, #8
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3308      	adds	r3, #8
 8001898:	edd7 7a03 	vldr	s15, [r7, #12]
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	f7fe fd63 	bl	8000380 <gUpperLowerLimit>
 80018ba:	eef0 7a40 	vmov.f32	s15, s0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3304      	adds	r3, #4
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1d1c      	adds	r4, r3, #4
 80018d0:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	f7fe fd50 	bl	8000380 <gUpperLowerLimit>
 80018e0:	eef0 7a40 	vmov.f32	s15, s0
 80018e4:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3308      	adds	r3, #8
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f103 0408 	add.w	r4, r3, #8
 80018f6:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80018fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80018fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001902:	f7fe fd3d 	bl	8000380 <gUpperLowerLimit>
 8001906:	eef0 7a40 	vmov.f32	s15, s0
 800190a:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001946:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3308      	adds	r3, #8
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3308      	adds	r3, #8
 800195e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001966:	edc3 7a00 	vstr	s15, [r3]

}
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}
	...

08001974 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001974:	b084      	sub	sp, #16
 8001976:	b5b0      	push	{r4, r5, r7, lr}
 8001978:	b090      	sub	sp, #64	; 0x40
 800197a:	af0a      	add	r7, sp, #40	; 0x28
 800197c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Kp;
	float Kig;
	float Kid;
	float wc;

	wc = 10.0f * TWOPI;
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <CurrentFbControl+0x140>)
 8001986:	617b      	str	r3, [r7, #20]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
 8001988:	edd7 7a05 	vldr	s15, [r7, #20]
 800198c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ab8 <CurrentFbControl+0x144>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	edc7 7a04 	vstr	s15, [r7, #16]
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
 8001998:	edd7 7a05 	vldr	s15, [r7, #20]
 800199c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001abc <CurrentFbControl+0x148>
 80019a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001ac0 <CurrentFbControl+0x14c>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	edc7 7a03 	vstr	s15, [r7, #12]
	Kid = Kig;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	60bb      	str	r3, [r7, #8]

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 80019b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	edc7 7a00 	vstr	s15, [r7]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 80019c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80019d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d8:	edc7 7a01 	vstr	s15, [r7, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 80019dc:	ed97 7a00 	vldr	s14, [r7]
 80019e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 80019ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a02:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a06:	edd7 6a00 	vldr	s13, [r7]
 8001a0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a18:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a22:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a34:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8001a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a3c:	466d      	mov	r5, sp
 8001a3e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	602b      	str	r3, [r5, #0]
 8001a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a54:	f000 f836 	bl	8001ac4 <calcVdqFeedForword>

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001a58:	ed97 7a00 	vldr	s14, [r7]
 8001a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a66:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a70:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7a:	edc3 7a08 	vstr	s15, [r3, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001a7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a96:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001aae:	b004      	add	sp, #16
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	427b53d2 	.word	0x427b53d2
 8001ab8:	3949539b 	.word	0x3949539b
 8001abc:	3f75c28f 	.word	0x3f75c28f
 8001ac0:	461c4000 	.word	0x461c4000

08001ac4 <calcVdqFeedForword>:

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	b490      	push	{r4, r7}
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	f107 0408 	add.w	r4, r7, #8
 8001ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8001ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad6:	eef1 7a67 	vneg.f32	s15, s15
 8001ada:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b28 <calcVdqFeedForword+0x64>
 8001ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b2c <calcVdqFeedForword+0x68>
 8001ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8001afa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b04:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001b30 <calcVdqFeedForword+0x6c>
 8001b08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b0c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b34 <calcVdqFeedForword+0x70>
 8001b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc90      	pop	{r4, r7}
 8001b24:	b004      	add	sp, #16
 8001b26:	4770      	bx	lr
 8001b28:	39fba882 	.word	0x39fba882
 8001b2c:	3ecccccd 	.word	0x3ecccccd
 8001b30:	3949539b 	.word	0x3949539b
 8001b34:	3a870111 	.word	0x3a870111

08001b38 <FluxObserver>:


static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	ed87 0a01 	vstr	s0, [r7, #4]
	float angleErr;
	float Egd[2];
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001be4 <FluxObserver+0xac>
 8001b56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b62:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001be8 <FluxObserver+0xb0>
 8001b66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	edc7 7a05 	vstr	s15, [r7, #20]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3304      	adds	r3, #4
 8001b82:	ed93 7a00 	vldr	s14, [r3]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001be4 <FluxObserver+0xac>
 8001b92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001be8 <FluxObserver+0xb0>
 8001ba2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb4:	edc7 7a06 	vstr	s15, [r7, #24]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bbc:	eef1 7a67 	vneg.f32	s15, s15
 8001bc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bc4:	eef0 0a47 	vmov.f32	s1, s14
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	f006 fb6a 	bl	80082a4 <atan2f>
 8001bd0:	ed87 0a07 	vstr	s0, [r7, #28]
	return angleErr;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	ee07 3a90 	vmov	s15, r3
}
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	3f75c28f 	.word	0x3f75c28f
 8001be8:	3949539b 	.word	0x3949539b

08001bec <calcElectAngleEstimate>:

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001bec:	b084      	sub	sp, #16
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001bfe:	4623      	mov	r3, r4
 8001c00:	71fb      	strb	r3, [r7, #7]
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c06:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c0e:	f103 0220 	add.w	r2, r3, #32
 8001c12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c16:	3310      	adds	r3, #16
 8001c18:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff8a 	bl	8001b38 <FluxObserver>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c2c:	edc3 7a01 	vstr	s15, [r3, #4]


	if( flgInit == 0){
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d110      	bne.n	8001c58 <calcElectAngleEstimate+0x6c>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c3c:	609a      	str	r2, [r3, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c44:	60da      	str	r2, [r3, #12]
		electAngleEstimateData->wc_PLL = 0.0f;
 8001c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	4a39      	ldr	r2, [pc, #228]	; (8001d38 <calcElectAngleEstimate+0x14c>)
 8001c54:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001c56:	e067      	b.n	8001d28 <calcElectAngleEstimate+0x13c>
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60bb      	str	r3, [r7, #8]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001d3c <calcElectAngleEstimate+0x150>
 8001c6a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001d40 <calcElectAngleEstimate+0x154>
 8001c6e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001d44 <calcElectAngleEstimate+0x158>
 8001c72:	f7fe fc02 	bl	800047a <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7c:	601a      	str	r2, [r3, #0]
		Ts_PLL = CARRIERCYCLE;
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <calcElectAngleEstimate+0x15c>)
 8001c80:	617b      	str	r3, [r7, #20]
		Kp_PLL = wc_PLL;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	613b      	str	r3, [r7, #16]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001d4c <calcElectAngleEstimate+0x160>
 8001c8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	edc7 7a03 	vstr	s15, [r7, #12]
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001caa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001cb6:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001d50 <calcElectAngleEstimate+0x164>
 8001cba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cc6:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cce:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd6:	f7fe fb15 	bl	8000304 <gfWrapTheta>
 8001cda:	eef0 7a40 	vmov.f32	s15, s0
 8001cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ce2:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	f7fe fb07 	bl	8000304 <gfWrapTheta>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cfe:	edc3 7a01 	vstr	s15, [r3, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <calcElectAngleEstimate+0x14c>)
 8001d0c:	ed97 1a03 	vldr	s2, [r7, #12]
 8001d10:	edd7 0a04 	vldr	s1, [r7, #16]
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	f7fe fa7e 	bl	8000218 <cfPhaseLockedLoop>
 8001d1c:	eef0 7a40 	vmov.f32	s15, s0
 8001d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d24:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d32:	b004      	add	sp, #16
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000184 	.word	0x20000184
 8001d3c:	38d1b717 	.word	0x38d1b717
 8001d40:	42480000 	.word	0x42480000
 8001d44:	449d1463 	.word	0x449d1463
 8001d48:	38d1b717 	.word	0x38d1b717
 8001d4c:	3e4ccccd 	.word	0x3e4ccccd
 8001d50:	461c4000 	.word	0x461c4000

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d58:	f000 fd5d 	bl	8002816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5c:	f000 f86a 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f000 fac6 	bl	80022f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d64:	f000 f8b2 	bl	8001ecc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d68:	f000 f97c 	bl	8002064 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d6c:	f000 fa3a 	bl	80021e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001d70:	482c      	ldr	r0, [pc, #176]	; (8001e24 <main+0xd0>)
 8001d72:	f004 fce7 	bl	8006744 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001d76:	482c      	ldr	r0, [pc, #176]	; (8001e28 <main+0xd4>)
 8001d78:	f002 fa74 	bl	8004264 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d82:	482a      	ldr	r0, [pc, #168]	; (8001e2c <main+0xd8>)
 8001d84:	f003 fc6c 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d8e:	4827      	ldr	r0, [pc, #156]	; (8001e2c <main+0xd8>)
 8001d90:	f003 fc66 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d9a:	4824      	ldr	r0, [pc, #144]	; (8001e2c <main+0xd8>)
 8001d9c:	f003 fc60 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001da0:	2100      	movs	r1, #0
 8001da2:	4820      	ldr	r0, [pc, #128]	; (8001e24 <main+0xd0>)
 8001da4:	f004 fd9e 	bl	80068e4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001da8:	2100      	movs	r1, #0
 8001daa:	481e      	ldr	r0, [pc, #120]	; (8001e24 <main+0xd0>)
 8001dac:	f005 ff9e 	bl	8007cec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001db0:	2104      	movs	r1, #4
 8001db2:	481c      	ldr	r0, [pc, #112]	; (8001e24 <main+0xd0>)
 8001db4:	f004 fd96 	bl	80068e4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001db8:	2104      	movs	r1, #4
 8001dba:	481a      	ldr	r0, [pc, #104]	; (8001e24 <main+0xd0>)
 8001dbc:	f005 ff96 	bl	8007cec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	4818      	ldr	r0, [pc, #96]	; (8001e24 <main+0xd0>)
 8001dc4:	f004 fd8e 	bl	80068e4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001dc8:	2108      	movs	r1, #8
 8001dca:	4816      	ldr	r0, [pc, #88]	; (8001e24 <main+0xd0>)
 8001dcc:	f005 ff8e 	bl	8007cec <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <main+0xdc>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <main+0xdc>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <main+0xdc>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <main+0xdc>)
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <main+0xdc>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <main+0xdc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <main+0xdc>)
 8001df0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001df4:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <main+0xdc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <main+0xdc>)
 8001dfc:	f043 0310 	orr.w	r3, r3, #16
 8001e00:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <main+0xdc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <main+0xdc>)
 8001e08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e0c:	6013      	str	r3, [r2, #0]

  TIM1 -> ARR = COUNTERPERIOD;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <main+0xdc>)
 8001e10:	f242 1233 	movw	r2, #8499	; 0x2133
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <main+0xdc>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <main+0xdc>)
 8001e1c:	3b28      	subs	r3, #40	; 0x28
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <main+0xcc>
 8001e22:	bf00      	nop
 8001e24:	200001f4 	.word	0x200001f4
 8001e28:	20000188 	.word	0x20000188
 8001e2c:	48000800 	.word	0x48000800
 8001e30:	40012c00 	.word	0x40012c00

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	; 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0318 	add.w	r3, r7, #24
 8001e3e:	2238      	movs	r2, #56	; 0x38
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f006 f99c 	bl	8008180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f003 fc34 	bl	80056c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e66:	2340      	movs	r3, #64	; 0x40
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e72:	2304      	movs	r3, #4
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e76:	2355      	movs	r3, #85	; 0x55
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e86:	f107 0318 	add.w	r3, r7, #24
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fcbe 	bl	800580c <HAL_RCC_OscConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e96:	f000 fa9b 	bl	80023d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 ffbc 	bl	8005e30 <HAL_RCC_ClockConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ebe:	f000 fa87 	bl	80023d0 <Error_Handler>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3750      	adds	r7, #80	; 0x50
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b09a      	sub	sp, #104	; 0x68
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ede:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f006 f94a 	bl	8008180 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001eec:	463b      	mov	r3, r7
 8001eee:	223c      	movs	r2, #60	; 0x3c
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f006 f944 	bl	8008180 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ef8:	4b55      	ldr	r3, [pc, #340]	; (8002050 <MX_ADC1_Init+0x184>)
 8001efa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f08:	4b51      	ldr	r3, [pc, #324]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0e:	4b50      	ldr	r3, [pc, #320]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f14:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f1a:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f2c:	4b48      	ldr	r3, [pc, #288]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f38:	4b45      	ldr	r3, [pc, #276]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f46:	4b42      	ldr	r3, [pc, #264]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f4c:	4b40      	ldr	r3, [pc, #256]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f54:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f62:	483b      	ldr	r0, [pc, #236]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f64:	f000 fef4 	bl	8002d50 <HAL_ADC_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f6e:	f000 fa2f 	bl	80023d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4834      	ldr	r0, [pc, #208]	; (8002050 <MX_ADC1_Init+0x184>)
 8001f7e:	f002 ffd5 	bl	8004f2c <HAL_ADCEx_MultiModeConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001f88:	f000 fa22 	bl	80023d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <MX_ADC1_Init+0x188>)
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f90:	2306      	movs	r3, #6
 8001f92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f94:	2300      	movs	r3, #0
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f98:	237f      	movs	r3, #127	; 0x7f
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4829      	ldr	r0, [pc, #164]	; (8002050 <MX_ADC1_Init+0x184>)
 8001fac:	f001 fb0a 	bl	80035c4 <HAL_ADC_ConfigChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001fb6:	f000 fa0b 	bl	80023d0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <MX_ADC1_Init+0x18c>)
 8001fbc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001fc6:	237f      	movs	r3, #127	; 0x7f
 8001fc8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4815      	ldr	r0, [pc, #84]	; (8002050 <MX_ADC1_Init+0x184>)
 8001ffc:	f002 fa6a 	bl	80044d4 <HAL_ADCEx_InjectedConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8002006:	f000 f9e3 	bl	80023d0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_ADC1_Init+0x190>)
 800200c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800200e:	f240 130f 	movw	r3, #271	; 0x10f
 8002012:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_ADC1_Init+0x184>)
 800201a:	f002 fa5b 	bl	80044d4 <HAL_ADCEx_InjectedConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8002024:	f000 f9d4 	bl	80023d0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <MX_ADC1_Init+0x194>)
 800202a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800202c:	f240 2315 	movw	r3, #533	; 0x215
 8002030:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <MX_ADC1_Init+0x184>)
 8002038:	f002 fa4c 	bl	80044d4 <HAL_ADCEx_InjectedConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8002042:	f000 f9c5 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3768      	adds	r7, #104	; 0x68
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000188 	.word	0x20000188
 8002054:	21800100 	.word	0x21800100
 8002058:	04300002 	.word	0x04300002
 800205c:	1d500080 	.word	0x1d500080
 8002060:	19200040 	.word	0x19200040

08002064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b098      	sub	sp, #96	; 0x60
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2234      	movs	r2, #52	; 0x34
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f006 f875 	bl	8008180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <MX_TIM1_Init+0x178>)
 8002098:	4a51      	ldr	r2, [pc, #324]	; (80021e0 <MX_TIM1_Init+0x17c>)
 800209a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800209c:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <MX_TIM1_Init+0x178>)
 800209e:	2200      	movs	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020a2:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <MX_TIM1_Init+0x178>)
 80020a4:	2220      	movs	r2, #32
 80020a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <MX_TIM1_Init+0x178>)
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <MX_TIM1_Init+0x178>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <MX_TIM1_Init+0x178>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <MX_TIM1_Init+0x178>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c2:	4846      	ldr	r0, [pc, #280]	; (80021dc <MX_TIM1_Init+0x178>)
 80020c4:	f004 fbb6 	bl	8006834 <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80020ce:	f000 f97f 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80020d2:	2370      	movs	r3, #112	; 0x70
 80020d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020e2:	4619      	mov	r1, r3
 80020e4:	483d      	ldr	r0, [pc, #244]	; (80021dc <MX_TIM1_Init+0x178>)
 80020e6:	f005 fec3 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020f0:	f000 f96e 	bl	80023d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	; 0x60
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	4830      	ldr	r0, [pc, #192]	; (80021dc <MX_TIM1_Init+0x178>)
 800211a:	f004 fdf3 	bl	8006d04 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002124:	f000 f954 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800212c:	2204      	movs	r2, #4
 800212e:	4619      	mov	r1, r3
 8002130:	482a      	ldr	r0, [pc, #168]	; (80021dc <MX_TIM1_Init+0x178>)
 8002132:	f004 fde7 	bl	8006d04 <HAL_TIM_PWM_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800213c:	f000 f948 	bl	80023d0 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002140:	2302      	movs	r3, #2
 8002142:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002144:	2308      	movs	r3, #8
 8002146:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800214c:	2208      	movs	r2, #8
 800214e:	4619      	mov	r1, r3
 8002150:	4822      	ldr	r0, [pc, #136]	; (80021dc <MX_TIM1_Init+0x178>)
 8002152:	f004 fdd7 	bl	8006d04 <HAL_TIM_PWM_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800215c:	f000 f938 	bl	80023d0 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002164:	2300      	movs	r3, #0
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800216c:	220c      	movs	r2, #12
 800216e:	4619      	mov	r1, r3
 8002170:	481a      	ldr	r0, [pc, #104]	; (80021dc <MX_TIM1_Init+0x178>)
 8002172:	f004 fdc7 	bl	8006d04 <HAL_TIM_PWM_ConfigChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800217c:	f000 f928 	bl	80023d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002198:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM1_Init+0x178>)
 80021be:	f005 feed 	bl	8007f9c <HAL_TIMEx_ConfigBreakDeadTime>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80021c8:	f000 f902 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM1_Init+0x178>)
 80021ce:	f000 fa1f 	bl	8002610 <HAL_TIM_MspPostInit>

}
 80021d2:	bf00      	nop
 80021d4:	3760      	adds	r7, #96	; 0x60
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200001f4 	.word	0x200001f4
 80021e0:	40012c00 	.word	0x40012c00

080021e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0320 	add.w	r3, r7, #32
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <MX_TIM2_Init+0x108>)
 8002212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <MX_TIM2_Init+0x108>)
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <MX_TIM2_Init+0x108>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <MX_TIM2_Init+0x108>)
 8002226:	f04f 32ff 	mov.w	r2, #4294967295
 800222a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <MX_TIM2_Init+0x108>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <MX_TIM2_Init+0x108>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002238:	482c      	ldr	r0, [pc, #176]	; (80022ec <MX_TIM2_Init+0x108>)
 800223a:	f004 fa2b 	bl	8006694 <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002244:	f000 f8c4 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	4619      	mov	r1, r3
 8002254:	4825      	ldr	r0, [pc, #148]	; (80022ec <MX_TIM2_Init+0x108>)
 8002256:	f004 fe69 	bl	8006f2c <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002260:	f000 f8b6 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <MX_TIM2_Init+0x108>)
 8002266:	f004 fc4f 	bl	8006b08 <HAL_TIM_IC_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002270:	f000 f8ae 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	481a      	ldr	r0, [pc, #104]	; (80022ec <MX_TIM2_Init+0x108>)
 8002284:	f005 fdf4 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800228e:	f000 f89f 	bl	80023d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002296:	2301      	movs	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4810      	ldr	r0, [pc, #64]	; (80022ec <MX_TIM2_Init+0x108>)
 80022aa:	f004 fc8e 	bl	8006bca <HAL_TIM_IC_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80022b4:	f000 f88c 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	2204      	movs	r2, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	480b      	ldr	r0, [pc, #44]	; (80022ec <MX_TIM2_Init+0x108>)
 80022c0:	f004 fc83 	bl	8006bca <HAL_TIM_IC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80022ca:	f000 f881 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2208      	movs	r2, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_TIM2_Init+0x108>)
 80022d6:	f004 fc78 	bl	8006bca <HAL_TIM_IC_ConfigChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80022e0:	f000 f876 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000240 	.word	0x20000240

080022f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <MX_GPIO_Init+0xd4>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <MX_GPIO_Init+0xd4>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <MX_GPIO_Init+0xd4>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <MX_GPIO_Init+0xd4>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_GPIO_Init+0xd4>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800236c:	4816      	ldr	r0, [pc, #88]	; (80023c8 <MX_GPIO_Init+0xd8>)
 800236e:	f003 f977 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002378:	4814      	ldr	r0, [pc, #80]	; (80023cc <MX_GPIO_Init+0xdc>)
 800237a:	f003 f971 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 800237e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <MX_GPIO_Init+0xd8>)
 8002398:	f002 ffe0 	bl	800535c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 800239c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_GPIO_Init+0xdc>)
 80023b6:	f002 ffd1 	bl	800535c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	48000400 	.word	0x48000400
 80023cc:	48000800 	.word	0x48000800

080023d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
}
 80023d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <Error_Handler+0x8>
	...

080023dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_MspInit+0x44>)
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_MspInit+0x44>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6613      	str	r3, [r2, #96]	; 0x60
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_MspInit+0x44>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_MspInit+0x44>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_MspInit+0x44>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_MspInit+0x44>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0a0      	sub	sp, #128	; 0x80
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	2254      	movs	r2, #84	; 0x54
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f005 fe9b 	bl	8008180 <memset>
  if(hadc->Instance==ADC1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002452:	d154      	bne.n	80024fe <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002458:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800245a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800245e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002460:	f107 0318 	add.w	r3, r7, #24
 8002464:	4618      	mov	r0, r3
 8002466:	f003 fec7 	bl	80061f8 <HAL_RCCEx_PeriphCLKConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002470:	f7ff ffae 	bl	80023d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 800247a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800247e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_ADC_MspInit+0xe4>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80024bc:	2307      	movs	r3, #7
 80024be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c0:	2303      	movs	r3, #3
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024cc:	4619      	mov	r1, r3
 80024ce:	480f      	ldr	r0, [pc, #60]	; (800250c <HAL_ADC_MspInit+0xe8>)
 80024d0:	f002 ff44 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024d4:	2301      	movs	r3, #1
 80024d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d8:	2303      	movs	r3, #3
 80024da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ea:	f002 ff37 	bl	800535c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2012      	movs	r0, #18
 80024f4:	f002 fefd 	bl	80052f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024f8:	2012      	movs	r0, #18
 80024fa:	f002 ff14 	bl	8005326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3780      	adds	r7, #128	; 0x80
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	48000800 	.word	0x48000800

08002510 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_TIM_PWM_MspInit+0x38>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10b      	bne.n	800253a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_TIM_PWM_MspInit+0x3c>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_TIM_PWM_MspInit+0x3c>)
 8002528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800252c:	6613      	str	r3, [r2, #96]	; 0x60
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_TIM_PWM_MspInit+0x3c>)
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d146      	bne.n	8002600 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = H2_Pin|H1_Pin;
 80025ba:	f248 0302 	movw	r3, #32770	; 0x8002
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025da:	f002 febf 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H3_Pin;
 80025de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025f0:	2301      	movs	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H3_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4804      	ldr	r0, [pc, #16]	; (800260c <HAL_TIM_Base_MspInit+0xbc>)
 80025fc:	f002 feae 	bl	800535c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	48000400 	.word	0x48000400

08002610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a36      	ldr	r2, [pc, #216]	; (8002708 <HAL_TIM_MspPostInit+0xf8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d166      	bne.n	8002700 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a35      	ldr	r2, [pc, #212]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_TIM_MspPostInit+0xfc>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800267a:	2308      	movs	r3, #8
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800268a:	2302      	movs	r3, #2
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	481e      	ldr	r0, [pc, #120]	; (8002710 <HAL_TIM_MspPostInit+0x100>)
 8002696:	f002 fe61 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800269a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800269e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026ac:	2306      	movs	r3, #6
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f002 fe4f 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026be:	2301      	movs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026ce:	2306      	movs	r3, #6
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	480e      	ldr	r0, [pc, #56]	; (8002714 <HAL_TIM_MspPostInit+0x104>)
 80026da:	f002 fe3f 	bl	800535c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80026f0:	230c      	movs	r3, #12
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_TIM_MspPostInit+0x104>)
 80026fc:	f002 fe2e 	bl	800535c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40021000 	.word	0x40021000
 8002710:	48000800 	.word	0x48000800
 8002714:	48000400 	.word	0x48000400

08002718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800271c:	e7fe      	b.n	800271c <NMI_Handler+0x4>

0800271e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <MemManage_Handler+0x4>

0800272a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <BusFault_Handler+0x4>

08002730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <UsageFault_Handler+0x4>

08002736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002764:	f000 f8aa 	bl	80028bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}

0800276c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002770:	4809      	ldr	r0, [pc, #36]	; (8002798 <ADC1_2_IRQHandler+0x2c>)
 8002772:	f000 fca9 	bl	80030c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800277a:	4808      	ldr	r0, [pc, #32]	; (800279c <ADC1_2_IRQHandler+0x30>)
 800277c:	f002 ff88 	bl	8005690 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence_Low_Freq();
 8002780:	f7fd febc 	bl	80004fc <Sequence_Low_Freq>
	Sequence_High_Freq();
 8002784:	f7fd ff60 	bl	8000648 <Sequence_High_Freq>


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <ADC1_2_IRQHandler+0x30>)
 800278e:	f002 ff7f 	bl	8005690 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000188 	.word	0x20000188
 800279c:	48000400 	.word	0x48000400

080027a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <SystemInit+0x20>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <SystemInit+0x20>)
 80027ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c4:	480d      	ldr	r0, [pc, #52]	; (80027fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027c8:	f7ff ffea 	bl	80027a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <LoopForever+0xe>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e4:	4c0a      	ldr	r4, [pc, #40]	; (8002810 <LoopForever+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027f2:	f005 fc93 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027f6:	f7ff faad 	bl	8001d54 <main>

080027fa <LoopForever>:

LoopForever:
    b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   r0, =_estack
 80027fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002808:	08009584 	.word	0x08009584
  ldr r2, =_sbss
 800280c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002810:	20000290 	.word	0x20000290

08002814 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC3_IRQHandler>

08002816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f002 fd5b 	bl	80052dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002826:	200f      	movs	r0, #15
 8002828:	f000 f80e 	bl	8002848 <HAL_InitTick>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	e001      	b.n	800283c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002838:	f7ff fdd0 	bl	80023dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283c:	79fb      	ldrb	r3, [r7, #7]

}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_InitTick+0x68>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d022      	beq.n	80028a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_InitTick+0x6c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_InitTick+0x68>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fd66 	bl	8005342 <HAL_SYSTICK_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	d809      	bhi.n	8002896 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002882:	2200      	movs	r2, #0
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	f04f 30ff 	mov.w	r0, #4294967295
 800288a:	f002 fd32 	bl	80052f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_InitTick+0x70>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e007      	b.n	80028a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e004      	b.n	80028a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e001      	b.n	80028a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000008 	.word	0x20000008
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_IncTick+0x1c>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_IncTick+0x20>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_IncTick+0x1c>)
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	2000028c 	.word	0x2000028c
 80028dc:	20000008 	.word	0x20000008

080028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_GetTick+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000028c 	.word	0x2000028c

080028f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <LL_ADC_SetOffset+0x44>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	03fff000 	.word	0x03fff000

080029a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3360      	adds	r3, #96	; 0x60
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3360      	adds	r3, #96	; 0x60
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3360      	adds	r3, #96	; 0x60
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	615a      	str	r2, [r3, #20]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b087      	sub	sp, #28
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3330      	adds	r3, #48	; 0x30
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	4413      	add	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	211f      	movs	r1, #31
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	401a      	ands	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 011f 	and.w	r1, r3, #31
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0e5b      	lsrs	r3, r3, #25
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	0d1b      	lsrs	r3, r3, #20
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2107      	movs	r1, #7
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	0d1b      	lsrs	r3, r3, #20
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0318 	and.w	r3, r3, #24
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bbc:	40d9      	lsrs	r1, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	0007ffff 	.word	0x0007ffff

08002be0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 031f 	and.w	r3, r3, #31
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6093      	str	r3, [r2, #8]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_IsEnabled+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_IsEnabled+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d101      	bne.n	8002d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d101      	bne.n	8002d40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1a9      	b.n	80030be <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fb53 	bl	8002424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff53 	bl	8002c3c <LL_ADC_IsDeepPowerDownEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff39 	bl	8002c18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff6e 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff52 	bl	8002c64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc0:	4b9c      	ldr	r3, [pc, #624]	; (8003034 <HAL_ADC_Init+0x2e4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	4a9c      	ldr	r2, [pc, #624]	; (8003038 <HAL_ADC_Init+0x2e8>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dd4:	e002      	b.n	8002ddc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff50 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	f043 0210 	orr.w	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff75 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 8002e18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8142 	bne.w	80030ac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 813e 	bne.w	80030ac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e38:	f043 0202 	orr.w	r2, r3, #2
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff49 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d141      	bne.n	8002ed4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e58:	d004      	beq.n	8002e64 <HAL_ADC_Init+0x114>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a77      	ldr	r2, [pc, #476]	; (800303c <HAL_ADC_Init+0x2ec>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10f      	bne.n	8002e84 <HAL_ADC_Init+0x134>
 8002e64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e68:	f7ff ff38 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	4873      	ldr	r0, [pc, #460]	; (800303c <HAL_ADC_Init+0x2ec>)
 8002e70:	f7ff ff34 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4323      	orrs	r3, r4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e012      	b.n	8002eaa <HAL_ADC_Init+0x15a>
 8002e84:	486e      	ldr	r0, [pc, #440]	; (8003040 <HAL_ADC_Init+0x2f0>)
 8002e86:	f7ff ff29 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	486d      	ldr	r0, [pc, #436]	; (8003044 <HAL_ADC_Init+0x2f4>)
 8002e8e:	f7ff ff25 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	431c      	orrs	r4, r3
 8002e96:	486c      	ldr	r0, [pc, #432]	; (8003048 <HAL_ADC_Init+0x2f8>)
 8002e98:	f7ff ff20 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_Init+0x172>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a5f      	ldr	r2, [pc, #380]	; (800303c <HAL_ADC_Init+0x2ec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Init+0x176>
 8002ec2:	4a62      	ldr	r2, [pc, #392]	; (800304c <HAL_ADC_Init+0x2fc>)
 8002ec4:	e000      	b.n	8002ec8 <HAL_ADC_Init+0x178>
 8002ec6:	4a62      	ldr	r2, [pc, #392]	; (8003050 <HAL_ADC_Init+0x300>)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f7ff fd12 	bl	80028f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7f5b      	ldrb	r3, [r3, #29]
 8002ed8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ede:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ee4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002eea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d106      	bne.n	8002f10 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	3b01      	subs	r3, #1
 8002f08:	045b      	lsls	r3, r3, #17
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b48      	ldr	r3, [pc, #288]	; (8003054 <HAL_ADC_Init+0x304>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fee4 	bl	8002d28 <LL_ADC_INJ_IsConversionOngoing>
 8002f60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d17f      	bne.n	8003068 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d17c      	bne.n	8003068 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f8a:	f023 0302 	bic.w	r3, r3, #2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d017      	beq.n	8002fd0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6911      	ldr	r1, [r2, #16]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002fce:	e013      	b.n	8002ff8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d12a      	bne.n	8003058 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003024:	430a      	orrs	r2, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e019      	b.n	8003068 <HAL_ADC_Init+0x318>
 8003034:	20000000 	.word	0x20000000
 8003038:	053e2d63 	.word	0x053e2d63
 800303c:	50000100 	.word	0x50000100
 8003040:	50000400 	.word	0x50000400
 8003044:	50000500 	.word	0x50000500
 8003048:	50000600 	.word	0x50000600
 800304c:	50000300 	.word	0x50000300
 8003050:	50000700 	.word	0x50000700
 8003054:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f023 010f 	bic.w	r1, r3, #15
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
 8003088:	e007      	b.n	800309a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 020f 	bic.w	r2, r2, #15
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80030aa:	e007      	b.n	80030bc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	bf00      	nop

080030c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ec:	d004      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x30>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a8e      	ldr	r2, [pc, #568]	; (800332c <HAL_ADC_IRQHandler+0x264>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_IRQHandler+0x34>
 80030f8:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_ADC_IRQHandler+0x268>)
 80030fa:	e000      	b.n	80030fe <HAL_ADC_IRQHandler+0x36>
 80030fc:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <HAL_ADC_IRQHandler+0x26c>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fd6e 	bl	8002be0 <LL_ADC_GetMultimode>
 8003104:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d017      	beq.n	8003140 <HAL_ADC_IRQHandler+0x78>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f001 f9c4 	bl	80044c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2202      	movs	r2, #2
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <HAL_ADC_IRQHandler+0x8c>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8094 	beq.w	8003288 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 808e 	beq.w	8003288 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fc87 	bl	8002a9c <LL_ADC_REG_IsTriggerSourceSWStart>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d072      	beq.n	800327a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a64      	ldr	r2, [pc, #400]	; (800332c <HAL_ADC_IRQHandler+0x264>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_ADC_IRQHandler+0xea>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a65      	ldr	r2, [pc, #404]	; (8003338 <HAL_ADC_IRQHandler+0x270>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d002      	beq.n	80031ae <HAL_ADC_IRQHandler+0xe6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e003      	b.n	80031b6 <HAL_ADC_IRQHandler+0xee>
 80031ae:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_ADC_IRQHandler+0x274>)
 80031b0:	e001      	b.n	80031b6 <HAL_ADC_IRQHandler+0xee>
 80031b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d008      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d002      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d104      	bne.n	80031da <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	e014      	b.n	8003204 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a53      	ldr	r2, [pc, #332]	; (800332c <HAL_ADC_IRQHandler+0x264>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d009      	beq.n	80031f8 <HAL_ADC_IRQHandler+0x130>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_ADC_IRQHandler+0x270>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d002      	beq.n	80031f4 <HAL_ADC_IRQHandler+0x12c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e003      	b.n	80031fc <HAL_ADC_IRQHandler+0x134>
 80031f4:	4b51      	ldr	r3, [pc, #324]	; (800333c <HAL_ADC_IRQHandler+0x274>)
 80031f6:	e001      	b.n	80031fc <HAL_ADC_IRQHandler+0x134>
 80031f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d135      	bne.n	800327a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d12e      	bne.n	800327a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fd6e 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11a      	bne.n	8003262 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 020c 	bic.w	r2, r2, #12
 800323a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d112      	bne.n	800327a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003260:	e00b      	b.n	800327a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f984 	bl	8003588 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	220c      	movs	r2, #12
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <HAL_ADC_IRQHandler+0x1d4>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80b3 	beq.w	800340e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80ad 	beq.w	800340e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fc22 	bl	8002b1a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fbdd 	bl	8002a9c <LL_ADC_REG_IsTriggerSourceSWStart>
 80032e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_ADC_IRQHandler+0x264>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_ADC_IRQHandler+0x23a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <HAL_ADC_IRQHandler+0x270>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d002      	beq.n	80032fe <HAL_ADC_IRQHandler+0x236>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	e003      	b.n	8003306 <HAL_ADC_IRQHandler+0x23e>
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_ADC_IRQHandler+0x274>)
 8003300:	e001      	b.n	8003306 <HAL_ADC_IRQHandler+0x23e>
 8003302:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4293      	cmp	r3, r2
 800330c:	d008      	beq.n	8003320 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d002      	beq.n	8003320 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b07      	cmp	r3, #7
 800331e:	d10f      	bne.n	8003340 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	e01f      	b.n	800336a <HAL_ADC_IRQHandler+0x2a2>
 800332a:	bf00      	nop
 800332c:	50000100 	.word	0x50000100
 8003330:	50000300 	.word	0x50000300
 8003334:	50000700 	.word	0x50000700
 8003338:	50000500 	.word	0x50000500
 800333c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8b      	ldr	r2, [pc, #556]	; (8003574 <HAL_ADC_IRQHandler+0x4ac>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_ADC_IRQHandler+0x296>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a8a      	ldr	r2, [pc, #552]	; (8003578 <HAL_ADC_IRQHandler+0x4b0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d002      	beq.n	800335a <HAL_ADC_IRQHandler+0x292>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	e003      	b.n	8003362 <HAL_ADC_IRQHandler+0x29a>
 800335a:	4b88      	ldr	r3, [pc, #544]	; (800357c <HAL_ADC_IRQHandler+0x4b4>)
 800335c:	e001      	b.n	8003362 <HAL_ADC_IRQHandler+0x29a>
 800335e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003362:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d047      	beq.n	8003400 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_ADC_IRQHandler+0x2c2>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d03f      	beq.n	8003400 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003386:	2b00      	cmp	r3, #0
 8003388:	d13a      	bne.n	8003400 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d133      	bne.n	8003400 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d12e      	bne.n	8003400 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fcbe 	bl	8002d28 <LL_ADC_INJ_IsConversionOngoing>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11a      	bne.n	80033e8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d112      	bne.n	8003400 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033e6:	e00b      	b.n	8003400 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f001 f835 	bl	8004470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2260      	movs	r2, #96	; 0x60
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d011      	beq.n	800343c <HAL_ADC_IRQHandler+0x374>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8b4 	bl	800359c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <HAL_ADC_IRQHandler+0x3a4>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f001 f81b 	bl	8004498 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003472:	2b00      	cmp	r3, #0
 8003474:	d012      	beq.n	800349c <HAL_ADC_IRQHandler+0x3d4>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f001 f80d 	bl	80044ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d043      	beq.n	800352e <HAL_ADC_IRQHandler+0x466>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03e      	beq.n	800352e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80034b8:	2301      	movs	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
 80034bc:	e021      	b.n	8003502 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034cc:	d004      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x410>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a28      	ldr	r2, [pc, #160]	; (8003574 <HAL_ADC_IRQHandler+0x4ac>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_IRQHandler+0x414>
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_ADC_IRQHandler+0x4b8>)
 80034da:	e000      	b.n	80034de <HAL_ADC_IRQHandler+0x416>
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_ADC_IRQHandler+0x4bc>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fb8c 	bl	8002bfc <LL_ADC_GetMultiDMATransfer>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034ea:	2301      	movs	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	e008      	b.n	8003502 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034fe:	2301      	movs	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10e      	bne.n	8003526 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f043 0202 	orr.w	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f845 	bl	80035b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2210      	movs	r2, #16
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d018      	beq.n	800356a <HAL_ADC_IRQHandler+0x4a2>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353e:	2b00      	cmp	r3, #0
 8003540:	d013      	beq.n	800356a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	f043 0208 	orr.w	r2, r3, #8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003562:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 ff8d 	bl	8004484 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800356a:	bf00      	nop
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	50000100 	.word	0x50000100
 8003578:	50000500 	.word	0x50000500
 800357c:	50000400 	.word	0x50000400
 8003580:	50000300 	.word	0x50000300
 8003584:	50000700 	.word	0x50000700

08003588 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b0b6      	sub	sp, #216	; 0xd8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x24>
 80035e2:	2302      	movs	r3, #2
 80035e4:	f000 bc13 	b.w	8003e0e <HAL_ADC_ConfigChannel+0x84a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fb84 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 83f3 	bne.w	8003de8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	f7ff fa57 	bl	8002ac2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fb72 	bl	8002d02 <LL_ADC_REG_IsConversionOngoing>
 800361e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fb7e 	bl	8002d28 <LL_ADC_INJ_IsConversionOngoing>
 800362c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003630:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003634:	2b00      	cmp	r3, #0
 8003636:	f040 81d9 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800363a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 81d4 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364c:	d10f      	bne.n	800366e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	4619      	mov	r1, r3
 800365a:	f7ff fa71 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fa05 	bl	8002a76 <LL_ADC_SetSamplingTimeCommonConfig>
 800366c:	e00e      	b.n	800368c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	461a      	mov	r2, r3
 800367c:	f7ff fa60 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f9f5 	bl	8002a76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	08db      	lsrs	r3, r3, #3
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d022      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6919      	ldr	r1, [r3, #16]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036be:	f7ff f94f 	bl	8002960 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6919      	ldr	r1, [r3, #16]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7ff f99b 	bl	8002a0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d102      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x126>
 80036e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e8:	e000      	b.n	80036ec <HAL_ADC_ConfigChannel+0x128>
 80036ea:	2300      	movs	r3, #0
 80036ec:	461a      	mov	r2, r3
 80036ee:	f7ff f9a7 	bl	8002a40 <LL_ADC_SetOffsetSaturation>
 80036f2:	e17b      	b.n	80039ec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff f954 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x15c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f949 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	e01e      	b.n	800375e <HAL_ADC_ConfigChannel+0x19a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f93e 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800373e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e004      	b.n	800375c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x1b2>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	e018      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x1e4>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800378a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800378e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800379a:	2320      	movs	r3, #32
 800379c:	e004      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800379e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff f90d 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f8f1 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x222>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f8e6 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	f003 021f 	and.w	r2, r3, #31
 80037e4:	e01e      	b.n	8003824 <HAL_ADC_ConfigChannel+0x260>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f8db 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800380c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e004      	b.n	8003822 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_ADC_ConfigChannel+0x278>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	e018      	b.n	800386e <HAL_ADC_ConfigChannel+0x2aa>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003850:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e004      	b.n	800386e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800386e:	429a      	cmp	r2, r3
 8003870:	d106      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff f8aa 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2102      	movs	r1, #2
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f88e 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x2e8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2102      	movs	r1, #2
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f883 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80038a2:	4603      	mov	r3, r0
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	f003 021f 	and.w	r2, r3, #31
 80038aa:	e01e      	b.n	80038ea <HAL_ADC_ConfigChannel+0x326>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f878 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038da:	2320      	movs	r3, #32
 80038dc:	e004      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x33e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	0e9b      	lsrs	r3, r3, #26
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	e016      	b.n	8003930 <HAL_ADC_ConfigChannel+0x36c>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800391a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e004      	b.n	8003930 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003930:	429a      	cmp	r2, r3
 8003932:	d106      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	2102      	movs	r1, #2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f849 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2103      	movs	r1, #3
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f82d 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_ADC_ConfigChannel+0x3aa>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2103      	movs	r1, #3
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f822 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	e017      	b.n	800399e <HAL_ADC_ConfigChannel+0x3da>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2103      	movs	r1, #3
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f817 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003988:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800398a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e003      	b.n	800399c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x3f2>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	e011      	b.n	80039da <HAL_ADC_ConfigChannel+0x416>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039da:	429a      	cmp	r2, r3
 80039dc:	d106      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	2103      	movs	r1, #3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fff4 	bl	80029d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff f973 	bl	8002cdc <LL_ADC_IsEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 813d 	bne.w	8003c78 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f7ff f8c4 	bl	8002b98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4aa2      	ldr	r2, [pc, #648]	; (8003ca0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	f040 812e 	bne.w	8003c78 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x480>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2b09      	cmp	r3, #9
 8003a3a:	bf94      	ite	ls
 8003a3c:	2301      	movls	r3, #1
 8003a3e:	2300      	movhi	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e019      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x4b4>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	bf94      	ite	ls
 8003a72:	2301      	movls	r3, #1
 8003a74:	2300      	movhi	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d079      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x4d4>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0e9b      	lsrs	r3, r3, #26
 8003a8e:	3301      	adds	r3, #1
 8003a90:	069b      	lsls	r3, r3, #26
 8003a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a96:	e015      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x500>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e003      	b.n	8003abc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	069b      	lsls	r3, r3, #26
 8003ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x520>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	e017      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x550>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e003      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	ea42 0103 	orr.w	r1, r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x576>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	051b      	lsls	r3, r3, #20
 8003b38:	e018      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x5a8>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	e07e      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x5c8>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	3301      	adds	r3, #1
 8003b84:	069b      	lsls	r3, r3, #26
 8003b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b8a:	e015      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x5f4>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e003      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	069b      	lsls	r3, r3, #26
 8003bb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x614>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	e017      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x644>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	61fb      	str	r3, [r7, #28]
  return result;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e003      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x670>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	3b1e      	subs	r3, #30
 8003c2c:	051b      	lsls	r3, r3, #20
 8003c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c32:	e01b      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x6a8>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	613b      	str	r3, [r7, #16]
  return result;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	e003      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f003 021f 	and.w	r2, r3, #31
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	3b1e      	subs	r3, #30
 8003c66:	051b      	lsls	r3, r3, #20
 8003c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fe ff64 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80be 	beq.w	8003e02 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8e:	d004      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x6d6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10a      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x6ec>
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <HAL_ADC_ConfigChannel+0x6e8>)
 8003c9c:	e009      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x6ee>
 8003c9e:	bf00      	nop
 8003ca0:	407f0000 	.word	0x407f0000
 8003ca4:	80080000 	.word	0x80080000
 8003ca8:	50000100 	.word	0x50000100
 8003cac:	50000300 	.word	0x50000300
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_ADC_ConfigChannel+0x854>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fe46 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 8003cb8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a56      	ldr	r2, [pc, #344]	; (8003e1c <HAL_ADC_ConfigChannel+0x858>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_ADC_ConfigChannel+0x70c>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a55      	ldr	r2, [pc, #340]	; (8003e20 <HAL_ADC_ConfigChannel+0x85c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d13a      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d134      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce4:	d005      	beq.n	8003cf2 <HAL_ADC_ConfigChannel+0x72e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4e      	ldr	r2, [pc, #312]	; (8003e24 <HAL_ADC_ConfigChannel+0x860>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f040 8085 	bne.w	8003dfc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfa:	d004      	beq.n	8003d06 <HAL_ADC_ConfigChannel+0x742>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a49      	ldr	r2, [pc, #292]	; (8003e28 <HAL_ADC_ConfigChannel+0x864>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x746>
 8003d06:	4a49      	ldr	r2, [pc, #292]	; (8003e2c <HAL_ADC_ConfigChannel+0x868>)
 8003d08:	e000      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x748>
 8003d0a:	4a43      	ldr	r2, [pc, #268]	; (8003e18 <HAL_ADC_ConfigChannel+0x854>)
 8003d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fe fe01 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d1c:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_ADC_ConfigChannel+0x86c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	4a44      	ldr	r2, [pc, #272]	; (8003e34 <HAL_ADC_ConfigChannel+0x870>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d36:	e002      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f9      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d44:	e05a      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_ADC_ConfigChannel+0x874>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d125      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11f      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_ADC_ConfigChannel+0x864>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d104      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x7ac>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a34      	ldr	r2, [pc, #208]	; (8003e3c <HAL_ADC_ConfigChannel+0x878>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d047      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d78:	d004      	beq.n	8003d84 <HAL_ADC_ConfigChannel+0x7c0>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <HAL_ADC_ConfigChannel+0x864>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x7c4>
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <HAL_ADC_ConfigChannel+0x868>)
 8003d86:	e000      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x7c6>
 8003d88:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_ADC_ConfigChannel+0x854>)
 8003d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7fe fdc2 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d9a:	e031      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <HAL_ADC_ConfigChannel+0x87c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d12d      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d127      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <HAL_ADC_ConfigChannel+0x864>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc4:	d004      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0x80c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_ADC_ConfigChannel+0x864>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x810>
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <HAL_ADC_ConfigChannel+0x868>)
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x812>
 8003dd4:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <HAL_ADC_ConfigChannel+0x854>)
 8003dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7fe fd9c 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
 8003de6:	e00c      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003dfa:	e002      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	37d8      	adds	r7, #216	; 0xd8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	50000700 	.word	0x50000700
 8003e1c:	c3210000 	.word	0xc3210000
 8003e20:	90c00010 	.word	0x90c00010
 8003e24:	50000600 	.word	0x50000600
 8003e28:	50000100 	.word	0x50000100
 8003e2c:	50000300 	.word	0x50000300
 8003e30:	20000000 	.word	0x20000000
 8003e34:	053e2d63 	.word	0x053e2d63
 8003e38:	c7520000 	.word	0xc7520000
 8003e3c:	50000500 	.word	0x50000500
 8003e40:	cb840000 	.word	0xcb840000

08003e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe ff41 	bl	8002cdc <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d176      	bne.n	8003f4e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	4b3c      	ldr	r3, [pc, #240]	; (8003f58 <ADC_Enable+0x114>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	f043 0210 	orr.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e062      	b.n	8003f50 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe ff10 	bl	8002cb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e9c:	d004      	beq.n	8003ea8 <ADC_Enable+0x64>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2e      	ldr	r2, [pc, #184]	; (8003f5c <ADC_Enable+0x118>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <ADC_Enable+0x68>
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <ADC_Enable+0x11c>)
 8003eaa:	e000      	b.n	8003eae <ADC_Enable+0x6a>
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <ADC_Enable+0x120>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fd48 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 8003eb4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d013      	beq.n	8003ee6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <ADC_Enable+0x124>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <ADC_Enable+0x128>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ed8:	e002      	b.n	8003ee0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f9      	bne.n	8003eda <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ee6:	f7fe fcfb 	bl	80028e0 <HAL_GetTick>
 8003eea:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eec:	e028      	b.n	8003f40 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fef2 	bl	8002cdc <LL_ADC_IsEnabled>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fed6 	bl	8002cb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f08:	f7fe fcea 	bl	80028e0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d914      	bls.n	8003f40 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d00d      	beq.n	8003f40 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d1cf      	bne.n	8003eee <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	8000003f 	.word	0x8000003f
 8003f5c:	50000100 	.word	0x50000100
 8003f60:	50000300 	.word	0x50000300
 8003f64:	50000700 	.word	0x50000700
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	053e2d63 	.word	0x053e2d63

08003f70 <LL_ADC_SetCommonPathInternalCh>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_ADC_GetCommonPathInternalCh>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <LL_ADC_SetOffset>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3360      	adds	r3, #96	; 0x60
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <LL_ADC_SetOffset+0x44>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	03fff000 	.word	0x03fff000

08003ffc <LL_ADC_GetOffsetChannel>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3360      	adds	r3, #96	; 0x60
 800400a:	461a      	mov	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_SetOffsetState>:
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3360      	adds	r3, #96	; 0x60
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	431a      	orrs	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	601a      	str	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_ADC_SetOffsetSign>:
{
 800405e:	b480      	push	{r7}
 8004060:	b087      	sub	sp, #28
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3360      	adds	r3, #96	; 0x60
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	431a      	orrs	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	601a      	str	r2, [r3, #0]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_ADC_SetOffsetSaturation>:
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3360      	adds	r3, #96	; 0x60
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	615a      	str	r2, [r3, #20]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_INJ_GetTrigAuto>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_SetChannelSamplingTime>:
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3314      	adds	r3, #20
 800411c:	461a      	mov	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	0e5b      	lsrs	r3, r3, #25
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	4413      	add	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	0d1b      	lsrs	r3, r3, #20
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2107      	movs	r1, #7
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	401a      	ands	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	0d1b      	lsrs	r3, r3, #20
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <LL_ADC_SetChannelSingleDiff>:
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417c:	43db      	mvns	r3, r3
 800417e:	401a      	ands	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f003 0318 	and.w	r3, r3, #24
 8004186:	4908      	ldr	r1, [pc, #32]	; (80041a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004188:	40d9      	lsrs	r1, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	400b      	ands	r3, r1
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	431a      	orrs	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	0007ffff 	.word	0x0007ffff

080041ac <LL_ADC_GetMultimode>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 031f 	and.w	r3, r3, #31
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_IsEnabled>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <LL_ADC_IsEnabled+0x18>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <LL_ADC_IsEnabled+0x1a>
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_ADC_REG_IsConversionOngoing>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d101      	bne.n	8004206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_INJ_StartConversion>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004228:	f043 0208 	orr.w	r2, r3, #8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_ADC_INJ_IsConversionOngoing>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d101      	bne.n	8004254 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004274:	d004      	beq.n	8004280 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a78      	ldr	r2, [pc, #480]	; (800445c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004280:	4b77      	ldr	r3, [pc, #476]	; (8004460 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004282:	e000      	b.n	8004286 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004284:	4b77      	ldr	r3, [pc, #476]	; (8004464 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ff90 	bl	80041ac <LL_ADC_GetMultimode>
 800428c:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ffd2 	bl	800423c <LL_ADC_INJ_IsConversionOngoing>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
 80042a0:	e0d8      	b.n	8004454 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	f043 0220 	orr.w	r2, r3, #32
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0c0      	b.n	8004454 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_ADCEx_InjectedStart_IT+0x7c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0b9      	b.n	8004454 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff fdab 	bl	8003e44 <ADC_Enable>
 80042ee:	4603      	mov	r3, r0
 80042f0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 80a8 	bne.w	800444a <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	f023 0208 	bic.w	r2, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	661a      	str	r2, [r3, #96]	; 0x60
 8004312:	e002      	b.n	800431a <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a4a      	ldr	r2, [pc, #296]	; (800445c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4a      	ldr	r2, [pc, #296]	; (8004468 <HAL_ADCEx_InjectedStart_IT+0x204>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d002      	beq.n	8004348 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	e003      	b.n	8004350 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004348:	4b48      	ldr	r3, [pc, #288]	; (800446c <HAL_ADCEx_InjectedStart_IT+0x208>)
 800434a:	e001      	b.n	8004350 <HAL_ADCEx_InjectedStart_IT+0xec>
 800434c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	4293      	cmp	r3, r2
 8004356:	d002      	beq.n	800435e <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2260      	movs	r2, #96	; 0x60
 8004370:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004396:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d110      	bne.n	80043c2 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0220 	bic.w	r2, r2, #32
 80043ae:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043be:	605a      	str	r2, [r3, #4]
          break;
 80043c0:	e010      	b.n	80043e4 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0220 	orr.w	r2, r2, #32
 80043e0:	605a      	str	r2, [r3, #4]
          break;
 80043e2:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_ADCEx_InjectedStart_IT+0x19e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d002      	beq.n	80043fe <HAL_ADCEx_InjectedStart_IT+0x19a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	e003      	b.n	8004406 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004400:	e001      	b.n	8004406 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	4293      	cmp	r3, r2
 800440c:	d008      	beq.n	8004420 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d002      	beq.n	8004420 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b07      	cmp	r3, #7
 800441e:	d10d      	bne.n	800443c <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fe63 	bl	80040f0 <LL_ADC_INJ_GetTrigAuto>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d110      	bne.n	8004452 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff feed 	bl	8004214 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800443a:	e00a      	b.n	8004452 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
 8004448:	e003      	b.n	8004452 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	50000100 	.word	0x50000100
 8004460:	50000300 	.word	0x50000300
 8004464:	50000700 	.word	0x50000700
 8004468:	50000500 	.word	0x50000500
 800446c:	50000400 	.word	0x50000400

08004470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0b6      	sub	sp, #216	; 0xd8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f000 bcfd 	b.w	8004ef8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004512:	2b01      	cmp	r3, #1
 8004514:	d130      	bne.n	8004578 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b09      	cmp	r3, #9
 800451c:	d179      	bne.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d010      	beq.n	8004548 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	0e9b      	lsrs	r3, r3, #26
 800452c:	025b      	lsls	r3, r3, #9
 800452e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800453a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004546:	e007      	b.n	8004558 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455e:	4b84      	ldr	r3, [pc, #528]	; (8004770 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800456a:	430b      	orrs	r3, r1
 800456c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004574:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004576:	e04c      	b.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457c:	2b00      	cmp	r3, #0
 800457e:	d11d      	bne.n	80045bc <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80045a4:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045b0:	e004      	b.n	80045bc <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	f003 021f 	and.w	r2, r3, #31
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004602:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	430b      	orrs	r3, r1
 8004610:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fe10 	bl	800423c <LL_ADC_INJ_IsConversionOngoing>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d124      	bne.n	800466c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004628:	2b00      	cmp	r3, #0
 800462a:	d112      	bne.n	8004652 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800463c:	055a      	lsls	r2, r3, #21
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004644:	051b      	lsls	r3, r3, #20
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e00c      	b.n	800466c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004662:	055a      	lsls	r2, r3, #21
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fdbc 	bl	80041ee <LL_ADC_REG_IsConversionOngoing>
 8004676:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fddc 	bl	800423c <LL_ADC_INJ_IsConversionOngoing>
 8004684:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 822e 	bne.w	8004aee <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004696:	2b00      	cmp	r3, #0
 8004698:	f040 8229 	bne.w	8004aee <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d116      	bne.n	80046da <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d108      	bne.n	80046c8 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80046c4:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046c6:	e01f      	b.n	8004708 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80046d6:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046d8:	e016      	b.n	8004708 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d109      	bne.n	80046f8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80046f6:	e007      	b.n	8004708 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004706:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800470e:	2b01      	cmp	r3, #1
 8004710:	d110      	bne.n	8004734 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	430b      	orrs	r3, r1
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0202 	orr.w	r2, r2, #2
 8004730:	611a      	str	r2, [r3, #16]
 8004732:	e007      	b.n	8004744 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0202 	bic.w	r2, r2, #2
 8004742:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474c:	d112      	bne.n	8004774 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	4619      	mov	r1, r3
 800475a:	f7ff fcd7 	bl	800410c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fcaf 	bl	80040ca <LL_ADC_SetSamplingTimeCommonConfig>
 800476c:	e011      	b.n	8004792 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800476e:	bf00      	nop
 8004770:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	461a      	mov	r2, r3
 8004782:	f7ff fcc3 	bl	800410c <LL_ADC_SetChannelSamplingTime>
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fc9c 	bl	80040ca <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d022      	beq.n	80047fa <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6919      	ldr	r1, [r3, #16]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047c4:	f7ff fbf6 	bl	8003fb4 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6919      	ldr	r1, [r3, #16]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fc42 	bl	800405e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d102      	bne.n	80047f0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80047ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ee:	e000      	b.n	80047f2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80047f0:	2300      	movs	r3, #0
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7ff fc4e 	bl	8004094 <LL_ADC_SetOffsetSaturation>
 80047f8:	e179      	b.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fbfb 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 8004806:	4603      	mov	r3, r0
 8004808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fbf0 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 800481c:	4603      	mov	r3, r0
 800481e:	0e9b      	lsrs	r3, r3, #26
 8004820:	f003 021f 	and.w	r2, r3, #31
 8004824:	e01e      	b.n	8004864 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fbe5 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800484c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e004      	b.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004858:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	0e9b      	lsrs	r3, r3, #26
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	e018      	b.n	80048ae <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e004      	b.n	80048ae <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d106      	bne.n	80048c0 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fbb4 	bl	8004028 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fb98 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_ADCEx_InjectedConfigChannel+0x418>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fb8d 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 80048e2:	4603      	mov	r3, r0
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	f003 021f 	and.w	r2, r3, #31
 80048ea:	e01e      	b.n	800492a <HAL_ADCEx_InjectedConfigChannel+0x456>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fb82 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800490a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e004      	b.n	8004928 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800491e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	0e9b      	lsrs	r3, r3, #26
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	e018      	b.n	8004974 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800495a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800495e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e004      	b.n	8004974 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800496a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004974:	429a      	cmp	r2, r3
 8004976:	d106      	bne.n	8004986 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fb51 	bl	8004028 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fb35 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fb2a 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0e9b      	lsrs	r3, r3, #26
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	e01e      	b.n	80049f0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2102      	movs	r1, #2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fb1f 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80049d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80049d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e004      	b.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80049e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	0e9b      	lsrs	r3, r3, #26
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	e014      	b.n	8004a32 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a24:	2320      	movs	r3, #32
 8004a26:	e004      	b.n	8004a32 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d106      	bne.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff faf2 	bl	8004028 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2103      	movs	r1, #3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fad6 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2103      	movs	r1, #3
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff facb 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	f003 021f 	and.w	r2, r3, #31
 8004a6e:	e017      	b.n	8004aa0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2103      	movs	r1, #3
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fac0 	bl	8003ffc <LL_ADC_GetOffsetChannel>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004a92:	2320      	movs	r3, #32
 8004a94:	e003      	b.n	8004a9e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0e9b      	lsrs	r3, r3, #26
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	e011      	b.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e003      	b.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d106      	bne.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2103      	movs	r1, #3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fa9d 	bl	8004028 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fb68 	bl	80041c8 <LL_ADC_IsEnabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 813d 	bne.w	8004d7a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f7ff fb29 	bl	8004164 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4aa2      	ldr	r2, [pc, #648]	; (8004da0 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f040 812e 	bne.w	8004d7a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	0e9b      	lsrs	r3, r3, #26
 8004b34:	3301      	adds	r3, #1
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	bf94      	ite	ls
 8004b3e:	2301      	movls	r3, #1
 8004b40:	2300      	movhi	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	e019      	b.n	8004b7a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4e:	fa93 f3a3 	rbit	r3, r3
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004b5e:	2320      	movs	r3, #32
 8004b60:	e003      	b.n	8004b6a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2b09      	cmp	r3, #9
 8004b72:	bf94      	ite	ls
 8004b74:	2301      	movls	r3, #1
 8004b76:	2300      	movhi	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d079      	beq.n	8004c72 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	0e9b      	lsrs	r3, r3, #26
 8004b90:	3301      	adds	r3, #1
 8004b92:	069b      	lsls	r3, r3, #26
 8004b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b98:	e015      	b.n	8004bc6 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004baa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e003      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	069b      	lsls	r3, r3, #26
 8004bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	0e9b      	lsrs	r3, r3, #26
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f303 	lsl.w	r3, r1, r3
 8004be4:	e017      	b.n	8004c16 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	ea42 0103 	orr.w	r1, r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0e9b      	lsrs	r3, r3, #26
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 021f 	and.w	r2, r3, #31
 8004c32:	4613      	mov	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4413      	add	r3, r2
 8004c38:	051b      	lsls	r3, r3, #20
 8004c3a:	e018      	b.n	8004c6e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	e003      	b.n	8004c60 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	f003 021f 	and.w	r2, r3, #31
 8004c66:	4613      	mov	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	e07e      	b.n	8004d70 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	0e9b      	lsrs	r3, r3, #26
 8004c84:	3301      	adds	r3, #1
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c8c:	e015      	b.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	e003      	b.n	8004cb2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	069b      	lsls	r3, r3, #26
 8004cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	0e9b      	lsrs	r3, r3, #26
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	e017      	b.n	8004d0a <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	61bb      	str	r3, [r7, #24]
  return result;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e003      	b.n	8004cfe <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2101      	movs	r1, #1
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	ea42 0103 	orr.w	r1, r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10d      	bne.n	8004d36 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 021f 	and.w	r2, r3, #31
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3b1e      	subs	r3, #30
 8004d2e:	051b      	lsls	r3, r3, #20
 8004d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d34:	e01b      	b.n	8004d6e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	60fb      	str	r3, [r7, #12]
  return result;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004d4e:	2320      	movs	r3, #32
 8004d50:	e003      	b.n	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	3b1e      	subs	r3, #30
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	6892      	ldr	r2, [r2, #8]
 8004d74:	4619      	mov	r1, r3
 8004d76:	f7ff f9c9 	bl	800410c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80b2 	beq.w	8004eec <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d90:	d004      	beq.n	8004d9c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8004d9e:	e008      	b.n	8004db2 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004da0:	407f0000 	.word	0x407f0000
 8004da4:	80080000 	.word	0x80080000
 8004da8:	50000100 	.word	0x50000100
 8004dac:	50000300 	.word	0x50000300
 8004db0:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f8ef 	bl	8003f96 <LL_ADC_GetCommonPathInternalCh>
 8004db8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a50      	ldr	r2, [pc, #320]	; (8004f04 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4f      	ldr	r2, [pc, #316]	; (8004f08 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d139      	bne.n	8004e44 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d133      	bne.n	8004e44 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de4:	d004      	beq.n	8004df0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a48      	ldr	r2, [pc, #288]	; (8004f0c <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d17a      	bne.n	8004ee6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004df8:	d004      	beq.n	8004e04 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a44      	ldr	r2, [pc, #272]	; (8004f10 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004e04:	4a43      	ldr	r2, [pc, #268]	; (8004f14 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004e06:	e000      	b.n	8004e0a <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004e08:	4a3d      	ldr	r2, [pc, #244]	; (8004f00 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7ff f8ab 	bl	8003f70 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	4a3e      	ldr	r2, [pc, #248]	; (8004f1c <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	099a      	lsrs	r2, r3, #6
 8004e28:	4613      	mov	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e32:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e34:	e002      	b.n	8004e3c <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f9      	bne.n	8004e36 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e42:	e050      	b.n	8004ee6 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a35      	ldr	r2, [pc, #212]	; (8004f20 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d125      	bne.n	8004e9a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d11f      	bne.n	8004e9a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d104      	bne.n	8004e6e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d03d      	beq.n	8004eea <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e76:	d004      	beq.n	8004e82 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8004e82:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004e84:	e000      	b.n	8004e88 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7ff f86c 	bl	8003f70 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e98:	e027      	b.n	8004eea <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d123      	bne.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d11d      	bne.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ec2:	d004      	beq.n	8004ece <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8004ece:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004ed0:	e000      	b.n	8004ed4 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8004ed2:	4a0b      	ldr	r2, [pc, #44]	; (8004f00 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7ff f846 	bl	8003f70 <LL_ADC_SetCommonPathInternalCh>
 8004ee4:	e002      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eea:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ef4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	37d8      	adds	r7, #216	; 0xd8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	50000700 	.word	0x50000700
 8004f04:	c3210000 	.word	0xc3210000
 8004f08:	90c00010 	.word	0x90c00010
 8004f0c:	50000600 	.word	0x50000600
 8004f10:	50000100 	.word	0x50000100
 8004f14:	50000300 	.word	0x50000300
 8004f18:	20000000 	.word	0x20000000
 8004f1c:	053e2d63 	.word	0x053e2d63
 8004f20:	c7520000 	.word	0xc7520000
 8004f24:	50000500 	.word	0x50000500
 8004f28:	cb840000 	.word	0xcb840000

08004f2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b0a1      	sub	sp, #132	; 0x84
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e0e7      	b.n	800511a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f52:	2300      	movs	r3, #0
 8004f54:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f56:	2300      	movs	r3, #0
 8004f58:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f62:	d102      	bne.n	8004f6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f64:	4b6f      	ldr	r3, [pc, #444]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	e009      	b.n	8004f7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d102      	bne.n	8004f7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004f74:	4b6d      	ldr	r3, [pc, #436]	; (800512c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	e001      	b.n	8004f7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0be      	b.n	800511a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff f925 	bl	80041ee <LL_ADC_REG_IsConversionOngoing>
 8004fa4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff f91f 	bl	80041ee <LL_ADC_REG_IsConversionOngoing>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 80a0 	bne.w	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 809c 	bne.w	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fc8:	d004      	beq.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a55      	ldr	r2, [pc, #340]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004fd4:	4b56      	ldr	r3, [pc, #344]	; (8005130 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004fd6:	e000      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004fd8:	4b56      	ldr	r3, [pc, #344]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004fda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d04b      	beq.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff6:	035b      	lsls	r3, r3, #13
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ffe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005008:	d004      	beq.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a45      	ldr	r2, [pc, #276]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10f      	bne.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005014:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005018:	f7ff f8d6 	bl	80041c8 <LL_ADC_IsEnabled>
 800501c:	4604      	mov	r4, r0
 800501e:	4841      	ldr	r0, [pc, #260]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005020:	f7ff f8d2 	bl	80041c8 <LL_ADC_IsEnabled>
 8005024:	4603      	mov	r3, r0
 8005026:	4323      	orrs	r3, r4
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e012      	b.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005034:	483c      	ldr	r0, [pc, #240]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005036:	f7ff f8c7 	bl	80041c8 <LL_ADC_IsEnabled>
 800503a:	4604      	mov	r4, r0
 800503c:	483b      	ldr	r0, [pc, #236]	; (800512c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800503e:	f7ff f8c3 	bl	80041c8 <LL_ADC_IsEnabled>
 8005042:	4603      	mov	r3, r0
 8005044:	431c      	orrs	r4, r3
 8005046:	483c      	ldr	r0, [pc, #240]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005048:	f7ff f8be 	bl	80041c8 <LL_ADC_IsEnabled>
 800504c:	4603      	mov	r3, r0
 800504e:	4323      	orrs	r3, r4
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d056      	beq.n	800510c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800505e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005066:	f023 030f 	bic.w	r3, r3, #15
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	6811      	ldr	r1, [r2, #0]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	6892      	ldr	r2, [r2, #8]
 8005072:	430a      	orrs	r2, r1
 8005074:	431a      	orrs	r2, r3
 8005076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005078:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800507a:	e047      	b.n	800510c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800507c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005086:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005090:	d004      	beq.n	800509c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d10f      	bne.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800509c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050a0:	f7ff f892 	bl	80041c8 <LL_ADC_IsEnabled>
 80050a4:	4604      	mov	r4, r0
 80050a6:	481f      	ldr	r0, [pc, #124]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050a8:	f7ff f88e 	bl	80041c8 <LL_ADC_IsEnabled>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4323      	orrs	r3, r4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e012      	b.n	80050e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80050bc:	481a      	ldr	r0, [pc, #104]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050be:	f7ff f883 	bl	80041c8 <LL_ADC_IsEnabled>
 80050c2:	4604      	mov	r4, r0
 80050c4:	4819      	ldr	r0, [pc, #100]	; (800512c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050c6:	f7ff f87f 	bl	80041c8 <LL_ADC_IsEnabled>
 80050ca:	4603      	mov	r3, r0
 80050cc:	431c      	orrs	r4, r3
 80050ce:	481a      	ldr	r0, [pc, #104]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80050d0:	f7ff f87a 	bl	80041c8 <LL_ADC_IsEnabled>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4323      	orrs	r3, r4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d012      	beq.n	800510c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80050ee:	f023 030f 	bic.w	r3, r3, #15
 80050f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050f6:	e009      	b.n	800510c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800510a:	e000      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800510c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005116:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800511a:	4618      	mov	r0, r3
 800511c:	3784      	adds	r7, #132	; 0x84
 800511e:	46bd      	mov	sp, r7
 8005120:	bd90      	pop	{r4, r7, pc}
 8005122:	bf00      	nop
 8005124:	50000100 	.word	0x50000100
 8005128:	50000400 	.word	0x50000400
 800512c:	50000500 	.word	0x50000500
 8005130:	50000300 	.word	0x50000300
 8005134:	50000700 	.word	0x50000700
 8005138:	50000600 	.word	0x50000600

0800513c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800516e:	4a04      	ldr	r2, [pc, #16]	; (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	60d3      	str	r3, [r2, #12]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <__NVIC_GetPriorityGrouping+0x18>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	f003 0307 	and.w	r3, r3, #7
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	db0b      	blt.n	80051ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	f003 021f 	and.w	r2, r3, #31
 80051b8:	4907      	ldr	r1, [pc, #28]	; (80051d8 <__NVIC_EnableIRQ+0x38>)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2001      	movs	r0, #1
 80051c2:	fa00 f202 	lsl.w	r2, r0, r2
 80051c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	e000e100 	.word	0xe000e100

080051dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	db0a      	blt.n	8005206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	490c      	ldr	r1, [pc, #48]	; (8005228 <__NVIC_SetPriority+0x4c>)
 80051f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fa:	0112      	lsls	r2, r2, #4
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	440b      	add	r3, r1
 8005200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005204:	e00a      	b.n	800521c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <__NVIC_SetPriority+0x50>)
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	3b04      	subs	r3, #4
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	440b      	add	r3, r1
 800521a:	761a      	strb	r2, [r3, #24]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f1c3 0307 	rsb	r3, r3, #7
 800524a:	2b04      	cmp	r3, #4
 800524c:	bf28      	it	cs
 800524e:	2304      	movcs	r3, #4
 8005250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3304      	adds	r3, #4
 8005256:	2b06      	cmp	r3, #6
 8005258:	d902      	bls.n	8005260 <NVIC_EncodePriority+0x30>
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3b03      	subs	r3, #3
 800525e:	e000      	b.n	8005262 <NVIC_EncodePriority+0x32>
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43da      	mvns	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	401a      	ands	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005278:	f04f 31ff 	mov.w	r1, #4294967295
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fa01 f303 	lsl.w	r3, r1, r3
 8005282:	43d9      	mvns	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	4313      	orrs	r3, r2
         );
}
 800528a:	4618      	mov	r0, r3
 800528c:	3724      	adds	r7, #36	; 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052a8:	d301      	bcc.n	80052ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00f      	b.n	80052ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ae:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <SysTick_Config+0x40>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052b6:	210f      	movs	r1, #15
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f7ff ff8e 	bl	80051dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <SysTick_Config+0x40>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <SysTick_Config+0x40>)
 80052c8:	2207      	movs	r2, #7
 80052ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	e000e010 	.word	0xe000e010

080052dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff29 	bl	800513c <__NVIC_SetPriorityGrouping>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	4603      	mov	r3, r0
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005300:	f7ff ff40 	bl	8005184 <__NVIC_GetPriorityGrouping>
 8005304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7ff ff90 	bl	8005230 <NVIC_EncodePriority>
 8005310:	4602      	mov	r2, r0
 8005312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff5f 	bl	80051dc <__NVIC_SetPriority>
}
 800531e:	bf00      	nop
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	4603      	mov	r3, r0
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff33 	bl	80051a0 <__NVIC_EnableIRQ>
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ffa4 	bl	8005298 <SysTick_Config>
 8005350:	4603      	mov	r3, r0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800536a:	e15a      	b.n	8005622 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 814c 	beq.w	800561c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d005      	beq.n	800539c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005398:	2b02      	cmp	r3, #2
 800539a:	d130      	bne.n	80053fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053d2:	2201      	movs	r2, #1
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4013      	ands	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0201 	and.w	r2, r3, #1
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b03      	cmp	r3, #3
 8005408:	d017      	beq.n	800543a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d123      	bne.n	800548e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	08da      	lsrs	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3208      	adds	r2, #8
 800544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	08da      	lsrs	r2, r3, #3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3208      	adds	r2, #8
 8005488:	6939      	ldr	r1, [r7, #16]
 800548a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4013      	ands	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80a6 	beq.w	800561c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d0:	4b5b      	ldr	r3, [pc, #364]	; (8005640 <HAL_GPIO_Init+0x2e4>)
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	4a5a      	ldr	r2, [pc, #360]	; (8005640 <HAL_GPIO_Init+0x2e4>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6613      	str	r3, [r2, #96]	; 0x60
 80054dc:	4b58      	ldr	r3, [pc, #352]	; (8005640 <HAL_GPIO_Init+0x2e4>)
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054e8:	4a56      	ldr	r2, [pc, #344]	; (8005644 <HAL_GPIO_Init+0x2e8>)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	3302      	adds	r3, #2
 80054f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	220f      	movs	r2, #15
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4013      	ands	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005512:	d01f      	beq.n	8005554 <HAL_GPIO_Init+0x1f8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a4c      	ldr	r2, [pc, #304]	; (8005648 <HAL_GPIO_Init+0x2ec>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d019      	beq.n	8005550 <HAL_GPIO_Init+0x1f4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a4b      	ldr	r2, [pc, #300]	; (800564c <HAL_GPIO_Init+0x2f0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_GPIO_Init+0x1f0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <HAL_GPIO_Init+0x2f4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00d      	beq.n	8005548 <HAL_GPIO_Init+0x1ec>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a49      	ldr	r2, [pc, #292]	; (8005654 <HAL_GPIO_Init+0x2f8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <HAL_GPIO_Init+0x1e8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a48      	ldr	r2, [pc, #288]	; (8005658 <HAL_GPIO_Init+0x2fc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <HAL_GPIO_Init+0x1e4>
 800553c:	2305      	movs	r3, #5
 800553e:	e00a      	b.n	8005556 <HAL_GPIO_Init+0x1fa>
 8005540:	2306      	movs	r3, #6
 8005542:	e008      	b.n	8005556 <HAL_GPIO_Init+0x1fa>
 8005544:	2304      	movs	r3, #4
 8005546:	e006      	b.n	8005556 <HAL_GPIO_Init+0x1fa>
 8005548:	2303      	movs	r3, #3
 800554a:	e004      	b.n	8005556 <HAL_GPIO_Init+0x1fa>
 800554c:	2302      	movs	r3, #2
 800554e:	e002      	b.n	8005556 <HAL_GPIO_Init+0x1fa>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_GPIO_Init+0x1fa>
 8005554:	2300      	movs	r3, #0
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	f002 0203 	and.w	r2, r2, #3
 800555c:	0092      	lsls	r2, r2, #2
 800555e:	4093      	lsls	r3, r2
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005566:	4937      	ldr	r1, [pc, #220]	; (8005644 <HAL_GPIO_Init+0x2e8>)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	3302      	adds	r3, #2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005574:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_GPIO_Init+0x300>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005598:	4a30      	ldr	r2, [pc, #192]	; (800565c <HAL_GPIO_Init+0x300>)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800559e:	4b2f      	ldr	r3, [pc, #188]	; (800565c <HAL_GPIO_Init+0x300>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055c2:	4a26      	ldr	r2, [pc, #152]	; (800565c <HAL_GPIO_Init+0x300>)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80055c8:	4b24      	ldr	r3, [pc, #144]	; (800565c <HAL_GPIO_Init+0x300>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055ec:	4a1b      	ldr	r2, [pc, #108]	; (800565c <HAL_GPIO_Init+0x300>)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_GPIO_Init+0x300>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005616:	4a11      	ldr	r2, [pc, #68]	; (800565c <HAL_GPIO_Init+0x300>)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3301      	adds	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	f47f ae9d 	bne.w	800536c <HAL_GPIO_Init+0x10>
  }
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40021000 	.word	0x40021000
 8005644:	40010000 	.word	0x40010000
 8005648:	48000400 	.word	0x48000400
 800564c:	48000800 	.word	0x48000800
 8005650:	48000c00 	.word	0x48000c00
 8005654:	48001000 	.word	0x48001000
 8005658:	48001400 	.word	0x48001400
 800565c:	40010400 	.word	0x40010400

08005660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	807b      	strh	r3, [r7, #2]
 800566c:	4613      	mov	r3, r2
 800566e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005670:	787b      	ldrb	r3, [r7, #1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800567c:	e002      	b.n	8005684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056a2:	887a      	ldrh	r2, [r7, #2]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4013      	ands	r3, r2
 80056a8:	041a      	lsls	r2, r3, #16
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	43d9      	mvns	r1, r3
 80056ae:	887b      	ldrh	r3, [r7, #2]
 80056b0:	400b      	ands	r3, r1
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d141      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056d2:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056de:	d131      	bne.n	8005744 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056e0:	4b47      	ldr	r3, [pc, #284]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e6:	4a46      	ldr	r2, [pc, #280]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056f0:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056f8:	4a41      	ldr	r2, [pc, #260]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005700:	4b40      	ldr	r3, [pc, #256]	; (8005804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2232      	movs	r2, #50	; 0x32
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	0c9b      	lsrs	r3, r3, #18
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005716:	e002      	b.n	800571e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3b01      	subs	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572a:	d102      	bne.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f2      	bne.n	8005718 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005732:	4b33      	ldr	r3, [pc, #204]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573e:	d158      	bne.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e057      	b.n	80057f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005744:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574a:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005754:	e04d      	b.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d141      	bne.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	d131      	bne.n	80057d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800576e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800577c:	4b20      	ldr	r3, [pc, #128]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800578a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800578c:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2232      	movs	r2, #50	; 0x32
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	0c9b      	lsrs	r3, r3, #18
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057a2:	e002      	b.n	80057aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d102      	bne.n	80057be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f2      	bne.n	80057a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057be:	4b10      	ldr	r3, [pc, #64]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ca:	d112      	bne.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e011      	b.n	80057f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057e0:	e007      	b.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057ea:	4a05      	ldr	r2, [pc, #20]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40007000 	.word	0x40007000
 8005804:	20000000 	.word	0x20000000
 8005808:	431bde83 	.word	0x431bde83

0800580c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e2fe      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d075      	beq.n	8005916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800582a:	4b97      	ldr	r3, [pc, #604]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005834:	4b94      	ldr	r3, [pc, #592]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d102      	bne.n	800584a <HAL_RCC_OscConfig+0x3e>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d002      	beq.n	8005850 <HAL_RCC_OscConfig+0x44>
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d10b      	bne.n	8005868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005850:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05b      	beq.n	8005914 <HAL_RCC_OscConfig+0x108>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d157      	bne.n	8005914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e2d9      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005870:	d106      	bne.n	8005880 <HAL_RCC_OscConfig+0x74>
 8005872:	4b85      	ldr	r3, [pc, #532]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a84      	ldr	r2, [pc, #528]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e01d      	b.n	80058bc <HAL_RCC_OscConfig+0xb0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005888:	d10c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x98>
 800588a:	4b7f      	ldr	r3, [pc, #508]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7e      	ldr	r2, [pc, #504]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4b7c      	ldr	r3, [pc, #496]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7b      	ldr	r2, [pc, #492]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e00b      	b.n	80058bc <HAL_RCC_OscConfig+0xb0>
 80058a4:	4b78      	ldr	r3, [pc, #480]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a77      	ldr	r2, [pc, #476]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80058aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	4b75      	ldr	r3, [pc, #468]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a74      	ldr	r2, [pc, #464]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80058b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d013      	beq.n	80058ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fd f80c 	bl	80028e0 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058cc:	f7fd f808 	bl	80028e0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	; 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e29e      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058de:	4b6a      	ldr	r3, [pc, #424]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0xc0>
 80058ea:	e014      	b.n	8005916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fc fff8 	bl	80028e0 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f4:	f7fc fff4 	bl	80028e0 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b64      	cmp	r3, #100	; 0x64
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e28a      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005906:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0xe8>
 8005912:	e000      	b.n	8005916 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d075      	beq.n	8005a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005922:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800592c:	4b56      	ldr	r3, [pc, #344]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d102      	bne.n	8005942 <HAL_RCC_OscConfig+0x136>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d002      	beq.n	8005948 <HAL_RCC_OscConfig+0x13c>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b04      	cmp	r3, #4
 8005946:	d11f      	bne.n	8005988 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005948:	4b4f      	ldr	r3, [pc, #316]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_RCC_OscConfig+0x154>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e25d      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b49      	ldr	r3, [pc, #292]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	4946      	ldr	r1, [pc, #280]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005974:	4b45      	ldr	r3, [pc, #276]	; (8005a8c <HAL_RCC_OscConfig+0x280>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fc ff65 	bl	8002848 <HAL_InitTick>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d043      	beq.n	8005a0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e249      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d023      	beq.n	80059d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005990:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fc ffa0 	bl	80028e0 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a4:	f7fc ff9c 	bl	80028e0 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e232      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c2:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	061b      	lsls	r3, r3, #24
 80059d0:	492d      	ldr	r1, [pc, #180]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	604b      	str	r3, [r1, #4]
 80059d6:	e01a      	b.n	8005a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d8:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 80059de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fc ff7c 	bl	80028e0 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ec:	f7fc ff78 	bl	80028e0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e20e      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059fe:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x1e0>
 8005a0a:	e000      	b.n	8005a0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d041      	beq.n	8005a9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01c      	beq.n	8005a5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fc ff55 	bl	80028e0 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3a:	f7fc ff51 	bl	80028e0 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e1e7      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0ef      	beq.n	8005a3a <HAL_RCC_OscConfig+0x22e>
 8005a5a:	e020      	b.n	8005a9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a62:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc ff38 	bl	80028e0 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a72:	e00d      	b.n	8005a90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fc ff34 	bl	80028e0 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d906      	bls.n	8005a90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e1ca      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a90:	4b8c      	ldr	r3, [pc, #560]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1ea      	bne.n	8005a74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80a6 	beq.w	8005bf8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ab0:	4b84      	ldr	r3, [pc, #528]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x2b4>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x2b6>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac6:	4b7f      	ldr	r3, [pc, #508]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	4a7e      	ldr	r2, [pc, #504]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad2:	4b7c      	ldr	r3, [pc, #496]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae2:	4b79      	ldr	r3, [pc, #484]	; (8005cc8 <HAL_RCC_OscConfig+0x4bc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d118      	bne.n	8005b20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aee:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCC_OscConfig+0x4bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a75      	ldr	r2, [pc, #468]	; (8005cc8 <HAL_RCC_OscConfig+0x4bc>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afa:	f7fc fef1 	bl	80028e0 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fc feed 	bl	80028e0 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e183      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b14:	4b6c      	ldr	r3, [pc, #432]	; (8005cc8 <HAL_RCC_OscConfig+0x4bc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d108      	bne.n	8005b3a <HAL_RCC_OscConfig+0x32e>
 8005b28:	4b66      	ldr	r3, [pc, #408]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	4a65      	ldr	r2, [pc, #404]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b38:	e024      	b.n	8005b84 <HAL_RCC_OscConfig+0x378>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d110      	bne.n	8005b64 <HAL_RCC_OscConfig+0x358>
 8005b42:	4b60      	ldr	r3, [pc, #384]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	4a5e      	ldr	r2, [pc, #376]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b4a:	f043 0304 	orr.w	r3, r3, #4
 8005b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b52:	4b5c      	ldr	r3, [pc, #368]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	4a5a      	ldr	r2, [pc, #360]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b62:	e00f      	b.n	8005b84 <HAL_RCC_OscConfig+0x378>
 8005b64:	4b57      	ldr	r3, [pc, #348]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6a:	4a56      	ldr	r2, [pc, #344]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b74:	4b53      	ldr	r3, [pc, #332]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	4a52      	ldr	r2, [pc, #328]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d016      	beq.n	8005bba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fc fea8 	bl	80028e0 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b94:	f7fc fea4 	bl	80028e0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e138      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005baa:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0ed      	beq.n	8005b94 <HAL_RCC_OscConfig+0x388>
 8005bb8:	e015      	b.n	8005be6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bba:	f7fc fe91 	bl	80028e0 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc fe8d 	bl	80028e0 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e121      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bd8:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1ed      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d105      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bec:	4b35      	ldr	r3, [pc, #212]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	4a34      	ldr	r2, [pc, #208]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03c      	beq.n	8005c7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1c:	f7fc fe60 	bl	80028e0 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c24:	f7fc fe5c 	bl	80028e0 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e0f2      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c36:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ef      	beq.n	8005c24 <HAL_RCC_OscConfig+0x418>
 8005c44:	e01b      	b.n	8005c7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c46:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fc fe43 	bl	80028e0 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5e:	f7fc fe3f 	bl	80028e0 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0d5      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ef      	bne.n	8005c5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80c9 	beq.w	8005e1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b0c      	cmp	r3, #12
 8005c92:	f000 8083 	beq.w	8005d9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d15e      	bne.n	8005d5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <HAL_RCC_OscConfig+0x4b8>)
 8005ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fc fe19 	bl	80028e0 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb0:	e00c      	b.n	8005ccc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb2:	f7fc fe15 	bl	80028e0 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d905      	bls.n	8005ccc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0ab      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ccc:	4b55      	ldr	r3, [pc, #340]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ec      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd8:	4b52      	ldr	r3, [pc, #328]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	4b52      	ldr	r3, [pc, #328]	; (8005e28 <HAL_RCC_OscConfig+0x61c>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6a11      	ldr	r1, [r2, #32]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	0112      	lsls	r2, r2, #4
 8005cec:	4311      	orrs	r1, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005cf2:	0212      	lsls	r2, r2, #8
 8005cf4:	4311      	orrs	r1, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cfa:	0852      	lsrs	r2, r2, #1
 8005cfc:	3a01      	subs	r2, #1
 8005cfe:	0552      	lsls	r2, r2, #21
 8005d00:	4311      	orrs	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d06:	0852      	lsrs	r2, r2, #1
 8005d08:	3a01      	subs	r2, #1
 8005d0a:	0652      	lsls	r2, r2, #25
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d12:	06d2      	lsls	r2, r2, #27
 8005d14:	430a      	orrs	r2, r1
 8005d16:	4943      	ldr	r1, [pc, #268]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d1c:	4b41      	ldr	r3, [pc, #260]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d28:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	4a3d      	ldr	r2, [pc, #244]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7fc fdd4 	bl	80028e0 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3c:	f7fc fdd0 	bl	80028e0 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e066      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d4e:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x530>
 8005d5a:	e05e      	b.n	8005e1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5c:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a30      	ldr	r2, [pc, #192]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fc fdba 	bl	80028e0 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d70:	f7fc fdb6 	bl	80028e0 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e04c      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d82:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d8e:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	4924      	ldr	r1, [pc, #144]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_RCC_OscConfig+0x620>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	60cb      	str	r3, [r1, #12]
 8005d9a:	e03e      	b.n	8005e1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e039      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <HAL_RCC_OscConfig+0x618>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 0203 	and.w	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d12c      	bne.n	8005e16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d123      	bne.n	8005e16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d11b      	bne.n	8005e16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d113      	bne.n	8005e16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d109      	bne.n	8005e16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40021000 	.word	0x40021000
 8005e28:	019f800c 	.word	0x019f800c
 8005e2c:	feeefffc 	.word	0xfeeefffc

08005e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e11e      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e48:	4b91      	ldr	r3, [pc, #580]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d910      	bls.n	8005e78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b8e      	ldr	r3, [pc, #568]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 020f 	bic.w	r2, r3, #15
 8005e5e:	498c      	ldr	r1, [pc, #560]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e66:	4b8a      	ldr	r3, [pc, #552]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d001      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e106      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d073      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d129      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e8c:	4b81      	ldr	r3, [pc, #516]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0f4      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e9c:	f000 f966 	bl	800616c <RCC_GetSysClockFreqFromPLLSource>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4a7c      	ldr	r2, [pc, #496]	; (8006098 <HAL_RCC_ClockConfig+0x268>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d93f      	bls.n	8005f2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eaa:	4b7a      	ldr	r3, [pc, #488]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d033      	beq.n	8005f2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d12f      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eca:	4b72      	ldr	r3, [pc, #456]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed2:	4a70      	ldr	r2, [pc, #448]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e024      	b.n	8005f2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee8:	4b6a      	ldr	r3, [pc, #424]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0c6      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ef8:	4b66      	ldr	r3, [pc, #408]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0be      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f08:	f000 f8ce 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4a61      	ldr	r2, [pc, #388]	; (8006098 <HAL_RCC_ClockConfig+0x268>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d909      	bls.n	8005f2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f16:	4b5f      	ldr	r3, [pc, #380]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f1e:	4a5d      	ldr	r2, [pc, #372]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f2a:	4b5a      	ldr	r3, [pc, #360]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 0203 	bic.w	r2, r3, #3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4957      	ldr	r1, [pc, #348]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3c:	f7fc fcd0 	bl	80028e0 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fc fccc 	bl	80028e0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e095      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5a:	4b4e      	ldr	r3, [pc, #312]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 020c 	and.w	r2, r3, #12
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d1eb      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d023      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f84:	4b43      	ldr	r3, [pc, #268]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	4a42      	ldr	r2, [pc, #264]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f9c:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fa4:	4a3b      	ldr	r2, [pc, #236]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005faa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fac:	4b39      	ldr	r3, [pc, #228]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4936      	ldr	r1, [pc, #216]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d105      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fc6:	4b33      	ldr	r3, [pc, #204]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	4a32      	ldr	r2, [pc, #200]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8005fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d21d      	bcs.n	800601c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe0:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f023 020f 	bic.w	r2, r3, #15
 8005fe8:	4929      	ldr	r1, [pc, #164]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ff0:	f7fc fc76 	bl	80028e0 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fc fc72 	bl	80028e0 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e03b      	b.n	8006086 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800600e:	4b20      	ldr	r3, [pc, #128]	; (8006090 <HAL_RCC_ClockConfig+0x260>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d1ed      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4917      	ldr	r1, [pc, #92]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	490f      	ldr	r1, [pc, #60]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800605a:	f000 f825 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 800605e:	4602      	mov	r2, r0
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <HAL_RCC_ClockConfig+0x264>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	490c      	ldr	r1, [pc, #48]	; (800609c <HAL_RCC_ClockConfig+0x26c>)
 800606c:	5ccb      	ldrb	r3, [r1, r3]
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	fa22 f303 	lsr.w	r3, r2, r3
 8006076:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <HAL_RCC_ClockConfig+0x270>)
 8006078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <HAL_RCC_ClockConfig+0x274>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fc fbe2 	bl	8002848 <HAL_InitTick>
 8006084:	4603      	mov	r3, r0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40022000 	.word	0x40022000
 8006094:	40021000 	.word	0x40021000
 8006098:	04c4b400 	.word	0x04c4b400
 800609c:	0800915c 	.word	0x0800915c
 80060a0:	20000000 	.word	0x20000000
 80060a4:	20000004 	.word	0x20000004

080060a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060ae:	4b2c      	ldr	r3, [pc, #176]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d102      	bne.n	80060c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060ba:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e047      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060c0:	4b27      	ldr	r3, [pc, #156]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d102      	bne.n	80060d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060cc:	4b26      	ldr	r3, [pc, #152]	; (8006168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	e03e      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060d2:	4b23      	ldr	r3, [pc, #140]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d136      	bne.n	800614c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060de:	4b20      	ldr	r3, [pc, #128]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060e8:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	3301      	adds	r3, #1
 80060f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d10c      	bne.n	8006116 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060fc:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006106:	68d2      	ldr	r2, [r2, #12]
 8006108:	0a12      	lsrs	r2, r2, #8
 800610a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	617b      	str	r3, [r7, #20]
      break;
 8006114:	e00c      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006116:	4a13      	ldr	r2, [pc, #76]	; (8006164 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	4a10      	ldr	r2, [pc, #64]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006120:	68d2      	ldr	r2, [r2, #12]
 8006122:	0a12      	lsrs	r2, r2, #8
 8006124:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]
      break;
 800612e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	0e5b      	lsrs	r3, r3, #25
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	3301      	adds	r3, #1
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e001      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006150:	693b      	ldr	r3, [r7, #16]
}
 8006152:	4618      	mov	r0, r3
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
 8006164:	00f42400 	.word	0x00f42400
 8006168:	016e3600 	.word	0x016e3600

0800616c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b03      	cmp	r3, #3
 800618e:	d10c      	bne.n	80061aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006190:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	4a14      	ldr	r2, [pc, #80]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800619a:	68d2      	ldr	r2, [r2, #12]
 800619c:	0a12      	lsrs	r2, r2, #8
 800619e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	617b      	str	r3, [r7, #20]
    break;
 80061a8:	e00c      	b.n	80061c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061aa:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061b4:	68d2      	ldr	r2, [r2, #12]
 80061b6:	0a12      	lsrs	r2, r2, #8
 80061b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
    break;
 80061c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0e5b      	lsrs	r3, r3, #25
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061de:	687b      	ldr	r3, [r7, #4]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40021000 	.word	0x40021000
 80061f0:	016e3600 	.word	0x016e3600
 80061f4:	00f42400 	.word	0x00f42400

080061f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006200:	2300      	movs	r3, #0
 8006202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006204:	2300      	movs	r3, #0
 8006206:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8098 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006216:	2300      	movs	r3, #0
 8006218:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621a:	4b43      	ldr	r3, [pc, #268]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10d      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	4b40      	ldr	r3, [pc, #256]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	4a3f      	ldr	r2, [pc, #252]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6593      	str	r3, [r2, #88]	; 0x58
 8006232:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	60bb      	str	r3, [r7, #8]
 800623c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623e:	2301      	movs	r3, #1
 8006240:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006242:	4b3a      	ldr	r3, [pc, #232]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a39      	ldr	r2, [pc, #228]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800624e:	f7fc fb47 	bl	80028e0 <HAL_GetTick>
 8006252:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006254:	e009      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006256:	f7fc fb43 	bl	80028e0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d902      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	74fb      	strb	r3, [r7, #19]
        break;
 8006268:	e005      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800626a:	4b30      	ldr	r3, [pc, #192]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d159      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800627c:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01e      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	429a      	cmp	r2, r3
 8006296:	d019      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006298:	4b23      	ldr	r3, [pc, #140]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a4:	4b20      	ldr	r3, [pc, #128]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b4:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c4:	4a18      	ldr	r2, [pc, #96]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d6:	f7fc fb03 	bl	80028e0 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062dc:	e00b      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062de:	f7fc faff 	bl	80028e0 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d902      	bls.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	74fb      	strb	r3, [r7, #19]
            break;
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ec      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006304:	7cfb      	ldrb	r3, [r7, #19]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	4903      	ldr	r1, [pc, #12]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006320:	e008      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	74bb      	strb	r3, [r7, #18]
 8006326:	e005      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006334:	7c7b      	ldrb	r3, [r7, #17]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633a:	4ba7      	ldr	r3, [pc, #668]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	4aa6      	ldr	r2, [pc, #664]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006352:	4ba1      	ldr	r3, [pc, #644]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	499d      	ldr	r1, [pc, #628]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006374:	4b98      	ldr	r3, [pc, #608]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 020c 	bic.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4995      	ldr	r1, [pc, #596]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006396:	4b90      	ldr	r3, [pc, #576]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	498c      	ldr	r1, [pc, #560]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b8:	4b87      	ldr	r3, [pc, #540]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	4984      	ldr	r1, [pc, #528]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063da:	4b7f      	ldr	r3, [pc, #508]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	497b      	ldr	r1, [pc, #492]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b76      	ldr	r3, [pc, #472]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	4973      	ldr	r1, [pc, #460]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800641e:	4b6e      	ldr	r3, [pc, #440]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	496a      	ldr	r1, [pc, #424]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006440:	4b65      	ldr	r3, [pc, #404]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	4962      	ldr	r1, [pc, #392]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006462:	4b5d      	ldr	r3, [pc, #372]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	4959      	ldr	r1, [pc, #356]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006484:	4b54      	ldr	r3, [pc, #336]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	4951      	ldr	r1, [pc, #324]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064a6:	4b4c      	ldr	r3, [pc, #304]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4948      	ldr	r1, [pc, #288]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064c8:	4b43      	ldr	r3, [pc, #268]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	4940      	ldr	r1, [pc, #256]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e6:	d105      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b3b      	ldr	r3, [pc, #236]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a3a      	ldr	r2, [pc, #232]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006500:	4b35      	ldr	r3, [pc, #212]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650e:	4932      	ldr	r1, [pc, #200]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	4b2d      	ldr	r3, [pc, #180]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006538:	4b27      	ldr	r3, [pc, #156]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	4924      	ldr	r1, [pc, #144]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006556:	d105      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006558:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006562:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006570:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	4916      	ldr	r1, [pc, #88]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658e:	d105      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a10      	ldr	r2, [pc, #64]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d019      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	4908      	ldr	r1, [pc, #32]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c6:	d109      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c8:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a02      	ldr	r2, [pc, #8]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d2:	60d3      	str	r3, [r2, #12]
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065d6:	bf00      	nop
 80065d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d015      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065e8:	4b29      	ldr	r3, [pc, #164]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	4926      	ldr	r1, [pc, #152]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006606:	d105      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006608:	4b21      	ldr	r3, [pc, #132]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800660e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006612:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006620:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	4918      	ldr	r1, [pc, #96]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d105      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006640:	4b13      	ldr	r3, [pc, #76]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a12      	ldr	r2, [pc, #72]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	490a      	ldr	r1, [pc, #40]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006676:	d105      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006682:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006684:	7cbb      	ldrb	r3, [r7, #18]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000

08006694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e049      	b.n	800673a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb ff48 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f000 fd40 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	d001      	beq.n	800675c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e054      	b.n	8006806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a26      	ldr	r2, [pc, #152]	; (8006814 <HAL_TIM_Base_Start_IT+0xd0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d01d      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a22      	ldr	r2, [pc, #136]	; (8006818 <HAL_TIM_Base_Start_IT+0xd4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a21      	ldr	r2, [pc, #132]	; (800681c <HAL_TIM_Base_Start_IT+0xd8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <HAL_TIM_Base_Start_IT+0xdc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <HAL_TIM_Base_Start_IT+0xe0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_TIM_Base_Start_IT+0xe4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_TIM_Base_Start_IT+0xe8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d115      	bne.n	80067f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	4b19      	ldr	r3, [pc, #100]	; (8006830 <HAL_TIM_Base_Start_IT+0xec>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d015      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0xbe>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067dc:	d011      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0201 	orr.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	e008      	b.n	8006802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e000      	b.n	8006804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40014000 	.word	0x40014000
 800682c:	40015000 	.word	0x40015000
 8006830:	00010007 	.word	0x00010007

08006834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e049      	b.n	80068da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fb fe58 	bl	8002510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3304      	adds	r3, #4
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f000 fc70 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d109      	bne.n	8006908 <HAL_TIM_PWM_Start+0x24>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e03c      	b.n	8006982 <HAL_TIM_PWM_Start+0x9e>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d109      	bne.n	8006922 <HAL_TIM_PWM_Start+0x3e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b01      	cmp	r3, #1
 8006918:	bf14      	ite	ne
 800691a:	2301      	movne	r3, #1
 800691c:	2300      	moveq	r3, #0
 800691e:	b2db      	uxtb	r3, r3
 8006920:	e02f      	b.n	8006982 <HAL_TIM_PWM_Start+0x9e>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d109      	bne.n	800693c <HAL_TIM_PWM_Start+0x58>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	bf14      	ite	ne
 8006934:	2301      	movne	r3, #1
 8006936:	2300      	moveq	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e022      	b.n	8006982 <HAL_TIM_PWM_Start+0x9e>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b0c      	cmp	r3, #12
 8006940:	d109      	bne.n	8006956 <HAL_TIM_PWM_Start+0x72>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	bf14      	ite	ne
 800694e:	2301      	movne	r3, #1
 8006950:	2300      	moveq	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	e015      	b.n	8006982 <HAL_TIM_PWM_Start+0x9e>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b10      	cmp	r3, #16
 800695a:	d109      	bne.n	8006970 <HAL_TIM_PWM_Start+0x8c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e008      	b.n	8006982 <HAL_TIM_PWM_Start+0x9e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	bf14      	ite	ne
 800697c:	2301      	movne	r3, #1
 800697e:	2300      	moveq	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0a6      	b.n	8006ad8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0xb6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006998:	e023      	b.n	80069e2 <HAL_TIM_PWM_Start+0xfe>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b04      	cmp	r3, #4
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Start+0xc6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a8:	e01b      	b.n	80069e2 <HAL_TIM_PWM_Start+0xfe>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Start+0xd6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b8:	e013      	b.n	80069e2 <HAL_TIM_PWM_Start+0xfe>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b0c      	cmp	r3, #12
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xe6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069c8:	e00b      	b.n	80069e2 <HAL_TIM_PWM_Start+0xfe>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d104      	bne.n	80069da <HAL_TIM_PWM_Start+0xf6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069d8:	e003      	b.n	80069e2 <HAL_TIM_PWM_Start+0xfe>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2202      	movs	r2, #2
 80069de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 f958 	bl	8007ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a3a      	ldr	r2, [pc, #232]	; (8006ae0 <HAL_TIM_PWM_Start+0x1fc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d018      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x148>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a39      	ldr	r2, [pc, #228]	; (8006ae4 <HAL_TIM_PWM_Start+0x200>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x148>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a37      	ldr	r2, [pc, #220]	; (8006ae8 <HAL_TIM_PWM_Start+0x204>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00e      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x148>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a36      	ldr	r2, [pc, #216]	; (8006aec <HAL_TIM_PWM_Start+0x208>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x148>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a34      	ldr	r2, [pc, #208]	; (8006af0 <HAL_TIM_PWM_Start+0x20c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIM_PWM_Start+0x148>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a33      	ldr	r2, [pc, #204]	; (8006af4 <HAL_TIM_PWM_Start+0x210>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIM_PWM_Start+0x14c>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <HAL_TIM_PWM_Start+0x14e>
 8006a30:	2300      	movs	r3, #0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a25      	ldr	r2, [pc, #148]	; (8006ae0 <HAL_TIM_PWM_Start+0x1fc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d022      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a58:	d01d      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <HAL_TIM_PWM_Start+0x214>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d018      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_TIM_PWM_Start+0x218>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a23      	ldr	r2, [pc, #140]	; (8006b00 <HAL_TIM_PWM_Start+0x21c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00e      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_TIM_PWM_Start+0x200>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d009      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <HAL_TIM_PWM_Start+0x204>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIM_PWM_Start+0x1b2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_TIM_PWM_Start+0x210>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d115      	bne.n	8006ac2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <HAL_TIM_PWM_Start+0x220>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b06      	cmp	r3, #6
 8006aa6:	d015      	beq.n	8006ad4 <HAL_TIM_PWM_Start+0x1f0>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aae:	d011      	beq.n	8006ad4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac0:	e008      	b.n	8006ad4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0201 	orr.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e000      	b.n	8006ad6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40013400 	.word	0x40013400
 8006ae8:	40014000 	.word	0x40014000
 8006aec:	40014400 	.word	0x40014400
 8006af0:	40014800 	.word	0x40014800
 8006af4:	40015000 	.word	0x40015000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	00010007 	.word	0x00010007

08006b08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e049      	b.n	8006bae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f841 	bl	8006bb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f000 fb06 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e088      	b.n	8006cfa <HAL_TIM_IC_ConfigChannel+0x130>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d11b      	bne.n	8006c2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f000 fe85 	bl	8007914 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 020c 	bic.w	r2, r2, #12
 8006c18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6999      	ldr	r1, [r3, #24]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	619a      	str	r2, [r3, #24]
 8006c2c:	e060      	b.n	8006cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d11c      	bne.n	8006c6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6819      	ldr	r1, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f000 ff09 	bl	8007a5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6999      	ldr	r1, [r3, #24]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	021a      	lsls	r2, r3, #8
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	619a      	str	r2, [r3, #24]
 8006c6c:	e040      	b.n	8006cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d11b      	bne.n	8006cac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6819      	ldr	r1, [r3, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f000 ff56 	bl	8007b34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69da      	ldr	r2, [r3, #28]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 020c 	bic.w	r2, r2, #12
 8006c96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69d9      	ldr	r1, [r3, #28]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	61da      	str	r2, [r3, #28]
 8006caa:	e021      	b.n	8006cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b0c      	cmp	r3, #12
 8006cb0:	d11c      	bne.n	8006cec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f000 ff73 	bl	8007bac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69d9      	ldr	r1, [r3, #28]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	021a      	lsls	r2, r3, #8
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	61da      	str	r2, [r3, #28]
 8006cea:	e001      	b.n	8006cf0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e0ff      	b.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b14      	cmp	r3, #20
 8006d2e:	f200 80f0 	bhi.w	8006f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006f13 	.word	0x08006f13
 8006d40:	08006f13 	.word	0x08006f13
 8006d44:	08006f13 	.word	0x08006f13
 8006d48:	08006dcd 	.word	0x08006dcd
 8006d4c:	08006f13 	.word	0x08006f13
 8006d50:	08006f13 	.word	0x08006f13
 8006d54:	08006f13 	.word	0x08006f13
 8006d58:	08006e0f 	.word	0x08006e0f
 8006d5c:	08006f13 	.word	0x08006f13
 8006d60:	08006f13 	.word	0x08006f13
 8006d64:	08006f13 	.word	0x08006f13
 8006d68:	08006e4f 	.word	0x08006e4f
 8006d6c:	08006f13 	.word	0x08006f13
 8006d70:	08006f13 	.word	0x08006f13
 8006d74:	08006f13 	.word	0x08006f13
 8006d78:	08006e91 	.word	0x08006e91
 8006d7c:	08006f13 	.word	0x08006f13
 8006d80:	08006f13 	.word	0x08006f13
 8006d84:	08006f13 	.word	0x08006f13
 8006d88:	08006ed1 	.word	0x08006ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fa94 	bl	80072c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0208 	orr.w	r2, r2, #8
 8006da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0204 	bic.w	r2, r2, #4
 8006db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6999      	ldr	r1, [r3, #24]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	619a      	str	r2, [r3, #24]
      break;
 8006dca:	e0a5      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fb0e 	bl	80073f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6999      	ldr	r1, [r3, #24]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	619a      	str	r2, [r3, #24]
      break;
 8006e0c:	e084      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fb81 	bl	800751c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0208 	orr.w	r2, r2, #8
 8006e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0204 	bic.w	r2, r2, #4
 8006e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69d9      	ldr	r1, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	61da      	str	r2, [r3, #28]
      break;
 8006e4c:	e064      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fbf3 	bl	8007640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69d9      	ldr	r1, [r3, #28]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	021a      	lsls	r2, r3, #8
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	61da      	str	r2, [r3, #28]
      break;
 8006e8e:	e043      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fc66 	bl	8007768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0204 	bic.w	r2, r2, #4
 8006eba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ece:	e023      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fcb0 	bl	800783c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	021a      	lsls	r2, r3, #8
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f10:	e002      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
      break;
 8006f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop

08006f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIM_ConfigClockSource+0x1c>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e0f6      	b.n	8007136 <HAL_TIM_ConfigClockSource+0x20a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a6f      	ldr	r2, [pc, #444]	; (8007140 <HAL_TIM_ConfigClockSource+0x214>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	f000 80c1 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006f88:	4a6d      	ldr	r2, [pc, #436]	; (8007140 <HAL_TIM_ConfigClockSource+0x214>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f200 80c6 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006f90:	4a6c      	ldr	r2, [pc, #432]	; (8007144 <HAL_TIM_ConfigClockSource+0x218>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f000 80b9 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006f98:	4a6a      	ldr	r2, [pc, #424]	; (8007144 <HAL_TIM_ConfigClockSource+0x218>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	f200 80be 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006fa0:	4a69      	ldr	r2, [pc, #420]	; (8007148 <HAL_TIM_ConfigClockSource+0x21c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	f000 80b1 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006fa8:	4a67      	ldr	r2, [pc, #412]	; (8007148 <HAL_TIM_ConfigClockSource+0x21c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f200 80b6 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006fb0:	4a66      	ldr	r2, [pc, #408]	; (800714c <HAL_TIM_ConfigClockSource+0x220>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	f000 80a9 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006fb8:	4a64      	ldr	r2, [pc, #400]	; (800714c <HAL_TIM_ConfigClockSource+0x220>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	f200 80ae 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc0:	4a63      	ldr	r2, [pc, #396]	; (8007150 <HAL_TIM_ConfigClockSource+0x224>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	f000 80a1 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006fc8:	4a61      	ldr	r2, [pc, #388]	; (8007150 <HAL_TIM_ConfigClockSource+0x224>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	f200 80a6 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd0:	4a60      	ldr	r2, [pc, #384]	; (8007154 <HAL_TIM_ConfigClockSource+0x228>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f000 8099 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006fd8:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <HAL_TIM_ConfigClockSource+0x228>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	f200 809e 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fe4:	f000 8091 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006fe8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fec:	f200 8096 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8006ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff4:	f000 8089 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8006ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffc:	f200 808e 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8007000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007004:	d03e      	beq.n	8007084 <HAL_TIM_ConfigClockSource+0x158>
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700a:	f200 8087 	bhi.w	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007012:	f000 8086 	beq.w	8007122 <HAL_TIM_ConfigClockSource+0x1f6>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701a:	d87f      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 800701c:	2b70      	cmp	r3, #112	; 0x70
 800701e:	d01a      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x12a>
 8007020:	2b70      	cmp	r3, #112	; 0x70
 8007022:	d87b      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8007024:	2b60      	cmp	r3, #96	; 0x60
 8007026:	d050      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x19e>
 8007028:	2b60      	cmp	r3, #96	; 0x60
 800702a:	d877      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 800702c:	2b50      	cmp	r3, #80	; 0x50
 800702e:	d03c      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x17e>
 8007030:	2b50      	cmp	r3, #80	; 0x50
 8007032:	d873      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d058      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x1be>
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d86f      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 800703c:	2b30      	cmp	r3, #48	; 0x30
 800703e:	d064      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d86b      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 8007044:	2b20      	cmp	r3, #32
 8007046:	d060      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d867      	bhi.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05c      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8007050:	2b10      	cmp	r3, #16
 8007052:	d05a      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x1de>
 8007054:	e062      	b.n	800711c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6899      	ldr	r1, [r3, #8]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f000 fdfb 	bl	8007c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
      break;
 8007082:	e04f      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	6899      	ldr	r1, [r3, #8]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f000 fde4 	bl	8007c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a6:	609a      	str	r2, [r3, #8]
      break;
 80070a8:	e03c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f000 fca0 	bl	80079fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2150      	movs	r1, #80	; 0x50
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fdaf 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 80070c8:	e02c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f000 fcfc 	bl	8007ad4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2160      	movs	r1, #96	; 0x60
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fd9f 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 80070e8:	e01c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 fc80 	bl	80079fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2140      	movs	r1, #64	; 0x40
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fd8f 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 8007108:	e00c      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f000 fd86 	bl	8007c26 <TIM_ITRx_SetConfig>
      break;
 800711a:	e003      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	e000      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	00100070 	.word	0x00100070
 8007144:	00100060 	.word	0x00100060
 8007148:	00100050 	.word	0x00100050
 800714c:	00100040 	.word	0x00100040
 8007150:	00100030 	.word	0x00100030
 8007154:	00100020 	.word	0x00100020

08007158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a4c      	ldr	r2, [pc, #304]	; (800729c <TIM_Base_SetConfig+0x144>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d017      	beq.n	80071a0 <TIM_Base_SetConfig+0x48>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007176:	d013      	beq.n	80071a0 <TIM_Base_SetConfig+0x48>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a49      	ldr	r2, [pc, #292]	; (80072a0 <TIM_Base_SetConfig+0x148>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00f      	beq.n	80071a0 <TIM_Base_SetConfig+0x48>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a48      	ldr	r2, [pc, #288]	; (80072a4 <TIM_Base_SetConfig+0x14c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_Base_SetConfig+0x48>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a47      	ldr	r2, [pc, #284]	; (80072a8 <TIM_Base_SetConfig+0x150>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_Base_SetConfig+0x48>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a46      	ldr	r2, [pc, #280]	; (80072ac <TIM_Base_SetConfig+0x154>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0x48>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a45      	ldr	r2, [pc, #276]	; (80072b0 <TIM_Base_SetConfig+0x158>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a39      	ldr	r2, [pc, #228]	; (800729c <TIM_Base_SetConfig+0x144>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d023      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c0:	d01f      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a36      	ldr	r2, [pc, #216]	; (80072a0 <TIM_Base_SetConfig+0x148>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01b      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a35      	ldr	r2, [pc, #212]	; (80072a4 <TIM_Base_SetConfig+0x14c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d017      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a34      	ldr	r2, [pc, #208]	; (80072a8 <TIM_Base_SetConfig+0x150>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a33      	ldr	r2, [pc, #204]	; (80072ac <TIM_Base_SetConfig+0x154>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00f      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a33      	ldr	r2, [pc, #204]	; (80072b4 <TIM_Base_SetConfig+0x15c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00b      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a32      	ldr	r2, [pc, #200]	; (80072b8 <TIM_Base_SetConfig+0x160>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a31      	ldr	r2, [pc, #196]	; (80072bc <TIM_Base_SetConfig+0x164>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_Base_SetConfig+0xaa>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <TIM_Base_SetConfig+0x158>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a18      	ldr	r2, [pc, #96]	; (800729c <TIM_Base_SetConfig+0x144>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <TIM_Base_SetConfig+0x110>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a1a      	ldr	r2, [pc, #104]	; (80072ac <TIM_Base_SetConfig+0x154>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00f      	beq.n	8007268 <TIM_Base_SetConfig+0x110>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a1a      	ldr	r2, [pc, #104]	; (80072b4 <TIM_Base_SetConfig+0x15c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_Base_SetConfig+0x110>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a19      	ldr	r2, [pc, #100]	; (80072b8 <TIM_Base_SetConfig+0x160>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_Base_SetConfig+0x110>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a18      	ldr	r2, [pc, #96]	; (80072bc <TIM_Base_SetConfig+0x164>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_Base_SetConfig+0x110>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <TIM_Base_SetConfig+0x158>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d103      	bne.n	8007270 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b01      	cmp	r3, #1
 8007280:	d105      	bne.n	800728e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	611a      	str	r2, [r3, #16]
  }
}
 800728e:	bf00      	nop
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40013400 	.word	0x40013400
 80072b0:	40015000 	.word	0x40015000
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f023 0201 	bic.w	r2, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f023 0302 	bic.w	r3, r3, #2
 800730c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a30      	ldr	r2, [pc, #192]	; (80073dc <TIM_OC1_SetConfig+0x11c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d013      	beq.n	8007348 <TIM_OC1_SetConfig+0x88>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a2f      	ldr	r2, [pc, #188]	; (80073e0 <TIM_OC1_SetConfig+0x120>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_OC1_SetConfig+0x88>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a2e      	ldr	r2, [pc, #184]	; (80073e4 <TIM_OC1_SetConfig+0x124>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_OC1_SetConfig+0x88>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <TIM_OC1_SetConfig+0x128>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_OC1_SetConfig+0x88>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a2c      	ldr	r2, [pc, #176]	; (80073ec <TIM_OC1_SetConfig+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC1_SetConfig+0x88>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a2b      	ldr	r2, [pc, #172]	; (80073f0 <TIM_OC1_SetConfig+0x130>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d10c      	bne.n	8007362 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0308 	bic.w	r3, r3, #8
 800734e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f023 0304 	bic.w	r3, r3, #4
 8007360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <TIM_OC1_SetConfig+0x11c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_OC1_SetConfig+0xd2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <TIM_OC1_SetConfig+0x120>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_OC1_SetConfig+0xd2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1b      	ldr	r2, [pc, #108]	; (80073e4 <TIM_OC1_SetConfig+0x124>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_OC1_SetConfig+0xd2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <TIM_OC1_SetConfig+0x128>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_OC1_SetConfig+0xd2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <TIM_OC1_SetConfig+0x12c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_OC1_SetConfig+0xd2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a18      	ldr	r2, [pc, #96]	; (80073f0 <TIM_OC1_SetConfig+0x130>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d111      	bne.n	80073b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40014000 	.word	0x40014000
 80073e8:	40014400 	.word	0x40014400
 80073ec:	40014800 	.word	0x40014800
 80073f0:	40015000 	.word	0x40015000

080073f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f023 0210 	bic.w	r2, r3, #16
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0320 	bic.w	r3, r3, #32
 8007442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a2c      	ldr	r2, [pc, #176]	; (8007504 <TIM_OC2_SetConfig+0x110>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d007      	beq.n	8007468 <TIM_OC2_SetConfig+0x74>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <TIM_OC2_SetConfig+0x114>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_OC2_SetConfig+0x74>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a2a      	ldr	r2, [pc, #168]	; (800750c <TIM_OC2_SetConfig+0x118>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d10d      	bne.n	8007484 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <TIM_OC2_SetConfig+0x110>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <TIM_OC2_SetConfig+0xc0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <TIM_OC2_SetConfig+0x114>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00f      	beq.n	80074b4 <TIM_OC2_SetConfig+0xc0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <TIM_OC2_SetConfig+0x11c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_OC2_SetConfig+0xc0>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <TIM_OC2_SetConfig+0x120>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_OC2_SetConfig+0xc0>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <TIM_OC2_SetConfig+0x124>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_OC2_SetConfig+0xc0>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a17      	ldr	r2, [pc, #92]	; (800750c <TIM_OC2_SetConfig+0x118>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d113      	bne.n	80074dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40015000 	.word	0x40015000
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800

0800751c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <TIM_OC3_SetConfig+0x10c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d007      	beq.n	800758e <TIM_OC3_SetConfig+0x72>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2a      	ldr	r2, [pc, #168]	; (800762c <TIM_OC3_SetConfig+0x110>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d003      	beq.n	800758e <TIM_OC3_SetConfig+0x72>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a29      	ldr	r2, [pc, #164]	; (8007630 <TIM_OC3_SetConfig+0x114>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10d      	bne.n	80075aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1e      	ldr	r2, [pc, #120]	; (8007628 <TIM_OC3_SetConfig+0x10c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <TIM_OC3_SetConfig+0xbe>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1d      	ldr	r2, [pc, #116]	; (800762c <TIM_OC3_SetConfig+0x110>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00f      	beq.n	80075da <TIM_OC3_SetConfig+0xbe>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <TIM_OC3_SetConfig+0x118>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00b      	beq.n	80075da <TIM_OC3_SetConfig+0xbe>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <TIM_OC3_SetConfig+0x11c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_OC3_SetConfig+0xbe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1b      	ldr	r2, [pc, #108]	; (800763c <TIM_OC3_SetConfig+0x120>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_OC3_SetConfig+0xbe>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a16      	ldr	r2, [pc, #88]	; (8007630 <TIM_OC3_SetConfig+0x114>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d113      	bne.n	8007602 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40013400 	.word	0x40013400
 8007630:	40015000 	.word	0x40015000
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800

08007640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800766e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800768e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	031b      	lsls	r3, r3, #12
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <TIM_OC4_SetConfig+0x110>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_OC4_SetConfig+0x74>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a2b      	ldr	r2, [pc, #172]	; (8007754 <TIM_OC4_SetConfig+0x114>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_OC4_SetConfig+0x74>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a2a      	ldr	r2, [pc, #168]	; (8007758 <TIM_OC4_SetConfig+0x118>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d10d      	bne.n	80076d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	031b      	lsls	r3, r3, #12
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a1f      	ldr	r2, [pc, #124]	; (8007750 <TIM_OC4_SetConfig+0x110>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <TIM_OC4_SetConfig+0xc0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a1e      	ldr	r2, [pc, #120]	; (8007754 <TIM_OC4_SetConfig+0x114>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00f      	beq.n	8007700 <TIM_OC4_SetConfig+0xc0>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1e      	ldr	r2, [pc, #120]	; (800775c <TIM_OC4_SetConfig+0x11c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <TIM_OC4_SetConfig+0xc0>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <TIM_OC4_SetConfig+0x120>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <TIM_OC4_SetConfig+0xc0>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <TIM_OC4_SetConfig+0x124>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_OC4_SetConfig+0xc0>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <TIM_OC4_SetConfig+0x118>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d113      	bne.n	8007728 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007706:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800770e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	019b      	lsls	r3, r3, #6
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	019b      	lsls	r3, r3, #6
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40012c00 	.word	0x40012c00
 8007754:	40013400 	.word	0x40013400
 8007758:	40015000 	.word	0x40015000
 800775c:	40014000 	.word	0x40014000
 8007760:	40014400 	.word	0x40014400
 8007764:	40014800 	.word	0x40014800

08007768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	041b      	lsls	r3, r3, #16
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a19      	ldr	r2, [pc, #100]	; (8007824 <TIM_OC5_SetConfig+0xbc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <TIM_OC5_SetConfig+0x82>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a18      	ldr	r2, [pc, #96]	; (8007828 <TIM_OC5_SetConfig+0xc0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00f      	beq.n	80077ea <TIM_OC5_SetConfig+0x82>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a17      	ldr	r2, [pc, #92]	; (800782c <TIM_OC5_SetConfig+0xc4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00b      	beq.n	80077ea <TIM_OC5_SetConfig+0x82>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a16      	ldr	r2, [pc, #88]	; (8007830 <TIM_OC5_SetConfig+0xc8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d007      	beq.n	80077ea <TIM_OC5_SetConfig+0x82>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a15      	ldr	r2, [pc, #84]	; (8007834 <TIM_OC5_SetConfig+0xcc>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_OC5_SetConfig+0x82>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a14      	ldr	r2, [pc, #80]	; (8007838 <TIM_OC5_SetConfig+0xd0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d109      	bne.n	80077fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	621a      	str	r2, [r3, #32]
}
 8007818:	bf00      	nop
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	40012c00 	.word	0x40012c00
 8007828:	40013400 	.word	0x40013400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800
 8007838:	40015000 	.word	0x40015000

0800783c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	051b      	lsls	r3, r3, #20
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <TIM_OC6_SetConfig+0xc0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <TIM_OC6_SetConfig+0x84>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a19      	ldr	r2, [pc, #100]	; (8007900 <TIM_OC6_SetConfig+0xc4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00f      	beq.n	80078c0 <TIM_OC6_SetConfig+0x84>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a18      	ldr	r2, [pc, #96]	; (8007904 <TIM_OC6_SetConfig+0xc8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_OC6_SetConfig+0x84>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a17      	ldr	r2, [pc, #92]	; (8007908 <TIM_OC6_SetConfig+0xcc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_OC6_SetConfig+0x84>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a16      	ldr	r2, [pc, #88]	; (800790c <TIM_OC6_SetConfig+0xd0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_OC6_SetConfig+0x84>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a15      	ldr	r2, [pc, #84]	; (8007910 <TIM_OC6_SetConfig+0xd4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d109      	bne.n	80078d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	029b      	lsls	r3, r3, #10
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	621a      	str	r2, [r3, #32]
}
 80078ee:	bf00      	nop
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40013400 	.word	0x40013400
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400
 800790c:	40014800 	.word	0x40014800
 8007910:	40015000 	.word	0x40015000

08007914 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f023 0201 	bic.w	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <TIM_TI1_SetConfig+0xcc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01b      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007948:	d017      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4a25      	ldr	r2, [pc, #148]	; (80079e4 <TIM_TI1_SetConfig+0xd0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4a24      	ldr	r2, [pc, #144]	; (80079e8 <TIM_TI1_SetConfig+0xd4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00f      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a23      	ldr	r2, [pc, #140]	; (80079ec <TIM_TI1_SetConfig+0xd8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00b      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <TIM_TI1_SetConfig+0xdc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a21      	ldr	r2, [pc, #132]	; (80079f4 <TIM_TI1_SetConfig+0xe0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_TI1_SetConfig+0x66>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <TIM_TI1_SetConfig+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d101      	bne.n	800797e <TIM_TI1_SetConfig+0x6a>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <TIM_TI1_SetConfig+0x6c>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	e003      	b.n	800799e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f023 030a 	bic.w	r3, r3, #10
 80079b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f003 030a 	and.w	r3, r3, #10
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40013400 	.word	0x40013400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40015000 	.word	0x40015000

080079fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f023 0201 	bic.w	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 030a 	bic.w	r3, r3, #10
 8007a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	621a      	str	r2, [r3, #32]
}
 8007a4e:	bf00      	nop
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b087      	sub	sp, #28
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	607a      	str	r2, [r7, #4]
 8007a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f023 0210 	bic.w	r2, r3, #16
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	621a      	str	r2, [r3, #32]
}
 8007ac8:	bf00      	nop
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0210 	bic.w	r2, r3, #16
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	031b      	lsls	r3, r3, #12
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f023 0303 	bic.w	r3, r3, #3
 8007b60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b84:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	621a      	str	r2, [r3, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	031b      	lsls	r3, r3, #12
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	031b      	lsls	r3, r3, #12
 8007c04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f043 0307 	orr.w	r3, r3, #7
 8007c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	021a      	lsls	r2, r3, #8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	609a      	str	r2, [r3, #8]
}
 8007c94:	bf00      	nop
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1a      	ldr	r2, [r3, #32]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1a      	ldr	r2, [r3, #32]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <HAL_TIMEx_PWMN_Start+0x24>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	e022      	b.n	8007d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d109      	bne.n	8007d2a <HAL_TIMEx_PWMN_Start+0x3e>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	bf14      	ite	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	2300      	moveq	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	e015      	b.n	8007d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d109      	bne.n	8007d44 <HAL_TIMEx_PWMN_Start+0x58>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	e008      	b.n	8007d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	bf14      	ite	ne
 8007d50:	2301      	movne	r3, #1
 8007d52:	2300      	moveq	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e073      	b.n	8007e46 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d104      	bne.n	8007d6e <HAL_TIMEx_PWMN_Start+0x82>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d6c:	e013      	b.n	8007d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d104      	bne.n	8007d7e <HAL_TIMEx_PWMN_Start+0x92>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d7c:	e00b      	b.n	8007d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d104      	bne.n	8007d8e <HAL_TIMEx_PWMN_Start+0xa2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d8c:	e003      	b.n	8007d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 f990 	bl	80080c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a25      	ldr	r2, [pc, #148]	; (8007e50 <HAL_TIMEx_PWMN_Start+0x164>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d022      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc6:	d01d      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a21      	ldr	r2, [pc, #132]	; (8007e54 <HAL_TIMEx_PWMN_Start+0x168>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d018      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a20      	ldr	r2, [pc, #128]	; (8007e58 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d013      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <HAL_TIMEx_PWMN_Start+0x170>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00e      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_TIMEx_PWMN_Start+0x174>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d009      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_TIMEx_PWMN_Start+0x178>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d004      	beq.n	8007e04 <HAL_TIMEx_PWMN_Start+0x118>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d115      	bne.n	8007e30 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <HAL_TIMEx_PWMN_Start+0x180>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d015      	beq.n	8007e42 <HAL_TIMEx_PWMN_Start+0x156>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1c:	d011      	beq.n	8007e42 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2e:	e008      	b.n	8007e42 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	e000      	b.n	8007e44 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800
 8007e5c:	40000c00 	.word	0x40000c00
 8007e60:	40013400 	.word	0x40013400
 8007e64:	40014000 	.word	0x40014000
 8007e68:	40015000 	.word	0x40015000
 8007e6c:	00010007 	.word	0x00010007

08007e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e074      	b.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a34      	ldr	r2, [pc, #208]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a33      	ldr	r2, [pc, #204]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a31      	ldr	r2, [pc, #196]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d108      	bne.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ecc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d022      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f08:	d01d      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1f      	ldr	r2, [pc, #124]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d018      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00e      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a11      	ldr	r2, [pc, #68]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d10c      	bne.n	8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40012c00 	.word	0x40012c00
 8007f84:	40013400 	.word	0x40013400
 8007f88:	40015000 	.word	0x40015000
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	40014000 	.word	0x40014000

08007f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e078      	b.n	80080aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1c      	ldr	r2, [pc, #112]	; (80080b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d009      	beq.n	800805e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1b      	ldr	r2, [pc, #108]	; (80080bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d004      	beq.n	800805e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a19      	ldr	r2, [pc, #100]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d11c      	bne.n	8008098 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	051b      	lsls	r3, r3, #20
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40013400 	.word	0x40013400
 80080c0:	40015000 	.word	0x40015000

080080c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	2204      	movs	r2, #4
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	43db      	mvns	r3, r3
 80080e6:	401a      	ands	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1a      	ldr	r2, [r3, #32]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	fa01 f303 	lsl.w	r3, r1, r3
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <__errno>:
 8008110:	4b01      	ldr	r3, [pc, #4]	; (8008118 <__errno+0x8>)
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	2000000c 	.word	0x2000000c

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4d0d      	ldr	r5, [pc, #52]	; (8008154 <__libc_init_array+0x38>)
 8008120:	4c0d      	ldr	r4, [pc, #52]	; (8008158 <__libc_init_array+0x3c>)
 8008122:	1b64      	subs	r4, r4, r5
 8008124:	10a4      	asrs	r4, r4, #2
 8008126:	2600      	movs	r6, #0
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	4d0b      	ldr	r5, [pc, #44]	; (800815c <__libc_init_array+0x40>)
 800812e:	4c0c      	ldr	r4, [pc, #48]	; (8008160 <__libc_init_array+0x44>)
 8008130:	f001 f808 	bl	8009144 <_init>
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	2600      	movs	r6, #0
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	0800957c 	.word	0x0800957c
 8008158:	0800957c 	.word	0x0800957c
 800815c:	0800957c 	.word	0x0800957c
 8008160:	08009580 	.word	0x08009580

08008164 <memcpy>:
 8008164:	440a      	add	r2, r1
 8008166:	4291      	cmp	r1, r2
 8008168:	f100 33ff 	add.w	r3, r0, #4294967295
 800816c:	d100      	bne.n	8008170 <memcpy+0xc>
 800816e:	4770      	bx	lr
 8008170:	b510      	push	{r4, lr}
 8008172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800817a:	4291      	cmp	r1, r2
 800817c:	d1f9      	bne.n	8008172 <memcpy+0xe>
 800817e:	bd10      	pop	{r4, pc}

08008180 <memset>:
 8008180:	4402      	add	r2, r0
 8008182:	4603      	mov	r3, r0
 8008184:	4293      	cmp	r3, r2
 8008186:	d100      	bne.n	800818a <memset+0xa>
 8008188:	4770      	bx	lr
 800818a:	f803 1b01 	strb.w	r1, [r3], #1
 800818e:	e7f9      	b.n	8008184 <memset+0x4>

08008190 <cosf>:
 8008190:	ee10 3a10 	vmov	r3, s0
 8008194:	b507      	push	{r0, r1, r2, lr}
 8008196:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <cosf+0x80>)
 8008198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800819c:	4293      	cmp	r3, r2
 800819e:	dc06      	bgt.n	80081ae <cosf+0x1e>
 80081a0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008214 <cosf+0x84>
 80081a4:	b003      	add	sp, #12
 80081a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80081aa:	f000 bb1d 	b.w	80087e8 <__kernel_cosf>
 80081ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80081b2:	db04      	blt.n	80081be <cosf+0x2e>
 80081b4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80081b8:	b003      	add	sp, #12
 80081ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80081be:	4668      	mov	r0, sp
 80081c0:	f000 f9d2 	bl	8008568 <__ieee754_rem_pio2f>
 80081c4:	f000 0003 	and.w	r0, r0, #3
 80081c8:	2801      	cmp	r0, #1
 80081ca:	d009      	beq.n	80081e0 <cosf+0x50>
 80081cc:	2802      	cmp	r0, #2
 80081ce:	d010      	beq.n	80081f2 <cosf+0x62>
 80081d0:	b9b0      	cbnz	r0, 8008200 <cosf+0x70>
 80081d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80081d6:	ed9d 0a00 	vldr	s0, [sp]
 80081da:	f000 fb05 	bl	80087e8 <__kernel_cosf>
 80081de:	e7eb      	b.n	80081b8 <cosf+0x28>
 80081e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80081e4:	ed9d 0a00 	vldr	s0, [sp]
 80081e8:	f000 fdd4 	bl	8008d94 <__kernel_sinf>
 80081ec:	eeb1 0a40 	vneg.f32	s0, s0
 80081f0:	e7e2      	b.n	80081b8 <cosf+0x28>
 80081f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80081f6:	ed9d 0a00 	vldr	s0, [sp]
 80081fa:	f000 faf5 	bl	80087e8 <__kernel_cosf>
 80081fe:	e7f5      	b.n	80081ec <cosf+0x5c>
 8008200:	eddd 0a01 	vldr	s1, [sp, #4]
 8008204:	ed9d 0a00 	vldr	s0, [sp]
 8008208:	2001      	movs	r0, #1
 800820a:	f000 fdc3 	bl	8008d94 <__kernel_sinf>
 800820e:	e7d3      	b.n	80081b8 <cosf+0x28>
 8008210:	3f490fd8 	.word	0x3f490fd8
 8008214:	00000000 	.word	0x00000000

08008218 <sinf>:
 8008218:	ee10 3a10 	vmov	r3, s0
 800821c:	b507      	push	{r0, r1, r2, lr}
 800821e:	4a1f      	ldr	r2, [pc, #124]	; (800829c <sinf+0x84>)
 8008220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008224:	4293      	cmp	r3, r2
 8008226:	dc07      	bgt.n	8008238 <sinf+0x20>
 8008228:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80082a0 <sinf+0x88>
 800822c:	2000      	movs	r0, #0
 800822e:	b003      	add	sp, #12
 8008230:	f85d eb04 	ldr.w	lr, [sp], #4
 8008234:	f000 bdae 	b.w	8008d94 <__kernel_sinf>
 8008238:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800823c:	db04      	blt.n	8008248 <sinf+0x30>
 800823e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008242:	b003      	add	sp, #12
 8008244:	f85d fb04 	ldr.w	pc, [sp], #4
 8008248:	4668      	mov	r0, sp
 800824a:	f000 f98d 	bl	8008568 <__ieee754_rem_pio2f>
 800824e:	f000 0003 	and.w	r0, r0, #3
 8008252:	2801      	cmp	r0, #1
 8008254:	d00a      	beq.n	800826c <sinf+0x54>
 8008256:	2802      	cmp	r0, #2
 8008258:	d00f      	beq.n	800827a <sinf+0x62>
 800825a:	b9c0      	cbnz	r0, 800828e <sinf+0x76>
 800825c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008260:	ed9d 0a00 	vldr	s0, [sp]
 8008264:	2001      	movs	r0, #1
 8008266:	f000 fd95 	bl	8008d94 <__kernel_sinf>
 800826a:	e7ea      	b.n	8008242 <sinf+0x2a>
 800826c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008270:	ed9d 0a00 	vldr	s0, [sp]
 8008274:	f000 fab8 	bl	80087e8 <__kernel_cosf>
 8008278:	e7e3      	b.n	8008242 <sinf+0x2a>
 800827a:	eddd 0a01 	vldr	s1, [sp, #4]
 800827e:	ed9d 0a00 	vldr	s0, [sp]
 8008282:	2001      	movs	r0, #1
 8008284:	f000 fd86 	bl	8008d94 <__kernel_sinf>
 8008288:	eeb1 0a40 	vneg.f32	s0, s0
 800828c:	e7d9      	b.n	8008242 <sinf+0x2a>
 800828e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008292:	ed9d 0a00 	vldr	s0, [sp]
 8008296:	f000 faa7 	bl	80087e8 <__kernel_cosf>
 800829a:	e7f5      	b.n	8008288 <sinf+0x70>
 800829c:	3f490fd8 	.word	0x3f490fd8
 80082a0:	00000000 	.word	0x00000000

080082a4 <atan2f>:
 80082a4:	f000 b83e 	b.w	8008324 <__ieee754_atan2f>

080082a8 <fmodf>:
 80082a8:	b508      	push	{r3, lr}
 80082aa:	ed2d 8b02 	vpush	{d8}
 80082ae:	eef0 8a40 	vmov.f32	s17, s0
 80082b2:	eeb0 8a60 	vmov.f32	s16, s1
 80082b6:	f000 f8d5 	bl	8008464 <__ieee754_fmodf>
 80082ba:	eef4 8a48 	vcmp.f32	s17, s16
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	d60c      	bvs.n	80082de <fmodf+0x36>
 80082c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80082e4 <fmodf+0x3c>
 80082c8:	eeb4 8a68 	vcmp.f32	s16, s17
 80082cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d0:	d105      	bne.n	80082de <fmodf+0x36>
 80082d2:	f7ff ff1d 	bl	8008110 <__errno>
 80082d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80082da:	2321      	movs	r3, #33	; 0x21
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	ecbd 8b02 	vpop	{d8}
 80082e2:	bd08      	pop	{r3, pc}
 80082e4:	00000000 	.word	0x00000000

080082e8 <sqrtf>:
 80082e8:	b508      	push	{r3, lr}
 80082ea:	ed2d 8b02 	vpush	{d8}
 80082ee:	eeb0 8a40 	vmov.f32	s16, s0
 80082f2:	f000 fa75 	bl	80087e0 <__ieee754_sqrtf>
 80082f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80082fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fe:	d60c      	bvs.n	800831a <sqrtf+0x32>
 8008300:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008320 <sqrtf+0x38>
 8008304:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830c:	d505      	bpl.n	800831a <sqrtf+0x32>
 800830e:	f7ff feff 	bl	8008110 <__errno>
 8008312:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008316:	2321      	movs	r3, #33	; 0x21
 8008318:	6003      	str	r3, [r0, #0]
 800831a:	ecbd 8b02 	vpop	{d8}
 800831e:	bd08      	pop	{r3, pc}
 8008320:	00000000 	.word	0x00000000

08008324 <__ieee754_atan2f>:
 8008324:	ee10 2a90 	vmov	r2, s1
 8008328:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800832c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008330:	b510      	push	{r4, lr}
 8008332:	eef0 7a40 	vmov.f32	s15, s0
 8008336:	dc06      	bgt.n	8008346 <__ieee754_atan2f+0x22>
 8008338:	ee10 0a10 	vmov	r0, s0
 800833c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008340:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008344:	dd04      	ble.n	8008350 <__ieee754_atan2f+0x2c>
 8008346:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800834a:	eeb0 0a67 	vmov.f32	s0, s15
 800834e:	bd10      	pop	{r4, pc}
 8008350:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008354:	d103      	bne.n	800835e <__ieee754_atan2f+0x3a>
 8008356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835a:	f000 bd63 	b.w	8008e24 <atanf>
 800835e:	1794      	asrs	r4, r2, #30
 8008360:	f004 0402 	and.w	r4, r4, #2
 8008364:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008368:	b943      	cbnz	r3, 800837c <__ieee754_atan2f+0x58>
 800836a:	2c02      	cmp	r4, #2
 800836c:	d05e      	beq.n	800842c <__ieee754_atan2f+0x108>
 800836e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008440 <__ieee754_atan2f+0x11c>
 8008372:	2c03      	cmp	r4, #3
 8008374:	bf08      	it	eq
 8008376:	eef0 7a47 	vmoveq.f32	s15, s14
 800837a:	e7e6      	b.n	800834a <__ieee754_atan2f+0x26>
 800837c:	b941      	cbnz	r1, 8008390 <__ieee754_atan2f+0x6c>
 800837e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008444 <__ieee754_atan2f+0x120>
 8008382:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008448 <__ieee754_atan2f+0x124>
 8008386:	2800      	cmp	r0, #0
 8008388:	bfb8      	it	lt
 800838a:	eef0 7a40 	vmovlt.f32	s15, s0
 800838e:	e7dc      	b.n	800834a <__ieee754_atan2f+0x26>
 8008390:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008394:	d110      	bne.n	80083b8 <__ieee754_atan2f+0x94>
 8008396:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800839a:	f104 34ff 	add.w	r4, r4, #4294967295
 800839e:	d107      	bne.n	80083b0 <__ieee754_atan2f+0x8c>
 80083a0:	2c02      	cmp	r4, #2
 80083a2:	d846      	bhi.n	8008432 <__ieee754_atan2f+0x10e>
 80083a4:	4b29      	ldr	r3, [pc, #164]	; (800844c <__ieee754_atan2f+0x128>)
 80083a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083aa:	edd4 7a00 	vldr	s15, [r4]
 80083ae:	e7cc      	b.n	800834a <__ieee754_atan2f+0x26>
 80083b0:	2c02      	cmp	r4, #2
 80083b2:	d841      	bhi.n	8008438 <__ieee754_atan2f+0x114>
 80083b4:	4b26      	ldr	r3, [pc, #152]	; (8008450 <__ieee754_atan2f+0x12c>)
 80083b6:	e7f6      	b.n	80083a6 <__ieee754_atan2f+0x82>
 80083b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083bc:	d0df      	beq.n	800837e <__ieee754_atan2f+0x5a>
 80083be:	1a5b      	subs	r3, r3, r1
 80083c0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80083c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80083c8:	da1a      	bge.n	8008400 <__ieee754_atan2f+0xdc>
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	da01      	bge.n	80083d2 <__ieee754_atan2f+0xae>
 80083ce:	313c      	adds	r1, #60	; 0x3c
 80083d0:	db19      	blt.n	8008406 <__ieee754_atan2f+0xe2>
 80083d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80083d6:	f000 fdf9 	bl	8008fcc <fabsf>
 80083da:	f000 fd23 	bl	8008e24 <atanf>
 80083de:	eef0 7a40 	vmov.f32	s15, s0
 80083e2:	2c01      	cmp	r4, #1
 80083e4:	d012      	beq.n	800840c <__ieee754_atan2f+0xe8>
 80083e6:	2c02      	cmp	r4, #2
 80083e8:	d017      	beq.n	800841a <__ieee754_atan2f+0xf6>
 80083ea:	2c00      	cmp	r4, #0
 80083ec:	d0ad      	beq.n	800834a <__ieee754_atan2f+0x26>
 80083ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008454 <__ieee754_atan2f+0x130>
 80083f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083f6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008458 <__ieee754_atan2f+0x134>
 80083fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80083fe:	e7a4      	b.n	800834a <__ieee754_atan2f+0x26>
 8008400:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008444 <__ieee754_atan2f+0x120>
 8008404:	e7ed      	b.n	80083e2 <__ieee754_atan2f+0xbe>
 8008406:	eddf 7a15 	vldr	s15, [pc, #84]	; 800845c <__ieee754_atan2f+0x138>
 800840a:	e7ea      	b.n	80083e2 <__ieee754_atan2f+0xbe>
 800840c:	ee17 3a90 	vmov	r3, s15
 8008410:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	e797      	b.n	800834a <__ieee754_atan2f+0x26>
 800841a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008454 <__ieee754_atan2f+0x130>
 800841e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008422:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008458 <__ieee754_atan2f+0x134>
 8008426:	ee70 7a67 	vsub.f32	s15, s0, s15
 800842a:	e78e      	b.n	800834a <__ieee754_atan2f+0x26>
 800842c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008458 <__ieee754_atan2f+0x134>
 8008430:	e78b      	b.n	800834a <__ieee754_atan2f+0x26>
 8008432:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008460 <__ieee754_atan2f+0x13c>
 8008436:	e788      	b.n	800834a <__ieee754_atan2f+0x26>
 8008438:	eddf 7a08 	vldr	s15, [pc, #32]	; 800845c <__ieee754_atan2f+0x138>
 800843c:	e785      	b.n	800834a <__ieee754_atan2f+0x26>
 800843e:	bf00      	nop
 8008440:	c0490fdb 	.word	0xc0490fdb
 8008444:	3fc90fdb 	.word	0x3fc90fdb
 8008448:	bfc90fdb 	.word	0xbfc90fdb
 800844c:	0800916c 	.word	0x0800916c
 8008450:	08009178 	.word	0x08009178
 8008454:	33bbbd2e 	.word	0x33bbbd2e
 8008458:	40490fdb 	.word	0x40490fdb
 800845c:	00000000 	.word	0x00000000
 8008460:	3f490fdb 	.word	0x3f490fdb

08008464 <__ieee754_fmodf>:
 8008464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008466:	ee10 5a90 	vmov	r5, s1
 800846a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800846e:	d009      	beq.n	8008484 <__ieee754_fmodf+0x20>
 8008470:	ee10 2a10 	vmov	r2, s0
 8008474:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008478:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800847c:	da02      	bge.n	8008484 <__ieee754_fmodf+0x20>
 800847e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008482:	dd04      	ble.n	800848e <__ieee754_fmodf+0x2a>
 8008484:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008488:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800848e:	42a3      	cmp	r3, r4
 8008490:	dbfc      	blt.n	800848c <__ieee754_fmodf+0x28>
 8008492:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8008496:	d105      	bne.n	80084a4 <__ieee754_fmodf+0x40>
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <__ieee754_fmodf+0x100>)
 800849a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800849e:	ed93 0a00 	vldr	s0, [r3]
 80084a2:	e7f3      	b.n	800848c <__ieee754_fmodf+0x28>
 80084a4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80084a8:	d13f      	bne.n	800852a <__ieee754_fmodf+0xc6>
 80084aa:	0219      	lsls	r1, r3, #8
 80084ac:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80084b0:	2900      	cmp	r1, #0
 80084b2:	dc37      	bgt.n	8008524 <__ieee754_fmodf+0xc0>
 80084b4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80084b8:	d13d      	bne.n	8008536 <__ieee754_fmodf+0xd2>
 80084ba:	0227      	lsls	r7, r4, #8
 80084bc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80084c0:	2f00      	cmp	r7, #0
 80084c2:	da35      	bge.n	8008530 <__ieee754_fmodf+0xcc>
 80084c4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80084c8:	bfbb      	ittet	lt
 80084ca:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80084ce:	1a12      	sublt	r2, r2, r0
 80084d0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80084d4:	4093      	lsllt	r3, r2
 80084d6:	bfa8      	it	ge
 80084d8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80084dc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80084e0:	bfb5      	itete	lt
 80084e2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80084e6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80084ea:	1a52      	sublt	r2, r2, r1
 80084ec:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80084f0:	bfb8      	it	lt
 80084f2:	4094      	lsllt	r4, r2
 80084f4:	1a40      	subs	r0, r0, r1
 80084f6:	1b1a      	subs	r2, r3, r4
 80084f8:	bb00      	cbnz	r0, 800853c <__ieee754_fmodf+0xd8>
 80084fa:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80084fe:	bf38      	it	cc
 8008500:	4613      	movcc	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0c8      	beq.n	8008498 <__ieee754_fmodf+0x34>
 8008506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800850a:	db1f      	blt.n	800854c <__ieee754_fmodf+0xe8>
 800850c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008510:	db1f      	blt.n	8008552 <__ieee754_fmodf+0xee>
 8008512:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008516:	317f      	adds	r1, #127	; 0x7f
 8008518:	4333      	orrs	r3, r6
 800851a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800851e:	ee00 3a10 	vmov	s0, r3
 8008522:	e7b3      	b.n	800848c <__ieee754_fmodf+0x28>
 8008524:	3801      	subs	r0, #1
 8008526:	0049      	lsls	r1, r1, #1
 8008528:	e7c2      	b.n	80084b0 <__ieee754_fmodf+0x4c>
 800852a:	15d8      	asrs	r0, r3, #23
 800852c:	387f      	subs	r0, #127	; 0x7f
 800852e:	e7c1      	b.n	80084b4 <__ieee754_fmodf+0x50>
 8008530:	3901      	subs	r1, #1
 8008532:	007f      	lsls	r7, r7, #1
 8008534:	e7c4      	b.n	80084c0 <__ieee754_fmodf+0x5c>
 8008536:	15e1      	asrs	r1, r4, #23
 8008538:	397f      	subs	r1, #127	; 0x7f
 800853a:	e7c3      	b.n	80084c4 <__ieee754_fmodf+0x60>
 800853c:	2a00      	cmp	r2, #0
 800853e:	da02      	bge.n	8008546 <__ieee754_fmodf+0xe2>
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	3801      	subs	r0, #1
 8008544:	e7d7      	b.n	80084f6 <__ieee754_fmodf+0x92>
 8008546:	d0a7      	beq.n	8008498 <__ieee754_fmodf+0x34>
 8008548:	0053      	lsls	r3, r2, #1
 800854a:	e7fa      	b.n	8008542 <__ieee754_fmodf+0xde>
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	3901      	subs	r1, #1
 8008550:	e7d9      	b.n	8008506 <__ieee754_fmodf+0xa2>
 8008552:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008556:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800855a:	3182      	adds	r1, #130	; 0x82
 800855c:	410b      	asrs	r3, r1
 800855e:	4333      	orrs	r3, r6
 8008560:	e7dd      	b.n	800851e <__ieee754_fmodf+0xba>
 8008562:	bf00      	nop
 8008564:	08009184 	.word	0x08009184

08008568 <__ieee754_rem_pio2f>:
 8008568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800856a:	ee10 6a10 	vmov	r6, s0
 800856e:	4b8e      	ldr	r3, [pc, #568]	; (80087a8 <__ieee754_rem_pio2f+0x240>)
 8008570:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008574:	429d      	cmp	r5, r3
 8008576:	b087      	sub	sp, #28
 8008578:	eef0 7a40 	vmov.f32	s15, s0
 800857c:	4604      	mov	r4, r0
 800857e:	dc05      	bgt.n	800858c <__ieee754_rem_pio2f+0x24>
 8008580:	2300      	movs	r3, #0
 8008582:	ed80 0a00 	vstr	s0, [r0]
 8008586:	6043      	str	r3, [r0, #4]
 8008588:	2000      	movs	r0, #0
 800858a:	e01a      	b.n	80085c2 <__ieee754_rem_pio2f+0x5a>
 800858c:	4b87      	ldr	r3, [pc, #540]	; (80087ac <__ieee754_rem_pio2f+0x244>)
 800858e:	429d      	cmp	r5, r3
 8008590:	dc46      	bgt.n	8008620 <__ieee754_rem_pio2f+0xb8>
 8008592:	2e00      	cmp	r6, #0
 8008594:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80087b0 <__ieee754_rem_pio2f+0x248>
 8008598:	4b86      	ldr	r3, [pc, #536]	; (80087b4 <__ieee754_rem_pio2f+0x24c>)
 800859a:	f025 050f 	bic.w	r5, r5, #15
 800859e:	dd1f      	ble.n	80085e0 <__ieee754_rem_pio2f+0x78>
 80085a0:	429d      	cmp	r5, r3
 80085a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085a6:	d00e      	beq.n	80085c6 <__ieee754_rem_pio2f+0x5e>
 80085a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80087b8 <__ieee754_rem_pio2f+0x250>
 80085ac:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80085b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085b4:	ed80 0a00 	vstr	s0, [r0]
 80085b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085bc:	2001      	movs	r0, #1
 80085be:	edc4 7a01 	vstr	s15, [r4, #4]
 80085c2:	b007      	add	sp, #28
 80085c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80087bc <__ieee754_rem_pio2f+0x254>
 80085ca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80087c0 <__ieee754_rem_pio2f+0x258>
 80085ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80085d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085da:	edc0 6a00 	vstr	s13, [r0]
 80085de:	e7eb      	b.n	80085b8 <__ieee754_rem_pio2f+0x50>
 80085e0:	429d      	cmp	r5, r3
 80085e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085e6:	d00e      	beq.n	8008606 <__ieee754_rem_pio2f+0x9e>
 80085e8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80087b8 <__ieee754_rem_pio2f+0x250>
 80085ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80085f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085f4:	ed80 0a00 	vstr	s0, [r0]
 80085f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	edc4 7a01 	vstr	s15, [r4, #4]
 8008604:	e7dd      	b.n	80085c2 <__ieee754_rem_pio2f+0x5a>
 8008606:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80087bc <__ieee754_rem_pio2f+0x254>
 800860a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80087c0 <__ieee754_rem_pio2f+0x258>
 800860e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008612:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800861a:	edc0 6a00 	vstr	s13, [r0]
 800861e:	e7eb      	b.n	80085f8 <__ieee754_rem_pio2f+0x90>
 8008620:	4b68      	ldr	r3, [pc, #416]	; (80087c4 <__ieee754_rem_pio2f+0x25c>)
 8008622:	429d      	cmp	r5, r3
 8008624:	dc72      	bgt.n	800870c <__ieee754_rem_pio2f+0x1a4>
 8008626:	f000 fcd1 	bl	8008fcc <fabsf>
 800862a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80087c8 <__ieee754_rem_pio2f+0x260>
 800862e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008632:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800863a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800863e:	ee17 0a90 	vmov	r0, s15
 8008642:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80087b0 <__ieee754_rem_pio2f+0x248>
 8008646:	eea7 0a67 	vfms.f32	s0, s14, s15
 800864a:	281f      	cmp	r0, #31
 800864c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80087b8 <__ieee754_rem_pio2f+0x250>
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	eeb1 6a47 	vneg.f32	s12, s14
 8008658:	ee70 6a67 	vsub.f32	s13, s0, s15
 800865c:	ee16 2a90 	vmov	r2, s13
 8008660:	dc1c      	bgt.n	800869c <__ieee754_rem_pio2f+0x134>
 8008662:	495a      	ldr	r1, [pc, #360]	; (80087cc <__ieee754_rem_pio2f+0x264>)
 8008664:	1e47      	subs	r7, r0, #1
 8008666:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800866a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800866e:	428b      	cmp	r3, r1
 8008670:	d014      	beq.n	800869c <__ieee754_rem_pio2f+0x134>
 8008672:	6022      	str	r2, [r4, #0]
 8008674:	ed94 7a00 	vldr	s14, [r4]
 8008678:	ee30 0a47 	vsub.f32	s0, s0, s14
 800867c:	2e00      	cmp	r6, #0
 800867e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008682:	ed84 0a01 	vstr	s0, [r4, #4]
 8008686:	da9c      	bge.n	80085c2 <__ieee754_rem_pio2f+0x5a>
 8008688:	eeb1 7a47 	vneg.f32	s14, s14
 800868c:	eeb1 0a40 	vneg.f32	s0, s0
 8008690:	ed84 7a00 	vstr	s14, [r4]
 8008694:	ed84 0a01 	vstr	s0, [r4, #4]
 8008698:	4240      	negs	r0, r0
 800869a:	e792      	b.n	80085c2 <__ieee754_rem_pio2f+0x5a>
 800869c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80086a0:	15eb      	asrs	r3, r5, #23
 80086a2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80086a6:	2d08      	cmp	r5, #8
 80086a8:	dde3      	ble.n	8008672 <__ieee754_rem_pio2f+0x10a>
 80086aa:	eddf 7a44 	vldr	s15, [pc, #272]	; 80087bc <__ieee754_rem_pio2f+0x254>
 80086ae:	eddf 5a44 	vldr	s11, [pc, #272]	; 80087c0 <__ieee754_rem_pio2f+0x258>
 80086b2:	eef0 6a40 	vmov.f32	s13, s0
 80086b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 80086be:	eea6 0a27 	vfma.f32	s0, s12, s15
 80086c2:	eef0 7a40 	vmov.f32	s15, s0
 80086c6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80086ca:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80086ce:	ee15 2a90 	vmov	r2, s11
 80086d2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80086d6:	1a5b      	subs	r3, r3, r1
 80086d8:	2b19      	cmp	r3, #25
 80086da:	dc04      	bgt.n	80086e6 <__ieee754_rem_pio2f+0x17e>
 80086dc:	edc4 5a00 	vstr	s11, [r4]
 80086e0:	eeb0 0a66 	vmov.f32	s0, s13
 80086e4:	e7c6      	b.n	8008674 <__ieee754_rem_pio2f+0x10c>
 80086e6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80087d0 <__ieee754_rem_pio2f+0x268>
 80086ea:	eeb0 0a66 	vmov.f32	s0, s13
 80086ee:	eea6 0a25 	vfma.f32	s0, s12, s11
 80086f2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80086f6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80087d4 <__ieee754_rem_pio2f+0x26c>
 80086fa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80086fe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008702:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008706:	ed84 7a00 	vstr	s14, [r4]
 800870a:	e7b3      	b.n	8008674 <__ieee754_rem_pio2f+0x10c>
 800870c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008710:	db06      	blt.n	8008720 <__ieee754_rem_pio2f+0x1b8>
 8008712:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008716:	edc0 7a01 	vstr	s15, [r0, #4]
 800871a:	edc0 7a00 	vstr	s15, [r0]
 800871e:	e733      	b.n	8008588 <__ieee754_rem_pio2f+0x20>
 8008720:	15ea      	asrs	r2, r5, #23
 8008722:	3a86      	subs	r2, #134	; 0x86
 8008724:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008730:	eddf 6a29 	vldr	s13, [pc, #164]	; 80087d8 <__ieee754_rem_pio2f+0x270>
 8008734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800873c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008744:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008748:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800874c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008750:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008754:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008758:	eef5 7a40 	vcmp.f32	s15, #0.0
 800875c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008760:	edcd 7a05 	vstr	s15, [sp, #20]
 8008764:	d11e      	bne.n	80087a4 <__ieee754_rem_pio2f+0x23c>
 8008766:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800876a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876e:	bf14      	ite	ne
 8008770:	2302      	movne	r3, #2
 8008772:	2301      	moveq	r3, #1
 8008774:	4919      	ldr	r1, [pc, #100]	; (80087dc <__ieee754_rem_pio2f+0x274>)
 8008776:	9101      	str	r1, [sp, #4]
 8008778:	2102      	movs	r1, #2
 800877a:	9100      	str	r1, [sp, #0]
 800877c:	a803      	add	r0, sp, #12
 800877e:	4621      	mov	r1, r4
 8008780:	f000 f892 	bl	80088a8 <__kernel_rem_pio2f>
 8008784:	2e00      	cmp	r6, #0
 8008786:	f6bf af1c 	bge.w	80085c2 <__ieee754_rem_pio2f+0x5a>
 800878a:	edd4 7a00 	vldr	s15, [r4]
 800878e:	eef1 7a67 	vneg.f32	s15, s15
 8008792:	edc4 7a00 	vstr	s15, [r4]
 8008796:	edd4 7a01 	vldr	s15, [r4, #4]
 800879a:	eef1 7a67 	vneg.f32	s15, s15
 800879e:	edc4 7a01 	vstr	s15, [r4, #4]
 80087a2:	e779      	b.n	8008698 <__ieee754_rem_pio2f+0x130>
 80087a4:	2303      	movs	r3, #3
 80087a6:	e7e5      	b.n	8008774 <__ieee754_rem_pio2f+0x20c>
 80087a8:	3f490fd8 	.word	0x3f490fd8
 80087ac:	4016cbe3 	.word	0x4016cbe3
 80087b0:	3fc90f80 	.word	0x3fc90f80
 80087b4:	3fc90fd0 	.word	0x3fc90fd0
 80087b8:	37354443 	.word	0x37354443
 80087bc:	37354400 	.word	0x37354400
 80087c0:	2e85a308 	.word	0x2e85a308
 80087c4:	43490f80 	.word	0x43490f80
 80087c8:	3f22f984 	.word	0x3f22f984
 80087cc:	0800918c 	.word	0x0800918c
 80087d0:	2e85a300 	.word	0x2e85a300
 80087d4:	248d3132 	.word	0x248d3132
 80087d8:	43800000 	.word	0x43800000
 80087dc:	0800920c 	.word	0x0800920c

080087e0 <__ieee754_sqrtf>:
 80087e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80087e4:	4770      	bx	lr
	...

080087e8 <__kernel_cosf>:
 80087e8:	ee10 3a10 	vmov	r3, s0
 80087ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80087f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087f8:	da05      	bge.n	8008806 <__kernel_cosf+0x1e>
 80087fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80087fe:	ee17 2a90 	vmov	r2, s15
 8008802:	2a00      	cmp	r2, #0
 8008804:	d03d      	beq.n	8008882 <__kernel_cosf+0x9a>
 8008806:	ee60 5a00 	vmul.f32	s11, s0, s0
 800880a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008888 <__kernel_cosf+0xa0>
 800880e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800888c <__kernel_cosf+0xa4>
 8008812:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008890 <__kernel_cosf+0xa8>
 8008816:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <__kernel_cosf+0xac>)
 8008818:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800881c:	4293      	cmp	r3, r2
 800881e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008898 <__kernel_cosf+0xb0>
 8008822:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008826:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800889c <__kernel_cosf+0xb4>
 800882a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800882e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80088a0 <__kernel_cosf+0xb8>
 8008832:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008836:	eeb0 7a66 	vmov.f32	s14, s13
 800883a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800883e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008842:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008846:	ee67 6a25 	vmul.f32	s13, s14, s11
 800884a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800884e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008852:	dc04      	bgt.n	800885e <__kernel_cosf+0x76>
 8008854:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008858:	ee36 0a47 	vsub.f32	s0, s12, s14
 800885c:	4770      	bx	lr
 800885e:	4a11      	ldr	r2, [pc, #68]	; (80088a4 <__kernel_cosf+0xbc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	bfda      	itte	le
 8008864:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008868:	ee06 3a90 	vmovle	s13, r3
 800886c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008870:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008874:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800887c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008880:	4770      	bx	lr
 8008882:	eeb0 0a46 	vmov.f32	s0, s12
 8008886:	4770      	bx	lr
 8008888:	ad47d74e 	.word	0xad47d74e
 800888c:	310f74f6 	.word	0x310f74f6
 8008890:	3d2aaaab 	.word	0x3d2aaaab
 8008894:	3e999999 	.word	0x3e999999
 8008898:	b493f27c 	.word	0xb493f27c
 800889c:	37d00d01 	.word	0x37d00d01
 80088a0:	bab60b61 	.word	0xbab60b61
 80088a4:	3f480000 	.word	0x3f480000

080088a8 <__kernel_rem_pio2f>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	ed2d 8b04 	vpush	{d8-d9}
 80088b0:	b0d9      	sub	sp, #356	; 0x164
 80088b2:	4688      	mov	r8, r1
 80088b4:	9002      	str	r0, [sp, #8]
 80088b6:	49bb      	ldr	r1, [pc, #748]	; (8008ba4 <__kernel_rem_pio2f+0x2fc>)
 80088b8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80088c0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80088c4:	1e59      	subs	r1, r3, #1
 80088c6:	1d13      	adds	r3, r2, #4
 80088c8:	db27      	blt.n	800891a <__kernel_rem_pio2f+0x72>
 80088ca:	f1b2 0b03 	subs.w	fp, r2, #3
 80088ce:	bf48      	it	mi
 80088d0:	f102 0b04 	addmi.w	fp, r2, #4
 80088d4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80088d8:	1c45      	adds	r5, r0, #1
 80088da:	00ec      	lsls	r4, r5, #3
 80088dc:	1a47      	subs	r7, r0, r1
 80088de:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 80088e2:	9403      	str	r4, [sp, #12]
 80088e4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80088e8:	eb0a 0c01 	add.w	ip, sl, r1
 80088ec:	ae1c      	add	r6, sp, #112	; 0x70
 80088ee:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80088f2:	2400      	movs	r4, #0
 80088f4:	4564      	cmp	r4, ip
 80088f6:	dd12      	ble.n	800891e <__kernel_rem_pio2f+0x76>
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	ac1c      	add	r4, sp, #112	; 0x70
 80088fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008900:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008904:	f04f 0c00 	mov.w	ip, #0
 8008908:	45d4      	cmp	ip, sl
 800890a:	dc27      	bgt.n	800895c <__kernel_rem_pio2f+0xb4>
 800890c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008910:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 8008914:	4627      	mov	r7, r4
 8008916:	2600      	movs	r6, #0
 8008918:	e016      	b.n	8008948 <__kernel_rem_pio2f+0xa0>
 800891a:	2000      	movs	r0, #0
 800891c:	e7dc      	b.n	80088d8 <__kernel_rem_pio2f+0x30>
 800891e:	42e7      	cmn	r7, r4
 8008920:	bf5d      	ittte	pl
 8008922:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008926:	ee07 3a90 	vmovpl	s15, r3
 800892a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800892e:	eef0 7a47 	vmovmi.f32	s15, s14
 8008932:	ece6 7a01 	vstmia	r6!, {s15}
 8008936:	3401      	adds	r4, #1
 8008938:	e7dc      	b.n	80088f4 <__kernel_rem_pio2f+0x4c>
 800893a:	ecf9 6a01 	vldmia	r9!, {s13}
 800893e:	ed97 7a00 	vldr	s14, [r7]
 8008942:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008946:	3601      	adds	r6, #1
 8008948:	428e      	cmp	r6, r1
 800894a:	f1a7 0704 	sub.w	r7, r7, #4
 800894e:	ddf4      	ble.n	800893a <__kernel_rem_pio2f+0x92>
 8008950:	eceb 7a01 	vstmia	fp!, {s15}
 8008954:	f10c 0c01 	add.w	ip, ip, #1
 8008958:	3404      	adds	r4, #4
 800895a:	e7d5      	b.n	8008908 <__kernel_rem_pio2f+0x60>
 800895c:	ab08      	add	r3, sp, #32
 800895e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008962:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008bb0 <__kernel_rem_pio2f+0x308>
 8008966:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008bac <__kernel_rem_pio2f+0x304>
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008970:	4656      	mov	r6, sl
 8008972:	00b3      	lsls	r3, r6, #2
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	ab58      	add	r3, sp, #352	; 0x160
 8008978:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800897c:	ac08      	add	r4, sp, #32
 800897e:	ab44      	add	r3, sp, #272	; 0x110
 8008980:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008984:	46a4      	mov	ip, r4
 8008986:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800898a:	4637      	mov	r7, r6
 800898c:	2f00      	cmp	r7, #0
 800898e:	f1a0 0004 	sub.w	r0, r0, #4
 8008992:	dc4f      	bgt.n	8008a34 <__kernel_rem_pio2f+0x18c>
 8008994:	4628      	mov	r0, r5
 8008996:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800899a:	f000 fb61 	bl	8009060 <scalbnf>
 800899e:	eeb0 8a40 	vmov.f32	s16, s0
 80089a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80089a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80089aa:	f000 fb17 	bl	8008fdc <floorf>
 80089ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80089b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80089bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80089c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80089c4:	ee17 9a90 	vmov	r9, s15
 80089c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80089cc:	dd44      	ble.n	8008a58 <__kernel_rem_pio2f+0x1b0>
 80089ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80089d2:	ab08      	add	r3, sp, #32
 80089d4:	f1c5 0e08 	rsb	lr, r5, #8
 80089d8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80089dc:	fa47 f00e 	asr.w	r0, r7, lr
 80089e0:	4481      	add	r9, r0
 80089e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80089e6:	1a3f      	subs	r7, r7, r0
 80089e8:	f1c5 0007 	rsb	r0, r5, #7
 80089ec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80089f0:	4107      	asrs	r7, r0
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	dd3f      	ble.n	8008a76 <__kernel_rem_pio2f+0x1ce>
 80089f6:	f04f 0e00 	mov.w	lr, #0
 80089fa:	f109 0901 	add.w	r9, r9, #1
 80089fe:	4673      	mov	r3, lr
 8008a00:	4576      	cmp	r6, lr
 8008a02:	dc6b      	bgt.n	8008adc <__kernel_rem_pio2f+0x234>
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	dd04      	ble.n	8008a12 <__kernel_rem_pio2f+0x16a>
 8008a08:	2d01      	cmp	r5, #1
 8008a0a:	d078      	beq.n	8008afe <__kernel_rem_pio2f+0x256>
 8008a0c:	2d02      	cmp	r5, #2
 8008a0e:	f000 8081 	beq.w	8008b14 <__kernel_rem_pio2f+0x26c>
 8008a12:	2f02      	cmp	r7, #2
 8008a14:	d12f      	bne.n	8008a76 <__kernel_rem_pio2f+0x1ce>
 8008a16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a1a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008a1e:	b353      	cbz	r3, 8008a76 <__kernel_rem_pio2f+0x1ce>
 8008a20:	4628      	mov	r0, r5
 8008a22:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008a26:	f000 fb1b 	bl	8009060 <scalbnf>
 8008a2a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008a2e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008a32:	e020      	b.n	8008a76 <__kernel_rem_pio2f+0x1ce>
 8008a34:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008a38:	3f01      	subs	r7, #1
 8008a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a42:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008a46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a4a:	ecac 0a01 	vstmia	ip!, {s0}
 8008a4e:	ed90 0a00 	vldr	s0, [r0]
 8008a52:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008a56:	e799      	b.n	800898c <__kernel_rem_pio2f+0xe4>
 8008a58:	d105      	bne.n	8008a66 <__kernel_rem_pio2f+0x1be>
 8008a5a:	1e70      	subs	r0, r6, #1
 8008a5c:	ab08      	add	r3, sp, #32
 8008a5e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008a62:	11ff      	asrs	r7, r7, #7
 8008a64:	e7c5      	b.n	80089f2 <__kernel_rem_pio2f+0x14a>
 8008a66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a72:	da31      	bge.n	8008ad8 <__kernel_rem_pio2f+0x230>
 8008a74:	2700      	movs	r7, #0
 8008a76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7e:	f040 809b 	bne.w	8008bb8 <__kernel_rem_pio2f+0x310>
 8008a82:	1e74      	subs	r4, r6, #1
 8008a84:	46a4      	mov	ip, r4
 8008a86:	2000      	movs	r0, #0
 8008a88:	45d4      	cmp	ip, sl
 8008a8a:	da4a      	bge.n	8008b22 <__kernel_rem_pio2f+0x27a>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d07a      	beq.n	8008b86 <__kernel_rem_pio2f+0x2de>
 8008a90:	ab08      	add	r3, sp, #32
 8008a92:	3d08      	subs	r5, #8
 8008a94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8081 	beq.w	8008ba0 <__kernel_rem_pio2f+0x2f8>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008aa4:	00a5      	lsls	r5, r4, #2
 8008aa6:	f000 fadb 	bl	8009060 <scalbnf>
 8008aaa:	aa44      	add	r2, sp, #272	; 0x110
 8008aac:	1d2b      	adds	r3, r5, #4
 8008aae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008bb0 <__kernel_rem_pio2f+0x308>
 8008ab2:	18d1      	adds	r1, r2, r3
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	f280 80ae 	bge.w	8008c18 <__kernel_rem_pio2f+0x370>
 8008abc:	4622      	mov	r2, r4
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	f2c0 80cc 	blt.w	8008c5c <__kernel_rem_pio2f+0x3b4>
 8008ac4:	a944      	add	r1, sp, #272	; 0x110
 8008ac6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008aca:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008ba8 <__kernel_rem_pio2f+0x300>
 8008ace:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	1aa1      	subs	r1, r4, r2
 8008ad6:	e0b6      	b.n	8008c46 <__kernel_rem_pio2f+0x39e>
 8008ad8:	2702      	movs	r7, #2
 8008ada:	e78c      	b.n	80089f6 <__kernel_rem_pio2f+0x14e>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	b94b      	cbnz	r3, 8008af4 <__kernel_rem_pio2f+0x24c>
 8008ae0:	b118      	cbz	r0, 8008aea <__kernel_rem_pio2f+0x242>
 8008ae2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008ae6:	6020      	str	r0, [r4, #0]
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f10e 0e01 	add.w	lr, lr, #1
 8008aee:	3404      	adds	r4, #4
 8008af0:	4603      	mov	r3, r0
 8008af2:	e785      	b.n	8008a00 <__kernel_rem_pio2f+0x158>
 8008af4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008af8:	6020      	str	r0, [r4, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	e7f5      	b.n	8008aea <__kernel_rem_pio2f+0x242>
 8008afe:	1e74      	subs	r4, r6, #1
 8008b00:	a808      	add	r0, sp, #32
 8008b02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008b06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008b0a:	f10d 0c20 	add.w	ip, sp, #32
 8008b0e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008b12:	e77e      	b.n	8008a12 <__kernel_rem_pio2f+0x16a>
 8008b14:	1e74      	subs	r4, r6, #1
 8008b16:	a808      	add	r0, sp, #32
 8008b18:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008b1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008b20:	e7f3      	b.n	8008b0a <__kernel_rem_pio2f+0x262>
 8008b22:	ab08      	add	r3, sp, #32
 8008b24:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008b28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b2c:	4318      	orrs	r0, r3
 8008b2e:	e7ab      	b.n	8008a88 <__kernel_rem_pio2f+0x1e0>
 8008b30:	f10c 0c01 	add.w	ip, ip, #1
 8008b34:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008b38:	2c00      	cmp	r4, #0
 8008b3a:	d0f9      	beq.n	8008b30 <__kernel_rem_pio2f+0x288>
 8008b3c:	9b05      	ldr	r3, [sp, #20]
 8008b3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008b42:	eb0d 0003 	add.w	r0, sp, r3
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	18f4      	adds	r4, r6, r3
 8008b4a:	ab1c      	add	r3, sp, #112	; 0x70
 8008b4c:	1c77      	adds	r7, r6, #1
 8008b4e:	384c      	subs	r0, #76	; 0x4c
 8008b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b54:	4466      	add	r6, ip
 8008b56:	42be      	cmp	r6, r7
 8008b58:	f6ff af0b 	blt.w	8008972 <__kernel_rem_pio2f+0xca>
 8008b5c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008b60:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b6c:	f04f 0c00 	mov.w	ip, #0
 8008b70:	ece4 7a01 	vstmia	r4!, {s15}
 8008b74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 8008b78:	46a1      	mov	r9, r4
 8008b7a:	458c      	cmp	ip, r1
 8008b7c:	dd07      	ble.n	8008b8e <__kernel_rem_pio2f+0x2e6>
 8008b7e:	ece0 7a01 	vstmia	r0!, {s15}
 8008b82:	3701      	adds	r7, #1
 8008b84:	e7e7      	b.n	8008b56 <__kernel_rem_pio2f+0x2ae>
 8008b86:	9804      	ldr	r0, [sp, #16]
 8008b88:	f04f 0c01 	mov.w	ip, #1
 8008b8c:	e7d2      	b.n	8008b34 <__kernel_rem_pio2f+0x28c>
 8008b8e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008b92:	ed39 7a01 	vldmdb	r9!, {s14}
 8008b96:	f10c 0c01 	add.w	ip, ip, #1
 8008b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008b9e:	e7ec      	b.n	8008b7a <__kernel_rem_pio2f+0x2d2>
 8008ba0:	3c01      	subs	r4, #1
 8008ba2:	e775      	b.n	8008a90 <__kernel_rem_pio2f+0x1e8>
 8008ba4:	08009550 	.word	0x08009550
 8008ba8:	08009524 	.word	0x08009524
 8008bac:	43800000 	.word	0x43800000
 8008bb0:	3b800000 	.word	0x3b800000
 8008bb4:	00000000 	.word	0x00000000
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	eeb0 0a48 	vmov.f32	s0, s16
 8008bbe:	1a98      	subs	r0, r3, r2
 8008bc0:	f000 fa4e 	bl	8009060 <scalbnf>
 8008bc4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008bac <__kernel_rem_pio2f+0x304>
 8008bc8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd0:	db19      	blt.n	8008c06 <__kernel_rem_pio2f+0x35e>
 8008bd2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008bb0 <__kernel_rem_pio2f+0x308>
 8008bd6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008bda:	aa08      	add	r2, sp, #32
 8008bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008be0:	1c74      	adds	r4, r6, #1
 8008be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008be6:	3508      	adds	r5, #8
 8008be8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bf4:	ee10 3a10 	vmov	r3, s0
 8008bf8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008bfc:	ee17 3a90 	vmov	r3, s15
 8008c00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008c04:	e74b      	b.n	8008a9e <__kernel_rem_pio2f+0x1f6>
 8008c06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008c0a:	aa08      	add	r2, sp, #32
 8008c0c:	ee10 3a10 	vmov	r3, s0
 8008c10:	4634      	mov	r4, r6
 8008c12:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008c16:	e742      	b.n	8008a9e <__kernel_rem_pio2f+0x1f6>
 8008c18:	a808      	add	r0, sp, #32
 8008c1a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008c1e:	9001      	str	r0, [sp, #4]
 8008c20:	ee07 0a90 	vmov	s15, r0
 8008c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c28:	3a01      	subs	r2, #1
 8008c2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008c2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008c32:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c36:	e73e      	b.n	8008ab6 <__kernel_rem_pio2f+0x20e>
 8008c38:	ecfc 6a01 	vldmia	ip!, {s13}
 8008c3c:	ecb6 7a01 	vldmia	r6!, {s14}
 8008c40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c44:	3001      	adds	r0, #1
 8008c46:	4550      	cmp	r0, sl
 8008c48:	dc01      	bgt.n	8008c4e <__kernel_rem_pio2f+0x3a6>
 8008c4a:	4288      	cmp	r0, r1
 8008c4c:	ddf4      	ble.n	8008c38 <__kernel_rem_pio2f+0x390>
 8008c4e:	a858      	add	r0, sp, #352	; 0x160
 8008c50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c54:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008c58:	3a01      	subs	r2, #1
 8008c5a:	e730      	b.n	8008abe <__kernel_rem_pio2f+0x216>
 8008c5c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008c5e:	2a02      	cmp	r2, #2
 8008c60:	dc09      	bgt.n	8008c76 <__kernel_rem_pio2f+0x3ce>
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	dc2a      	bgt.n	8008cbc <__kernel_rem_pio2f+0x414>
 8008c66:	d043      	beq.n	8008cf0 <__kernel_rem_pio2f+0x448>
 8008c68:	f009 0007 	and.w	r0, r9, #7
 8008c6c:	b059      	add	sp, #356	; 0x164
 8008c6e:	ecbd 8b04 	vpop	{d8-d9}
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d1f5      	bne.n	8008c68 <__kernel_rem_pio2f+0x3c0>
 8008c7c:	ab30      	add	r3, sp, #192	; 0xc0
 8008c7e:	442b      	add	r3, r5
 8008c80:	461a      	mov	r2, r3
 8008c82:	4619      	mov	r1, r3
 8008c84:	4620      	mov	r0, r4
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f1a1 0104 	sub.w	r1, r1, #4
 8008c8c:	dc51      	bgt.n	8008d32 <__kernel_rem_pio2f+0x48a>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	2901      	cmp	r1, #1
 8008c92:	f1a2 0204 	sub.w	r2, r2, #4
 8008c96:	dc5c      	bgt.n	8008d52 <__kernel_rem_pio2f+0x4aa>
 8008c98:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	2c01      	cmp	r4, #1
 8008ca0:	dc67      	bgt.n	8008d72 <__kernel_rem_pio2f+0x4ca>
 8008ca2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008ca6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008caa:	2f00      	cmp	r7, #0
 8008cac:	d167      	bne.n	8008d7e <__kernel_rem_pio2f+0x4d6>
 8008cae:	edc8 6a00 	vstr	s13, [r8]
 8008cb2:	ed88 7a01 	vstr	s14, [r8, #4]
 8008cb6:	edc8 7a02 	vstr	s15, [r8, #8]
 8008cba:	e7d5      	b.n	8008c68 <__kernel_rem_pio2f+0x3c0>
 8008cbc:	aa30      	add	r2, sp, #192	; 0xc0
 8008cbe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 8008cc2:	4413      	add	r3, r2
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	da24      	bge.n	8008d14 <__kernel_rem_pio2f+0x46c>
 8008cca:	b34f      	cbz	r7, 8008d20 <__kernel_rem_pio2f+0x478>
 8008ccc:	eef1 7a47 	vneg.f32	s15, s14
 8008cd0:	edc8 7a00 	vstr	s15, [r8]
 8008cd4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cdc:	aa31      	add	r2, sp, #196	; 0xc4
 8008cde:	2301      	movs	r3, #1
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	da20      	bge.n	8008d26 <__kernel_rem_pio2f+0x47e>
 8008ce4:	b10f      	cbz	r7, 8008cea <__kernel_rem_pio2f+0x442>
 8008ce6:	eef1 7a67 	vneg.f32	s15, s15
 8008cea:	edc8 7a01 	vstr	s15, [r8, #4]
 8008cee:	e7bb      	b.n	8008c68 <__kernel_rem_pio2f+0x3c0>
 8008cf0:	aa30      	add	r2, sp, #192	; 0xc0
 8008cf2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008bb4 <__kernel_rem_pio2f+0x30c>
 8008cf6:	4413      	add	r3, r2
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	da05      	bge.n	8008d08 <__kernel_rem_pio2f+0x460>
 8008cfc:	b10f      	cbz	r7, 8008d02 <__kernel_rem_pio2f+0x45a>
 8008cfe:	eef1 7a67 	vneg.f32	s15, s15
 8008d02:	edc8 7a00 	vstr	s15, [r8]
 8008d06:	e7af      	b.n	8008c68 <__kernel_rem_pio2f+0x3c0>
 8008d08:	ed33 7a01 	vldmdb	r3!, {s14}
 8008d0c:	3c01      	subs	r4, #1
 8008d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d12:	e7f1      	b.n	8008cf8 <__kernel_rem_pio2f+0x450>
 8008d14:	ed73 7a01 	vldmdb	r3!, {s15}
 8008d18:	3a01      	subs	r2, #1
 8008d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d1e:	e7d2      	b.n	8008cc6 <__kernel_rem_pio2f+0x41e>
 8008d20:	eef0 7a47 	vmov.f32	s15, s14
 8008d24:	e7d4      	b.n	8008cd0 <__kernel_rem_pio2f+0x428>
 8008d26:	ecb2 7a01 	vldmia	r2!, {s14}
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d30:	e7d6      	b.n	8008ce0 <__kernel_rem_pio2f+0x438>
 8008d32:	edd1 7a00 	vldr	s15, [r1]
 8008d36:	edd1 6a01 	vldr	s13, [r1, #4]
 8008d3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d3e:	3801      	subs	r0, #1
 8008d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d44:	ed81 7a00 	vstr	s14, [r1]
 8008d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4c:	edc1 7a01 	vstr	s15, [r1, #4]
 8008d50:	e799      	b.n	8008c86 <__kernel_rem_pio2f+0x3de>
 8008d52:	edd2 7a00 	vldr	s15, [r2]
 8008d56:	edd2 6a01 	vldr	s13, [r2, #4]
 8008d5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d5e:	3901      	subs	r1, #1
 8008d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d64:	ed82 7a00 	vstr	s14, [r2]
 8008d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6c:	edc2 7a01 	vstr	s15, [r2, #4]
 8008d70:	e78e      	b.n	8008c90 <__kernel_rem_pio2f+0x3e8>
 8008d72:	ed33 7a01 	vldmdb	r3!, {s14}
 8008d76:	3c01      	subs	r4, #1
 8008d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d7c:	e78f      	b.n	8008c9e <__kernel_rem_pio2f+0x3f6>
 8008d7e:	eef1 6a66 	vneg.f32	s13, s13
 8008d82:	eeb1 7a47 	vneg.f32	s14, s14
 8008d86:	edc8 6a00 	vstr	s13, [r8]
 8008d8a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008d8e:	eef1 7a67 	vneg.f32	s15, s15
 8008d92:	e790      	b.n	8008cb6 <__kernel_rem_pio2f+0x40e>

08008d94 <__kernel_sinf>:
 8008d94:	ee10 3a10 	vmov	r3, s0
 8008d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008da0:	da04      	bge.n	8008dac <__kernel_sinf+0x18>
 8008da2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008da6:	ee17 3a90 	vmov	r3, s15
 8008daa:	b35b      	cbz	r3, 8008e04 <__kernel_sinf+0x70>
 8008dac:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008db0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008e08 <__kernel_sinf+0x74>
 8008db4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008e0c <__kernel_sinf+0x78>
 8008db8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008dbc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008e10 <__kernel_sinf+0x7c>
 8008dc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008dc4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008e14 <__kernel_sinf+0x80>
 8008dc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008dcc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008e18 <__kernel_sinf+0x84>
 8008dd0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008dd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008dd8:	b930      	cbnz	r0, 8008de8 <__kernel_sinf+0x54>
 8008dda:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008e1c <__kernel_sinf+0x88>
 8008dde:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008de2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008de6:	4770      	bx	lr
 8008de8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008dec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008df0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008df4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008df8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008e20 <__kernel_sinf+0x8c>
 8008dfc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008e00:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	2f2ec9d3 	.word	0x2f2ec9d3
 8008e0c:	b2d72f34 	.word	0xb2d72f34
 8008e10:	3638ef1b 	.word	0x3638ef1b
 8008e14:	b9500d01 	.word	0xb9500d01
 8008e18:	3c088889 	.word	0x3c088889
 8008e1c:	be2aaaab 	.word	0xbe2aaaab
 8008e20:	3e2aaaab 	.word	0x3e2aaaab

08008e24 <atanf>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	ee10 5a10 	vmov	r5, s0
 8008e2a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008e2e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008e32:	eef0 7a40 	vmov.f32	s15, s0
 8008e36:	db10      	blt.n	8008e5a <atanf+0x36>
 8008e38:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008e3c:	dd04      	ble.n	8008e48 <atanf+0x24>
 8008e3e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008e42:	eeb0 0a67 	vmov.f32	s0, s15
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008f80 <atanf+0x15c>
 8008e4c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008f84 <atanf+0x160>
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	bfd8      	it	le
 8008e54:	eef0 7a40 	vmovle.f32	s15, s0
 8008e58:	e7f3      	b.n	8008e42 <atanf+0x1e>
 8008e5a:	4b4b      	ldr	r3, [pc, #300]	; (8008f88 <atanf+0x164>)
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	dc10      	bgt.n	8008e82 <atanf+0x5e>
 8008e60:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008e64:	da0a      	bge.n	8008e7c <atanf+0x58>
 8008e66:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008f8c <atanf+0x168>
 8008e6a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e72:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7a:	dce2      	bgt.n	8008e42 <atanf+0x1e>
 8008e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e80:	e013      	b.n	8008eaa <atanf+0x86>
 8008e82:	f000 f8a3 	bl	8008fcc <fabsf>
 8008e86:	4b42      	ldr	r3, [pc, #264]	; (8008f90 <atanf+0x16c>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	dc4f      	bgt.n	8008f2c <atanf+0x108>
 8008e8c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008e90:	429c      	cmp	r4, r3
 8008e92:	dc41      	bgt.n	8008f18 <atanf+0xf4>
 8008e94:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008e98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008e9c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ea6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008eb0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008f94 <atanf+0x170>
 8008eb4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008f98 <atanf+0x174>
 8008eb8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008f9c <atanf+0x178>
 8008ebc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008ec0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008ec4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008fa0 <atanf+0x17c>
 8008ec8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008ecc:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008fa4 <atanf+0x180>
 8008ed0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008ed4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008fa8 <atanf+0x184>
 8008ed8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008edc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fac <atanf+0x188>
 8008ee0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008ee4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008fb0 <atanf+0x18c>
 8008ee8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008eec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008fb4 <atanf+0x190>
 8008ef0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008ef4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008fb8 <atanf+0x194>
 8008ef8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008efc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008fbc <atanf+0x198>
 8008f00:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008f08:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f10:	d121      	bne.n	8008f56 <atanf+0x132>
 8008f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f16:	e794      	b.n	8008e42 <atanf+0x1e>
 8008f18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008f20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f24:	2301      	movs	r3, #1
 8008f26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f2a:	e7be      	b.n	8008eaa <atanf+0x86>
 8008f2c:	4b24      	ldr	r3, [pc, #144]	; (8008fc0 <atanf+0x19c>)
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	dc0b      	bgt.n	8008f4a <atanf+0x126>
 8008f32:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008f3e:	2302      	movs	r3, #2
 8008f40:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f48:	e7af      	b.n	8008eaa <atanf+0x86>
 8008f4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f52:	2303      	movs	r3, #3
 8008f54:	e7a9      	b.n	8008eaa <atanf+0x86>
 8008f56:	4a1b      	ldr	r2, [pc, #108]	; (8008fc4 <atanf+0x1a0>)
 8008f58:	491b      	ldr	r1, [pc, #108]	; (8008fc8 <atanf+0x1a4>)
 8008f5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008f5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008f62:	ed93 0a00 	vldr	s0, [r3]
 8008f66:	ee37 7a40 	vsub.f32	s14, s14, s0
 8008f6a:	ed92 0a00 	vldr	s0, [r2]
 8008f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008f78:	bfb8      	it	lt
 8008f7a:	eef1 7a67 	vneglt.f32	s15, s15
 8008f7e:	e760      	b.n	8008e42 <atanf+0x1e>
 8008f80:	3fc90fdb 	.word	0x3fc90fdb
 8008f84:	bfc90fdb 	.word	0xbfc90fdb
 8008f88:	3edfffff 	.word	0x3edfffff
 8008f8c:	7149f2ca 	.word	0x7149f2ca
 8008f90:	3f97ffff 	.word	0x3f97ffff
 8008f94:	3c8569d7 	.word	0x3c8569d7
 8008f98:	3d4bda59 	.word	0x3d4bda59
 8008f9c:	bd6ef16b 	.word	0xbd6ef16b
 8008fa0:	3d886b35 	.word	0x3d886b35
 8008fa4:	3dba2e6e 	.word	0x3dba2e6e
 8008fa8:	3e124925 	.word	0x3e124925
 8008fac:	3eaaaaab 	.word	0x3eaaaaab
 8008fb0:	bd15a221 	.word	0xbd15a221
 8008fb4:	bd9d8795 	.word	0xbd9d8795
 8008fb8:	bde38e38 	.word	0xbde38e38
 8008fbc:	be4ccccd 	.word	0xbe4ccccd
 8008fc0:	401bffff 	.word	0x401bffff
 8008fc4:	0800955c 	.word	0x0800955c
 8008fc8:	0800956c 	.word	0x0800956c

08008fcc <fabsf>:
 8008fcc:	ee10 3a10 	vmov	r3, s0
 8008fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fd4:	ee00 3a10 	vmov	s0, r3
 8008fd8:	4770      	bx	lr
	...

08008fdc <floorf>:
 8008fdc:	ee10 3a10 	vmov	r3, s0
 8008fe0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008fe4:	3a7f      	subs	r2, #127	; 0x7f
 8008fe6:	2a16      	cmp	r2, #22
 8008fe8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fec:	dc2a      	bgt.n	8009044 <floorf+0x68>
 8008fee:	2a00      	cmp	r2, #0
 8008ff0:	da11      	bge.n	8009016 <floorf+0x3a>
 8008ff2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009054 <floorf+0x78>
 8008ff6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ffa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	dd05      	ble.n	8009010 <floorf+0x34>
 8009004:	2b00      	cmp	r3, #0
 8009006:	da23      	bge.n	8009050 <floorf+0x74>
 8009008:	4a13      	ldr	r2, [pc, #76]	; (8009058 <floorf+0x7c>)
 800900a:	2900      	cmp	r1, #0
 800900c:	bf18      	it	ne
 800900e:	4613      	movne	r3, r2
 8009010:	ee00 3a10 	vmov	s0, r3
 8009014:	4770      	bx	lr
 8009016:	4911      	ldr	r1, [pc, #68]	; (800905c <floorf+0x80>)
 8009018:	4111      	asrs	r1, r2
 800901a:	420b      	tst	r3, r1
 800901c:	d0fa      	beq.n	8009014 <floorf+0x38>
 800901e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009054 <floorf+0x78>
 8009022:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009026:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902e:	ddef      	ble.n	8009010 <floorf+0x34>
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfbe      	ittt	lt
 8009034:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009038:	fa40 f202 	asrlt.w	r2, r0, r2
 800903c:	189b      	addlt	r3, r3, r2
 800903e:	ea23 0301 	bic.w	r3, r3, r1
 8009042:	e7e5      	b.n	8009010 <floorf+0x34>
 8009044:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009048:	d3e4      	bcc.n	8009014 <floorf+0x38>
 800904a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800904e:	4770      	bx	lr
 8009050:	2300      	movs	r3, #0
 8009052:	e7dd      	b.n	8009010 <floorf+0x34>
 8009054:	7149f2ca 	.word	0x7149f2ca
 8009058:	bf800000 	.word	0xbf800000
 800905c:	007fffff 	.word	0x007fffff

08009060 <scalbnf>:
 8009060:	ee10 3a10 	vmov	r3, s0
 8009064:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009068:	d025      	beq.n	80090b6 <scalbnf+0x56>
 800906a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800906e:	d302      	bcc.n	8009076 <scalbnf+0x16>
 8009070:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009074:	4770      	bx	lr
 8009076:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800907a:	d122      	bne.n	80090c2 <scalbnf+0x62>
 800907c:	4b2a      	ldr	r3, [pc, #168]	; (8009128 <scalbnf+0xc8>)
 800907e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800912c <scalbnf+0xcc>
 8009082:	4298      	cmp	r0, r3
 8009084:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009088:	db16      	blt.n	80090b8 <scalbnf+0x58>
 800908a:	ee10 3a10 	vmov	r3, s0
 800908e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009092:	3a19      	subs	r2, #25
 8009094:	4402      	add	r2, r0
 8009096:	2afe      	cmp	r2, #254	; 0xfe
 8009098:	dd15      	ble.n	80090c6 <scalbnf+0x66>
 800909a:	ee10 3a10 	vmov	r3, s0
 800909e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009130 <scalbnf+0xd0>
 80090a2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009134 <scalbnf+0xd4>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	eeb0 7a67 	vmov.f32	s14, s15
 80090ac:	bfb8      	it	lt
 80090ae:	eef0 7a66 	vmovlt.f32	s15, s13
 80090b2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80090b6:	4770      	bx	lr
 80090b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009138 <scalbnf+0xd8>
 80090bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80090c0:	4770      	bx	lr
 80090c2:	0dd2      	lsrs	r2, r2, #23
 80090c4:	e7e6      	b.n	8009094 <scalbnf+0x34>
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	dd06      	ble.n	80090d8 <scalbnf+0x78>
 80090ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80090d2:	ee00 3a10 	vmov	s0, r3
 80090d6:	4770      	bx	lr
 80090d8:	f112 0f16 	cmn.w	r2, #22
 80090dc:	da1a      	bge.n	8009114 <scalbnf+0xb4>
 80090de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80090e2:	4298      	cmp	r0, r3
 80090e4:	ee10 3a10 	vmov	r3, s0
 80090e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ec:	dd0a      	ble.n	8009104 <scalbnf+0xa4>
 80090ee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009130 <scalbnf+0xd0>
 80090f2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009134 <scalbnf+0xd4>
 80090f6:	eef0 7a40 	vmov.f32	s15, s0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bf18      	it	ne
 80090fe:	eeb0 0a47 	vmovne.f32	s0, s14
 8009102:	e7db      	b.n	80090bc <scalbnf+0x5c>
 8009104:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009138 <scalbnf+0xd8>
 8009108:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800913c <scalbnf+0xdc>
 800910c:	eef0 7a40 	vmov.f32	s15, s0
 8009110:	2b00      	cmp	r3, #0
 8009112:	e7f3      	b.n	80090fc <scalbnf+0x9c>
 8009114:	3219      	adds	r2, #25
 8009116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800911a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800911e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009140 <scalbnf+0xe0>
 8009122:	ee07 3a10 	vmov	s14, r3
 8009126:	e7c4      	b.n	80090b2 <scalbnf+0x52>
 8009128:	ffff3cb0 	.word	0xffff3cb0
 800912c:	4c000000 	.word	0x4c000000
 8009130:	7149f2ca 	.word	0x7149f2ca
 8009134:	f149f2ca 	.word	0xf149f2ca
 8009138:	0da24260 	.word	0x0da24260
 800913c:	8da24260 	.word	0x8da24260
 8009140:	33000000 	.word	0x33000000

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
