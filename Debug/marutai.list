
marutai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e4  080095e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080095e4  080095e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095e4  080095e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080095ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  0800965c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800965c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a73  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3c  00000000  00000000  00033b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00036550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00037848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028831  00000000  00000000  000389e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001576c  00000000  00000000  00061211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c911  00000000  00000000  0007697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018328e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ac  00000000  00000000  001832e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080091ac 	.word	0x080091ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080091ac 	.word	0x080091ac

08000218 <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000222:	edc7 0a02 	vstr	s1, [r7, #8]
 8000226:	ed87 1a01 	vstr	s2, [r7, #4]
 800022a:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	ed93 7a00 	vldr	s14, [r3]
 8000232:	edd7 6a03 	vldr	s13, [r7, #12]
 8000236:	edd7 7a01 	vldr	s15, [r7, #4]
 800023a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800023e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000248:	ed97 7a02 	vldr	s14, [r7, #8]
 800024c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	edd3 7a00 	vldr	s15, [r3]
 800025a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800025e:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	ee07 3a90 	vmov	s15, r3
}
 8000268:	eeb0 0a67 	vmov.f32	s0, s15
 800026c:	371c      	adds	r7, #28
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 8000276:	b480      	push	{r7}
 8000278:	b087      	sub	sp, #28
 800027a:	af00      	add	r7, sp, #0
 800027c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000280:	edc7 0a02 	vstr	s1, [r7, #8]
 8000284:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 8000288:	edd7 7a02 	vldr	s15, [r7, #8]
 800028c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000294:	db0b      	blt.n	80002ae <gfDivideAvoidZero+0x38>
 8000296:	ed97 7a02 	vldr	s14, [r7, #8]
 800029a:	edd7 7a01 	vldr	s15, [r7, #4]
 800029e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a6:	d502      	bpl.n	80002ae <gfDivideAvoidZero+0x38>
		den = threshold;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	e017      	b.n	80002de <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80002ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80002b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ba:	d510      	bpl.n	80002de <gfDivideAvoidZero+0x68>
 80002bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80002c0:	eef1 7a67 	vneg.f32	s15, s15
 80002c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80002c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d0:	dd05      	ble.n	80002de <gfDivideAvoidZero+0x68>
		den = -threshold;
 80002d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80002d6:	eef1 7a67 	vneg.f32	s15, s15
 80002da:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80002de:	edd7 6a03 	vldr	s13, [r7, #12]
 80002e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80002e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002ea:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	ee07 3a90 	vmov	s15, r3
}
 80002f4:	eeb0 0a67 	vmov.f32	s0, s15
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 800030e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000374 <gfWrapTheta+0x70>
 8000312:	ed97 0a01 	vldr	s0, [r7, #4]
 8000316:	f007 fffb 	bl	8008310 <fmodf>
 800031a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 800031e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000322:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000378 <gfWrapTheta+0x74>
 8000326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032e:	dd08      	ble.n	8000342 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000330:	edd7 7a01 	vldr	s15, [r7, #4]
 8000334:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000374 <gfWrapTheta+0x70>
 8000338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800033c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000340:	e010      	b.n	8000364 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000342:	edd7 7a01 	vldr	s15, [r7, #4]
 8000346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800037c <gfWrapTheta+0x78>
 800034a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000352:	d507      	bpl.n	8000364 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000354:	edd7 7a01 	vldr	s15, [r7, #4]
 8000358:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000374 <gfWrapTheta+0x70>
 800035c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000360:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	ee07 3a90 	vmov	s15, r3
}
 800036a:	eeb0 0a67 	vmov.f32	s0, s15
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40c90fdb 	.word	0x40c90fdb
 8000378:	40490fdb 	.word	0x40490fdb
 800037c:	c0490fdb 	.word	0xc0490fdb

08000380 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a03 	vstr	s0, [r7, #12]
 800038a:	edc7 0a02 	vstr	s1, [r7, #8]
 800038e:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000392:	ed97 7a03 	vldr	s14, [r7, #12]
 8000396:	edd7 7a02 	vldr	s15, [r7, #8]
 800039a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a2:	dd01      	ble.n	80003a8 <gUpperLowerLimit+0x28>
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80003a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80003ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80003b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b8:	d501      	bpl.n	80003be <gUpperLowerLimit+0x3e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	return input;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	ee07 3a90 	vmov	s15, r3
}
 80003c4:	eeb0 0a67 	vmov.f32	s0, s15
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	3302      	adds	r3, #2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	f04f 0200 	mov.w	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3308      	adds	r3, #8
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800041a:	b480      	push	{r7}
 800041c:	b087      	sub	sp, #28
 800041e:	af00      	add	r7, sp, #0
 8000420:	ed87 0a03 	vstr	s0, [r7, #12]
 8000424:	edc7 0a02 	vstr	s1, [r7, #8]
 8000428:	ed87 1a01 	vstr	s2, [r7, #4]
 800042c:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 800042e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000432:	edd7 7a01 	vldr	s15, [r7, #4]
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000448:	edd7 7a05 	vldr	s15, [r7, #20]
 800044c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000450:	edd7 7a04 	vldr	s15, [r7, #16]
 8000454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000458:	edd7 6a05 	vldr	s13, [r7, #20]
 800045c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	edc3 7a00 	vstr	s15, [r3]
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <gRateLimit>:

void gRateLimit(float r, float RateLimit, float Ts, float *y){
 800047a:	b480      	push	{r7}
 800047c:	b089      	sub	sp, #36	; 0x24
 800047e:	af00      	add	r7, sp, #0
 8000480:	ed87 0a03 	vstr	s0, [r7, #12]
 8000484:	edc7 0a02 	vstr	s1, [r7, #8]
 8000488:	ed87 1a01 	vstr	s2, [r7, #4]
 800048c:	6038      	str	r0, [r7, #0]
	float dy;
	float yn_1;
	float ytmp;

	dy = RateLimit * Ts;
 800048e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000492:	edd7 7a01 	vldr	s15, [r7, #4]
 8000496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800049a:	edc7 7a06 	vstr	s15, [r7, #24]
	yn_1 = *y;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]

	if( r > yn_1 )
 80004a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80004a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80004ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004b4:	dd08      	ble.n	80004c8 <gRateLimit+0x4e>
		ytmp = yn_1 + dy;
 80004b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80004ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80004be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80004c6:	e010      	b.n	80004ea <gRateLimit+0x70>
	else if( r < yn_1 )
 80004c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80004cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80004d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	d507      	bpl.n	80004ea <gRateLimit+0x70>
		ytmp = yn_1 - dy;
 80004da:	ed97 7a05 	vldr	s14, [r7, #20]
 80004de:	edd7 7a06 	vldr	s15, [r7, #24]
 80004e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004e6:	edc7 7a07 	vstr	s15, [r7, #28]

	//ytmp = gUpperLowerLimit(ytmp, r, -1.0f * r);

	*y = ytmp;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	601a      	str	r2, [r3, #0]

}
 80004f0:	bf00      	nop
 80004f2:	3724      	adds	r7, #36	; 0x24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b08d      	sub	sp, #52	; 0x34
 8000500:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t posMode_pre;
	uint8_t drvMode_pre;


	//read IO signals
	gButton1 = readButton1();
 8000502:	f000 fb59 	bl	8000bb8 <readButton1>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b5e      	ldr	r3, [pc, #376]	; (8000684 <Sequence_Low_Freq+0x188>)
 800050c:	701a      	strb	r2, [r3, #0]
	gVolume = 0; //readVolume();
 800050e:	4b5e      	ldr	r3, [pc, #376]	; (8000688 <Sequence_Low_Freq+0x18c>)
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	// readHallSignal(gHall);
	// readElectFreqFromHallSignal(&gElectFreq);

	sSensData.Vdc = 10.0f;//readVdc();
 8000516:	4b5d      	ldr	r3, [pc, #372]	; (800068c <Sequence_Low_Freq+0x190>)
 8000518:	4a5d      	ldr	r2, [pc, #372]	; (8000690 <Sequence_Low_Freq+0x194>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 800051c:	4b5b      	ldr	r3, [pc, #364]	; (800068c <Sequence_Low_Freq+0x190>)
 800051e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000522:	485c      	ldr	r0, [pc, #368]	; (8000694 <Sequence_Low_Freq+0x198>)
 8000524:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8000698 <Sequence_Low_Freq+0x19c>
 8000528:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800069c <Sequence_Low_Freq+0x1a0>
 800052c:	eeb0 0a67 	vmov.f32	s0, s15
 8000530:	f7ff ff73 	bl	800041a <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 8000534:	4b55      	ldr	r3, [pc, #340]	; (800068c <Sequence_Low_Freq+0x190>)
 8000536:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800053a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800053e:	eef0 0a67 	vmov.f32	s1, s15
 8000542:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000546:	f7ff fe96 	bl	8000276 <gfDivideAvoidZero>
 800054a:	eef0 7a40 	vmov.f32	s15, s0
 800054e:	4b4f      	ldr	r3, [pc, #316]	; (800068c <Sequence_Low_Freq+0x190>)
 8000550:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 8000554:	4b52      	ldr	r3, [pc, #328]	; (80006a0 <Sequence_Low_Freq+0x1a4>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b28      	cmp	r3, #40	; 0x28
 800055a:	d85b      	bhi.n	8000614 <Sequence_Low_Freq+0x118>
		sInitCnt++;
 800055c:	4b50      	ldr	r3, [pc, #320]	; (80006a0 <Sequence_Low_Freq+0x1a4>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b4e      	ldr	r3, [pc, #312]	; (80006a0 <Sequence_Low_Freq+0x1a4>)
 8000566:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000568:	4b4e      	ldr	r3, [pc, #312]	; (80006a4 <Sequence_Low_Freq+0x1a8>)
 800056a:	2202      	movs	r2, #2
 800056c:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800056e:	4b4e      	ldr	r3, [pc, #312]	; (80006a8 <Sequence_Low_Freq+0x1ac>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000574:	4b4d      	ldr	r3, [pc, #308]	; (80006ac <Sequence_Low_Freq+0x1b0>)
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	601a      	str	r2, [r3, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 800057c:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <Sequence_Low_Freq+0x1a4>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d80c      	bhi.n	800059e <Sequence_Low_Freq+0xa2>
			sSensData.Iuvw_AD_Offset[0] = 0.0f;
 8000584:	4b41      	ldr	r3, [pc, #260]	; (800068c <Sequence_Low_Freq+0x190>)
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] = 0.0f;
 800058c:	4b3f      	ldr	r3, [pc, #252]	; (800068c <Sequence_Low_Freq+0x190>)
 800058e:	f04f 0200 	mov.w	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] = 0.0f;
 8000594:	4b3d      	ldr	r3, [pc, #244]	; (800068c <Sequence_Low_Freq+0x190>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 800059c:	e06d      	b.n	800067a <Sequence_Low_Freq+0x17e>
		else if(sInitCnt <= INITCNTST1 + INITCNTST2){
 800059e:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <Sequence_Low_Freq+0x1a4>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	2b29      	cmp	r3, #41	; 0x29
 80005a4:	d869      	bhi.n	800067a <Sequence_Low_Freq+0x17e>
			sSensData.Iuvw_AD_Offset[0] += (float)sSensData.Iuvw_AD[0] * ONEDIVINITCNTST2;
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <Sequence_Low_Freq+0x190>)
 80005a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80005ac:	4b37      	ldr	r3, [pc, #220]	; (800068c <Sequence_Low_Freq+0x190>)
 80005ae:	8a9b      	ldrh	r3, [r3, #20]
 80005b0:	ee07 3a90 	vmov	s15, r3
 80005b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005b8:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80006b0 <Sequence_Low_Freq+0x1b4>
 80005bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80005c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <Sequence_Low_Freq+0x190>)
 80005c6:	edc3 7a07 	vstr	s15, [r3, #28]
			sSensData.Iuvw_AD_Offset[1] += (float)sSensData.Iuvw_AD[1] * ONEDIVINITCNTST2;
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <Sequence_Low_Freq+0x190>)
 80005cc:	ed93 7a08 	vldr	s14, [r3, #32]
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <Sequence_Low_Freq+0x190>)
 80005d2:	8adb      	ldrh	r3, [r3, #22]
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005dc:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80006b0 <Sequence_Low_Freq+0x1b4>
 80005e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80005e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <Sequence_Low_Freq+0x190>)
 80005ea:	edc3 7a08 	vstr	s15, [r3, #32]
			sSensData.Iuvw_AD_Offset[2] += (float)sSensData.Iuvw_AD[2] * ONEDIVINITCNTST2;
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <Sequence_Low_Freq+0x190>)
 80005f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <Sequence_Low_Freq+0x190>)
 80005f6:	8b1b      	ldrh	r3, [r3, #24]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000600:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80006b0 <Sequence_Low_Freq+0x1b4>
 8000604:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <Sequence_Low_Freq+0x190>)
 800060e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000612:	e032      	b.n	800067a <Sequence_Low_Freq+0x17e>
		posMode_pre = sPosMode;
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <Sequence_Low_Freq+0x1a8>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	71fb      	strb	r3, [r7, #7]
		drvMode_pre = sDrvMode;
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <Sequence_Low_Freq+0x1ac>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	71bb      	strb	r3, [r7, #6]
		slctPosMode(gElectFreq, &sPosMode);
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <Sequence_Low_Freq+0x1b8>)
 8000622:	edd3 7a00 	vldr	s15, [r3]
 8000626:	481f      	ldr	r0, [pc, #124]	; (80006a4 <Sequence_Low_Freq+0x1a8>)
 8000628:	eeb0 0a67 	vmov.f32	s0, s15
 800062c:	f000 f898 	bl	8000760 <slctPosMode>
		slctDrvMode(gElectFreq, &sDrvMode);
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Sequence_Low_Freq+0x1b8>)
 8000632:	edd3 7a00 	vldr	s15, [r3]
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <Sequence_Low_Freq+0x1ac>)
 8000638:	eeb0 0a67 	vmov.f32	s0, s15
 800063c:	f000 f8c6 	bl	80007cc <slctDrvMode>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d113      	bne.n	800066e <Sequence_Low_Freq+0x172>
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <Sequence_Low_Freq+0x1ac>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d10f      	bne.n	800066e <Sequence_Low_Freq+0x172>
			InitVectorControl(sSensData, &sVectorControlData);
 800064e:	4e0f      	ldr	r6, [pc, #60]	; (800068c <Sequence_Low_Freq+0x190>)
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <Sequence_Low_Freq+0x1bc>)
 8000652:	9309      	str	r3, [sp, #36]	; 0x24
 8000654:	466d      	mov	r5, sp
 8000656:	f106 0410 	add.w	r4, r6, #16
 800065a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800065c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	602b      	str	r3, [r5, #0]
 8000666:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800066a:	f000 fe81 	bl	8001370 <InitVectorControl>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <Sequence_Low_Freq+0x1ac>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4911      	ldr	r1, [pc, #68]	; (80006b8 <Sequence_Low_Freq+0x1bc>)
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fa27 	bl	8000ac8 <calcCurrentRef>
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000682:	bf00      	nop
 8000684:	2000008f 	.word	0x2000008f
 8000688:	20000094 	.word	0x20000094
 800068c:	200000b4 	.word	0x200000b4
 8000690:	41200000 	.word	0x41200000
 8000694:	200000e0 	.word	0x200000e0
 8000698:	3a83126f 	.word	0x3a83126f
 800069c:	42fb3333 	.word	0x42fb3333
 80006a0:	2000009a 	.word	0x2000009a
 80006a4:	20000098 	.word	0x20000098
 80006a8:	20000099 	.word	0x20000099
 80006ac:	200000a0 	.word	0x200000a0
 80006b0:	42200000 	.word	0x42200000
 80006b4:	20000090 	.word	0x20000090
 80006b8:	200000e8 	.word	0x200000e8

080006bc <Sequence_High_Freq>:

void Sequence_High_Freq(void){
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	b08f      	sub	sp, #60	; 0x3c
 80006c0:	af0e      	add	r7, sp, #56	; 0x38
	// clear Free Running Counter
	// writeFreeRunCnt(ZERO);

	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <Sequence_High_Freq+0x78>)
 80006c4:	491c      	ldr	r1, [pc, #112]	; (8000738 <Sequence_High_Freq+0x7c>)
 80006c6:	481d      	ldr	r0, [pc, #116]	; (800073c <Sequence_High_Freq+0x80>)
 80006c8:	f000 fa84 	bl	8000bd4 <readCurrent>

	// for debug
	sPosMode = POSMODE_FREERUN;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <Sequence_High_Freq+0x84>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
	sDrvMode = DRVMODE_OPENLOOP;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <Sequence_High_Freq+0x88>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]
	sElectAngVeloRefRateLimit = 300;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <Sequence_High_Freq+0x8c>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <Sequence_High_Freq+0x90>)
 80006dc:	601a      	str	r2, [r3, #0]


	slctElectAngleFromPosMode(sPosMode, &sSensData);
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <Sequence_High_Freq+0x84>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	491b      	ldr	r1, [pc, #108]	; (8000750 <Sequence_High_Freq+0x94>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f8ab 	bl	8000840 <slctElectAngleFromPosMode>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, sOutputMode);
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <Sequence_High_Freq+0x88>)
 80006ec:	f893 c000 	ldrb.w	ip, [r3]
 80006f0:	4e17      	ldr	r6, [pc, #92]	; (8000750 <Sequence_High_Freq+0x94>)
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <Sequence_High_Freq+0x98>)
 80006f4:	930c      	str	r3, [sp, #48]	; 0x30
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <Sequence_High_Freq+0x9c>)
 80006f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <Sequence_High_Freq+0xa0>)
 80006fc:	930a      	str	r3, [sp, #40]	; 0x28
 80006fe:	466d      	mov	r5, sp
 8000700:	f106 040c 	add.w	r4, r6, #12
 8000704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000710:	e885 0003 	stmia.w	r5, {r0, r1}
 8000714:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000718:	4660      	mov	r0, ip
 800071a:	f000 f961 	bl	80009e0 <slctCntlFromDrvMode>

	writeOutputMode(sOutputMode);
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <Sequence_High_Freq+0x98>)
 8000720:	f000 faba 	bl	8000c98 <writeOutputMode>
	writeDuty(sDuty);
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <Sequence_High_Freq+0x9c>)
 8000726:	f000 faf9 	bl	8000d1c <writeDuty>

	// Calculate ProcessingLoad
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
 800072a:	bf00      	nop
 800072c:	3704      	adds	r7, #4
 800072e:	46bd      	mov	sp, r7
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	bf00      	nop
 8000734:	200000bc 	.word	0x200000bc
 8000738:	200000d0 	.word	0x200000d0
 800073c:	200000c8 	.word	0x200000c8
 8000740:	20000098 	.word	0x20000098
 8000744:	20000099 	.word	0x20000099
 8000748:	200000a0 	.word	0x200000a0
 800074c:	43960000 	.word	0x43960000
 8000750:	200000b4 	.word	0x200000b4
 8000754:	200000a4 	.word	0x200000a4
 8000758:	200000a8 	.word	0x200000a8
 800075c:	200000e8 	.word	0x200000e8

08000760 <slctPosMode>:
void inline slctPosMode(float electFreq, uint8_t* posMode){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	ed87 0a01 	vstr	s0, [r7, #4]
 800076a:	6038      	str	r0, [r7, #0]

	if(*posMode != POSMODE_HALL_PLL){
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d010      	beq.n	8000796 <slctPosMode+0x36>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000774:	edd7 7a01 	vldr	s15, [r7, #4]
 8000778:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800077c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000784:	dd03      	ble.n	800078e <slctPosMode+0x2e>
			*posMode = POSMODE_HALL_PLL;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2203      	movs	r2, #3
 800078a:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 800078c:	e017      	b.n	80007be <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2202      	movs	r2, #2
 8000792:	701a      	strb	r2, [r3, #0]
}
 8000794:	e013      	b.n	80007be <slctPosMode+0x5e>
	else if(*posMode == POSMODE_HALL_PLL){
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d10f      	bne.n	80007be <slctPosMode+0x5e>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 800079e:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80007a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ae:	d503      	bpl.n	80007b8 <slctPosMode+0x58>
			*posMode = POSMODE_HALL;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2202      	movs	r2, #2
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	e002      	b.n	80007be <slctPosMode+0x5e>
			*posMode = POSMODE_HALL_PLL;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2203      	movs	r2, #3
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <slctDrvMode>:

void inline slctDrvMode(float electFreq, uint8_t* drvMode){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80007d6:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d010      	beq.n	8000802 <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 80007e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80007e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000838 <slctDrvMode+0x6c>
 80007e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f0:	dd03      	ble.n	80007fa <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2204      	movs	r2, #4
 80007f6:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 80007f8:	e017      	b.n	800082a <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2202      	movs	r2, #2
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	e013      	b.n	800082a <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d10f      	bne.n	800082a <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 800080a:	edd7 7a01 	vldr	s15, [r7, #4]
 800080e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800083c <slctDrvMode+0x70>
 8000812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	d503      	bpl.n	8000824 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2202      	movs	r2, #2
 8000820:	701a      	strb	r2, [r3, #0]
}
 8000822:	e002      	b.n	800082a <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2204      	movs	r2, #4
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	42c80000 	.word	0x42c80000
 800083c:	42a00000 	.word	0x42a00000

08000840 <slctElectAngleFromPosMode>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData){
 8000840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000844:	b0a4      	sub	sp, #144	; 0x90
 8000846:	af1e      	add	r7, sp, #120	; 0x78
 8000848:	4603      	mov	r3, r0
 800084a:	6039      	str	r1, [r7, #0]
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t flgInit;
	uint8_t flgPLL;
	float electAngle;
	float electAngVelo;

	switch(posMode){
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b04      	cmp	r3, #4
 8000852:	f200 80a7 	bhi.w	80009a4 <slctElectAngleFromPosMode+0x164>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <slctElectAngleFromPosMode+0x1c>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	08000871 	.word	0x08000871
 8000860:	08000883 	.word	0x08000883
 8000864:	080008ff 	.word	0x080008ff
 8000868:	0800092b 	.word	0x0800092b
 800086c:	08000957 	.word	0x08000957
	case POSMODE_STOP:
		sensData->electAngle = 0.0f;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
		break;
 8000880:	e099      	b.n	80009b6 <slctElectAngleFromPosMode+0x176>

	case POSMODE_FREERUN:
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000882:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <slctElectAngleFromPosMode+0x180>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	605a      	str	r2, [r3, #4]
		sElectAngleFreerun += sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 800088a:	4b4d      	ldr	r3, [pc, #308]	; (80009c0 <slctElectAngleFromPosMode+0x180>)
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80009c4 <slctElectAngleFromPosMode+0x184>
 8000894:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000898:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <slctElectAngleFromPosMode+0x188>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <slctElectAngleFromPosMode+0x188>)
 80008a4:	edc3 7a00 	vstr	s15, [r3]
		sensData->electAngle = gfWrapTheta(sElectAngleFreerun);
 80008a8:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <slctElectAngleFromPosMode+0x188>)
 80008aa:	edd3 7a00 	vldr	s15, [r3]
 80008ae:	eeb0 0a67 	vmov.f32	s0, s15
 80008b2:	f7ff fd27 	bl	8000304 <gfWrapTheta>
 80008b6:	eef0 7a40 	vmov.f32	s15, s0
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	edc3 7a00 	vstr	s15, [r3]

		// For Sensorless Init
		flgInit = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 80008c4:	4e41      	ldr	r6, [pc, #260]	; (80009cc <slctElectAngleFromPosMode+0x18c>)
 80008c6:	f897 8017 	ldrb.w	r8, [r7, #23]
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <slctElectAngleFromPosMode+0x190>)
 80008cc:	931d      	str	r3, [sp, #116]	; 0x74
 80008ce:	4a41      	ldr	r2, [pc, #260]	; (80009d4 <slctElectAngleFromPosMode+0x194>)
 80008d0:	ab0a      	add	r3, sp, #40	; 0x28
 80008d2:	4611      	mov	r1, r2
 80008d4:	224c      	movs	r2, #76	; 0x4c
 80008d6:	4618      	mov	r0, r3
 80008d8:	f007 fc78 	bl	80081cc <memcpy>
 80008dc:	466d      	mov	r5, sp
 80008de:	f106 040c 	add.w	r4, r6, #12
 80008e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80008f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008f6:	4640      	mov	r0, r8
 80008f8:	f001 f9b2 	bl	8001c60 <calcElectAngleEstimate>
		break;
 80008fc:	e05b      	b.n	80009b6 <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL:
		flgPLL = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <slctElectAngleFromPosMode+0x198>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	7db9      	ldrb	r1, [r7, #22]
 8000912:	eeb0 0a67 	vmov.f32	s0, s15
 8000916:	4831      	ldr	r0, [pc, #196]	; (80009dc <slctElectAngleFromPosMode+0x19c>)
 8000918:	f000 fa42 	bl	8000da0 <calcElectAngle>
		sensData->electAngle = electAngle;
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	605a      	str	r2, [r3, #4]
		break;
 8000928:	e045      	b.n	80009b6 <slctElectAngleFromPosMode+0x176>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	75bb      	strb	r3, [r7, #22]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <slctElectAngleFromPosMode+0x198>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	f107 0210 	add.w	r2, r7, #16
 800093c:	7db9      	ldrb	r1, [r7, #22]
 800093e:	eeb0 0a67 	vmov.f32	s0, s15
 8000942:	4826      	ldr	r0, [pc, #152]	; (80009dc <slctElectAngleFromPosMode+0x19c>)
 8000944:	f000 fa2c 	bl	8000da0 <calcElectAngle>
		sensData->electAngle = electAngle;
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = electAngVelo;
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	605a      	str	r2, [r3, #4]
		break;
 8000954:	e02f      	b.n	80009b6 <slctElectAngleFromPosMode+0x176>
	case POSMODE_SENSORLESS:
		flgInit = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	75fb      	strb	r3, [r7, #23]
		calcElectAngleEstimate(flgInit, sSensData, sVectorControlData, &sElectAngleEstimateData);
 800095a:	4e1c      	ldr	r6, [pc, #112]	; (80009cc <slctElectAngleFromPosMode+0x18c>)
 800095c:	f897 8017 	ldrb.w	r8, [r7, #23]
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <slctElectAngleFromPosMode+0x190>)
 8000962:	931d      	str	r3, [sp, #116]	; 0x74
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <slctElectAngleFromPosMode+0x194>)
 8000966:	ab0a      	add	r3, sp, #40	; 0x28
 8000968:	4611      	mov	r1, r2
 800096a:	224c      	movs	r2, #76	; 0x4c
 800096c:	4618      	mov	r0, r3
 800096e:	f007 fc2d 	bl	80081cc <memcpy>
 8000972:	466d      	mov	r5, sp
 8000974:	f106 040c 	add.w	r4, r6, #12
 8000978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000984:	e885 0003 	stmia.w	r5, {r0, r1}
 8000988:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800098c:	4640      	mov	r0, r8
 800098e:	f001 f967 	bl	8001c60 <calcElectAngleEstimate>
		sensData->electAngle = sElectAngleEstimateData.electAngleEstimate;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <slctElectAngleFromPosMode+0x190>)
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <slctElectAngleFromPosMode+0x190>)
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	605a      	str	r2, [r3, #4]
		break;
 80009a2:	e008      	b.n	80009b6 <slctElectAngleFromPosMode+0x176>
	default:
		sensData->electAngle = 0.0f;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
		sensData->electAngVelo = 0.0f;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
		break;
 80009b4:	bf00      	nop
	}
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	45fa0000 	.word	0x45fa0000
 80009c8:	2000009c 	.word	0x2000009c
 80009cc:	200000b4 	.word	0x200000b4
 80009d0:	20000134 	.word	0x20000134
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	20000090 	.word	0x20000090
 80009dc:	2000008c 	.word	0x2000008c

080009e0 <slctCntlFromDrvMode>:

void inline slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80009e0:	b084      	sub	sp, #16
 80009e2:	b5b0      	push	{r4, r5, r7, lr}
 80009e4:	b090      	sub	sp, #64	; 0x40
 80009e6:	af0c      	add	r7, sp, #48	; 0x30
 80009e8:	4604      	mov	r4, r0
 80009ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80009ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80009f2:	4623      	mov	r3, r4
 80009f4:	71fb      	strb	r3, [r7, #7]

	float VamRef;
	float ModRef = 1.13;
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <slctCntlFromDrvMode+0xd4>)
 80009f8:	60fb      	str	r3, [r7, #12]
	if( sId_ref_i < -1.0f)
				sId_ref_i = -1.0f;

	Idq_ref[0] = sId_ref_i;*/

	switch(drvMode){
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d037      	beq.n	8000a70 <slctCntlFromDrvMode+0x90>
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	dc4a      	bgt.n	8000a9a <slctCntlFromDrvMode+0xba>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <slctCntlFromDrvMode+0x2e>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d005      	beq.n	8000a18 <slctCntlFromDrvMode+0x38>
 8000a0c:	e045      	b.n	8000a9a <slctCntlFromDrvMode+0xba>
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 8000a0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000a12:	f7ff fcde 	bl	80003d2 <gOffDuty>
			break;
 8000a16:	e045      	b.n	8000aa4 <slctCntlFromDrvMode+0xc4>
		case DRVMODE_OPENLOOP:
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * 0.05f * gButton1;//gVolume;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <slctCntlFromDrvMode+0xd8>)
 8000a1a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a1e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000abc <slctCntlFromDrvMode+0xdc>
 8000a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a26:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000ac0 <slctCntlFromDrvMode+0xe0>
 8000a2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <slctCntlFromDrvMode+0xe4>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a3e:	edc7 7a02 	vstr	s15, [r7, #8]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 8000a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a48:	930a      	str	r3, [sp, #40]	; 0x28
 8000a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a4e:	466d      	mov	r5, sp
 8000a50:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	602b      	str	r3, [r5, #0]
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a66:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a6a:	f000 fbf1 	bl	8001250 <OpenLoopTasks>
			break;
 8000a6e:	e019      	b.n	8000aa4 <slctCntlFromDrvMode+0xc4>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 8000a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a76:	930a      	str	r3, [sp, #40]	; 0x28
 8000a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a7c:	466d      	mov	r5, sp
 8000a7e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	602b      	str	r3, [r5, #0]
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	f000 fb46 	bl	8001124 <VectorControlTasks>
			break;
 8000a98:	e004      	b.n	8000aa4 <slctCntlFromDrvMode+0xc4>
		default :
			gOffDuty(Duty, outputMode);
 8000a9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000a9e:	f7ff fc98 	bl	80003d2 <gOffDuty>
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000aae:	b004      	add	sp, #16
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	3f90a3d7 	.word	0x3f90a3d7
 8000ab8:	200000b4 	.word	0x200000b4
 8000abc:	3f1cc471 	.word	0x3f1cc471
 8000ac0:	3d4ccccd 	.word	0x3d4ccccd
 8000ac4:	2000008f 	.word	0x2000008f

08000ac8 <calcCurrentRef>:

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
	switch(drvMode){
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d028      	beq.n	8000b2c <calcCurrentRef+0x64>
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	dc51      	bgt.n	8000b82 <calcCurrentRef+0xba>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <calcCurrentRef+0x20>
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d011      	beq.n	8000b0a <calcCurrentRef+0x42>
 8000ae6:	e04c      	b.n	8000b82 <calcCurrentRef+0xba>
		case DRVMODE_OFFDUTY:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
			break;
 8000b08:	e04c      	b.n	8000ba4 <calcCurrentRef+0xdc>
		case DRVMODE_OPENLOOP:
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	69da      	ldr	r2, [r3, #28]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	699a      	ldr	r2, [r3, #24]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	69da      	ldr	r2, [r3, #28]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	60da      	str	r2, [r3, #12]
			break;
 8000b2a:	e03b      	b.n	8000ba4 <calcCurrentRef+0xdc>
		case DRVMODE_VECTORCONTROL:
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <calcCurrentRef+0xe4>)
 8000b36:	edd3 7a00 	vldr	s15, [r3]
 8000b3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	edc3 7a01 	vstr	s15, [r3, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	edd3 7a00 	vldr	s15, [r3]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3308      	adds	r3, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000bb0 <calcCurrentRef+0xe8>
 8000b58:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000bb4 <calcCurrentRef+0xec>
 8000b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b60:	f7ff fc5b 	bl	800041a <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	330c      	adds	r3, #12
 8000b6e:	4618      	mov	r0, r3
 8000b70:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000bb0 <calcCurrentRef+0xe8>
 8000b74:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000bb4 <calcCurrentRef+0xec>
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	f7ff fc4d 	bl	800041a <gLPF>
			break;
 8000b80:	e010      	b.n	8000ba4 <calcCurrentRef+0xdc>
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	3a83126f 	.word	0x3a83126f
 8000bb4:	41fb53d1 	.word	0x41fb53d1

08000bb8 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = 1;//HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
	//B1 = 0b00000001 & (~B1);
	return B1;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	b2db      	uxtb	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000bee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bf2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	b292      	uxth	r2, r2
 8000bfc:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000bfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	b292      	uxth	r2, r2
 8000c0c:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c24:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c94 <readCurrent+0xc0>
 8000c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3302      	adds	r3, #2
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3304      	adds	r3, #4
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c94 <readCurrent+0xc0>
 8000c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c58:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3304      	adds	r3, #4
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3308      	adds	r3, #8
 8000c7a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000c94 <readCurrent+0xc0>
 8000c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c82:	edc3 7a00 	vstr	s15, [r3]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	bc71f4bc 	.word	0xbc71f4bc

08000c98 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d106      	bne.n	8000cb8 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <writeOutputMode+0x80>)
 8000cb2:	f004 fcff 	bl	80056b4 <HAL_GPIO_WritePin>
 8000cb6:	e005      	b.n	8000cc4 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	4816      	ldr	r0, [pc, #88]	; (8000d18 <writeOutputMode+0x80>)
 8000cc0:	f004 fcf8 	bl	80056b4 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d106      	bne.n	8000cde <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <writeOutputMode+0x80>)
 8000cd8:	f004 fcec 	bl	80056b4 <HAL_GPIO_WritePin>
 8000cdc:	e005      	b.n	8000cea <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <writeOutputMode+0x80>)
 8000ce6:	f004 fce5 	bl	80056b4 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d106      	bne.n	8000d04 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <writeOutputMode+0x80>)
 8000cfe:	f004 fcd9 	bl	80056b4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000d02:	e005      	b.n	8000d10 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <writeOutputMode+0x80>)
 8000d0c:	f004 fcd2 	bl	80056b4 <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000800 	.word	0x48000800

08000d1c <writeDuty>:

void writeDuty(float* Duty){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	ed93 7a00 	vldr	s14, [r3]
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <writeDuty+0x80>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <writeDuty+0x80>)
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	ee17 2a90 	vmov	r2, s15
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	ed93 7a00 	vldr	s14, [r3]
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <writeDuty+0x80>)
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <writeDuty+0x80>)
 8000d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d64:	ee17 2a90 	vmov	r2, s15
 8000d68:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	ed93 7a00 	vldr	s14, [r3]
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <writeDuty+0x80>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <writeDuty+0x80>)
 8000d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d88:	ee17 2a90 	vmov	r2, s15
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40012c00 	.word	0x40012c00

08000da0 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6178      	str	r0, [r7, #20]
 8000da8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8000db4:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <calcElectAngle+0x1f0>)
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 8000dc6:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8000f94 <calcElectAngle+0x1f4>
 8000dca:	eddf 0a73 	vldr	s1, [pc, #460]	; 8000f98 <calcElectAngle+0x1f8>
 8000dce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000dd2:	f7ff fad5 	bl	8000380 <gUpperLowerLimit>
 8000dd6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000dda:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <calcElectAngle+0x1f0>)
 8000ddc:	edd3 7a00 	vldr	s15, [r3]
 8000de0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000f9c <calcElectAngle+0x1fc>
 8000de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000dec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df8:	edc7 7a08 	vstr	s15, [r7, #32]
	Kp_PLL = wc_PLL;
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	61fb      	str	r3, [r7, #28]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8000e00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e04:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8000fa0 <calcElectAngle+0x200>
 8000e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e14:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	edc7 7a06 	vstr	s15, [r7, #24]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8000e20:	4b60      	ldr	r3, [pc, #384]	; (8000fa4 <calcElectAngle+0x204>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <calcElectAngle+0x208>)
 8000e26:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f000 f8d3 	bl	8000fd4 <calcVoltageMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <calcElectAngle+0x204>)
 8000e34:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <calcElectAngle+0x20c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a5d      	ldr	r2, [pc, #372]	; (8000fb0 <calcElectAngle+0x210>)
 8000e3c:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 8000e3e:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <calcElectAngle+0x208>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <calcElectAngle+0x204>)
 8000e44:	7811      	ldrb	r1, [r2, #0]
 8000e46:	4a5b      	ldr	r2, [pc, #364]	; (8000fb4 <calcElectAngle+0x214>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f909 	bl	8001060 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000e4e:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <calcElectAngle+0x204>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <calcElectAngle+0x214>)
 8000e54:	f992 2000 	ldrsb.w	r2, [r2]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f92c 	bl	80010b8 <calcElectAngleFromVoltageMode>
 8000e60:	eef0 7a40 	vmov.f32	s15, s0
 8000e64:	4b51      	ldr	r3, [pc, #324]	; (8000fac <calcElectAngle+0x20c>)
 8000e66:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000e6a:	4b50      	ldr	r3, [pc, #320]	; (8000fac <calcElectAngle+0x20c>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	eeb0 0a67 	vmov.f32	s0, s15
 8000e74:	f7ff fa46 	bl	8000304 <gfWrapTheta>
 8000e78:	eef0 7a40 	vmov.f32	s15, s0
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <calcElectAngle+0x20c>)
 8000e7e:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8000e82:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <calcElectAngle+0x218>)
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	4b4d      	ldr	r3, [pc, #308]	; (8000fbc <calcElectAngle+0x21c>)
 8000e88:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 8000e8a:	4a4b      	ldr	r2, [pc, #300]	; (8000fb8 <calcElectAngle+0x218>)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d163      	bne.n	8000f5e <calcElectAngle+0x1be>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <calcElectAngle+0x21c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d110      	bne.n	8000ec0 <calcElectAngle+0x120>
			sElectAngVeloEstimate = electFreq * TWOPI;
 8000e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ea2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000fc0 <calcElectAngle+0x220>
 8000ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <calcElectAngle+0x1f0>)
 8000eac:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <calcElectAngle+0x1f0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a43      	ldr	r2, [pc, #268]	; (8000fc4 <calcElectAngle+0x224>)
 8000eb6:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <calcElectAngle+0x20c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a42      	ldr	r2, [pc, #264]	; (8000fc8 <calcElectAngle+0x228>)
 8000ebe:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 8000ec0:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <calcElectAngle+0x1f0>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8000fcc <calcElectAngle+0x22c>
 8000eca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ece:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <calcElectAngle+0x228>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <calcElectAngle+0x228>)
 8000eda:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000ede:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <calcElectAngle+0x228>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee8:	f7ff fa0c 	bl	8000304 <gfWrapTheta>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <calcElectAngle+0x228>)
 8000ef2:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <calcElectAngle+0x20c>)
 8000ef8:	ed93 7a00 	vldr	s14, [r3]
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <calcElectAngle+0x210>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	d035      	beq.n	8000f78 <calcElectAngle+0x1d8>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <calcElectAngle+0x20c>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <calcElectAngle+0x228>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <calcElectAngle+0x230>)
 8000f1e:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <calcElectAngle+0x230>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	f7ff f9ea 	bl	8000304 <gfWrapTheta>
 8000f30:	eef0 7a40 	vmov.f32	s15, s0
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <calcElectAngle+0x230>)
 8000f36:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <calcElectAngle+0x230>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <calcElectAngle+0x224>)
 8000f42:	ed97 1a06 	vldr	s2, [r7, #24]
 8000f46:	edd7 0a07 	vldr	s1, [r7, #28]
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	f7ff f963 	bl	8000218 <cfPhaseLockedLoop>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <calcElectAngle+0x1f0>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
 8000f5c:	e00c      	b.n	8000f78 <calcElectAngle+0x1d8>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <calcElectAngle+0x20c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <calcElectAngle+0x228>)
 8000f64:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 8000f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f6a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fc0 <calcElectAngle+0x220>
 8000f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <calcElectAngle+0x1f0>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <calcElectAngle+0x228>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <calcElectAngle+0x1f0>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]


}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000015c 	.word	0x2000015c
 8000f94:	00000000 	.word	0x00000000
 8000f98:	43fa0000 	.word	0x43fa0000
 8000f9c:	3e22f983 	.word	0x3e22f983
 8000fa0:	3e4ccccd 	.word	0x3e4ccccd
 8000fa4:	20000144 	.word	0x20000144
 8000fa8:	20000145 	.word	0x20000145
 8000fac:	2000014c 	.word	0x2000014c
 8000fb0:	20000150 	.word	0x20000150
 8000fb4:	20000146 	.word	0x20000146
 8000fb8:	20000147 	.word	0x20000147
 8000fbc:	20000148 	.word	0x20000148
 8000fc0:	40c90fdb 	.word	0x40c90fdb
 8000fc4:	20000158 	.word	0x20000158
 8000fc8:	20000154 	.word	0x20000154
 8000fcc:	45fa0000 	.word	0x45fa0000
 8000fd0:	20000160 	.word	0x20000160

08000fd4 <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	3b01      	subs	r3, #1
 8001004:	2b05      	cmp	r3, #5
 8001006:	d821      	bhi.n	800104c <calcVoltageMode+0x78>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <calcVoltageMode+0x3c>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001047 	.word	0x08001047
 8001014:	0800102f 	.word	0x0800102f
 8001018:	08001029 	.word	0x08001029
 800101c:	0800103b 	.word	0x0800103b
 8001020:	08001041 	.word	0x08001041
 8001024:	08001035 	.word	0x08001035
	  case 3:
		voltageMode = 3;
 8001028:	2303      	movs	r3, #3
 800102a:	73fb      	strb	r3, [r7, #15]
		break;
 800102c:	e011      	b.n	8001052 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 800102e:	2304      	movs	r3, #4
 8001030:	73fb      	strb	r3, [r7, #15]
		break;
 8001032:	e00e      	b.n	8001052 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8001034:	2305      	movs	r3, #5
 8001036:	73fb      	strb	r3, [r7, #15]
		break;
 8001038:	e00b      	b.n	8001052 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 800103a:	2306      	movs	r3, #6
 800103c:	73fb      	strb	r3, [r7, #15]
		break;
 800103e:	e008      	b.n	8001052 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
		break;
 8001044:	e005      	b.n	8001052 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8001046:	2302      	movs	r3, #2
 8001048:	73fb      	strb	r3, [r7, #15]
		break;
 800104a:	e002      	b.n	8001052 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
	  break;
 8001050:	bf00      	nop
	}

	return voltageMode;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	603a      	str	r2, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	460b      	mov	r3, r1
 800106e:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001070:	79ba      	ldrb	r2, [r7, #6]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	2b01      	cmp	r3, #1
 8001080:	dd04      	ble.n	800108c <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	3b06      	subs	r3, #6
 8001086:	b2db      	uxtb	r3, r3
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e008      	b.n	800109e <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	da03      	bge.n	800109e <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3306      	adds	r3, #6
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	701a      	strb	r2, [r3, #0]

}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800111c <calcElectAngleFromVoltageMode+0x64>
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e2:	edc7 7a03 	vstr	s15, [r7, #12]

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 80010e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001120 <calcElectAngleFromVoltageMode+0x68>
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80010fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001102:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	ee07 3a90 	vmov	s15, r3
}
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	3f860a92 	.word	0x3f860a92
 8001120:	3f060a92 	.word	0x3f060a92

08001124 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001124:	b084      	sub	sp, #16
 8001126:	b5b0      	push	{r4, r5, r7, lr}
 8001128:	b08a      	sub	sp, #40	; 0x28
 800112a:	af0a      	add	r7, sp, #40	; 0x28
 800112c:	f107 0410 	add.w	r4, r7, #16
 8001130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800113a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800113c:	3301      	adds	r3, #1
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001144:	3302      	adds	r3, #2
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	493b      	ldr	r1, [pc, #236]	; (800123c <VectorControlTasks+0x118>)
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f941 	bl	80013d8 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001156:	edd7 7a04 	vldr	s15, [r7, #16]
 800115a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115c:	3310      	adds	r3, #16
 800115e:	4619      	mov	r1, r3
 8001160:	4836      	ldr	r0, [pc, #216]	; (800123c <VectorControlTasks+0x118>)
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	f000 f9d9 	bl	800151c <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 800116a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800116c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001172:	3318      	adds	r3, #24
 8001174:	4618      	mov	r0, r3
 8001176:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8001240 <VectorControlTasks+0x11c>
 800117a:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001244 <VectorControlTasks+0x120>
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	f7ff f94a 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8001186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001188:	edd3 7a05 	vldr	s15, [r3, #20]
 800118c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800118e:	331c      	adds	r3, #28
 8001190:	4618      	mov	r0, r3
 8001192:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001240 <VectorControlTasks+0x11c>
 8001196:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001244 <VectorControlTasks+0x120>
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f7ff f93c 	bl	800041a <gLPF>

	CurrentFbControl(sensData, vectorControlData);
 80011a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a4:	9309      	str	r3, [sp, #36]	; 0x24
 80011a6:	466d      	mov	r5, sp
 80011a8:	f107 0420 	add.w	r4, r7, #32
 80011ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	602b      	str	r3, [r5, #0]
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011be:	f000 fc13 	bl	80019e8 <CurrentFbControl>
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 80011c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011c4:	9309      	str	r3, [sp, #36]	; 0x24
 80011c6:	466d      	mov	r5, sp
 80011c8:	f107 0420 	add.w	r4, r7, #32
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	602b      	str	r3, [r5, #0]
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011de:	f000 fa27 	bl	8001630 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 80011e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e4:	9309      	str	r3, [sp, #36]	; 0x24
 80011e6:	466d      	mov	r5, sp
 80011e8:	f107 0420 	add.w	r4, r7, #32
 80011ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fe:	f000 fa4f 	bl	80016a0 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001202:	edd7 7a04 	vldr	s15, [r7, #16]
 8001206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001208:	3320      	adds	r3, #32
 800120a:	490f      	ldr	r1, [pc, #60]	; (8001248 <VectorControlTasks+0x124>)
 800120c:	4618      	mov	r0, r3
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	f000 fab5 	bl	8001780 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <VectorControlTasks+0x128>)
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <VectorControlTasks+0x124>)
 800121a:	f000 f93d 	bl	8001498 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800121e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001222:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <VectorControlTasks+0x128>)
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	f000 fae9 	bl	8001800 <Vuvw2Duty>

}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001236:	b004      	add	sp, #16
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000164 	.word	0x20000164
 8001240:	3903126f 	.word	0x3903126f
 8001244:	42fb3333 	.word	0x42fb3333
 8001248:	20000170 	.word	0x20000170
 800124c:	20000178 	.word	0x20000178

08001250 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8001250:	b084      	sub	sp, #16
 8001252:	b5b0      	push	{r4, r5, r7, lr}
 8001254:	b08c      	sub	sp, #48	; 0x30
 8001256:	af0a      	add	r7, sp, #40	; 0x28
 8001258:	ed87 0a01 	vstr	s0, [r7, #4]
 800125c:	f107 0418 	add.w	r4, r7, #24
 8001260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 800126a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126c:	3301      	adds	r3, #1
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001274:	3302      	adds	r3, #2
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <OpenLoopTasks+0x10c>)
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f8a9 	bl	80013d8 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001286:	edd7 7a06 	vldr	s15, [r7, #24]
 800128a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800128c:	3310      	adds	r3, #16
 800128e:	4619      	mov	r1, r3
 8001290:	4832      	ldr	r0, [pc, #200]	; (800135c <OpenLoopTasks+0x10c>)
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	f000 f941 	bl	800151c <ab2dq>
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 800129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129c:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a2:	3318      	adds	r3, #24
 80012a4:	4618      	mov	r0, r3
 80012a6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8001360 <OpenLoopTasks+0x110>
 80012aa:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8001364 <OpenLoopTasks+0x114>
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	f7ff f8b2 	bl	800041a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 80012b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012be:	331c      	adds	r3, #28
 80012c0:	4618      	mov	r0, r3
 80012c2:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001360 <OpenLoopTasks+0x110>
 80012c6:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001364 <OpenLoopTasks+0x114>
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	f7ff f8a4 	bl	800041a <gLPF>

	vectorControlData->Vdq[0] = 0.0f;
 80012d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
	vectorControlData->Vdq[1] = VamRef;
 80012da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24


	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 80012e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e2:	9309      	str	r3, [sp, #36]	; 0x24
 80012e4:	466d      	mov	r5, sp
 80012e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	602b      	str	r3, [r5, #0]
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fc:	f000 f998 	bl	8001630 <calcAmpPhaseModFromVoltVect>
	limitVoltVectAmp(sensData, vectorControlData);
 8001300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001302:	9309      	str	r3, [sp, #36]	; 0x24
 8001304:	466d      	mov	r5, sp
 8001306:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800130a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	602b      	str	r3, [r5, #0]
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131c:	f000 f9c0 	bl	80016a0 <limitVoltVectAmp>

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001320:	edd7 7a06 	vldr	s15, [r7, #24]
 8001324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001326:	3320      	adds	r3, #32
 8001328:	490f      	ldr	r1, [pc, #60]	; (8001368 <OpenLoopTasks+0x118>)
 800132a:	4618      	mov	r0, r3
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f000 fa26 	bl	8001780 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001334:	490d      	ldr	r1, [pc, #52]	; (800136c <OpenLoopTasks+0x11c>)
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <OpenLoopTasks+0x118>)
 8001338:	f000 f8ae 	bl	8001498 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001342:	480a      	ldr	r0, [pc, #40]	; (800136c <OpenLoopTasks+0x11c>)
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	f000 fa5a 	bl	8001800 <Vuvw2Duty>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001356:	b004      	add	sp, #16
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000164 	.word	0x20000164
 8001360:	3903126f 	.word	0x3903126f
 8001364:	42fb3333 	.word	0x42fb3333
 8001368:	20000170 	.word	0x20000170
 800136c:	20000178 	.word	0x20000178

08001370 <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001370:	b084      	sub	sp, #16
 8001372:	b5b0      	push	{r4, r5, r7, lr}
 8001374:	b08a      	sub	sp, #40	; 0x28
 8001376:	af0a      	add	r7, sp, #40	; 0x28
 8001378:	f107 0410 	add.w	r4, r7, #16
 800137c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	calcVdqFeedForword(sensData, vectorControlData);
 8001380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001382:	9309      	str	r3, [sp, #36]	; 0x24
 8001384:	466d      	mov	r5, sp
 8001386:	f107 0420 	add.w	r4, r7, #32
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	602b      	str	r3, [r5, #0]
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139c:	f000 fbcc 	bl	8001b38 <calcVdqFeedForword>
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 80013a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a2:	ed93 7a08 	vldr	s14, [r3, #32]
 80013a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 80013b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013be:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013d4:	b004      	add	sp, #16
 80013d6:	4770      	bx	lr

080013d8 <uvw2ab>:

static inline void uvw2ab(float* uvw, float* ab){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80013f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3308      	adds	r3, #8
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800148c <uvw2ab+0xb4>
 8001414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3304      	adds	r3, #4
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001490 <uvw2ab+0xb8>
 800142a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3308      	adds	r3, #8
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001490 <uvw2ab+0xb8>
 800143a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3304      	adds	r3, #4
 8001446:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800148c <uvw2ab+0xb4>
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3308      	adds	r3, #8
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3308      	adds	r3, #8
 8001474:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001494 <uvw2ab+0xbc>
 8001478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147c:	edc3 7a00 	vstr	s15, [r3]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	3f5105ec 	.word	0x3f5105ec
 8001490:	3f5db3d7 	.word	0x3f5db3d7
 8001494:	3f13cd3a 	.word	0x3f13cd3a

08001498 <ab2uvw>:

static inline void ab2uvw(float* ab, float* uvw){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001514 <ab2uvw+0x7c>
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80014c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001518 <ab2uvw+0x80>
 80014d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3304      	adds	r3, #4
 80014dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001514 <ab2uvw+0x7c>
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eeb1 7a67 	vneg.f32	s14, s15
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3304      	adds	r3, #4
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3308      	adds	r3, #8
 80014fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001502:	edc3 7a00 	vstr	s15, [r3]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	3f5105ec 	.word	0x3f5105ec
 8001518:	3f5db3d7 	.word	0x3f5db3d7

0800151c <ab2dq>:

static inline void ab2dq(float theta, float* ab, float* dq){
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	ed87 0a03 	vstr	s0, [r7, #12]
 8001526:	60b8      	str	r0, [r7, #8]
 8001528:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800152a:	ed97 0a03 	vldr	s0, [r7, #12]
 800152e:	f006 fea7 	bl	8008280 <sinf>
 8001532:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001536:	ed97 0a03 	vldr	s0, [r7, #12]
 800153a:	f006 fe5d 	bl	80081f8 <cosf>
 800153e:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	edd7 7a04 	vldr	s15, [r7, #16]
 800154c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	3304      	adds	r3, #4
 8001554:	edd3 6a00 	vldr	s13, [r3]
 8001558:	edd7 7a05 	vldr	s15, [r7, #20]
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb1 7a67 	vneg.f32	s14, s15
 8001574:	edd7 7a05 	vldr	s15, [r7, #20]
 8001578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3304      	adds	r3, #4
 8001580:	edd3 6a00 	vldr	s13, [r3]
 8001584:	edd7 7a04 	vldr	s15, [r7, #16]
 8001588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3304      	adds	r3, #4
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	edc3 7a00 	vstr	s15, [r3]
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <calcAmpFromVect>:

static inline float calcAmpFromVect(float* Vect){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3304      	adds	r3, #4
 80015bc:	edd3 6a00 	vldr	s13, [r3]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3304      	adds	r3, #4
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 80015d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80015d8:	f006 feba 	bl	8008350 <sqrtf>
 80015dc:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	ee07 3a90 	vmov	s15, r3
}
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <calcModFromVamp>:

static inline float calcModFromVamp(float Vamp, float twoDivVdc){
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015fa:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 80015fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001602:	edd7 7a00 	vldr	s15, [r7]
 8001606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800162c <calcModFromVamp+0x3c>
 800160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001612:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	ee07 3a90 	vmov	s15, r3
}
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	3f5105ec 	.word	0x3f5105ec

08001630 <calcAmpPhaseModFromVoltVect>:

static inline void calcAmpPhaseModFromVoltVect(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001630:	b084      	sub	sp, #16
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
 8001636:	f107 0c08 	add.w	ip, r7, #8
 800163a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 800163e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001640:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001646:	ed93 7a08 	vldr	s14, [r3, #32]
 800164a:	eef0 0a47 	vmov.f32	s1, s14
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	f006 fe5b 	bl	800830c <atan2f>
 8001656:	eef0 7a40 	vmov.f32	s15, s0
 800165a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001662:	3320      	adds	r3, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff9b 	bl	80015a0 <calcAmpFromVect>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
 800166e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001670:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001676:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800167a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800167e:	eef0 0a47 	vmov.f32	s1, s14
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f7ff ffb3 	bl	80015f0 <calcModFromVamp>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
 800168e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001690:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800169c:	b004      	add	sp, #16
 800169e:	4770      	bx	lr

080016a0 <limitVoltVectAmp>:

static inline void limitVoltVectAmp(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80016a0:	b084      	sub	sp, #16
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	f107 0c10 	add.w	ip, r7, #16
 80016ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float VampLimit;

	if( vectorControlData->Mod > MODLIMIT ){
 80016b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80016b6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001774 <limitVoltVectAmp+0xd4>
 80016ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	dc00      	bgt.n	80016c6 <limitVoltVectAmp+0x26>
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
		vectorControlData->Mod = MODLIMIT;

	}
}
 80016c4:	e04e      	b.n	8001764 <limitVoltVectAmp+0xc4>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 80016c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001778 <limitVoltVectAmp+0xd8>
 80016ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001774 <limitVoltVectAmp+0xd4>
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016da:	edc7 7a01 	vstr	s15, [r7, #4]
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 80016de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	f006 fd86 	bl	80081f8 <cosf>
 80016ec:	eeb0 7a40 	vmov.f32	s14, s0
 80016f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fa:	edc3 7a08 	vstr	s15, [r3, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 80016fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001700:	ed93 7a08 	vldr	s14, [r3, #32]
 8001704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001706:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001710:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800171a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	f006 fdaa 	bl	8008280 <sinf>
 800172c:	eeb0 7a40 	vmov.f32	s14, s0
 8001730:	edd7 7a01 	vldr	s15, [r7, #4]
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 800173e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001740:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001746:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800174a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001750:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 800175e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <limitVoltVectAmp+0xdc>)
 8001762:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800176e:	b004      	add	sp, #16
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	3f933333 	.word	0x3f933333
 8001778:	3f1cc471 	.word	0x3f1cc471
 800177c:	3f933333 	.word	0x3f933333

08001780 <dq2ab>:

static inline void dq2ab(float theta, float* dq, float* ab){
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	ed87 0a03 	vstr	s0, [r7, #12]
 800178a:	60b8      	str	r0, [r7, #8]
 800178c:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800178e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001792:	f006 fd75 	bl	8008280 <sinf>
 8001796:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 800179a:	ed97 0a03 	vldr	s0, [r7, #12]
 800179e:	f006 fd2b 	bl	80081f8 <cosf>
 80017a2:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3304      	adds	r3, #4
 80017b8:	edd3 6a00 	vldr	s13, [r3]
 80017bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3304      	adds	r3, #4
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3304      	adds	r3, #4
 80017f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f4:	edc3 7a00 	vstr	s15, [r3]
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <Vuvw2Duty>:

static inline void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	ed87 0a03 	vstr	s0, [r7, #12]
 800180a:	60b8      	str	r0, [r7, #8]
 800180c:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3304      	adds	r3, #4
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	d502      	bpl.n	8001830 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3308      	adds	r3, #8
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ed97 7a07 	vldr	s14, [r7, #28]
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d502      	bpl.n	800184c <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3304      	adds	r3, #4
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ed97 7a06 	vldr	s14, [r7, #24]
 800185e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	dd02      	ble.n	800186e <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3308      	adds	r3, #8
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ed97 7a06 	vldr	s14, [r7, #24]
 800187a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	dd02      	ble.n	800188a <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	61bb      	str	r3, [r7, #24]

	vo = 0.0f;//(max + min) * 0.5f;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	ed93 7a00 	vldr	s14, [r3]
 8001896:	edd7 7a05 	vldr	s15, [r7, #20]
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3304      	adds	r3, #4
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	3304      	adds	r3, #4
 80018b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3308      	adds	r3, #8
 80018c0:	ed93 7a00 	vldr	s14, [r3]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3308      	adds	r3, #8
 80018c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = (Vuvw[0] * twoDivVdc);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	edd7 7a03 	vldr	s15, [r7, #12]
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3304      	adds	r3, #4
 80018ec:	ed93 7a00 	vldr	s14, [r3]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3308      	adds	r3, #8
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3308      	adds	r3, #8
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001922:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	f7fe fd29 	bl	8000380 <gUpperLowerLimit>
 800192e:	eef0 7a40 	vmov.f32	s15, s0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1d1c      	adds	r4, r3, #4
 8001944:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001948:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	f7fe fd16 	bl	8000380 <gUpperLowerLimit>
 8001954:	eef0 7a40 	vmov.f32	s15, s0
 8001958:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3308      	adds	r3, #8
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f103 0408 	add.w	r4, r3, #8
 800196a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800196e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	f7fe fd03 	bl	8000380 <gUpperLowerLimit>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
 800197e:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800198c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001990:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019ba:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3308      	adds	r3, #8
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3308      	adds	r3, #8
 80019d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019da:	edc3 7a00 	vstr	s15, [r3]

}
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
	...

080019e8 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 80019e8:	b084      	sub	sp, #16
 80019ea:	b5b0      	push	{r4, r5, r7, lr}
 80019ec:	b090      	sub	sp, #64	; 0x40
 80019ee:	af0a      	add	r7, sp, #40	; 0x28
 80019f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80019f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Kp;
	float Kig;
	float Kid;
	float wc;

	wc = 10.0f * TWOPI;
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <CurrentFbControl+0x140>)
 80019fa:	617b      	str	r3, [r7, #20]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
 80019fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a00:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001b2c <CurrentFbControl+0x144>
 8001a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a08:	edc7 7a04 	vstr	s15, [r7, #16]
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
 8001a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a10:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001b30 <CurrentFbControl+0x148>
 8001a14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a18:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001b34 <CurrentFbControl+0x14c>
 8001a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a20:	edc7 7a03 	vstr	s15, [r7, #12]
	Kid = Kig;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	60bb      	str	r3, [r7, #8]

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8001a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	edc7 7a00 	vstr	s15, [r7]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8001a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4c:	edc7 7a01 	vstr	s15, [r7, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8001a50:	ed97 7a00 	vldr	s14, [r7]
 8001a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8001a62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a70:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a76:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a7a:	edd7 6a00 	vldr	s13, [r7]
 8001a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a92:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a96:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8001aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aae:	9309      	str	r3, [sp, #36]	; 0x24
 8001ab0:	466d      	mov	r5, sp
 8001ab2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	602b      	str	r3, [r5, #0]
 8001ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac8:	f000 f836 	bl	8001b38 <calcVdqFeedForword>

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8001acc:	ed97 7a00 	vldr	s14, [r7]
 8001ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ada:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aee:	edc3 7a08 	vstr	s15, [r3, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8001af2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b00:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b14:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b22:	b004      	add	sp, #16
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	427b53d2 	.word	0x427b53d2
 8001b2c:	3949539b 	.word	0x3949539b
 8001b30:	3f75c28f 	.word	0x3f75c28f
 8001b34:	45fa0000 	.word	0x45fa0000

08001b38 <calcVdqFeedForword>:

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001b38:	b084      	sub	sp, #16
 8001b3a:	b490      	push	{r4, r7}
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	f107 0408 	add.w	r4, r7, #8
 8001b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8001b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b4a:	eef1 7a67 	vneg.f32	s15, s15
 8001b4e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b9c <calcVdqFeedForword+0x64>
 8001b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b56:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ba0 <calcVdqFeedForword+0x68>
 8001b5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8001b6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b78:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ba4 <calcVdqFeedForword+0x6c>
 8001b7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b80:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001ba8 <calcVdqFeedForword+0x70>
 8001b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc90      	pop	{r4, r7}
 8001b98:	b004      	add	sp, #16
 8001b9a:	4770      	bx	lr
 8001b9c:	39fba882 	.word	0x39fba882
 8001ba0:	3ecccccd 	.word	0x3ecccccd
 8001ba4:	3949539b 	.word	0x3949539b
 8001ba8:	3a870111 	.word	0x3a870111

08001bac <FluxObserver>:


static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	ed87 0a01 	vstr	s0, [r7, #4]
	float angleErr;
	float Egd[2];
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	ed93 7a00 	vldr	s14, [r3]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001c58 <FluxObserver+0xac>
 8001bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001c5c <FluxObserver+0xb0>
 8001bda:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bee:	edc7 7a05 	vstr	s15, [r7, #20]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001c58 <FluxObserver+0xac>
 8001c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c12:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001c5c <FluxObserver+0xb0>
 8001c16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c28:	edc7 7a06 	vstr	s15, [r7, #24]
	angleErr = atan2f(-1.0f * Egd[0], Egd[1]); //推定q軸を基準とした実q軸との誤差を算出
 8001c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c30:	eef1 7a67 	vneg.f32	s15, s15
 8001c34:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c38:	eef0 0a47 	vmov.f32	s1, s14
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f006 fb64 	bl	800830c <atan2f>
 8001c44:	ed87 0a07 	vstr	s0, [r7, #28]
	return angleErr;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	ee07 3a90 	vmov	s15, r3
}
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	3f75c28f 	.word	0x3f75c28f
 8001c5c:	3949539b 	.word	0x3949539b

08001c60 <calcElectAngleEstimate>:

void calcElectAngleEstimate(uint8_t flgInit, struct SensorData sensData, struct VectorControlData vectorControlData, struct ElectAngleEstimateData *electAngleEstimateData)
{
 8001c60:	b084      	sub	sp, #16
 8001c62:	b590      	push	{r4, r7, lr}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4604      	mov	r4, r0
 8001c6a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001c72:	4623      	mov	r3, r4
 8001c74:	71fb      	strb	r3, [r7, #7]
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	electAngleEstimateData->electAngleErr = FluxObserver(vectorControlData.Idq, vectorControlData.Vdq, electAngleEstimateData->electAngVeloEstimate);
 8001c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c82:	f103 0220 	add.w	r2, r3, #32
 8001c86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff8a 	bl	8001bac <FluxObserver>
 8001c98:	eef0 7a40 	vmov.f32	s15, s0
 8001c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ca0:	edc3 7a01 	vstr	s15, [r3, #4]


	if( flgInit == 0){
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d110      	bne.n	8001ccc <calcElectAngleEstimate+0x6c>
		electAngleEstimateData->electAngleEstimate = sensData.electAngle;
 8001caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb0:	609a      	str	r2, [r3, #8]
		electAngleEstimateData->electAngVeloEstimate = sensData.electAngVelo;
 8001cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb8:	60da      	str	r2, [r3, #12]
		electAngleEstimateData->wc_PLL = 0.0f;
 8001cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
		sIntegral_ElectAngleErr_Ki = sensData.electAngVelo;
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	4a39      	ldr	r2, [pc, #228]	; (8001dac <calcElectAngleEstimate+0x14c>)
 8001cc8:	6013      	str	r3, [r2, #0]
		//PLL
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001cca:	e067      	b.n	8001d9c <calcElectAngleEstimate+0x13c>
		wc_PLL = electAngleEstimateData->wc_PLL;
 8001ccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60bb      	str	r3, [r7, #8]
		gRateLimit(200.0f * TWOPI, 50.0f, CARRIERCYCLE, &wc_PLL);
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4618      	mov	r0, r3
 8001cda:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001db0 <calcElectAngleEstimate+0x150>
 8001cde:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001db4 <calcElectAngleEstimate+0x154>
 8001ce2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001db8 <calcElectAngleEstimate+0x158>
 8001ce6:	f7fe fbc8 	bl	800047a <gRateLimit>
		electAngleEstimateData->wc_PLL = wc_PLL;
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cf0:	601a      	str	r2, [r3, #0]
		Ts_PLL = CARRIERCYCLE;
 8001cf2:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <calcElectAngleEstimate+0x15c>)
 8001cf4:	617b      	str	r3, [r7, #20]
		Kp_PLL = wc_PLL;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001dc0 <calcElectAngleEstimate+0x160>
 8001d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a03 	vstr	s15, [r7, #12]
		electAngleEstimateData->electAngleEstimate += (electAngleEstimateData->electAngVeloEstimate) * CARRIERCYCLE;
 8001d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d26:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d2a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001dc4 <calcElectAngleEstimate+0x164>
 8001d2e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d3a:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleEstimate = gfWrapTheta(electAngleEstimateData->electAngleEstimate);
 8001d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d46:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4a:	f7fe fadb 	bl	8000304 <gfWrapTheta>
 8001d4e:	eef0 7a40 	vmov.f32	s15, s0
 8001d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d56:	edc3 7a02 	vstr	s15, [r3, #8]
		electAngleEstimateData->electAngleErr = gfWrapTheta(electAngleEstimateData->electAngleErr);
 8001d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	f7fe facd 	bl	8000304 <gfWrapTheta>
 8001d6a:	eef0 7a40 	vmov.f32	s15, s0
 8001d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d72:	edc3 7a01 	vstr	s15, [r3, #4]
		electAngleEstimateData->electAngVeloEstimate = cfPhaseLockedLoop(electAngleEstimateData->electAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d7e:	480b      	ldr	r0, [pc, #44]	; (8001dac <calcElectAngleEstimate+0x14c>)
 8001d80:	ed97 1a03 	vldr	s2, [r7, #12]
 8001d84:	edd7 0a04 	vldr	s1, [r7, #16]
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	f7fe fa44 	bl	8000218 <cfPhaseLockedLoop>
 8001d90:	eef0 7a40 	vmov.f32	s15, s0
 8001d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d98:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001da6:	b004      	add	sp, #16
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000184 	.word	0x20000184
 8001db0:	3903126f 	.word	0x3903126f
 8001db4:	42480000 	.word	0x42480000
 8001db8:	449d1463 	.word	0x449d1463
 8001dbc:	3903126f 	.word	0x3903126f
 8001dc0:	3e4ccccd 	.word	0x3e4ccccd
 8001dc4:	45fa0000 	.word	0x45fa0000

08001dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dcc:	f000 fd4d 	bl	800286a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd0:	f000 f86a 	bl	8001ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd4:	f000 face 	bl	8002374 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001dd8:	f000 f8a6 	bl	8001f28 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ddc:	f000 f970 	bl	80020c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001de0:	f000 fa42 	bl	8002268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001de4:	482c      	ldr	r0, [pc, #176]	; (8001e98 <main+0xd0>)
 8001de6:	f004 fcd7 	bl	8006798 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001dea:	482c      	ldr	r0, [pc, #176]	; (8001e9c <main+0xd4>)
 8001dec:	f002 fa64 	bl	80042b8 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df6:	482a      	ldr	r0, [pc, #168]	; (8001ea0 <main+0xd8>)
 8001df8:	f003 fc5c 	bl	80056b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e02:	4827      	ldr	r0, [pc, #156]	; (8001ea0 <main+0xd8>)
 8001e04:	f003 fc56 	bl	80056b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0e:	4824      	ldr	r0, [pc, #144]	; (8001ea0 <main+0xd8>)
 8001e10:	f003 fc50 	bl	80056b4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e14:	2100      	movs	r1, #0
 8001e16:	4820      	ldr	r0, [pc, #128]	; (8001e98 <main+0xd0>)
 8001e18:	f004 fd98 	bl	800694c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	481e      	ldr	r0, [pc, #120]	; (8001e98 <main+0xd0>)
 8001e20:	f005 ff98 	bl	8007d54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001e24:	2104      	movs	r1, #4
 8001e26:	481c      	ldr	r0, [pc, #112]	; (8001e98 <main+0xd0>)
 8001e28:	f004 fd90 	bl	800694c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	481a      	ldr	r0, [pc, #104]	; (8001e98 <main+0xd0>)
 8001e30:	f005 ff90 	bl	8007d54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001e34:	2108      	movs	r1, #8
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <main+0xd0>)
 8001e38:	f004 fd88 	bl	800694c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	4816      	ldr	r0, [pc, #88]	; (8001e98 <main+0xd0>)
 8001e40:	f005 ff88 	bl	8007d54 <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <main+0xdc>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <main+0xdc>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <main+0xdc>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <main+0xdc>)
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <main+0xdc>)
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <main+0xdc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <main+0xdc>)
 8001e64:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e68:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <main+0xdc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <main+0xdc>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <main+0xdc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <main+0xdc>)
 8001e7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e80:	6013      	str	r3, [r2, #0]

  TIM1 -> ARR = COUNTERPERIOD;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <main+0xdc>)
 8001e84:	f240 4225 	movw	r2, #1061	; 0x425
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <main+0xdc>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <main+0xdc>)
 8001e90:	3b28      	subs	r3, #40	; 0x28
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <main+0xcc>
 8001e96:	bf00      	nop
 8001e98:	200001f4 	.word	0x200001f4
 8001e9c:	20000188 	.word	0x20000188
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	40012c00 	.word	0x40012c00

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b094      	sub	sp, #80	; 0x50
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	2238      	movs	r2, #56	; 0x38
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f006 f996 	bl	80081e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ece:	f003 fc23 	bl	8005718 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fcb9 	bl	8005860 <HAL_RCC_OscConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ef4:	f000 faa2 	bl	800243c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef8:	230f      	movs	r3, #15
 8001efa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001efc:	2301      	movs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 ffb7 	bl	8005e84 <HAL_RCC_ClockConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001f1c:	f000 fa8e 	bl	800243c <Error_Handler>
  }
}
 8001f20:	bf00      	nop
 8001f22:	3750      	adds	r7, #80	; 0x50
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b09a      	sub	sp, #104	; 0x68
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f3e:	2220      	movs	r2, #32
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f006 f950 	bl	80081e8 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f48:	463b      	mov	r3, r7
 8001f4a:	223c      	movs	r2, #60	; 0x3c
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f006 f94a 	bl	80081e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f54:	4b55      	ldr	r3, [pc, #340]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f64:	4b51      	ldr	r3, [pc, #324]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f6a:	4b50      	ldr	r3, [pc, #320]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f70:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f76:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f94:	4b45      	ldr	r3, [pc, #276]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f9c:	4b43      	ldr	r3, [pc, #268]	; (80020ac <MX_ADC1_Init+0x184>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa2:	4b42      	ldr	r3, [pc, #264]	; (80020ac <MX_ADC1_Init+0x184>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <MX_ADC1_Init+0x184>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <MX_ADC1_Init+0x184>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <MX_ADC1_Init+0x184>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fbe:	483b      	ldr	r0, [pc, #236]	; (80020ac <MX_ADC1_Init+0x184>)
 8001fc0:	f000 fef0 	bl	8002da4 <HAL_ADC_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001fca:	f000 fa37 	bl	800243c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4834      	ldr	r0, [pc, #208]	; (80020ac <MX_ADC1_Init+0x184>)
 8001fda:	f002 ffd1 	bl	8004f80 <HAL_ADCEx_MultiModeConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001fe4:	f000 fa2a 	bl	800243c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <MX_ADC1_Init+0x188>)
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fec:	2306      	movs	r3, #6
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ff4:	237f      	movs	r3, #127	; 0x7f
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002000:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002004:	4619      	mov	r1, r3
 8002006:	4829      	ldr	r0, [pc, #164]	; (80020ac <MX_ADC1_Init+0x184>)
 8002008:	f001 fb06 	bl	8003618 <HAL_ADC_ConfigChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8002012:	f000 fa13 	bl	800243c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <MX_ADC1_Init+0x18c>)
 8002018:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800201a:	2309      	movs	r3, #9
 800201c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002022:	237f      	movs	r3, #127	; 0x7f
 8002024:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002026:	2304      	movs	r3, #4
 8002028:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4815      	ldr	r0, [pc, #84]	; (80020ac <MX_ADC1_Init+0x184>)
 8002058:	f002 fa66 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8002062:	f000 f9eb 	bl	800243c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_ADC1_Init+0x190>)
 8002068:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800206a:	f240 130f 	movw	r3, #271	; 0x10f
 800206e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002070:	463b      	mov	r3, r7
 8002072:	4619      	mov	r1, r3
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_ADC1_Init+0x184>)
 8002076:	f002 fa57 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8002080:	f000 f9dc 	bl	800243c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <MX_ADC1_Init+0x194>)
 8002086:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8002088:	f240 2315 	movw	r3, #533	; 0x215
 800208c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800208e:	463b      	mov	r3, r7
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_ADC1_Init+0x184>)
 8002094:	f002 fa48 	bl	8004528 <HAL_ADCEx_InjectedConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800209e:	f000 f9cd 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3768      	adds	r7, #104	; 0x68
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000188 	.word	0x20000188
 80020b0:	21800100 	.word	0x21800100
 80020b4:	04300002 	.word	0x04300002
 80020b8:	1d500080 	.word	0x1d500080
 80020bc:	19200040 	.word	0x19200040

080020c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b09c      	sub	sp, #112	; 0x70
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2234      	movs	r2, #52	; 0x34
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f006 f874 	bl	80081e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002100:	4b57      	ldr	r3, [pc, #348]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002102:	4a58      	ldr	r2, [pc, #352]	; (8002264 <MX_TIM1_Init+0x1a4>)
 8002104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002106:	4b56      	ldr	r3, [pc, #344]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800210c:	4b54      	ldr	r3, [pc, #336]	; (8002260 <MX_TIM1_Init+0x1a0>)
 800210e:	2220      	movs	r2, #32
 8002110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002112:	4b53      	ldr	r3, [pc, #332]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <MX_TIM1_Init+0x1a0>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800212c:	484c      	ldr	r0, [pc, #304]	; (8002260 <MX_TIM1_Init+0x1a0>)
 800212e:	f004 fadb 	bl	80066e8 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002138:	f000 f980 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002146:	4619      	mov	r1, r3
 8002148:	4845      	ldr	r0, [pc, #276]	; (8002260 <MX_TIM1_Init+0x1a0>)
 800214a:	f004 ff23 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002154:	f000 f972 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002158:	4841      	ldr	r0, [pc, #260]	; (8002260 <MX_TIM1_Init+0x1a0>)
 800215a:	f004 fb95 	bl	8006888 <HAL_TIM_PWM_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002164:	f000 f96a 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002168:	2370      	movs	r3, #112	; 0x70
 800216a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002178:	4619      	mov	r1, r3
 800217a:	4839      	ldr	r0, [pc, #228]	; (8002260 <MX_TIM1_Init+0x1a0>)
 800217c:	f005 feac 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002186:	f000 f959 	bl	800243c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218a:	2360      	movs	r3, #96	; 0x60
 800218c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002196:	2300      	movs	r3, #0
 8002198:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	482c      	ldr	r0, [pc, #176]	; (8002260 <MX_TIM1_Init+0x1a0>)
 80021b0:	f004 fddc 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80021ba:	f000 f93f 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c2:	2204      	movs	r2, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4826      	ldr	r0, [pc, #152]	; (8002260 <MX_TIM1_Init+0x1a0>)
 80021c8:	f004 fdd0 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80021d2:	f000 f933 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021da:	2208      	movs	r2, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	4820      	ldr	r0, [pc, #128]	; (8002260 <MX_TIM1_Init+0x1a0>)
 80021e0:	f004 fdc4 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80021ea:	f000 f927 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021f2:	220c      	movs	r2, #12
 80021f4:	4619      	mov	r1, r3
 80021f6:	481a      	ldr	r0, [pc, #104]	; (8002260 <MX_TIM1_Init+0x1a0>)
 80021f8:	f004 fdb8 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8002202:	f000 f91b 	bl	800243c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002244:	f005 fede 	bl	8008004 <HAL_TIMEx_ConfigBreakDeadTime>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 800224e:	f000 f8f5 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM1_Init+0x1a0>)
 8002254:	f000 fa06 	bl	8002664 <HAL_TIM_MspPostInit>

}
 8002258:	bf00      	nop
 800225a:	3770      	adds	r7, #112	; 0x70
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200001f4 	.word	0x200001f4
 8002264:	40012c00 	.word	0x40012c00

08002268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <MX_TIM2_Init+0x108>)
 8002296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800229a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <MX_TIM2_Init+0x108>)
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <MX_TIM2_Init+0x108>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <MX_TIM2_Init+0x108>)
 80022aa:	f04f 32ff 	mov.w	r2, #4294967295
 80022ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <MX_TIM2_Init+0x108>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <MX_TIM2_Init+0x108>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022bc:	482c      	ldr	r0, [pc, #176]	; (8002370 <MX_TIM2_Init+0x108>)
 80022be:	f004 fa13 	bl	80066e8 <HAL_TIM_Base_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80022c8:	f000 f8b8 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	4619      	mov	r1, r3
 80022d8:	4825      	ldr	r0, [pc, #148]	; (8002370 <MX_TIM2_Init+0x108>)
 80022da:	f004 fe5b 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80022e4:	f000 f8aa 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80022e8:	4821      	ldr	r0, [pc, #132]	; (8002370 <MX_TIM2_Init+0x108>)
 80022ea:	f004 fc41 	bl	8006b70 <HAL_TIM_IC_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80022f4:	f000 f8a2 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	481a      	ldr	r0, [pc, #104]	; (8002370 <MX_TIM2_Init+0x108>)
 8002308:	f005 fde6 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002312:	f000 f893 	bl	800243c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800231a:	2301      	movs	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	4810      	ldr	r0, [pc, #64]	; (8002370 <MX_TIM2_Init+0x108>)
 800232e:	f004 fc80 	bl	8006c32 <HAL_TIM_IC_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002338:	f000 f880 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2204      	movs	r2, #4
 8002340:	4619      	mov	r1, r3
 8002342:	480b      	ldr	r0, [pc, #44]	; (8002370 <MX_TIM2_Init+0x108>)
 8002344:	f004 fc75 	bl	8006c32 <HAL_TIM_IC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800234e:	f000 f875 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2208      	movs	r2, #8
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_TIM2_Init+0x108>)
 800235a:	f004 fc6a 	bl	8006c32 <HAL_TIM_IC_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8002364:	f000 f86a 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000240 	.word	0x20000240

08002374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <MX_GPIO_Init+0xbc>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <MX_GPIO_Init+0xbc>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <MX_GPIO_Init+0xbc>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	4b23      	ldr	r3, [pc, #140]	; (8002430 <MX_GPIO_Init+0xbc>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	4a22      	ldr	r2, [pc, #136]	; (8002430 <MX_GPIO_Init+0xbc>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <MX_GPIO_Init+0xbc>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_GPIO_Init+0xbc>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <MX_GPIO_Init+0xbc>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <MX_GPIO_Init+0xbc>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80023d8:	4816      	ldr	r0, [pc, #88]	; (8002434 <MX_GPIO_Init+0xc0>)
 80023da:	f003 f96b 	bl	80056b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80023e4:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_GPIO_Init+0xc4>)
 80023e6:	f003 f965 	bl	80056b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 80023ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4619      	mov	r1, r3
 8002402:	480c      	ldr	r0, [pc, #48]	; (8002434 <MX_GPIO_Init+0xc0>)
 8002404:	f002 ffd4 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8002408:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800240c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_GPIO_Init+0xc4>)
 8002422:	f002 ffc5 	bl	80053b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002426:	bf00      	nop
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	48000400 	.word	0x48000400
 8002438:	48000800 	.word	0x48000800

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002444:	e7fe      	b.n	8002444 <Error_Handler+0x8>
	...

08002448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_MspInit+0x44>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_MspInit+0x44>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6613      	str	r3, [r2, #96]	; 0x60
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_MspInit+0x44>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_MspInit+0x44>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_MspInit+0x44>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_MspInit+0x44>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b0a0      	sub	sp, #128	; 0x80
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	2254      	movs	r2, #84	; 0x54
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f005 fe99 	bl	80081e8 <memset>
  if(hadc->Instance==ADC1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024be:	d154      	bne.n	800256a <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80024c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024cc:	f107 0318 	add.w	r3, r7, #24
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 febb 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80024dc:	f7ff ffae 	bl	800243c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 80024e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002514:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_ADC_MspInit+0xe4>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002528:	2307      	movs	r3, #7
 800252a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252c:	2303      	movs	r3, #3
 800252e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002538:	4619      	mov	r1, r3
 800253a:	480f      	ldr	r0, [pc, #60]	; (8002578 <HAL_ADC_MspInit+0xe8>)
 800253c:	f002 ff38 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002540:	2301      	movs	r3, #1
 8002542:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002544:	2303      	movs	r3, #3
 8002546:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002556:	f002 ff2b 	bl	80053b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	2012      	movs	r0, #18
 8002560:	f002 fef1 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002564:	2012      	movs	r0, #18
 8002566:	f002 ff08 	bl	800537a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	3780      	adds	r7, #128	; 0x80
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	48000800 	.word	0x48000800

0800257c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <HAL_TIM_Base_MspInit+0xdc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10c      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	4a2e      	ldr	r2, [pc, #184]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a8:	6613      	str	r3, [r2, #96]	; 0x60
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025b6:	e04b      	b.n	8002650 <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d146      	bne.n	8002650 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a25      	ldr	r2, [pc, #148]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_TIM_Base_MspInit+0xe0>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = H2_Pin|H1_Pin;
 800260a:	f248 0302 	movw	r3, #32770	; 0x8002
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800261c:	2301      	movs	r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262a:	f002 fec1 	bl	80053b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H3_Pin;
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002640:	2301      	movs	r3, #1
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(H3_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <HAL_TIM_Base_MspInit+0xe4>)
 800264c:	f002 feb0 	bl	80053b0 <HAL_GPIO_Init>
}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	; 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40021000 	.word	0x40021000
 8002660:	48000400 	.word	0x48000400

08002664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a36      	ldr	r2, [pc, #216]	; (800275c <HAL_TIM_MspPostInit+0xf8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d166      	bne.n	8002754 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	4a35      	ldr	r2, [pc, #212]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	4a2f      	ldr	r2, [pc, #188]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_TIM_MspPostInit+0xfc>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026ce:	2308      	movs	r3, #8
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026de:	2302      	movs	r3, #2
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	481e      	ldr	r0, [pc, #120]	; (8002764 <HAL_TIM_MspPostInit+0x100>)
 80026ea:	f002 fe61 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026ee:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002700:	2306      	movs	r3, #6
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270e:	f002 fe4f 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002712:	2301      	movs	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002722:	2306      	movs	r3, #6
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	480e      	ldr	r0, [pc, #56]	; (8002768 <HAL_TIM_MspPostInit+0x104>)
 800272e:	f002 fe3f 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002744:	230c      	movs	r3, #12
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <HAL_TIM_MspPostInit+0x104>)
 8002750:	f002 fe2e 	bl	80053b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40021000 	.word	0x40021000
 8002764:	48000800 	.word	0x48000800
 8002768:	48000400 	.word	0x48000400

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <NMI_Handler+0x4>

08002772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <MemManage_Handler+0x4>

0800277e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <UsageFault_Handler+0x4>

0800278a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b8:	f000 f8aa 	bl	8002910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <ADC1_2_IRQHandler+0x2c>)
 80027c6:	f000 fca9 	bl	800311c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80027ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ce:	4808      	ldr	r0, [pc, #32]	; (80027f0 <ADC1_2_IRQHandler+0x30>)
 80027d0:	f002 ff88 	bl	80056e4 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence_Low_Freq();
 80027d4:	f7fd fe92 	bl	80004fc <Sequence_Low_Freq>
	Sequence_High_Freq();
 80027d8:	f7fd ff70 	bl	80006bc <Sequence_High_Freq>


	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80027dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <ADC1_2_IRQHandler+0x30>)
 80027e2:	f002 ff7f 	bl	80056e4 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000188 	.word	0x20000188
 80027f0:	48000400 	.word	0x48000400

080027f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SystemInit+0x20>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <SystemInit+0x20>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800281a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800281c:	f7ff ffea 	bl	80027f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <LoopForever+0x6>)
  ldr r1, =_edata
 8002822:	490d      	ldr	r1, [pc, #52]	; (8002858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <LoopForever+0xe>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002838:	4c0a      	ldr	r4, [pc, #40]	; (8002864 <LoopForever+0x16>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002846:	f005 fc9d 	bl	8008184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800284a:	f7ff fabd 	bl	8001dc8 <main>

0800284e <LoopForever>:

LoopForever:
    b LoopForever
 800284e:	e7fe      	b.n	800284e <LoopForever>
  ldr   r0, =_estack
 8002850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002858:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800285c:	080095ec 	.word	0x080095ec
  ldr r2, =_sbss
 8002860:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002864:	20000290 	.word	0x20000290

08002868 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC3_IRQHandler>

0800286a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f002 fd5b 	bl	8005330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800287a:	200f      	movs	r0, #15
 800287c:	f000 f80e 	bl	800289c <HAL_InitTick>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	71fb      	strb	r3, [r7, #7]
 800288a:	e001      	b.n	8002890 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800288c:	f7ff fddc 	bl	8002448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002890:	79fb      	ldrb	r3, [r7, #7]

}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_InitTick+0x68>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d022      	beq.n	80028f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_InitTick+0x6c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_InitTick+0x68>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 fd66 	bl	8005396 <HAL_SYSTICK_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10f      	bne.n	80028f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	d809      	bhi.n	80028ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d6:	2200      	movs	r2, #0
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	f04f 30ff 	mov.w	r0, #4294967295
 80028de:	f002 fd32 	bl	8005346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_InitTick+0x70>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e007      	b.n	80028fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e004      	b.n	80028fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e001      	b.n	80028fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000008 	.word	0x20000008
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_IncTick+0x1c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_IncTick+0x20>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4413      	add	r3, r2
 800291e:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_IncTick+0x1c>)
 8002920:	6013      	str	r3, [r2, #0]
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	2000028c 	.word	0x2000028c
 8002930:	20000008 	.word	0x20000008

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	2000028c 	.word	0x2000028c

0800294c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <LL_ADC_SetOffset+0x44>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	03fff000 	.word	0x03fff000

080029fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3360      	adds	r3, #96	; 0x60
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3360      	adds	r3, #96	; 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3360      	adds	r3, #96	; 0x60
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	615a      	str	r2, [r3, #20]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b087      	sub	sp, #28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3330      	adds	r3, #48	; 0x30
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	4413      	add	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	211f      	movs	r1, #31
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 011f 	and.w	r1, r3, #31
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0e5b      	lsrs	r3, r3, #25
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	0d1b      	lsrs	r3, r3, #20
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2107      	movs	r1, #7
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	0d1b      	lsrs	r3, r3, #20
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0318 	and.w	r3, r3, #24
 8002c0e:	4908      	ldr	r1, [pc, #32]	; (8002c30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c10:	40d9      	lsrs	r1, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	400b      	ands	r3, r1
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	0007ffff 	.word	0x0007ffff

08002c34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 031f 	and.w	r3, r3, #31
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6093      	str	r3, [r2, #8]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d101      	bne.n	8002caa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ccc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <LL_ADC_IsEnabled+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_ADC_IsEnabled+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1a9      	b.n	8003112 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fb5f 	bl	8002490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff53 	bl	8002c90 <LL_ADC_IsDeepPowerDownEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff39 	bl	8002c6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff6e 	bl	8002ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d115      	bne.n	8002e36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff52 	bl	8002cb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e14:	4b9c      	ldr	r3, [pc, #624]	; (8003088 <HAL_ADC_Init+0x2e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	4a9c      	ldr	r2, [pc, #624]	; (800308c <HAL_ADC_Init+0x2e8>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e28:	e002      	b.n	8002e30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f9      	bne.n	8002e2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff50 	bl	8002ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff75 	bl	8002d56 <LL_ADC_REG_IsConversionOngoing>
 8002e6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 8142 	bne.w	8003100 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 813e 	bne.w	8003100 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e8c:	f043 0202 	orr.w	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff49 	bl	8002d30 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d141      	bne.n	8002f28 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eac:	d004      	beq.n	8002eb8 <HAL_ADC_Init+0x114>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a77      	ldr	r2, [pc, #476]	; (8003090 <HAL_ADC_Init+0x2ec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_ADC_Init+0x134>
 8002eb8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ebc:	f7ff ff38 	bl	8002d30 <LL_ADC_IsEnabled>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	4873      	ldr	r0, [pc, #460]	; (8003090 <HAL_ADC_Init+0x2ec>)
 8002ec4:	f7ff ff34 	bl	8002d30 <LL_ADC_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4323      	orrs	r3, r4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e012      	b.n	8002efe <HAL_ADC_Init+0x15a>
 8002ed8:	486e      	ldr	r0, [pc, #440]	; (8003094 <HAL_ADC_Init+0x2f0>)
 8002eda:	f7ff ff29 	bl	8002d30 <LL_ADC_IsEnabled>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	486d      	ldr	r0, [pc, #436]	; (8003098 <HAL_ADC_Init+0x2f4>)
 8002ee2:	f7ff ff25 	bl	8002d30 <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	431c      	orrs	r4, r3
 8002eea:	486c      	ldr	r0, [pc, #432]	; (800309c <HAL_ADC_Init+0x2f8>)
 8002eec:	f7ff ff20 	bl	8002d30 <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0a:	d004      	beq.n	8002f16 <HAL_ADC_Init+0x172>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5f      	ldr	r2, [pc, #380]	; (8003090 <HAL_ADC_Init+0x2ec>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Init+0x176>
 8002f16:	4a62      	ldr	r2, [pc, #392]	; (80030a0 <HAL_ADC_Init+0x2fc>)
 8002f18:	e000      	b.n	8002f1c <HAL_ADC_Init+0x178>
 8002f1a:	4a62      	ldr	r2, [pc, #392]	; (80030a4 <HAL_ADC_Init+0x300>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7ff fd12 	bl	800294c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7f5b      	ldrb	r3, [r3, #29]
 8002f2c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f32:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f38:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f3e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f46:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	045b      	lsls	r3, r3, #17
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b48      	ldr	r3, [pc, #288]	; (80030a8 <HAL_ADC_Init+0x304>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fee4 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 8002fb4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d17f      	bne.n	80030bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d17c      	bne.n	80030bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fc6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003002:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800300c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6911      	ldr	r1, [r2, #16]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	430b      	orrs	r3, r1
 800301e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003022:	e013      	b.n	800304c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003032:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003048:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12a      	bne.n	80030ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800306c:	4311      	orrs	r1, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003078:	430a      	orrs	r2, r1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	611a      	str	r2, [r3, #16]
 8003086:	e019      	b.n	80030bc <HAL_ADC_Init+0x318>
 8003088:	20000000 	.word	0x20000000
 800308c:	053e2d63 	.word	0x053e2d63
 8003090:	50000100 	.word	0x50000100
 8003094:	50000400 	.word	0x50000400
 8003098:	50000500 	.word	0x50000500
 800309c:	50000600 	.word	0x50000600
 80030a0:	50000300 	.word	0x50000300
 80030a4:	50000700 	.word	0x50000700
 80030a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f023 010f 	bic.w	r1, r3, #15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	1e5a      	subs	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
 80030dc:	e007      	b.n	80030ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 020f 	bic.w	r2, r2, #15
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80030fe:	e007      	b.n	8003110 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003110:	7ffb      	ldrb	r3, [r7, #31]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	bf00      	nop

0800311c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003140:	d004      	beq.n	800314c <HAL_ADC_IRQHandler+0x30>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a8e      	ldr	r2, [pc, #568]	; (8003380 <HAL_ADC_IRQHandler+0x264>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_ADC_IRQHandler+0x34>
 800314c:	4b8d      	ldr	r3, [pc, #564]	; (8003384 <HAL_ADC_IRQHandler+0x268>)
 800314e:	e000      	b.n	8003152 <HAL_ADC_IRQHandler+0x36>
 8003150:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <HAL_ADC_IRQHandler+0x26c>)
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fd6e 	bl	8002c34 <LL_ADC_GetMultimode>
 8003158:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <HAL_ADC_IRQHandler+0x78>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f001 f9c4 	bl	8004514 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2202      	movs	r2, #2
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_ADC_IRQHandler+0x8c>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8094 	beq.w	80032dc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808e 	beq.w	80032dc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fc87 	bl	8002af0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d072      	beq.n	80032ce <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a64      	ldr	r2, [pc, #400]	; (8003380 <HAL_ADC_IRQHandler+0x264>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d009      	beq.n	8003206 <HAL_ADC_IRQHandler+0xea>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a65      	ldr	r2, [pc, #404]	; (800338c <HAL_ADC_IRQHandler+0x270>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d002      	beq.n	8003202 <HAL_ADC_IRQHandler+0xe6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	e003      	b.n	800320a <HAL_ADC_IRQHandler+0xee>
 8003202:	4b63      	ldr	r3, [pc, #396]	; (8003390 <HAL_ADC_IRQHandler+0x274>)
 8003204:	e001      	b.n	800320a <HAL_ADC_IRQHandler+0xee>
 8003206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4293      	cmp	r3, r2
 8003210:	d008      	beq.n	8003224 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d002      	beq.n	8003224 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b09      	cmp	r3, #9
 8003222:	d104      	bne.n	800322e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	e014      	b.n	8003258 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a53      	ldr	r2, [pc, #332]	; (8003380 <HAL_ADC_IRQHandler+0x264>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_ADC_IRQHandler+0x130>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <HAL_ADC_IRQHandler+0x270>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d002      	beq.n	8003248 <HAL_ADC_IRQHandler+0x12c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	e003      	b.n	8003250 <HAL_ADC_IRQHandler+0x134>
 8003248:	4b51      	ldr	r3, [pc, #324]	; (8003390 <HAL_ADC_IRQHandler+0x274>)
 800324a:	e001      	b.n	8003250 <HAL_ADC_IRQHandler+0x134>
 800324c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003250:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d135      	bne.n	80032ce <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d12e      	bne.n	80032ce <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fd6e 	bl	8002d56 <LL_ADC_REG_IsConversionOngoing>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11a      	bne.n	80032b6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020c 	bic.w	r2, r2, #12
 800328e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d112      	bne.n	80032ce <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032b4:	e00b      	b.n	80032ce <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f984 	bl	80035dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	220c      	movs	r2, #12
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x1d4>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80b3 	beq.w	8003462 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80ad 	beq.w	8003462 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fc22 	bl	8002b6e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800332a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fbdd 	bl	8002af0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003336:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a10      	ldr	r2, [pc, #64]	; (8003380 <HAL_ADC_IRQHandler+0x264>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_ADC_IRQHandler+0x23a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a11      	ldr	r2, [pc, #68]	; (800338c <HAL_ADC_IRQHandler+0x270>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d002      	beq.n	8003352 <HAL_ADC_IRQHandler+0x236>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	e003      	b.n	800335a <HAL_ADC_IRQHandler+0x23e>
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_ADC_IRQHandler+0x274>)
 8003354:	e001      	b.n	800335a <HAL_ADC_IRQHandler+0x23e>
 8003356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4293      	cmp	r3, r2
 8003360:	d008      	beq.n	8003374 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b06      	cmp	r3, #6
 800336c:	d002      	beq.n	8003374 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b07      	cmp	r3, #7
 8003372:	d10f      	bne.n	8003394 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	e01f      	b.n	80033be <HAL_ADC_IRQHandler+0x2a2>
 800337e:	bf00      	nop
 8003380:	50000100 	.word	0x50000100
 8003384:	50000300 	.word	0x50000300
 8003388:	50000700 	.word	0x50000700
 800338c:	50000500 	.word	0x50000500
 8003390:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a8b      	ldr	r2, [pc, #556]	; (80035c8 <HAL_ADC_IRQHandler+0x4ac>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_ADC_IRQHandler+0x296>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a8a      	ldr	r2, [pc, #552]	; (80035cc <HAL_ADC_IRQHandler+0x4b0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d002      	beq.n	80033ae <HAL_ADC_IRQHandler+0x292>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_IRQHandler+0x29a>
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_ADC_IRQHandler+0x4b4>)
 80033b0:	e001      	b.n	80033b6 <HAL_ADC_IRQHandler+0x29a>
 80033b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d047      	beq.n	8003454 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_ADC_IRQHandler+0x2c2>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03f      	beq.n	8003454 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d13a      	bne.n	8003454 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d133      	bne.n	8003454 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d12e      	bne.n	8003454 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fcbe 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003414:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d112      	bne.n	8003454 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
 800343a:	e00b      	b.n	8003454 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 f835 	bl	80044c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2260      	movs	r2, #96	; 0x60
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d011      	beq.n	8003490 <HAL_ADC_IRQHandler+0x374>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8b4 	bl	80035f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <HAL_ADC_IRQHandler+0x3a4>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f001 f81b 	bl	80044ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d012      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x3d4>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f001 f80d 	bl	8004500 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d043      	beq.n	8003582 <HAL_ADC_IRQHandler+0x466>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d03e      	beq.n	8003582 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800350c:	2301      	movs	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	e021      	b.n	8003556 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003520:	d004      	beq.n	800352c <HAL_ADC_IRQHandler+0x410>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <HAL_ADC_IRQHandler+0x4ac>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_ADC_IRQHandler+0x414>
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_ADC_IRQHandler+0x4b8>)
 800352e:	e000      	b.n	8003532 <HAL_ADC_IRQHandler+0x416>
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_ADC_IRQHandler+0x4bc>)
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fb8c 	bl	8002c50 <LL_ADC_GetMultiDMATransfer>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800353e:	2301      	movs	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	e008      	b.n	8003556 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003552:	2301      	movs	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10e      	bne.n	800357a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	f043 0202 	orr.w	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f845 	bl	8003604 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2210      	movs	r2, #16
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <HAL_ADC_IRQHandler+0x4a2>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a6:	f043 0208 	orr.w	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 ff8d 	bl	80044d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80035be:	bf00      	nop
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	50000100 	.word	0x50000100
 80035cc:	50000500 	.word	0x50000500
 80035d0:	50000400 	.word	0x50000400
 80035d4:	50000300 	.word	0x50000300
 80035d8:	50000700 	.word	0x50000700

080035dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0b6      	sub	sp, #216	; 0xd8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003632:	2b01      	cmp	r3, #1
 8003634:	d102      	bne.n	800363c <HAL_ADC_ConfigChannel+0x24>
 8003636:	2302      	movs	r3, #2
 8003638:	f000 bc13 	b.w	8003e62 <HAL_ADC_ConfigChannel+0x84a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fb84 	bl	8002d56 <LL_ADC_REG_IsConversionOngoing>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 83f3 	bne.w	8003e3c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	f7ff fa57 	bl	8002b16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fb72 	bl	8002d56 <LL_ADC_REG_IsConversionOngoing>
 8003672:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fb7e 	bl	8002d7c <LL_ADC_INJ_IsConversionOngoing>
 8003680:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 81d9 	bne.w	8003a40 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800368e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 81d4 	bne.w	8003a40 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a0:	d10f      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7ff fa71 	bl	8002b94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fa05 	bl	8002aca <LL_ADC_SetSamplingTimeCommonConfig>
 80036c0:	e00e      	b.n	80036e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7ff fa60 	bl	8002b94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9f5 	bl	8002aca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d022      	beq.n	8003748 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6919      	ldr	r1, [r3, #16]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003712:	f7ff f94f 	bl	80029b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6919      	ldr	r1, [r3, #16]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	461a      	mov	r2, r3
 8003724:	f7ff f99b 	bl	8002a5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <HAL_ADC_ConfigChannel+0x126>
 8003738:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373c:	e000      	b.n	8003740 <HAL_ADC_ConfigChannel+0x128>
 800373e:	2300      	movs	r3, #0
 8003740:	461a      	mov	r2, r3
 8003742:	f7ff f9a7 	bl	8002a94 <LL_ADC_SetOffsetSaturation>
 8003746:	e17b      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f954 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003754:	4603      	mov	r3, r0
 8003756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x15c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f949 	bl	80029fc <LL_ADC_GetOffsetChannel>
 800376a:	4603      	mov	r3, r0
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	e01e      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x19a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff f93e 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800379a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e004      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80037a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x1b2>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	e018      	b.n	80037fc <HAL_ADC_ConfigChannel+0x1e4>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80037de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80037e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80037ee:	2320      	movs	r3, #32
 80037f0:	e004      	b.n	80037fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80037f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d106      	bne.n	800380e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f90d 	bl	8002a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f8f1 	bl	80029fc <LL_ADC_GetOffsetChannel>
 800381a:	4603      	mov	r3, r0
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_ADC_ConfigChannel+0x222>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f8e6 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003830:	4603      	mov	r3, r0
 8003832:	0e9b      	lsrs	r3, r3, #26
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	e01e      	b.n	8003878 <HAL_ADC_ConfigChannel+0x260>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f8db 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800385c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e004      	b.n	8003876 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800386c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x278>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	e018      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x2aa>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80038a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80038ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	e004      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80038b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d106      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f8aa 	bl	8002a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2102      	movs	r1, #2
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f88e 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x2e8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2102      	movs	r1, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f883 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	f003 021f 	and.w	r2, r3, #31
 80038fe:	e01e      	b.n	800393e <HAL_ADC_ConfigChannel+0x326>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2102      	movs	r1, #2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff f878 	bl	80029fc <LL_ADC_GetOffsetChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800391e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e004      	b.n	800393c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x33e>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	e016      	b.n	8003984 <HAL_ADC_ConfigChannel+0x36c>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800396a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800396e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003976:	2320      	movs	r3, #32
 8003978:	e004      	b.n	8003984 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800397a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	2102      	movs	r1, #2
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f849 	bl	8002a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2103      	movs	r1, #3
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f82d 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x3aa>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2103      	movs	r1, #3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f822 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	0e9b      	lsrs	r3, r3, #26
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	e017      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x3da>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2103      	movs	r1, #3
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f817 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80039da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80039de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80039e4:	2320      	movs	r3, #32
 80039e6:	e003      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80039e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x3f2>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	0e9b      	lsrs	r3, r3, #26
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	e011      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x416>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e003      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d106      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	2103      	movs	r1, #3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fff4 	bl	8002a28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f973 	bl	8002d30 <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 813d 	bne.w	8003ccc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f7ff f8c4 	bl	8002bec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4aa2      	ldr	r2, [pc, #648]	; (8003cf4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f040 812e 	bne.w	8003ccc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x480>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	3301      	adds	r3, #1
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2b09      	cmp	r3, #9
 8003a8e:	bf94      	ite	ls
 8003a90:	2301      	movls	r3, #1
 8003a92:	2300      	movhi	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e019      	b.n	8003acc <HAL_ADC_ConfigChannel+0x4b4>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e003      	b.n	8003abc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	bf94      	ite	ls
 8003ac6:	2301      	movls	r3, #1
 8003ac8:	2300      	movhi	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d079      	beq.n	8003bc4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x4d4>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	069b      	lsls	r3, r3, #26
 8003ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aea:	e015      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x500>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e003      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	069b      	lsls	r3, r3, #26
 8003b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x520>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	e017      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x550>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b50:	2320      	movs	r3, #32
 8003b52:	e003      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	ea42 0103 	orr.w	r1, r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x576>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	0e9b      	lsrs	r3, r3, #26
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	051b      	lsls	r3, r3, #20
 8003b8c:	e018      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x5a8>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	e003      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	e07e      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x5c8>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	069b      	lsls	r3, r3, #26
 8003bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bde:	e015      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x5f4>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	069b      	lsls	r3, r3, #26
 8003c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x614>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	e017      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x644>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	61fb      	str	r3, [r7, #28]
  return result;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e003      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	ea42 0103 	orr.w	r1, r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x670>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b1e      	subs	r3, #30
 8003c80:	051b      	lsls	r3, r3, #20
 8003c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c86:	e01b      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x6a8>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	613b      	str	r3, [r7, #16]
  return result;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e003      	b.n	8003cac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3b1e      	subs	r3, #30
 8003cba:	051b      	lsls	r3, r3, #20
 8003cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	6892      	ldr	r2, [r2, #8]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7fe ff64 	bl	8002b94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80be 	beq.w	8003e56 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce2:	d004      	beq.n	8003cee <HAL_ADC_ConfigChannel+0x6d6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_ADC_ConfigChannel+0x6e4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10a      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x6ec>
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_ADC_ConfigChannel+0x6e8>)
 8003cf0:	e009      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x6ee>
 8003cf2:	bf00      	nop
 8003cf4:	407f0000 	.word	0x407f0000
 8003cf8:	80080000 	.word	0x80080000
 8003cfc:	50000100 	.word	0x50000100
 8003d00:	50000300 	.word	0x50000300
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_ADC_ConfigChannel+0x854>)
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fe46 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 8003d0c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a56      	ldr	r2, [pc, #344]	; (8003e70 <HAL_ADC_ConfigChannel+0x858>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_ADC_ConfigChannel+0x70c>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a55      	ldr	r2, [pc, #340]	; (8003e74 <HAL_ADC_ConfigChannel+0x85c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d13a      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d134      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d38:	d005      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x72e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a4e      	ldr	r2, [pc, #312]	; (8003e78 <HAL_ADC_ConfigChannel+0x860>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	f040 8085 	bne.w	8003e50 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4e:	d004      	beq.n	8003d5a <HAL_ADC_ConfigChannel+0x742>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a49      	ldr	r2, [pc, #292]	; (8003e7c <HAL_ADC_ConfigChannel+0x864>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x746>
 8003d5a:	4a49      	ldr	r2, [pc, #292]	; (8003e80 <HAL_ADC_ConfigChannel+0x868>)
 8003d5c:	e000      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x748>
 8003d5e:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <HAL_ADC_ConfigChannel+0x854>)
 8003d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7fe fe01 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d70:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <HAL_ADC_ConfigChannel+0x86c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	4a44      	ldr	r2, [pc, #272]	; (8003e88 <HAL_ADC_ConfigChannel+0x870>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d8a:	e002      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f9      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d98:	e05a      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <HAL_ADC_ConfigChannel+0x874>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d125      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11f      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <HAL_ADC_ConfigChannel+0x864>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d104      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x7ac>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <HAL_ADC_ConfigChannel+0x878>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d047      	beq.n	8003e54 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dcc:	d004      	beq.n	8003dd8 <HAL_ADC_ConfigChannel+0x7c0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <HAL_ADC_ConfigChannel+0x864>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x7c4>
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_ADC_ConfigChannel+0x868>)
 8003dda:	e000      	b.n	8003dde <HAL_ADC_ConfigChannel+0x7c6>
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_ADC_ConfigChannel+0x854>)
 8003dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe fdc2 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dee:	e031      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <HAL_ADC_ConfigChannel+0x87c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d12d      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d127      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_ADC_ConfigChannel+0x864>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e18:	d004      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x80c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_ADC_ConfigChannel+0x864>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x810>
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <HAL_ADC_ConfigChannel+0x868>)
 8003e26:	e000      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x812>
 8003e28:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_ADC_ConfigChannel+0x854>)
 8003e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fe fd9c 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
 8003e3a:	e00c      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e4e:	e002      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	37d8      	adds	r7, #216	; 0xd8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	50000700 	.word	0x50000700
 8003e70:	c3210000 	.word	0xc3210000
 8003e74:	90c00010 	.word	0x90c00010
 8003e78:	50000600 	.word	0x50000600
 8003e7c:	50000100 	.word	0x50000100
 8003e80:	50000300 	.word	0x50000300
 8003e84:	20000000 	.word	0x20000000
 8003e88:	053e2d63 	.word	0x053e2d63
 8003e8c:	c7520000 	.word	0xc7520000
 8003e90:	50000500 	.word	0x50000500
 8003e94:	cb840000 	.word	0xcb840000

08003e98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe ff41 	bl	8002d30 <LL_ADC_IsEnabled>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d176      	bne.n	8003fa2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <ADC_Enable+0x114>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e062      	b.n	8003fa4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe ff10 	bl	8002d08 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef0:	d004      	beq.n	8003efc <ADC_Enable+0x64>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2e      	ldr	r2, [pc, #184]	; (8003fb0 <ADC_Enable+0x118>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <ADC_Enable+0x68>
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <ADC_Enable+0x11c>)
 8003efe:	e000      	b.n	8003f02 <ADC_Enable+0x6a>
 8003f00:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <ADC_Enable+0x120>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fd48 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 8003f08:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d013      	beq.n	8003f3a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <ADC_Enable+0x124>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <ADC_Enable+0x128>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f2c:	e002      	b.n	8003f34 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f9      	bne.n	8003f2e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f3a:	f7fe fcfb 	bl	8002934 <HAL_GetTick>
 8003f3e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f40:	e028      	b.n	8003f94 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fef2 	bl	8002d30 <LL_ADC_IsEnabled>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fed6 	bl	8002d08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f5c:	f7fe fcea 	bl	8002934 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d914      	bls.n	8003f94 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d00d      	beq.n	8003f94 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f043 0210 	orr.w	r2, r3, #16
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e007      	b.n	8003fa4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d1cf      	bne.n	8003f42 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	8000003f 	.word	0x8000003f
 8003fb0:	50000100 	.word	0x50000100
 8003fb4:	50000300 	.word	0x50000300
 8003fb8:	50000700 	.word	0x50000700
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	053e2d63 	.word	0x053e2d63

08003fc4 <LL_ADC_SetCommonPathInternalCh>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_ADC_GetCommonPathInternalCh>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <LL_ADC_SetOffset>:
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3360      	adds	r3, #96	; 0x60
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b08      	ldr	r3, [pc, #32]	; (800404c <LL_ADC_SetOffset+0x44>)
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	03fff000 	.word	0x03fff000

08004050 <LL_ADC_GetOffsetChannel>:
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3360      	adds	r3, #96	; 0x60
 800405e:	461a      	mov	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_SetOffsetState>:
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3360      	adds	r3, #96	; 0x60
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	601a      	str	r2, [r3, #0]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_ADC_SetOffsetSign>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	b087      	sub	sp, #28
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3360      	adds	r3, #96	; 0x60
 80040c2:	461a      	mov	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	601a      	str	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_SetOffsetSaturation>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3360      	adds	r3, #96	; 0x60
 80040f8:	461a      	mov	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	431a      	orrs	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	601a      	str	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	615a      	str	r2, [r3, #20]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_ADC_INJ_GetTrigAuto>:
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_SetChannelSamplingTime>:
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3314      	adds	r3, #20
 8004170:	461a      	mov	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	0e5b      	lsrs	r3, r3, #25
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0d1b      	lsrs	r3, r3, #20
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2107      	movs	r1, #7
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	401a      	ands	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0d1b      	lsrs	r3, r3, #20
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	431a      	orrs	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <LL_ADC_SetChannelSingleDiff>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0318 	and.w	r3, r3, #24
 80041da:	4908      	ldr	r1, [pc, #32]	; (80041fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80041dc:	40d9      	lsrs	r1, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	400b      	ands	r3, r1
 80041e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	0007ffff 	.word	0x0007ffff

08004200 <LL_ADC_GetMultimode>:
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 031f 	and.w	r3, r3, #31
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_IsEnabled>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <LL_ADC_IsEnabled+0x18>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <LL_ADC_IsEnabled+0x1a>
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_ADC_REG_IsConversionOngoing>:
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d101      	bne.n	800425a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_ADC_INJ_StartConversion>:
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800427c:	f043 0208 	orr.w	r2, r3, #8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_INJ_IsConversionOngoing>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d101      	bne.n	80042a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c8:	d004      	beq.n	80042d4 <HAL_ADCEx_InjectedStart_IT+0x1c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a78      	ldr	r2, [pc, #480]	; (80044b0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d101      	bne.n	80042d8 <HAL_ADCEx_InjectedStart_IT+0x20>
 80042d4:	4b77      	ldr	r3, [pc, #476]	; (80044b4 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 80042d6:	e000      	b.n	80042da <HAL_ADCEx_InjectedStart_IT+0x22>
 80042d8:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_ADCEx_InjectedStart_IT+0x200>)
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff90 	bl	8004200 <LL_ADC_GetMultimode>
 80042e0:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ffd2 	bl	8004290 <LL_ADC_INJ_IsConversionOngoing>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0d8      	b.n	80044a8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004300:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	f043 0220 	orr.w	r2, r3, #32
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0c0      	b.n	80044a8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004330:	2302      	movs	r3, #2
 8004332:	e0b9      	b.n	80044a8 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fdab 	bl	8003e98 <ADC_Enable>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 80a8 	bne.w	800449e <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435e:	f023 0208 	bic.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	661a      	str	r2, [r3, #96]	; 0x60
 8004366:	e002      	b.n	800436e <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4a      	ldr	r2, [pc, #296]	; (80044b0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_ADCEx_InjectedStart_IT+0xe8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4a      	ldr	r2, [pc, #296]	; (80044bc <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d002      	beq.n	800439c <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e003      	b.n	80043a4 <HAL_ADCEx_InjectedStart_IT+0xec>
 800439c:	4b48      	ldr	r3, [pc, #288]	; (80044c0 <HAL_ADCEx_InjectedStart_IT+0x208>)
 800439e:	e001      	b.n	80043a4 <HAL_ADCEx_InjectedStart_IT+0xec>
 80043a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d002      	beq.n	80043b2 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2260      	movs	r2, #96	; 0x60
 80043c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ea:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d110      	bne.n	8004416 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0220 	bic.w	r2, r2, #32
 8004402:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004412:	605a      	str	r2, [r3, #4]
          break;
 8004414:	e010      	b.n	8004438 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004424:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0220 	orr.w	r2, r2, #32
 8004434:	605a      	str	r2, [r3, #4]
          break;
 8004436:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d002      	beq.n	8004452 <HAL_ADCEx_InjectedStart_IT+0x19a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	e003      	b.n	800445a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004452:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004454:	e001      	b.n	800445a <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	4293      	cmp	r3, r2
 8004460:	d008      	beq.n	8004474 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b06      	cmp	r3, #6
 800446c:	d002      	beq.n	8004474 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b07      	cmp	r3, #7
 8004472:	d10d      	bne.n	8004490 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fe63 	bl	8004144 <LL_ADC_INJ_GetTrigAuto>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d110      	bne.n	80044a6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff feed 	bl	8004268 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800448e:	e00a      	b.n	80044a6 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004494:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
 800449c:	e003      	b.n	80044a6 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	50000100 	.word	0x50000100
 80044b4:	50000300 	.word	0x50000300
 80044b8:	50000700 	.word	0x50000700
 80044bc:	50000500 	.word	0x50000500
 80044c0:	50000400 	.word	0x50000400

080044c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0b6      	sub	sp, #216	; 0xd8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004548:	2b01      	cmp	r3, #1
 800454a:	d102      	bne.n	8004552 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800454c:	2302      	movs	r3, #2
 800454e:	f000 bcfd 	b.w	8004f4c <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004566:	2b01      	cmp	r3, #1
 8004568:	d130      	bne.n	80045cc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b09      	cmp	r3, #9
 8004570:	d179      	bne.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0e9b      	lsrs	r3, r3, #26
 8004580:	025b      	lsls	r3, r3, #9
 8004582:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800458e:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800459a:	e007      	b.n	80045ac <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0e9b      	lsrs	r3, r3, #26
 80045a2:	025b      	lsls	r3, r3, #9
 80045a4:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80045a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b2:	4b84      	ldr	r3, [pc, #528]	; (80047c4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80045be:	430b      	orrs	r3, r1
 80045c0:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045c8:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80045ca:	e04c      	b.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11d      	bne.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80045f8:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004604:	e004      	b.n	8004610 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	3b01      	subs	r3, #1
 800460c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	f003 021f 	and.w	r2, r3, #31
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800463e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	430b      	orrs	r3, r1
 8004664:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fe10 	bl	8004290 <LL_ADC_INJ_IsConversionOngoing>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d124      	bne.n	80046c0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800467c:	2b00      	cmp	r3, #0
 800467e:	d112      	bne.n	80046a6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004690:	055a      	lsls	r2, r3, #21
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e00c      	b.n	80046c0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80046b6:	055a      	lsls	r2, r3, #21
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fdbc 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 80046ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fddc 	bl	8004290 <LL_ADC_INJ_IsConversionOngoing>
 80046d8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 822e 	bne.w	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 8229 	bne.w	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d116      	bne.n	800472e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004706:	2b01      	cmp	r3, #1
 8004708:	d108      	bne.n	800471c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004718:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800471a:	e01f      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800472a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800472c:	e016      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004734:	2b01      	cmp	r3, #1
 8004736:	d109      	bne.n	800474c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800474a:	e007      	b.n	800475c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800475a:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004762:	2b01      	cmp	r3, #1
 8004764:	d110      	bne.n	8004788 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	430b      	orrs	r3, r1
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0202 	orr.w	r2, r2, #2
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	e007      	b.n	8004798 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0202 	bic.w	r2, r2, #2
 8004796:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a0:	d112      	bne.n	80047c8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	4619      	mov	r1, r3
 80047ae:	f7ff fcd7 	bl	8004160 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fcaf 	bl	800411e <LL_ADC_SetSamplingTimeCommonConfig>
 80047c0:	e011      	b.n	80047e6 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80047c2:	bf00      	nop
 80047c4:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fcc3 	bl	8004160 <LL_ADC_SetChannelSamplingTime>
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fc9c 	bl	800411e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d022      	beq.n	800484e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6919      	ldr	r1, [r3, #16]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004818:	f7ff fbf6 	bl	8004008 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6919      	ldr	r1, [r3, #16]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	461a      	mov	r2, r3
 800482a:	f7ff fc42 	bl	80040b2 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800483a:	2b01      	cmp	r3, #1
 800483c:	d102      	bne.n	8004844 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800483e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004842:	e000      	b.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004844:	2300      	movs	r3, #0
 8004846:	461a      	mov	r2, r3
 8004848:	f7ff fc4e 	bl	80040e8 <LL_ADC_SetOffsetSaturation>
 800484c:	e179      	b.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fbfb 	bl	8004050 <LL_ADC_GetOffsetChannel>
 800485a:	4603      	mov	r3, r0
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fbf0 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004870:	4603      	mov	r3, r0
 8004872:	0e9b      	lsrs	r3, r3, #26
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	e01e      	b.n	80048b8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fbe5 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800489c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80048a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80048a8:	2320      	movs	r3, #32
 80048aa:	e004      	b.n	80048b6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80048ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	e018      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80048e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80048ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e004      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80048f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004902:	429a      	cmp	r2, r3
 8004904:	d106      	bne.n	8004914 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fbb4 	bl	800407c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fb98 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004920:	4603      	mov	r3, r0
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fb8d 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	e01e      	b.n	800497e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fb82 	bl	8004050 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800495e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e004      	b.n	800497c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0e9b      	lsrs	r3, r3, #26
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	e018      	b.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80049aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80049b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80049be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2101      	movs	r1, #1
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fb51 	bl	800407c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fb35 	bl	8004050 <LL_ADC_GetOffsetChannel>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fb2a 	bl	8004050 <LL_ADC_GetOffsetChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	e01e      	b.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fb1f 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e004      	b.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	e014      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e004      	b.n	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d106      	bne.n	8004a98 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff faf2 	bl	800407c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2103      	movs	r1, #3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fad6 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff facb 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	f003 021f 	and.w	r2, r3, #31
 8004ac2:	e017      	b.n	8004af4 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2103      	movs	r1, #3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fac0 	bl	8004050 <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	e003      	b.n	8004af2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aec:	fab3 f383 	clz	r3, r3
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	e011      	b.n	8004b30 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004b24:	2320      	movs	r3, #32
 8004b26:	e003      	b.n	8004b30 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d106      	bne.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fa9d 	bl	800407c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fb68 	bl	800421c <LL_ADC_IsEnabled>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 813d 	bne.w	8004dce <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f7ff fb29 	bl	80041b8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4aa2      	ldr	r2, [pc, #648]	; (8004df4 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f040 812e 	bne.w	8004dce <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	bf94      	ite	ls
 8004b92:	2301      	movls	r3, #1
 8004b94:	2300      	movhi	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e019      	b.n	8004bce <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004baa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e003      	b.n	8004bbe <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2b09      	cmp	r3, #9
 8004bc6:	bf94      	ite	ls
 8004bc8:	2301      	movls	r3, #1
 8004bca:	2300      	movhi	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d079      	beq.n	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	0e9b      	lsrs	r3, r3, #26
 8004be4:	3301      	adds	r3, #1
 8004be6:	069b      	lsls	r3, r3, #26
 8004be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bec:	e015      	b.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e003      	b.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	069b      	lsls	r3, r3, #26
 8004c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0e9b      	lsrs	r3, r3, #26
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	e017      	b.n	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004c52:	2320      	movs	r3, #32
 8004c54:	e003      	b.n	8004c5e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2101      	movs	r1, #1
 8004c66:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6a:	ea42 0103 	orr.w	r1, r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	0e9b      	lsrs	r3, r3, #26
 8004c80:	3301      	adds	r3, #1
 8004c82:	f003 021f 	and.w	r2, r3, #31
 8004c86:	4613      	mov	r3, r2
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	4413      	add	r3, r2
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	e018      	b.n	8004cc2 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004ca8:	2320      	movs	r3, #32
 8004caa:	e003      	b.n	8004cb4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	fab3 f383 	clz	r3, r3
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	4613      	mov	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	e07e      	b.n	8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	0e9b      	lsrs	r3, r3, #26
 8004cd8:	3301      	adds	r3, #1
 8004cda:	069b      	lsls	r3, r3, #26
 8004cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ce0:	e015      	b.n	8004d0e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	e003      	b.n	8004d06 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	3301      	adds	r3, #1
 8004d08:	069b      	lsls	r3, r3, #26
 8004d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2101      	movs	r1, #1
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	e017      	b.n	8004d5e <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	fa93 f3a3 	rbit	r3, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
  return result;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004d46:	2320      	movs	r3, #32
 8004d48:	e003      	b.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2101      	movs	r1, #1
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	ea42 0103 	orr.w	r1, r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	0e9b      	lsrs	r3, r3, #26
 8004d74:	3301      	adds	r3, #1
 8004d76:	f003 021f 	and.w	r2, r3, #31
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	3b1e      	subs	r3, #30
 8004d82:	051b      	lsls	r3, r3, #20
 8004d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d88:	e01b      	b.n	8004dc2 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]
  return result;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004da2:	2320      	movs	r3, #32
 8004da4:	e003      	b.n	8004dae <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f003 021f 	and.w	r2, r3, #31
 8004db4:	4613      	mov	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4413      	add	r3, r2
 8004dba:	3b1e      	subs	r3, #30
 8004dbc:	051b      	lsls	r3, r3, #20
 8004dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7ff f9c9 	bl	8004160 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80b2 	beq.w	8004f40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de4:	d004      	beq.n	8004df0 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d109      	bne.n	8004e04 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8004df2:	e008      	b.n	8004e06 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004df4:	407f0000 	.word	0x407f0000
 8004df8:	80080000 	.word	0x80080000
 8004dfc:	50000100 	.word	0x50000100
 8004e00:	50000300 	.word	0x50000300
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff f8ef 	bl	8003fea <LL_ADC_GetCommonPathInternalCh>
 8004e0c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a50      	ldr	r2, [pc, #320]	; (8004f58 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4f      	ldr	r2, [pc, #316]	; (8004f5c <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d139      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d133      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e38:	d004      	beq.n	8004e44 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a48      	ldr	r2, [pc, #288]	; (8004f60 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d17a      	bne.n	8004f3a <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4c:	d004      	beq.n	8004e58 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a44      	ldr	r2, [pc, #272]	; (8004f64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004e58:	4a43      	ldr	r2, [pc, #268]	; (8004f68 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004e5a:	e000      	b.n	8004e5e <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004e5c:	4a3d      	ldr	r2, [pc, #244]	; (8004f54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f7ff f8ab 	bl	8003fc4 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004e6e:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	4a3e      	ldr	r2, [pc, #248]	; (8004f70 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	099a      	lsrs	r2, r3, #6
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004e86:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e88:	e002      	b.n	8004e90 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f9      	bne.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e96:	e050      	b.n	8004f3a <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a35      	ldr	r2, [pc, #212]	; (8004f74 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d125      	bne.n	8004eee <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11f      	bne.n	8004eee <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d104      	bne.n	8004ec2 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2e      	ldr	r2, [pc, #184]	; (8004f78 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d03d      	beq.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eca:	d004      	beq.n	8004ed6 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8004ed6:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004ed8:	e000      	b.n	8004edc <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8004eda:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7ff f86c 	bl	8003fc4 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eec:	e027      	b.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d123      	bne.n	8004f40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11d      	bne.n	8004f40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f16:	d004      	beq.n	8004f22 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004f24:	e000      	b.n	8004f28 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8004f26:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f7ff f846 	bl	8003fc4 <LL_ADC_SetCommonPathInternalCh>
 8004f38:	e002      	b.n	8004f40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f3e:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f48:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	37d8      	adds	r7, #216	; 0xd8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	50000700 	.word	0x50000700
 8004f58:	c3210000 	.word	0xc3210000
 8004f5c:	90c00010 	.word	0x90c00010
 8004f60:	50000600 	.word	0x50000600
 8004f64:	50000100 	.word	0x50000100
 8004f68:	50000300 	.word	0x50000300
 8004f6c:	20000000 	.word	0x20000000
 8004f70:	053e2d63 	.word	0x053e2d63
 8004f74:	c7520000 	.word	0xc7520000
 8004f78:	50000500 	.word	0x50000500
 8004f7c:	cb840000 	.word	0xcb840000

08004f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b0a1      	sub	sp, #132	; 0x84
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0e7      	b.n	800516e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004faa:	2300      	movs	r3, #0
 8004fac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fb6:	d102      	bne.n	8004fbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fb8:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	e009      	b.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6e      	ldr	r2, [pc, #440]	; (800517c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d102      	bne.n	8004fce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004fc8:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	e001      	b.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0be      	b.n	800516e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff f925 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 8004ff8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff f91f 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 80a0 	bne.w	800514c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800500c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 809c 	bne.w	800514c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800501c:	d004      	beq.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a55      	ldr	r2, [pc, #340]	; (8005178 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005028:	4b56      	ldr	r3, [pc, #344]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800502a:	e000      	b.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800502c:	4b56      	ldr	r3, [pc, #344]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800502e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04b      	beq.n	80050d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800504a:	035b      	lsls	r3, r3, #13
 800504c:	430b      	orrs	r3, r1
 800504e:	431a      	orrs	r2, r3
 8005050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005052:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800505c:	d004      	beq.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a45      	ldr	r2, [pc, #276]	; (8005178 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10f      	bne.n	8005088 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005068:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800506c:	f7ff f8d6 	bl	800421c <LL_ADC_IsEnabled>
 8005070:	4604      	mov	r4, r0
 8005072:	4841      	ldr	r0, [pc, #260]	; (8005178 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005074:	f7ff f8d2 	bl	800421c <LL_ADC_IsEnabled>
 8005078:	4603      	mov	r3, r0
 800507a:	4323      	orrs	r3, r4
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e012      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005088:	483c      	ldr	r0, [pc, #240]	; (800517c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800508a:	f7ff f8c7 	bl	800421c <LL_ADC_IsEnabled>
 800508e:	4604      	mov	r4, r0
 8005090:	483b      	ldr	r0, [pc, #236]	; (8005180 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005092:	f7ff f8c3 	bl	800421c <LL_ADC_IsEnabled>
 8005096:	4603      	mov	r3, r0
 8005098:	431c      	orrs	r4, r3
 800509a:	483c      	ldr	r0, [pc, #240]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800509c:	f7ff f8be 	bl	800421c <LL_ADC_IsEnabled>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4323      	orrs	r3, r4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d056      	beq.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80050ba:	f023 030f 	bic.w	r3, r3, #15
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	6811      	ldr	r1, [r2, #0]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050cc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050ce:	e047      	b.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e4:	d004      	beq.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a23      	ldr	r2, [pc, #140]	; (8005178 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10f      	bne.n	8005110 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80050f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050f4:	f7ff f892 	bl	800421c <LL_ADC_IsEnabled>
 80050f8:	4604      	mov	r4, r0
 80050fa:	481f      	ldr	r0, [pc, #124]	; (8005178 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050fc:	f7ff f88e 	bl	800421c <LL_ADC_IsEnabled>
 8005100:	4603      	mov	r3, r0
 8005102:	4323      	orrs	r3, r4
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e012      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005110:	481a      	ldr	r0, [pc, #104]	; (800517c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005112:	f7ff f883 	bl	800421c <LL_ADC_IsEnabled>
 8005116:	4604      	mov	r4, r0
 8005118:	4819      	ldr	r0, [pc, #100]	; (8005180 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800511a:	f7ff f87f 	bl	800421c <LL_ADC_IsEnabled>
 800511e:	4603      	mov	r3, r0
 8005120:	431c      	orrs	r4, r3
 8005122:	481a      	ldr	r0, [pc, #104]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005124:	f7ff f87a 	bl	800421c <LL_ADC_IsEnabled>
 8005128:	4603      	mov	r3, r0
 800512a:	4323      	orrs	r3, r4
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d012      	beq.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800513a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005142:	f023 030f 	bic.w	r3, r3, #15
 8005146:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005148:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800514a:	e009      	b.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800515e:	e000      	b.n	8005162 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005160:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800516a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800516e:	4618      	mov	r0, r3
 8005170:	3784      	adds	r7, #132	; 0x84
 8005172:	46bd      	mov	sp, r7
 8005174:	bd90      	pop	{r4, r7, pc}
 8005176:	bf00      	nop
 8005178:	50000100 	.word	0x50000100
 800517c:	50000400 	.word	0x50000400
 8005180:	50000500 	.word	0x50000500
 8005184:	50000300 	.word	0x50000300
 8005188:	50000700 	.word	0x50000700
 800518c:	50000600 	.word	0x50000600

08005190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <__NVIC_SetPriorityGrouping+0x44>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051ac:	4013      	ands	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051c2:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <__NVIC_SetPriorityGrouping+0x44>)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	60d3      	str	r3, [r2, #12]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <__NVIC_GetPriorityGrouping+0x18>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	f003 0307 	and.w	r3, r3, #7
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	e000ed00 	.word	0xe000ed00

080051f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	db0b      	blt.n	800521e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	f003 021f 	and.w	r2, r3, #31
 800520c:	4907      	ldr	r1, [pc, #28]	; (800522c <__NVIC_EnableIRQ+0x38>)
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2001      	movs	r0, #1
 8005216:	fa00 f202 	lsl.w	r2, r0, r2
 800521a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	e000e100 	.word	0xe000e100

08005230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	2b00      	cmp	r3, #0
 8005242:	db0a      	blt.n	800525a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	490c      	ldr	r1, [pc, #48]	; (800527c <__NVIC_SetPriority+0x4c>)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	0112      	lsls	r2, r2, #4
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	440b      	add	r3, r1
 8005254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005258:	e00a      	b.n	8005270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4908      	ldr	r1, [pc, #32]	; (8005280 <__NVIC_SetPriority+0x50>)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	3b04      	subs	r3, #4
 8005268:	0112      	lsls	r2, r2, #4
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	440b      	add	r3, r1
 800526e:	761a      	strb	r2, [r3, #24]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000e100 	.word	0xe000e100
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f1c3 0307 	rsb	r3, r3, #7
 800529e:	2b04      	cmp	r3, #4
 80052a0:	bf28      	it	cs
 80052a2:	2304      	movcs	r3, #4
 80052a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3304      	adds	r3, #4
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d902      	bls.n	80052b4 <NVIC_EncodePriority+0x30>
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3b03      	subs	r3, #3
 80052b2:	e000      	b.n	80052b6 <NVIC_EncodePriority+0x32>
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b8:	f04f 32ff 	mov.w	r2, #4294967295
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43da      	mvns	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	401a      	ands	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052cc:	f04f 31ff 	mov.w	r1, #4294967295
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	43d9      	mvns	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052dc:	4313      	orrs	r3, r2
         );
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3724      	adds	r7, #36	; 0x24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052fc:	d301      	bcc.n	8005302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052fe:	2301      	movs	r3, #1
 8005300:	e00f      	b.n	8005322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <SysTick_Config+0x40>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3b01      	subs	r3, #1
 8005308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800530a:	210f      	movs	r1, #15
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	f7ff ff8e 	bl	8005230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <SysTick_Config+0x40>)
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <SysTick_Config+0x40>)
 800531c:	2207      	movs	r2, #7
 800531e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	e000e010 	.word	0xe000e010

08005330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff29 	bl	8005190 <__NVIC_SetPriorityGrouping>
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	4603      	mov	r3, r0
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005354:	f7ff ff40 	bl	80051d8 <__NVIC_GetPriorityGrouping>
 8005358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff ff90 	bl	8005284 <NVIC_EncodePriority>
 8005364:	4602      	mov	r2, r0
 8005366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536a:	4611      	mov	r1, r2
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff ff5f 	bl	8005230 <__NVIC_SetPriority>
}
 8005372:	bf00      	nop
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	4603      	mov	r3, r0
 8005382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff33 	bl	80051f4 <__NVIC_EnableIRQ>
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ffa4 	bl	80052ec <SysTick_Config>
 80053a4:	4603      	mov	r3, r0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053be:	e15a      	b.n	8005676 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 814c 	beq.w	8005670 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d005      	beq.n	80053f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d130      	bne.n	8005452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	2203      	movs	r2, #3
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005426:	2201      	movs	r2, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 0201 	and.w	r2, r3, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d017      	beq.n	800548e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	2203      	movs	r2, #3
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d123      	bne.n	80054e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	08da      	lsrs	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3208      	adds	r2, #8
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	220f      	movs	r2, #15
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	08da      	lsrs	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3208      	adds	r2, #8
 80054dc:	6939      	ldr	r1, [r7, #16]
 80054de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	2203      	movs	r2, #3
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0203 	and.w	r2, r3, #3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80a6 	beq.w	8005670 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005524:	4b5b      	ldr	r3, [pc, #364]	; (8005694 <HAL_GPIO_Init+0x2e4>)
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	4a5a      	ldr	r2, [pc, #360]	; (8005694 <HAL_GPIO_Init+0x2e4>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6613      	str	r3, [r2, #96]	; 0x60
 8005530:	4b58      	ldr	r3, [pc, #352]	; (8005694 <HAL_GPIO_Init+0x2e4>)
 8005532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800553c:	4a56      	ldr	r2, [pc, #344]	; (8005698 <HAL_GPIO_Init+0x2e8>)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	089b      	lsrs	r3, r3, #2
 8005542:	3302      	adds	r3, #2
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	220f      	movs	r2, #15
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005566:	d01f      	beq.n	80055a8 <HAL_GPIO_Init+0x1f8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a4c      	ldr	r2, [pc, #304]	; (800569c <HAL_GPIO_Init+0x2ec>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d019      	beq.n	80055a4 <HAL_GPIO_Init+0x1f4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a4b      	ldr	r2, [pc, #300]	; (80056a0 <HAL_GPIO_Init+0x2f0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_GPIO_Init+0x1f0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_GPIO_Init+0x2f4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00d      	beq.n	800559c <HAL_GPIO_Init+0x1ec>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a49      	ldr	r2, [pc, #292]	; (80056a8 <HAL_GPIO_Init+0x2f8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <HAL_GPIO_Init+0x1e8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a48      	ldr	r2, [pc, #288]	; (80056ac <HAL_GPIO_Init+0x2fc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d101      	bne.n	8005594 <HAL_GPIO_Init+0x1e4>
 8005590:	2305      	movs	r3, #5
 8005592:	e00a      	b.n	80055aa <HAL_GPIO_Init+0x1fa>
 8005594:	2306      	movs	r3, #6
 8005596:	e008      	b.n	80055aa <HAL_GPIO_Init+0x1fa>
 8005598:	2304      	movs	r3, #4
 800559a:	e006      	b.n	80055aa <HAL_GPIO_Init+0x1fa>
 800559c:	2303      	movs	r3, #3
 800559e:	e004      	b.n	80055aa <HAL_GPIO_Init+0x1fa>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e002      	b.n	80055aa <HAL_GPIO_Init+0x1fa>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <HAL_GPIO_Init+0x1fa>
 80055a8:	2300      	movs	r3, #0
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	f002 0203 	and.w	r2, r2, #3
 80055b0:	0092      	lsls	r2, r2, #2
 80055b2:	4093      	lsls	r3, r2
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055ba:	4937      	ldr	r1, [pc, #220]	; (8005698 <HAL_GPIO_Init+0x2e8>)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	3302      	adds	r3, #2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_GPIO_Init+0x300>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055ec:	4a30      	ldr	r2, [pc, #192]	; (80056b0 <HAL_GPIO_Init+0x300>)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055f2:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <HAL_GPIO_Init+0x300>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <HAL_GPIO_Init+0x300>)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800561c:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <HAL_GPIO_Init+0x300>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	43db      	mvns	r3, r3
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4013      	ands	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005640:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <HAL_GPIO_Init+0x300>)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005646:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_GPIO_Init+0x300>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	43db      	mvns	r3, r3
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4013      	ands	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800566a:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <HAL_GPIO_Init+0x300>)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3301      	adds	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	f47f ae9d 	bne.w	80053c0 <HAL_GPIO_Init+0x10>
  }
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40021000 	.word	0x40021000
 8005698:	40010000 	.word	0x40010000
 800569c:	48000400 	.word	0x48000400
 80056a0:	48000800 	.word	0x48000800
 80056a4:	48000c00 	.word	0x48000c00
 80056a8:	48001000 	.word	0x48001000
 80056ac:	48001400 	.word	0x48001400
 80056b0:	40010400 	.word	0x40010400

080056b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	807b      	strh	r3, [r7, #2]
 80056c0:	4613      	mov	r3, r2
 80056c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056c4:	787b      	ldrb	r3, [r7, #1]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056d0:	e002      	b.n	80056d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056d2:	887a      	ldrh	r2, [r7, #2]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056f6:	887a      	ldrh	r2, [r7, #2]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4013      	ands	r3, r2
 80056fc:	041a      	lsls	r2, r3, #16
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	43d9      	mvns	r1, r3
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	400b      	ands	r3, r1
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d141      	bne.n	80057aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005726:	4b4b      	ldr	r3, [pc, #300]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005732:	d131      	bne.n	8005798 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005734:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573a:	4a46      	ldr	r2, [pc, #280]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005744:	4b43      	ldr	r3, [pc, #268]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800574c:	4a41      	ldr	r2, [pc, #260]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005752:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005754:	4b40      	ldr	r3, [pc, #256]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2232      	movs	r2, #50	; 0x32
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	4a3f      	ldr	r2, [pc, #252]	; (800585c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	0c9b      	lsrs	r3, r3, #18
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800576a:	e002      	b.n	8005772 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005772:	4b38      	ldr	r3, [pc, #224]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577e:	d102      	bne.n	8005786 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f2      	bne.n	800576c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005786:	4b33      	ldr	r3, [pc, #204]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d158      	bne.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e057      	b.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005798:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579e:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057a8:	e04d      	b.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b0:	d141      	bne.n	8005836 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057b2:	4b28      	ldr	r3, [pc, #160]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	d131      	bne.n	8005824 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057c0:	4b24      	ldr	r3, [pc, #144]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c6:	4a23      	ldr	r2, [pc, #140]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057e0:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2232      	movs	r2, #50	; 0x32
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	0c9b      	lsrs	r3, r3, #18
 80057f2:	3301      	adds	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057f6:	e002      	b.n	80057fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580a:	d102      	bne.n	8005812 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f2      	bne.n	80057f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581e:	d112      	bne.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e011      	b.n	8005848 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005834:	e007      	b.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005836:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800583e:	4a05      	ldr	r2, [pc, #20]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005844:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40007000 	.word	0x40007000
 8005858:	20000000 	.word	0x20000000
 800585c:	431bde83 	.word	0x431bde83

08005860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e2fe      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d075      	beq.n	800596a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800587e:	4b97      	ldr	r3, [pc, #604]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005888:	4b94      	ldr	r3, [pc, #592]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d102      	bne.n	800589e <HAL_RCC_OscConfig+0x3e>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d002      	beq.n	80058a4 <HAL_RCC_OscConfig+0x44>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10b      	bne.n	80058bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a4:	4b8d      	ldr	r3, [pc, #564]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d05b      	beq.n	8005968 <HAL_RCC_OscConfig+0x108>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d157      	bne.n	8005968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e2d9      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	d106      	bne.n	80058d4 <HAL_RCC_OscConfig+0x74>
 80058c6:	4b85      	ldr	r3, [pc, #532]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a84      	ldr	r2, [pc, #528]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e01d      	b.n	8005910 <HAL_RCC_OscConfig+0xb0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x98>
 80058de:	4b7f      	ldr	r3, [pc, #508]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a7e      	ldr	r2, [pc, #504]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b7c      	ldr	r3, [pc, #496]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a7b      	ldr	r2, [pc, #492]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0xb0>
 80058f8:	4b78      	ldr	r3, [pc, #480]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a77      	ldr	r2, [pc, #476]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	4b75      	ldr	r3, [pc, #468]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a74      	ldr	r2, [pc, #464]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 800590a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fd f80c 	bl	8002934 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005920:	f7fd f808 	bl	8002934 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e29e      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005932:	4b6a      	ldr	r3, [pc, #424]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0xc0>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fc fff8 	bl	8002934 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005948:	f7fc fff4 	bl	8002934 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	; 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e28a      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595a:	4b60      	ldr	r3, [pc, #384]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0xe8>
 8005966:	e000      	b.n	800596a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d075      	beq.n	8005a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005976:	4b59      	ldr	r3, [pc, #356]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005980:	4b56      	ldr	r3, [pc, #344]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b0c      	cmp	r3, #12
 800598e:	d102      	bne.n	8005996 <HAL_RCC_OscConfig+0x136>
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d002      	beq.n	800599c <HAL_RCC_OscConfig+0x13c>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d11f      	bne.n	80059dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800599c:	4b4f      	ldr	r3, [pc, #316]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_OscConfig+0x154>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e25d      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b4:	4b49      	ldr	r3, [pc, #292]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	061b      	lsls	r3, r3, #24
 80059c2:	4946      	ldr	r1, [pc, #280]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059c8:	4b45      	ldr	r3, [pc, #276]	; (8005ae0 <HAL_RCC_OscConfig+0x280>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fc ff65 	bl	800289c <HAL_InitTick>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d043      	beq.n	8005a60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e249      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d023      	beq.n	8005a2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80059ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fc ffa0 	bl	8002934 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f8:	f7fc ff9c 	bl	8002934 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e232      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a0a:	4b34      	ldr	r3, [pc, #208]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a16:	4b31      	ldr	r3, [pc, #196]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	492d      	ldr	r1, [pc, #180]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	604b      	str	r3, [r1, #4]
 8005a2a:	e01a      	b.n	8005a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a38:	f7fc ff7c 	bl	8002934 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a40:	f7fc ff78 	bl	8002934 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e20e      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a52:	4b22      	ldr	r3, [pc, #136]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0x1e0>
 8005a5e:	e000      	b.n	8005a62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d041      	beq.n	8005af2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01c      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a76:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a7c:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a86:	f7fc ff55 	bl	8002934 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a8e:	f7fc ff51 	bl	8002934 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e1e7      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ef      	beq.n	8005a8e <HAL_RCC_OscConfig+0x22e>
 8005aae:	e020      	b.n	8005af2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fc ff38 	bl	8002934 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ac6:	e00d      	b.n	8005ae4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac8:	f7fc ff34 	bl	8002934 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d906      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e1ca      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ae4:	4b8c      	ldr	r3, [pc, #560]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1ea      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80a6 	beq.w	8005c4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b04:	4b84      	ldr	r3, [pc, #528]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_OscConfig+0x2b4>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_RCC_OscConfig+0x2b6>
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00d      	beq.n	8005b36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	4b7f      	ldr	r3, [pc, #508]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	4a7e      	ldr	r2, [pc, #504]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6593      	str	r3, [r2, #88]	; 0x58
 8005b26:	4b7c      	ldr	r3, [pc, #496]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b32:	2301      	movs	r3, #1
 8005b34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b36:	4b79      	ldr	r3, [pc, #484]	; (8005d1c <HAL_RCC_OscConfig+0x4bc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d118      	bne.n	8005b74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b42:	4b76      	ldr	r3, [pc, #472]	; (8005d1c <HAL_RCC_OscConfig+0x4bc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a75      	ldr	r2, [pc, #468]	; (8005d1c <HAL_RCC_OscConfig+0x4bc>)
 8005b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b4e:	f7fc fef1 	bl	8002934 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b56:	f7fc feed 	bl	8002934 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e183      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b68:	4b6c      	ldr	r3, [pc, #432]	; (8005d1c <HAL_RCC_OscConfig+0x4bc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d108      	bne.n	8005b8e <HAL_RCC_OscConfig+0x32e>
 8005b7c:	4b66      	ldr	r3, [pc, #408]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b8c:	e024      	b.n	8005bd8 <HAL_RCC_OscConfig+0x378>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d110      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x358>
 8005b96:	4b60      	ldr	r3, [pc, #384]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9c:	4a5e      	ldr	r2, [pc, #376]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ba6:	4b5c      	ldr	r3, [pc, #368]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	4a5a      	ldr	r2, [pc, #360]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCC_OscConfig+0x378>
 8005bb8:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	4a56      	ldr	r2, [pc, #344]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bc8:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	4a52      	ldr	r2, [pc, #328]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005bd0:	f023 0304 	bic.w	r3, r3, #4
 8005bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d016      	beq.n	8005c0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fc fea8 	bl	8002934 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be8:	f7fc fea4 	bl	8002934 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e138      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfe:	4b46      	ldr	r3, [pc, #280]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ed      	beq.n	8005be8 <HAL_RCC_OscConfig+0x388>
 8005c0c:	e015      	b.n	8005c3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0e:	f7fc fe91 	bl	8002934 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c14:	e00a      	b.n	8005c2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fc fe8d 	bl	8002934 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e121      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c2c:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ed      	bne.n	8005c16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c3a:	7ffb      	ldrb	r3, [r7, #31]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c40:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d03c      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01c      	beq.n	8005c9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c60:	4b2d      	ldr	r3, [pc, #180]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c66:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c70:	f7fc fe60 	bl	8002934 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c78:	f7fc fe5c 	bl	8002934 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0f2      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c8a:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ef      	beq.n	8005c78 <HAL_RCC_OscConfig+0x418>
 8005c98:	e01b      	b.n	8005cd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c9a:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005caa:	f7fc fe43 	bl	8002934 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cb2:	f7fc fe3f 	bl	8002934 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0d5      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ef      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80c9 	beq.w	8005e6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	f000 8083 	beq.w	8005df0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d15e      	bne.n	8005db0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <HAL_RCC_OscConfig+0x4b8>)
 8005cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfe:	f7fc fe19 	bl	8002934 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d04:	e00c      	b.n	8005d20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d06:	f7fc fe15 	bl	8002934 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d905      	bls.n	8005d20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0ab      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d20:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ec      	bne.n	8005d06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d2c:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <HAL_RCC_OscConfig+0x61c>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6a11      	ldr	r1, [r2, #32]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	0112      	lsls	r2, r2, #4
 8005d40:	4311      	orrs	r1, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d46:	0212      	lsls	r2, r2, #8
 8005d48:	4311      	orrs	r1, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	3a01      	subs	r2, #1
 8005d52:	0552      	lsls	r2, r2, #21
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d5a:	0852      	lsrs	r2, r2, #1
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	0652      	lsls	r2, r2, #25
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d66:	06d2      	lsls	r2, r2, #27
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	4943      	ldr	r1, [pc, #268]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d7c:	4b3e      	ldr	r3, [pc, #248]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4a3d      	ldr	r2, [pc, #244]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc fdd4 	bl	8002934 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fc fdd0 	bl	8002934 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e066      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da2:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x530>
 8005dae:	e05e      	b.n	8005e6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a30      	ldr	r2, [pc, #192]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fdba 	bl	8002934 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fc fdb6 	bl	8002934 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e04c      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd6:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005de2:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	4924      	ldr	r1, [pc, #144]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <HAL_RCC_OscConfig+0x620>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	60cb      	str	r3, [r1, #12]
 8005dee:	e03e      	b.n	8005e6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e039      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005dfc:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <HAL_RCC_OscConfig+0x618>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0203 	and.w	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d12c      	bne.n	8005e6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d123      	bne.n	8005e6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d11b      	bne.n	8005e6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d113      	bne.n	8005e6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d109      	bne.n	8005e6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	3b01      	subs	r3, #1
 8005e64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	019f800c 	.word	0x019f800c
 8005e80:	feeefffc 	.word	0xfeeefffc

08005e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e11e      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b91      	ldr	r3, [pc, #580]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d910      	bls.n	8005ecc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b8e      	ldr	r3, [pc, #568]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 020f 	bic.w	r2, r3, #15
 8005eb2:	498c      	ldr	r1, [pc, #560]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b8a      	ldr	r3, [pc, #552]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e106      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d073      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d129      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee0:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0f4      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ef0:	f000 f966 	bl	80061c0 <RCC_GetSysClockFreqFromPLLSource>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4a7c      	ldr	r2, [pc, #496]	; (80060ec <HAL_RCC_ClockConfig+0x268>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d93f      	bls.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005efe:	4b7a      	ldr	r3, [pc, #488]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d033      	beq.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d12f      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f1e:	4b72      	ldr	r3, [pc, #456]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f26:	4a70      	ldr	r2, [pc, #448]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e024      	b.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f3c:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0c6      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f4c:	4b66      	ldr	r3, [pc, #408]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0be      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f5c:	f000 f8ce 	bl	80060fc <HAL_RCC_GetSysClockFreq>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4a61      	ldr	r2, [pc, #388]	; (80060ec <HAL_RCC_ClockConfig+0x268>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d909      	bls.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f72:	4a5d      	ldr	r2, [pc, #372]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f7e:	4b5a      	ldr	r3, [pc, #360]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 0203 	bic.w	r2, r3, #3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4957      	ldr	r1, [pc, #348]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f90:	f7fc fcd0 	bl	8002934 <HAL_GetTick>
 8005f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f98:	f7fc fccc 	bl	8002934 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e095      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	4b4e      	ldr	r3, [pc, #312]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 020c 	and.w	r2, r3, #12
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d1eb      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d023      	beq.n	8006014 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd8:	4b43      	ldr	r3, [pc, #268]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4a42      	ldr	r2, [pc, #264]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fe2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ff0:	4b3d      	ldr	r3, [pc, #244]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ff8:	4a3b      	ldr	r2, [pc, #236]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8005ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ffe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4936      	ldr	r1, [pc, #216]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
 8006012:	e008      	b.n	8006026 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d105      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800601a:	4b33      	ldr	r3, [pc, #204]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	4a32      	ldr	r2, [pc, #200]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 8006020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006024:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d21d      	bcs.n	8006070 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006034:	4b2b      	ldr	r3, [pc, #172]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f023 020f 	bic.w	r2, r3, #15
 800603c:	4929      	ldr	r1, [pc, #164]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006044:	f7fc fc76 	bl	8002934 <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800604a:	e00a      	b.n	8006062 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604c:	f7fc fc72 	bl	8002934 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	; 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e03b      	b.n	80060da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b20      	ldr	r3, [pc, #128]	; (80060e4 <HAL_RCC_ClockConfig+0x260>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d1ed      	bne.n	800604c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800607c:	4b1a      	ldr	r3, [pc, #104]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4917      	ldr	r1, [pc, #92]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	490f      	ldr	r1, [pc, #60]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060ae:	f000 f825 	bl	80060fc <HAL_RCC_GetSysClockFreq>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	490c      	ldr	r1, [pc, #48]	; (80060f0 <HAL_RCC_ClockConfig+0x26c>)
 80060c0:	5ccb      	ldrb	r3, [r1, r3]
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <HAL_RCC_ClockConfig+0x270>)
 80060cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <HAL_RCC_ClockConfig+0x274>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fc fbe2 	bl	800289c <HAL_InitTick>
 80060d8:	4603      	mov	r3, r0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40022000 	.word	0x40022000
 80060e8:	40021000 	.word	0x40021000
 80060ec:	04c4b400 	.word	0x04c4b400
 80060f0:	080091c4 	.word	0x080091c4
 80060f4:	20000000 	.word	0x20000000
 80060f8:	20000004 	.word	0x20000004

080060fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006102:	4b2c      	ldr	r3, [pc, #176]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b04      	cmp	r3, #4
 800610c:	d102      	bne.n	8006114 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800610e:	4b2a      	ldr	r3, [pc, #168]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e047      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006114:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 030c 	and.w	r3, r3, #12
 800611c:	2b08      	cmp	r3, #8
 800611e:	d102      	bne.n	8006126 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006120:	4b26      	ldr	r3, [pc, #152]	; (80061bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	e03e      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b0c      	cmp	r3, #12
 8006130:	d136      	bne.n	80061a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006132:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	3301      	adds	r3, #1
 8006148:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d10c      	bne.n	800616a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006150:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800615a:	68d2      	ldr	r2, [r2, #12]
 800615c:	0a12      	lsrs	r2, r2, #8
 800615e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	617b      	str	r3, [r7, #20]
      break;
 8006168:	e00c      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006174:	68d2      	ldr	r2, [r2, #12]
 8006176:	0a12      	lsrs	r2, r2, #8
 8006178:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800617c:	fb02 f303 	mul.w	r3, r2, r3
 8006180:	617b      	str	r3, [r7, #20]
      break;
 8006182:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	0e5b      	lsrs	r3, r3, #25
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	3301      	adds	r3, #1
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	e001      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061a4:	693b      	ldr	r3, [r7, #16]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40021000 	.word	0x40021000
 80061b8:	00f42400 	.word	0x00f42400
 80061bc:	007a1200 	.word	0x007a1200

080061c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061c6:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d10c      	bne.n	80061fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e4:	4a17      	ldr	r2, [pc, #92]	; (8006244 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061ee:	68d2      	ldr	r2, [r2, #12]
 80061f0:	0a12      	lsrs	r2, r2, #8
 80061f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	617b      	str	r3, [r7, #20]
    break;
 80061fc:	e00c      	b.n	8006218 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	4a0e      	ldr	r2, [pc, #56]	; (8006240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006208:	68d2      	ldr	r2, [r2, #12]
 800620a:	0a12      	lsrs	r2, r2, #8
 800620c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006210:	fb02 f303 	mul.w	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]
    break;
 8006216:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006218:	4b09      	ldr	r3, [pc, #36]	; (8006240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	0e5b      	lsrs	r3, r3, #25
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	3301      	adds	r3, #1
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006232:	687b      	ldr	r3, [r7, #4]
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	40021000 	.word	0x40021000
 8006244:	007a1200 	.word	0x007a1200
 8006248:	00f42400 	.word	0x00f42400

0800624c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006254:	2300      	movs	r3, #0
 8006256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006258:	2300      	movs	r3, #0
 800625a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8098 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800626a:	2300      	movs	r3, #0
 800626c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800626e:	4b43      	ldr	r3, [pc, #268]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800627a:	4b40      	ldr	r3, [pc, #256]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627e:	4a3f      	ldr	r2, [pc, #252]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006284:	6593      	str	r3, [r2, #88]	; 0x58
 8006286:	4b3d      	ldr	r3, [pc, #244]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006292:	2301      	movs	r3, #1
 8006294:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006296:	4b3a      	ldr	r3, [pc, #232]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a39      	ldr	r2, [pc, #228]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a2:	f7fc fb47 	bl	8002934 <HAL_GetTick>
 80062a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a8:	e009      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062aa:	f7fc fb43 	bl	8002934 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d902      	bls.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	74fb      	strb	r3, [r7, #19]
        break;
 80062bc:	e005      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062be:	4b30      	ldr	r3, [pc, #192]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ef      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062ca:	7cfb      	ldrb	r3, [r7, #19]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d159      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d019      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ec:	4b23      	ldr	r3, [pc, #140]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	4a1b      	ldr	r2, [pc, #108]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fc fb03 	bl	8002934 <HAL_GetTick>
 800632e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006330:	e00b      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fc faff 	bl	8002934 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d902      	bls.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	74fb      	strb	r3, [r7, #19]
            break;
 8006348:	e006      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634a:	4b0c      	ldr	r3, [pc, #48]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0ec      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	4903      	ldr	r1, [pc, #12]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006376:	7cfb      	ldrb	r3, [r7, #19]
 8006378:	74bb      	strb	r3, [r7, #18]
 800637a:	e005      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800637c:	40021000 	.word	0x40021000
 8006380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006388:	7c7b      	ldrb	r3, [r7, #17]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800638e:	4ba7      	ldr	r3, [pc, #668]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	4aa6      	ldr	r2, [pc, #664]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006398:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063a6:	4ba1      	ldr	r3, [pc, #644]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f023 0203 	bic.w	r2, r3, #3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	499d      	ldr	r1, [pc, #628]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063c8:	4b98      	ldr	r3, [pc, #608]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f023 020c 	bic.w	r2, r3, #12
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	4995      	ldr	r1, [pc, #596]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ea:	4b90      	ldr	r3, [pc, #576]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	498c      	ldr	r1, [pc, #560]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800640c:	4b87      	ldr	r3, [pc, #540]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	4984      	ldr	r1, [pc, #528]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800642e:	4b7f      	ldr	r3, [pc, #508]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	497b      	ldr	r1, [pc, #492]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006450:	4b76      	ldr	r3, [pc, #472]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	4973      	ldr	r1, [pc, #460]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006472:	4b6e      	ldr	r3, [pc, #440]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	496a      	ldr	r1, [pc, #424]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006494:	4b65      	ldr	r3, [pc, #404]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	4962      	ldr	r1, [pc, #392]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064b6:	4b5d      	ldr	r3, [pc, #372]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	4959      	ldr	r1, [pc, #356]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064d8:	4b54      	ldr	r3, [pc, #336]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064de:	f023 0203 	bic.w	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	4951      	ldr	r1, [pc, #324]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064fa:	4b4c      	ldr	r3, [pc, #304]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4948      	ldr	r1, [pc, #288]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800651c:	4b43      	ldr	r3, [pc, #268]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4940      	ldr	r1, [pc, #256]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a3a      	ldr	r2, [pc, #232]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006546:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006554:	4b35      	ldr	r3, [pc, #212]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	4932      	ldr	r1, [pc, #200]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b2d      	ldr	r3, [pc, #180]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a2c      	ldr	r2, [pc, #176]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	4924      	ldr	r1, [pc, #144]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065aa:	d105      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ac:	4b1f      	ldr	r3, [pc, #124]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a1e      	ldr	r2, [pc, #120]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d015      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	4916      	ldr	r1, [pc, #88]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e2:	d105      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a10      	ldr	r2, [pc, #64]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d019      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	4908      	ldr	r1, [pc, #32]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4a02      	ldr	r2, [pc, #8]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006626:	60d3      	str	r3, [r2, #12]
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800663c:	4b29      	ldr	r3, [pc, #164]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	4926      	ldr	r1, [pc, #152]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800665c:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006666:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	4918      	ldr	r1, [pc, #96]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006694:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a12      	ldr	r2, [pc, #72]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d015      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066ac:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ba:	490a      	ldr	r1, [pc, #40]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ca:	d105      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40021000 	.word	0x40021000

080066e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e049      	b.n	800678e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fb ff34 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f000 fd4a 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e054      	b.n	800685a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a26      	ldr	r2, [pc, #152]	; (8006868 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d022      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d01d      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <HAL_TIM_Base_Start_IT+0xd4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d018      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <HAL_TIM_Base_Start_IT+0xd8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <HAL_TIM_Base_Start_IT+0xdc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00e      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <HAL_TIM_Base_Start_IT+0xe0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_TIM_Base_Start_IT+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_TIM_Base_Start_IT+0xe8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d115      	bne.n	8006844 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	4b19      	ldr	r3, [pc, #100]	; (8006884 <HAL_TIM_Base_Start_IT+0xec>)
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b06      	cmp	r3, #6
 8006828:	d015      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xbe>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006830:	d011      	beq.n	8006856 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0201 	orr.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006842:	e008      	b.n	8006856 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e000      	b.n	8006858 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40013400 	.word	0x40013400
 800687c:	40014000 	.word	0x40014000
 8006880:	40015000 	.word	0x40015000
 8006884:	00010007 	.word	0x00010007

08006888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e049      	b.n	800692e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f841 	bl	8006936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f000 fc7a 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <HAL_TIM_PWM_Start+0x24>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e03c      	b.n	80069ea <HAL_TIM_PWM_Start+0x9e>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d109      	bne.n	800698a <HAL_TIM_PWM_Start+0x3e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b01      	cmp	r3, #1
 8006980:	bf14      	ite	ne
 8006982:	2301      	movne	r3, #1
 8006984:	2300      	moveq	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	e02f      	b.n	80069ea <HAL_TIM_PWM_Start+0x9e>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d109      	bne.n	80069a4 <HAL_TIM_PWM_Start+0x58>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e022      	b.n	80069ea <HAL_TIM_PWM_Start+0x9e>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b0c      	cmp	r3, #12
 80069a8:	d109      	bne.n	80069be <HAL_TIM_PWM_Start+0x72>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	bf14      	ite	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	2300      	moveq	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	e015      	b.n	80069ea <HAL_TIM_PWM_Start+0x9e>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d109      	bne.n	80069d8 <HAL_TIM_PWM_Start+0x8c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	e008      	b.n	80069ea <HAL_TIM_PWM_Start+0x9e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0a6      	b.n	8006b40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start+0xb6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a00:	e023      	b.n	8006a4a <HAL_TIM_PWM_Start+0xfe>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start+0xc6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	e01b      	b.n	8006a4a <HAL_TIM_PWM_Start+0xfe>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d104      	bne.n	8006a22 <HAL_TIM_PWM_Start+0xd6>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a20:	e013      	b.n	8006a4a <HAL_TIM_PWM_Start+0xfe>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b0c      	cmp	r3, #12
 8006a26:	d104      	bne.n	8006a32 <HAL_TIM_PWM_Start+0xe6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a30:	e00b      	b.n	8006a4a <HAL_TIM_PWM_Start+0xfe>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_PWM_Start+0xf6>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a40:	e003      	b.n	8006a4a <HAL_TIM_PWM_Start+0xfe>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 f958 	bl	8007d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a3a      	ldr	r2, [pc, #232]	; (8006b48 <HAL_TIM_PWM_Start+0x1fc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d018      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x148>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a39      	ldr	r2, [pc, #228]	; (8006b4c <HAL_TIM_PWM_Start+0x200>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x148>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a37      	ldr	r2, [pc, #220]	; (8006b50 <HAL_TIM_PWM_Start+0x204>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00e      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x148>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a36      	ldr	r2, [pc, #216]	; (8006b54 <HAL_TIM_PWM_Start+0x208>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d009      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x148>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a34      	ldr	r2, [pc, #208]	; (8006b58 <HAL_TIM_PWM_Start+0x20c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x148>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a33      	ldr	r2, [pc, #204]	; (8006b5c <HAL_TIM_PWM_Start+0x210>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d101      	bne.n	8006a98 <HAL_TIM_PWM_Start+0x14c>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <HAL_TIM_PWM_Start+0x14e>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <HAL_TIM_PWM_Start+0x1fc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d022      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac0:	d01d      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <HAL_TIM_PWM_Start+0x214>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a24      	ldr	r2, [pc, #144]	; (8006b64 <HAL_TIM_PWM_Start+0x218>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a23      	ldr	r2, [pc, #140]	; (8006b68 <HAL_TIM_PWM_Start+0x21c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <HAL_TIM_PWM_Start+0x200>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <HAL_TIM_PWM_Start+0x204>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_TIM_PWM_Start+0x1b2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_TIM_PWM_Start+0x210>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d115      	bne.n	8006b2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <HAL_TIM_PWM_Start+0x220>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d015      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x1f0>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b16:	d011      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b28:	e008      	b.n	8006b3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0201 	orr.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e000      	b.n	8006b3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40014400 	.word	0x40014400
 8006b58:	40014800 	.word	0x40014800
 8006b5c:	40015000 	.word	0x40015000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	00010007 	.word	0x00010007

08006b70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e049      	b.n	8006c16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f841 	bl	8006c1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f000 fb06 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e088      	b.n	8006d62 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d11b      	bne.n	8006c96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6819      	ldr	r1, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f000 fe85 	bl	800797c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 020c 	bic.w	r2, r2, #12
 8006c80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6999      	ldr	r1, [r3, #24]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	619a      	str	r2, [r3, #24]
 8006c94:	e060      	b.n	8006d58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d11c      	bne.n	8006cd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f000 ff09 	bl	8007ac2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6999      	ldr	r1, [r3, #24]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	619a      	str	r2, [r3, #24]
 8006cd4:	e040      	b.n	8006d58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d11b      	bne.n	8006d14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f000 ff56 	bl	8007b9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 020c 	bic.w	r2, r2, #12
 8006cfe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69d9      	ldr	r1, [r3, #28]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	61da      	str	r2, [r3, #28]
 8006d12:	e021      	b.n	8006d58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b0c      	cmp	r3, #12
 8006d18:	d11c      	bne.n	8006d54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	6819      	ldr	r1, [r3, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f000 ff73 	bl	8007c14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69d9      	ldr	r1, [r3, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	021a      	lsls	r2, r3, #8
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	61da      	str	r2, [r3, #28]
 8006d52:	e001      	b.n	8006d58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e0ff      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b14      	cmp	r3, #20
 8006d96:	f200 80f0 	bhi.w	8006f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006f7b 	.word	0x08006f7b
 8006da8:	08006f7b 	.word	0x08006f7b
 8006dac:	08006f7b 	.word	0x08006f7b
 8006db0:	08006e35 	.word	0x08006e35
 8006db4:	08006f7b 	.word	0x08006f7b
 8006db8:	08006f7b 	.word	0x08006f7b
 8006dbc:	08006f7b 	.word	0x08006f7b
 8006dc0:	08006e77 	.word	0x08006e77
 8006dc4:	08006f7b 	.word	0x08006f7b
 8006dc8:	08006f7b 	.word	0x08006f7b
 8006dcc:	08006f7b 	.word	0x08006f7b
 8006dd0:	08006eb7 	.word	0x08006eb7
 8006dd4:	08006f7b 	.word	0x08006f7b
 8006dd8:	08006f7b 	.word	0x08006f7b
 8006ddc:	08006f7b 	.word	0x08006f7b
 8006de0:	08006ef9 	.word	0x08006ef9
 8006de4:	08006f7b 	.word	0x08006f7b
 8006de8:	08006f7b 	.word	0x08006f7b
 8006dec:	08006f7b 	.word	0x08006f7b
 8006df0:	08006f39 	.word	0x08006f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fa94 	bl	8007328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	619a      	str	r2, [r3, #24]
      break;
 8006e32:	e0a5      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fb0e 	bl	800745c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	619a      	str	r2, [r3, #24]
      break;
 8006e74:	e084      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fb81 	bl	8007584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0208 	orr.w	r2, r2, #8
 8006e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0204 	bic.w	r2, r2, #4
 8006ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	61da      	str	r2, [r3, #28]
      break;
 8006eb4:	e064      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fbf3 	bl	80076a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	021a      	lsls	r2, r3, #8
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	61da      	str	r2, [r3, #28]
      break;
 8006ef6:	e043      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fc66 	bl	80077d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0208 	orr.w	r2, r2, #8
 8006f12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0204 	bic.w	r2, r2, #4
 8006f22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f36:	e023      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fcb0 	bl	80078a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f78:	e002      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop

08006f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0f6      	b.n	800719e <HAL_TIM_ConfigClockSource+0x20a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a6f      	ldr	r2, [pc, #444]	; (80071a8 <HAL_TIM_ConfigClockSource+0x214>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	f000 80c1 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8006ff0:	4a6d      	ldr	r2, [pc, #436]	; (80071a8 <HAL_TIM_ConfigClockSource+0x214>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	f200 80c6 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ff8:	4a6c      	ldr	r2, [pc, #432]	; (80071ac <HAL_TIM_ConfigClockSource+0x218>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	f000 80b9 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007000:	4a6a      	ldr	r2, [pc, #424]	; (80071ac <HAL_TIM_ConfigClockSource+0x218>)
 8007002:	4293      	cmp	r3, r2
 8007004:	f200 80be 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007008:	4a69      	ldr	r2, [pc, #420]	; (80071b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	f000 80b1 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007010:	4a67      	ldr	r2, [pc, #412]	; (80071b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	f200 80b6 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007018:	4a66      	ldr	r2, [pc, #408]	; (80071b4 <HAL_TIM_ConfigClockSource+0x220>)
 800701a:	4293      	cmp	r3, r2
 800701c:	f000 80a9 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007020:	4a64      	ldr	r2, [pc, #400]	; (80071b4 <HAL_TIM_ConfigClockSource+0x220>)
 8007022:	4293      	cmp	r3, r2
 8007024:	f200 80ae 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007028:	4a63      	ldr	r2, [pc, #396]	; (80071b8 <HAL_TIM_ConfigClockSource+0x224>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f000 80a1 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007030:	4a61      	ldr	r2, [pc, #388]	; (80071b8 <HAL_TIM_ConfigClockSource+0x224>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f200 80a6 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007038:	4a60      	ldr	r2, [pc, #384]	; (80071bc <HAL_TIM_ConfigClockSource+0x228>)
 800703a:	4293      	cmp	r3, r2
 800703c:	f000 8099 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007040:	4a5e      	ldr	r2, [pc, #376]	; (80071bc <HAL_TIM_ConfigClockSource+0x228>)
 8007042:	4293      	cmp	r3, r2
 8007044:	f200 809e 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007048:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800704c:	f000 8091 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007050:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007054:	f200 8096 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705c:	f000 8089 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 8007060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007064:	f200 808e 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800706c:	d03e      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x158>
 800706e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007072:	f200 8087 	bhi.w	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707a:	f000 8086 	beq.w	800718a <HAL_TIM_ConfigClockSource+0x1f6>
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007082:	d87f      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007084:	2b70      	cmp	r3, #112	; 0x70
 8007086:	d01a      	beq.n	80070be <HAL_TIM_ConfigClockSource+0x12a>
 8007088:	2b70      	cmp	r3, #112	; 0x70
 800708a:	d87b      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 800708c:	2b60      	cmp	r3, #96	; 0x60
 800708e:	d050      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x19e>
 8007090:	2b60      	cmp	r3, #96	; 0x60
 8007092:	d877      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 8007094:	2b50      	cmp	r3, #80	; 0x50
 8007096:	d03c      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x17e>
 8007098:	2b50      	cmp	r3, #80	; 0x50
 800709a:	d873      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d058      	beq.n	8007152 <HAL_TIM_ConfigClockSource+0x1be>
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d86f      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 80070a4:	2b30      	cmp	r3, #48	; 0x30
 80070a6:	d064      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 80070a8:	2b30      	cmp	r3, #48	; 0x30
 80070aa:	d86b      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d060      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d867      	bhi.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d05c      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d05a      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0x1de>
 80070bc:	e062      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6899      	ldr	r1, [r3, #8]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f000 fdfb 	bl	8007cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	609a      	str	r2, [r3, #8]
      break;
 80070ea:	e04f      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	6899      	ldr	r1, [r3, #8]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f000 fde4 	bl	8007cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800710e:	609a      	str	r2, [r3, #8]
      break;
 8007110:	e03c      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6859      	ldr	r1, [r3, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	461a      	mov	r2, r3
 8007120:	f000 fca0 	bl	8007a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2150      	movs	r1, #80	; 0x50
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fdaf 	bl	8007c8e <TIM_ITRx_SetConfig>
      break;
 8007130:	e02c      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6859      	ldr	r1, [r3, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	461a      	mov	r2, r3
 8007140:	f000 fcfc 	bl	8007b3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2160      	movs	r1, #96	; 0x60
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fd9f 	bl	8007c8e <TIM_ITRx_SetConfig>
      break;
 8007150:	e01c      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	461a      	mov	r2, r3
 8007160:	f000 fc80 	bl	8007a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2140      	movs	r1, #64	; 0x40
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fd8f 	bl	8007c8e <TIM_ITRx_SetConfig>
      break;
 8007170:	e00c      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f000 fd86 	bl	8007c8e <TIM_ITRx_SetConfig>
      break;
 8007182:	e003      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
      break;
 8007188:	e000      	b.n	800718c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800718a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	00100070 	.word	0x00100070
 80071ac:	00100060 	.word	0x00100060
 80071b0:	00100050 	.word	0x00100050
 80071b4:	00100040 	.word	0x00100040
 80071b8:	00100030 	.word	0x00100030
 80071bc:	00100020 	.word	0x00100020

080071c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a4c      	ldr	r2, [pc, #304]	; (8007304 <TIM_Base_SetConfig+0x144>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d017      	beq.n	8007208 <TIM_Base_SetConfig+0x48>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d013      	beq.n	8007208 <TIM_Base_SetConfig+0x48>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a49      	ldr	r2, [pc, #292]	; (8007308 <TIM_Base_SetConfig+0x148>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00f      	beq.n	8007208 <TIM_Base_SetConfig+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a48      	ldr	r2, [pc, #288]	; (800730c <TIM_Base_SetConfig+0x14c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00b      	beq.n	8007208 <TIM_Base_SetConfig+0x48>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a47      	ldr	r2, [pc, #284]	; (8007310 <TIM_Base_SetConfig+0x150>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d007      	beq.n	8007208 <TIM_Base_SetConfig+0x48>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a46      	ldr	r2, [pc, #280]	; (8007314 <TIM_Base_SetConfig+0x154>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_Base_SetConfig+0x48>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a45      	ldr	r2, [pc, #276]	; (8007318 <TIM_Base_SetConfig+0x158>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a39      	ldr	r2, [pc, #228]	; (8007304 <TIM_Base_SetConfig+0x144>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d023      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007228:	d01f      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a36      	ldr	r2, [pc, #216]	; (8007308 <TIM_Base_SetConfig+0x148>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01b      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a35      	ldr	r2, [pc, #212]	; (800730c <TIM_Base_SetConfig+0x14c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d017      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a34      	ldr	r2, [pc, #208]	; (8007310 <TIM_Base_SetConfig+0x150>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a33      	ldr	r2, [pc, #204]	; (8007314 <TIM_Base_SetConfig+0x154>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00f      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a33      	ldr	r2, [pc, #204]	; (800731c <TIM_Base_SetConfig+0x15c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00b      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a32      	ldr	r2, [pc, #200]	; (8007320 <TIM_Base_SetConfig+0x160>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d007      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a31      	ldr	r2, [pc, #196]	; (8007324 <TIM_Base_SetConfig+0x164>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d003      	beq.n	800726a <TIM_Base_SetConfig+0xaa>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2c      	ldr	r2, [pc, #176]	; (8007318 <TIM_Base_SetConfig+0x158>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d108      	bne.n	800727c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a18      	ldr	r2, [pc, #96]	; (8007304 <TIM_Base_SetConfig+0x144>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <TIM_Base_SetConfig+0x110>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1a      	ldr	r2, [pc, #104]	; (8007314 <TIM_Base_SetConfig+0x154>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00f      	beq.n	80072d0 <TIM_Base_SetConfig+0x110>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1a      	ldr	r2, [pc, #104]	; (800731c <TIM_Base_SetConfig+0x15c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <TIM_Base_SetConfig+0x110>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a19      	ldr	r2, [pc, #100]	; (8007320 <TIM_Base_SetConfig+0x160>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d007      	beq.n	80072d0 <TIM_Base_SetConfig+0x110>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a18      	ldr	r2, [pc, #96]	; (8007324 <TIM_Base_SetConfig+0x164>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_Base_SetConfig+0x110>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <TIM_Base_SetConfig+0x158>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d103      	bne.n	80072d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d105      	bne.n	80072f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	611a      	str	r2, [r3, #16]
  }
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40013400 	.word	0x40013400
 8007318:	40015000 	.word	0x40015000
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400
 8007324:	40014800 	.word	0x40014800

08007328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f023 0201 	bic.w	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 0302 	bic.w	r3, r3, #2
 8007374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a30      	ldr	r2, [pc, #192]	; (8007444 <TIM_OC1_SetConfig+0x11c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d013      	beq.n	80073b0 <TIM_OC1_SetConfig+0x88>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <TIM_OC1_SetConfig+0x120>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00f      	beq.n	80073b0 <TIM_OC1_SetConfig+0x88>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a2e      	ldr	r2, [pc, #184]	; (800744c <TIM_OC1_SetConfig+0x124>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00b      	beq.n	80073b0 <TIM_OC1_SetConfig+0x88>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <TIM_OC1_SetConfig+0x128>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d007      	beq.n	80073b0 <TIM_OC1_SetConfig+0x88>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a2c      	ldr	r2, [pc, #176]	; (8007454 <TIM_OC1_SetConfig+0x12c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d003      	beq.n	80073b0 <TIM_OC1_SetConfig+0x88>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <TIM_OC1_SetConfig+0x130>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10c      	bne.n	80073ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0308 	bic.w	r3, r3, #8
 80073b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f023 0304 	bic.w	r3, r3, #4
 80073c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <TIM_OC1_SetConfig+0x11c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <TIM_OC1_SetConfig+0xd2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <TIM_OC1_SetConfig+0x120>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_OC1_SetConfig+0xd2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <TIM_OC1_SetConfig+0x124>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_OC1_SetConfig+0xd2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1a      	ldr	r2, [pc, #104]	; (8007450 <TIM_OC1_SetConfig+0x128>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_OC1_SetConfig+0xd2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a19      	ldr	r2, [pc, #100]	; (8007454 <TIM_OC1_SetConfig+0x12c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_OC1_SetConfig+0xd2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a18      	ldr	r2, [pc, #96]	; (8007458 <TIM_OC1_SetConfig+0x130>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d111      	bne.n	800741e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	621a      	str	r2, [r3, #32]
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400
 8007454:	40014800 	.word	0x40014800
 8007458:	40015000 	.word	0x40015000

0800745c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	f023 0210 	bic.w	r2, r3, #16
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f023 0320 	bic.w	r3, r3, #32
 80074aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a2c      	ldr	r2, [pc, #176]	; (800756c <TIM_OC2_SetConfig+0x110>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d007      	beq.n	80074d0 <TIM_OC2_SetConfig+0x74>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a2b      	ldr	r2, [pc, #172]	; (8007570 <TIM_OC2_SetConfig+0x114>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d003      	beq.n	80074d0 <TIM_OC2_SetConfig+0x74>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a2a      	ldr	r2, [pc, #168]	; (8007574 <TIM_OC2_SetConfig+0x118>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10d      	bne.n	80074ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a1f      	ldr	r2, [pc, #124]	; (800756c <TIM_OC2_SetConfig+0x110>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d013      	beq.n	800751c <TIM_OC2_SetConfig+0xc0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a1e      	ldr	r2, [pc, #120]	; (8007570 <TIM_OC2_SetConfig+0x114>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00f      	beq.n	800751c <TIM_OC2_SetConfig+0xc0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a1e      	ldr	r2, [pc, #120]	; (8007578 <TIM_OC2_SetConfig+0x11c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00b      	beq.n	800751c <TIM_OC2_SetConfig+0xc0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a1d      	ldr	r2, [pc, #116]	; (800757c <TIM_OC2_SetConfig+0x120>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d007      	beq.n	800751c <TIM_OC2_SetConfig+0xc0>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a1c      	ldr	r2, [pc, #112]	; (8007580 <TIM_OC2_SetConfig+0x124>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_OC2_SetConfig+0xc0>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a17      	ldr	r2, [pc, #92]	; (8007574 <TIM_OC2_SetConfig+0x118>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d113      	bne.n	8007544 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800752a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	621a      	str	r2, [r3, #32]
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40013400 	.word	0x40013400
 8007574:	40015000 	.word	0x40015000
 8007578:	40014000 	.word	0x40014000
 800757c:	40014400 	.word	0x40014400
 8007580:	40014800 	.word	0x40014800

08007584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2b      	ldr	r2, [pc, #172]	; (8007690 <TIM_OC3_SetConfig+0x10c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_OC3_SetConfig+0x72>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <TIM_OC3_SetConfig+0x110>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC3_SetConfig+0x72>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a29      	ldr	r2, [pc, #164]	; (8007698 <TIM_OC3_SetConfig+0x114>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d10d      	bne.n	8007612 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1e      	ldr	r2, [pc, #120]	; (8007690 <TIM_OC3_SetConfig+0x10c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <TIM_OC3_SetConfig+0xbe>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <TIM_OC3_SetConfig+0x110>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00f      	beq.n	8007642 <TIM_OC3_SetConfig+0xbe>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a1d      	ldr	r2, [pc, #116]	; (800769c <TIM_OC3_SetConfig+0x118>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00b      	beq.n	8007642 <TIM_OC3_SetConfig+0xbe>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <TIM_OC3_SetConfig+0x11c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <TIM_OC3_SetConfig+0xbe>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <TIM_OC3_SetConfig+0x120>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_OC3_SetConfig+0xbe>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a16      	ldr	r2, [pc, #88]	; (8007698 <TIM_OC3_SetConfig+0x114>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d113      	bne.n	800766a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	621a      	str	r2, [r3, #32]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40015000 	.word	0x40015000
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800

080076a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2c      	ldr	r2, [pc, #176]	; (80077b8 <TIM_OC4_SetConfig+0x110>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d007      	beq.n	800771c <TIM_OC4_SetConfig+0x74>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a2b      	ldr	r2, [pc, #172]	; (80077bc <TIM_OC4_SetConfig+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC4_SetConfig+0x74>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a2a      	ldr	r2, [pc, #168]	; (80077c0 <TIM_OC4_SetConfig+0x118>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d10d      	bne.n	8007738 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	031b      	lsls	r3, r3, #12
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <TIM_OC4_SetConfig+0x110>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <TIM_OC4_SetConfig+0xc0>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <TIM_OC4_SetConfig+0x114>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00f      	beq.n	8007768 <TIM_OC4_SetConfig+0xc0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1e      	ldr	r2, [pc, #120]	; (80077c4 <TIM_OC4_SetConfig+0x11c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00b      	beq.n	8007768 <TIM_OC4_SetConfig+0xc0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <TIM_OC4_SetConfig+0x120>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d007      	beq.n	8007768 <TIM_OC4_SetConfig+0xc0>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <TIM_OC4_SetConfig+0x124>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_OC4_SetConfig+0xc0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <TIM_OC4_SetConfig+0x118>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d113      	bne.n	8007790 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800776e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007776:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	019b      	lsls	r3, r3, #6
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	019b      	lsls	r3, r3, #6
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40013400 	.word	0x40013400
 80077c0:	40015000 	.word	0x40015000
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40014400 	.word	0x40014400
 80077cc:	40014800 	.word	0x40014800

080077d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	041b      	lsls	r3, r3, #16
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <TIM_OC5_SetConfig+0xbc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <TIM_OC5_SetConfig+0x82>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a18      	ldr	r2, [pc, #96]	; (8007890 <TIM_OC5_SetConfig+0xc0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00f      	beq.n	8007852 <TIM_OC5_SetConfig+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a17      	ldr	r2, [pc, #92]	; (8007894 <TIM_OC5_SetConfig+0xc4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00b      	beq.n	8007852 <TIM_OC5_SetConfig+0x82>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a16      	ldr	r2, [pc, #88]	; (8007898 <TIM_OC5_SetConfig+0xc8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d007      	beq.n	8007852 <TIM_OC5_SetConfig+0x82>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a15      	ldr	r2, [pc, #84]	; (800789c <TIM_OC5_SetConfig+0xcc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d003      	beq.n	8007852 <TIM_OC5_SetConfig+0x82>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a14      	ldr	r2, [pc, #80]	; (80078a0 <TIM_OC5_SetConfig+0xd0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d109      	bne.n	8007866 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40013400 	.word	0x40013400
 8007894:	40014000 	.word	0x40014000
 8007898:	40014400 	.word	0x40014400
 800789c:	40014800 	.word	0x40014800
 80078a0:	40015000 	.word	0x40015000

080078a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	051b      	lsls	r3, r3, #20
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <TIM_OC6_SetConfig+0xc0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <TIM_OC6_SetConfig+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a19      	ldr	r2, [pc, #100]	; (8007968 <TIM_OC6_SetConfig+0xc4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00f      	beq.n	8007928 <TIM_OC6_SetConfig+0x84>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a18      	ldr	r2, [pc, #96]	; (800796c <TIM_OC6_SetConfig+0xc8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00b      	beq.n	8007928 <TIM_OC6_SetConfig+0x84>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a17      	ldr	r2, [pc, #92]	; (8007970 <TIM_OC6_SetConfig+0xcc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d007      	beq.n	8007928 <TIM_OC6_SetConfig+0x84>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a16      	ldr	r2, [pc, #88]	; (8007974 <TIM_OC6_SetConfig+0xd0>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d003      	beq.n	8007928 <TIM_OC6_SetConfig+0x84>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a15      	ldr	r2, [pc, #84]	; (8007978 <TIM_OC6_SetConfig+0xd4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d109      	bne.n	800793c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800792e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	029b      	lsls	r3, r3, #10
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	621a      	str	r2, [r3, #32]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40013400 	.word	0x40013400
 800796c:	40014000 	.word	0x40014000
 8007970:	40014400 	.word	0x40014400
 8007974:	40014800 	.word	0x40014800
 8007978:	40015000 	.word	0x40015000

0800797c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f023 0201 	bic.w	r2, r3, #1
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4a28      	ldr	r2, [pc, #160]	; (8007a48 <TIM_TI1_SetConfig+0xcc>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01b      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b0:	d017      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a25      	ldr	r2, [pc, #148]	; (8007a4c <TIM_TI1_SetConfig+0xd0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a24      	ldr	r2, [pc, #144]	; (8007a50 <TIM_TI1_SetConfig+0xd4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <TIM_TI1_SetConfig+0xd8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <TIM_TI1_SetConfig+0xdc>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <TIM_TI1_SetConfig+0xe0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_TI1_SetConfig+0x66>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <TIM_TI1_SetConfig+0xe4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d101      	bne.n	80079e6 <TIM_TI1_SetConfig+0x6a>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <TIM_TI1_SetConfig+0x6c>
 80079e6:	2300      	movs	r3, #0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e003      	b.n	8007a06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f023 030a 	bic.w	r3, r3, #10
 8007a20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f003 030a 	and.w	r3, r3, #10
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40013400 	.word	0x40013400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40015000 	.word	0x40015000

08007a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f023 030a 	bic.w	r3, r3, #10
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f023 0210 	bic.w	r2, r3, #16
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	031b      	lsls	r3, r3, #12
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	621a      	str	r2, [r3, #32]
}
 8007b30:	bf00      	nop
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f023 0210 	bic.w	r2, r3, #16
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	031b      	lsls	r3, r3, #12
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	621a      	str	r2, [r3, #32]
}
 8007b90:	bf00      	nop
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	621a      	str	r2, [r3, #32]
}
 8007c08:	bf00      	nop
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	031b      	lsls	r3, r3, #12
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	031b      	lsls	r3, r3, #12
 8007c6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	621a      	str	r2, [r3, #32]
}
 8007c82:	bf00      	nop
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f043 0307 	orr.w	r3, r3, #7
 8007cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	609a      	str	r2, [r3, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	021a      	lsls	r2, r3, #8
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	609a      	str	r2, [r3, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1a      	ldr	r2, [r3, #32]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	401a      	ands	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a1a      	ldr	r2, [r3, #32]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d40:	431a      	orrs	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <HAL_TIMEx_PWMN_Start+0x24>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e022      	b.n	8007dbe <HAL_TIMEx_PWMN_Start+0x6a>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d109      	bne.n	8007d92 <HAL_TIMEx_PWMN_Start+0x3e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	bf14      	ite	ne
 8007d8a:	2301      	movne	r3, #1
 8007d8c:	2300      	moveq	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	e015      	b.n	8007dbe <HAL_TIMEx_PWMN_Start+0x6a>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d109      	bne.n	8007dac <HAL_TIMEx_PWMN_Start+0x58>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf14      	ite	ne
 8007da4:	2301      	movne	r3, #1
 8007da6:	2300      	moveq	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e008      	b.n	8007dbe <HAL_TIMEx_PWMN_Start+0x6a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	bf14      	ite	ne
 8007db8:	2301      	movne	r3, #1
 8007dba:	2300      	moveq	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e073      	b.n	8007eae <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIMEx_PWMN_Start+0x82>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd4:	e013      	b.n	8007dfe <HAL_TIMEx_PWMN_Start+0xaa>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d104      	bne.n	8007de6 <HAL_TIMEx_PWMN_Start+0x92>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007de4:	e00b      	b.n	8007dfe <HAL_TIMEx_PWMN_Start+0xaa>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d104      	bne.n	8007df6 <HAL_TIMEx_PWMN_Start+0xa2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007df4:	e003      	b.n	8007dfe <HAL_TIMEx_PWMN_Start+0xaa>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2204      	movs	r2, #4
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f990 	bl	800812c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a25      	ldr	r2, [pc, #148]	; (8007eb8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2e:	d01d      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <HAL_TIMEx_PWMN_Start+0x168>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a20      	ldr	r2, [pc, #128]	; (8007ec0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1e      	ldr	r2, [pc, #120]	; (8007ec4 <HAL_TIMEx_PWMN_Start+0x170>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1d      	ldr	r2, [pc, #116]	; (8007ec8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <HAL_TIMEx_PWMN_Start+0x178>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIMEx_PWMN_Start+0x118>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d115      	bne.n	8007e98 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	4b18      	ldr	r3, [pc, #96]	; (8007ed4 <HAL_TIMEx_PWMN_Start+0x180>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d015      	beq.n	8007eaa <HAL_TIMEx_PWMN_Start+0x156>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e84:	d011      	beq.n	8007eaa <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0201 	orr.w	r2, r2, #1
 8007e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	e008      	b.n	8007eaa <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e000      	b.n	8007eac <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40013400 	.word	0x40013400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40015000 	.word	0x40015000
 8007ed4:	00010007 	.word	0x00010007

08007ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e074      	b.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a34      	ldr	r2, [pc, #208]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d009      	beq.n	8007f2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a33      	ldr	r2, [pc, #204]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a31      	ldr	r2, [pc, #196]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d108      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d022      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f70:	d01d      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d018      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1d      	ldr	r2, [pc, #116]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1c      	ldr	r2, [pc, #112]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00e      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a15      	ldr	r2, [pc, #84]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a18      	ldr	r2, [pc, #96]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10c      	bne.n	8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40012c00 	.word	0x40012c00
 8007fec:	40013400 	.word	0x40013400
 8007ff0:	40015000 	.word	0x40015000
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40014000 	.word	0x40014000

08008004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800801c:	2302      	movs	r3, #2
 800801e:	e078      	b.n	8008112 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a1c      	ldr	r2, [pc, #112]	; (8008120 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d009      	beq.n	80080c6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a1b      	ldr	r2, [pc, #108]	; (8008124 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d004      	beq.n	80080c6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a19      	ldr	r2, [pc, #100]	; (8008128 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d11c      	bne.n	8008100 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40012c00 	.word	0x40012c00
 8008124:	40013400 	.word	0x40013400
 8008128:	40015000 	.word	0x40015000

0800812c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	2204      	movs	r2, #4
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	43db      	mvns	r3, r3
 800814e:	401a      	ands	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	fa01 f303 	lsl.w	r3, r1, r3
 8008164:	431a      	orrs	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <__errno>:
 8008178:	4b01      	ldr	r3, [pc, #4]	; (8008180 <__errno+0x8>)
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	2000000c 	.word	0x2000000c

08008184 <__libc_init_array>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4d0d      	ldr	r5, [pc, #52]	; (80081bc <__libc_init_array+0x38>)
 8008188:	4c0d      	ldr	r4, [pc, #52]	; (80081c0 <__libc_init_array+0x3c>)
 800818a:	1b64      	subs	r4, r4, r5
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	2600      	movs	r6, #0
 8008190:	42a6      	cmp	r6, r4
 8008192:	d109      	bne.n	80081a8 <__libc_init_array+0x24>
 8008194:	4d0b      	ldr	r5, [pc, #44]	; (80081c4 <__libc_init_array+0x40>)
 8008196:	4c0c      	ldr	r4, [pc, #48]	; (80081c8 <__libc_init_array+0x44>)
 8008198:	f001 f808 	bl	80091ac <_init>
 800819c:	1b64      	subs	r4, r4, r5
 800819e:	10a4      	asrs	r4, r4, #2
 80081a0:	2600      	movs	r6, #0
 80081a2:	42a6      	cmp	r6, r4
 80081a4:	d105      	bne.n	80081b2 <__libc_init_array+0x2e>
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ac:	4798      	blx	r3
 80081ae:	3601      	adds	r6, #1
 80081b0:	e7ee      	b.n	8008190 <__libc_init_array+0xc>
 80081b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b6:	4798      	blx	r3
 80081b8:	3601      	adds	r6, #1
 80081ba:	e7f2      	b.n	80081a2 <__libc_init_array+0x1e>
 80081bc:	080095e4 	.word	0x080095e4
 80081c0:	080095e4 	.word	0x080095e4
 80081c4:	080095e4 	.word	0x080095e4
 80081c8:	080095e8 	.word	0x080095e8

080081cc <memcpy>:
 80081cc:	440a      	add	r2, r1
 80081ce:	4291      	cmp	r1, r2
 80081d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d4:	d100      	bne.n	80081d8 <memcpy+0xc>
 80081d6:	4770      	bx	lr
 80081d8:	b510      	push	{r4, lr}
 80081da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e2:	4291      	cmp	r1, r2
 80081e4:	d1f9      	bne.n	80081da <memcpy+0xe>
 80081e6:	bd10      	pop	{r4, pc}

080081e8 <memset>:
 80081e8:	4402      	add	r2, r0
 80081ea:	4603      	mov	r3, r0
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d100      	bne.n	80081f2 <memset+0xa>
 80081f0:	4770      	bx	lr
 80081f2:	f803 1b01 	strb.w	r1, [r3], #1
 80081f6:	e7f9      	b.n	80081ec <memset+0x4>

080081f8 <cosf>:
 80081f8:	ee10 3a10 	vmov	r3, s0
 80081fc:	b507      	push	{r0, r1, r2, lr}
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <cosf+0x80>)
 8008200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008204:	4293      	cmp	r3, r2
 8008206:	dc06      	bgt.n	8008216 <cosf+0x1e>
 8008208:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800827c <cosf+0x84>
 800820c:	b003      	add	sp, #12
 800820e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008212:	f000 bb1d 	b.w	8008850 <__kernel_cosf>
 8008216:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800821a:	db04      	blt.n	8008226 <cosf+0x2e>
 800821c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008220:	b003      	add	sp, #12
 8008222:	f85d fb04 	ldr.w	pc, [sp], #4
 8008226:	4668      	mov	r0, sp
 8008228:	f000 f9d2 	bl	80085d0 <__ieee754_rem_pio2f>
 800822c:	f000 0003 	and.w	r0, r0, #3
 8008230:	2801      	cmp	r0, #1
 8008232:	d009      	beq.n	8008248 <cosf+0x50>
 8008234:	2802      	cmp	r0, #2
 8008236:	d010      	beq.n	800825a <cosf+0x62>
 8008238:	b9b0      	cbnz	r0, 8008268 <cosf+0x70>
 800823a:	eddd 0a01 	vldr	s1, [sp, #4]
 800823e:	ed9d 0a00 	vldr	s0, [sp]
 8008242:	f000 fb05 	bl	8008850 <__kernel_cosf>
 8008246:	e7eb      	b.n	8008220 <cosf+0x28>
 8008248:	eddd 0a01 	vldr	s1, [sp, #4]
 800824c:	ed9d 0a00 	vldr	s0, [sp]
 8008250:	f000 fdd4 	bl	8008dfc <__kernel_sinf>
 8008254:	eeb1 0a40 	vneg.f32	s0, s0
 8008258:	e7e2      	b.n	8008220 <cosf+0x28>
 800825a:	eddd 0a01 	vldr	s1, [sp, #4]
 800825e:	ed9d 0a00 	vldr	s0, [sp]
 8008262:	f000 faf5 	bl	8008850 <__kernel_cosf>
 8008266:	e7f5      	b.n	8008254 <cosf+0x5c>
 8008268:	eddd 0a01 	vldr	s1, [sp, #4]
 800826c:	ed9d 0a00 	vldr	s0, [sp]
 8008270:	2001      	movs	r0, #1
 8008272:	f000 fdc3 	bl	8008dfc <__kernel_sinf>
 8008276:	e7d3      	b.n	8008220 <cosf+0x28>
 8008278:	3f490fd8 	.word	0x3f490fd8
 800827c:	00000000 	.word	0x00000000

08008280 <sinf>:
 8008280:	ee10 3a10 	vmov	r3, s0
 8008284:	b507      	push	{r0, r1, r2, lr}
 8008286:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <sinf+0x84>)
 8008288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800828c:	4293      	cmp	r3, r2
 800828e:	dc07      	bgt.n	80082a0 <sinf+0x20>
 8008290:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008308 <sinf+0x88>
 8008294:	2000      	movs	r0, #0
 8008296:	b003      	add	sp, #12
 8008298:	f85d eb04 	ldr.w	lr, [sp], #4
 800829c:	f000 bdae 	b.w	8008dfc <__kernel_sinf>
 80082a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80082a4:	db04      	blt.n	80082b0 <sinf+0x30>
 80082a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80082aa:	b003      	add	sp, #12
 80082ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80082b0:	4668      	mov	r0, sp
 80082b2:	f000 f98d 	bl	80085d0 <__ieee754_rem_pio2f>
 80082b6:	f000 0003 	and.w	r0, r0, #3
 80082ba:	2801      	cmp	r0, #1
 80082bc:	d00a      	beq.n	80082d4 <sinf+0x54>
 80082be:	2802      	cmp	r0, #2
 80082c0:	d00f      	beq.n	80082e2 <sinf+0x62>
 80082c2:	b9c0      	cbnz	r0, 80082f6 <sinf+0x76>
 80082c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80082c8:	ed9d 0a00 	vldr	s0, [sp]
 80082cc:	2001      	movs	r0, #1
 80082ce:	f000 fd95 	bl	8008dfc <__kernel_sinf>
 80082d2:	e7ea      	b.n	80082aa <sinf+0x2a>
 80082d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80082d8:	ed9d 0a00 	vldr	s0, [sp]
 80082dc:	f000 fab8 	bl	8008850 <__kernel_cosf>
 80082e0:	e7e3      	b.n	80082aa <sinf+0x2a>
 80082e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80082e6:	ed9d 0a00 	vldr	s0, [sp]
 80082ea:	2001      	movs	r0, #1
 80082ec:	f000 fd86 	bl	8008dfc <__kernel_sinf>
 80082f0:	eeb1 0a40 	vneg.f32	s0, s0
 80082f4:	e7d9      	b.n	80082aa <sinf+0x2a>
 80082f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80082fa:	ed9d 0a00 	vldr	s0, [sp]
 80082fe:	f000 faa7 	bl	8008850 <__kernel_cosf>
 8008302:	e7f5      	b.n	80082f0 <sinf+0x70>
 8008304:	3f490fd8 	.word	0x3f490fd8
 8008308:	00000000 	.word	0x00000000

0800830c <atan2f>:
 800830c:	f000 b83e 	b.w	800838c <__ieee754_atan2f>

08008310 <fmodf>:
 8008310:	b508      	push	{r3, lr}
 8008312:	ed2d 8b02 	vpush	{d8}
 8008316:	eef0 8a40 	vmov.f32	s17, s0
 800831a:	eeb0 8a60 	vmov.f32	s16, s1
 800831e:	f000 f8d5 	bl	80084cc <__ieee754_fmodf>
 8008322:	eef4 8a48 	vcmp.f32	s17, s16
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	d60c      	bvs.n	8008346 <fmodf+0x36>
 800832c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800834c <fmodf+0x3c>
 8008330:	eeb4 8a68 	vcmp.f32	s16, s17
 8008334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008338:	d105      	bne.n	8008346 <fmodf+0x36>
 800833a:	f7ff ff1d 	bl	8008178 <__errno>
 800833e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008342:	2321      	movs	r3, #33	; 0x21
 8008344:	6003      	str	r3, [r0, #0]
 8008346:	ecbd 8b02 	vpop	{d8}
 800834a:	bd08      	pop	{r3, pc}
 800834c:	00000000 	.word	0x00000000

08008350 <sqrtf>:
 8008350:	b508      	push	{r3, lr}
 8008352:	ed2d 8b02 	vpush	{d8}
 8008356:	eeb0 8a40 	vmov.f32	s16, s0
 800835a:	f000 fa75 	bl	8008848 <__ieee754_sqrtf>
 800835e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008366:	d60c      	bvs.n	8008382 <sqrtf+0x32>
 8008368:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008388 <sqrtf+0x38>
 800836c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008374:	d505      	bpl.n	8008382 <sqrtf+0x32>
 8008376:	f7ff feff 	bl	8008178 <__errno>
 800837a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800837e:	2321      	movs	r3, #33	; 0x21
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	ecbd 8b02 	vpop	{d8}
 8008386:	bd08      	pop	{r3, pc}
 8008388:	00000000 	.word	0x00000000

0800838c <__ieee754_atan2f>:
 800838c:	ee10 2a90 	vmov	r2, s1
 8008390:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008394:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008398:	b510      	push	{r4, lr}
 800839a:	eef0 7a40 	vmov.f32	s15, s0
 800839e:	dc06      	bgt.n	80083ae <__ieee754_atan2f+0x22>
 80083a0:	ee10 0a10 	vmov	r0, s0
 80083a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80083a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083ac:	dd04      	ble.n	80083b8 <__ieee754_atan2f+0x2c>
 80083ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80083b2:	eeb0 0a67 	vmov.f32	s0, s15
 80083b6:	bd10      	pop	{r4, pc}
 80083b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80083bc:	d103      	bne.n	80083c6 <__ieee754_atan2f+0x3a>
 80083be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c2:	f000 bd63 	b.w	8008e8c <atanf>
 80083c6:	1794      	asrs	r4, r2, #30
 80083c8:	f004 0402 	and.w	r4, r4, #2
 80083cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80083d0:	b943      	cbnz	r3, 80083e4 <__ieee754_atan2f+0x58>
 80083d2:	2c02      	cmp	r4, #2
 80083d4:	d05e      	beq.n	8008494 <__ieee754_atan2f+0x108>
 80083d6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80084a8 <__ieee754_atan2f+0x11c>
 80083da:	2c03      	cmp	r4, #3
 80083dc:	bf08      	it	eq
 80083de:	eef0 7a47 	vmoveq.f32	s15, s14
 80083e2:	e7e6      	b.n	80083b2 <__ieee754_atan2f+0x26>
 80083e4:	b941      	cbnz	r1, 80083f8 <__ieee754_atan2f+0x6c>
 80083e6:	eddf 7a31 	vldr	s15, [pc, #196]	; 80084ac <__ieee754_atan2f+0x120>
 80083ea:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80084b0 <__ieee754_atan2f+0x124>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	bfb8      	it	lt
 80083f2:	eef0 7a40 	vmovlt.f32	s15, s0
 80083f6:	e7dc      	b.n	80083b2 <__ieee754_atan2f+0x26>
 80083f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80083fc:	d110      	bne.n	8008420 <__ieee754_atan2f+0x94>
 80083fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008402:	f104 34ff 	add.w	r4, r4, #4294967295
 8008406:	d107      	bne.n	8008418 <__ieee754_atan2f+0x8c>
 8008408:	2c02      	cmp	r4, #2
 800840a:	d846      	bhi.n	800849a <__ieee754_atan2f+0x10e>
 800840c:	4b29      	ldr	r3, [pc, #164]	; (80084b4 <__ieee754_atan2f+0x128>)
 800840e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008412:	edd4 7a00 	vldr	s15, [r4]
 8008416:	e7cc      	b.n	80083b2 <__ieee754_atan2f+0x26>
 8008418:	2c02      	cmp	r4, #2
 800841a:	d841      	bhi.n	80084a0 <__ieee754_atan2f+0x114>
 800841c:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <__ieee754_atan2f+0x12c>)
 800841e:	e7f6      	b.n	800840e <__ieee754_atan2f+0x82>
 8008420:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008424:	d0df      	beq.n	80083e6 <__ieee754_atan2f+0x5a>
 8008426:	1a5b      	subs	r3, r3, r1
 8008428:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800842c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008430:	da1a      	bge.n	8008468 <__ieee754_atan2f+0xdc>
 8008432:	2a00      	cmp	r2, #0
 8008434:	da01      	bge.n	800843a <__ieee754_atan2f+0xae>
 8008436:	313c      	adds	r1, #60	; 0x3c
 8008438:	db19      	blt.n	800846e <__ieee754_atan2f+0xe2>
 800843a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800843e:	f000 fdf9 	bl	8009034 <fabsf>
 8008442:	f000 fd23 	bl	8008e8c <atanf>
 8008446:	eef0 7a40 	vmov.f32	s15, s0
 800844a:	2c01      	cmp	r4, #1
 800844c:	d012      	beq.n	8008474 <__ieee754_atan2f+0xe8>
 800844e:	2c02      	cmp	r4, #2
 8008450:	d017      	beq.n	8008482 <__ieee754_atan2f+0xf6>
 8008452:	2c00      	cmp	r4, #0
 8008454:	d0ad      	beq.n	80083b2 <__ieee754_atan2f+0x26>
 8008456:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80084bc <__ieee754_atan2f+0x130>
 800845a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800845e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80084c0 <__ieee754_atan2f+0x134>
 8008462:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008466:	e7a4      	b.n	80083b2 <__ieee754_atan2f+0x26>
 8008468:	eddf 7a10 	vldr	s15, [pc, #64]	; 80084ac <__ieee754_atan2f+0x120>
 800846c:	e7ed      	b.n	800844a <__ieee754_atan2f+0xbe>
 800846e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80084c4 <__ieee754_atan2f+0x138>
 8008472:	e7ea      	b.n	800844a <__ieee754_atan2f+0xbe>
 8008474:	ee17 3a90 	vmov	r3, s15
 8008478:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	e797      	b.n	80083b2 <__ieee754_atan2f+0x26>
 8008482:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80084bc <__ieee754_atan2f+0x130>
 8008486:	ee77 7a80 	vadd.f32	s15, s15, s0
 800848a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80084c0 <__ieee754_atan2f+0x134>
 800848e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008492:	e78e      	b.n	80083b2 <__ieee754_atan2f+0x26>
 8008494:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80084c0 <__ieee754_atan2f+0x134>
 8008498:	e78b      	b.n	80083b2 <__ieee754_atan2f+0x26>
 800849a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80084c8 <__ieee754_atan2f+0x13c>
 800849e:	e788      	b.n	80083b2 <__ieee754_atan2f+0x26>
 80084a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80084c4 <__ieee754_atan2f+0x138>
 80084a4:	e785      	b.n	80083b2 <__ieee754_atan2f+0x26>
 80084a6:	bf00      	nop
 80084a8:	c0490fdb 	.word	0xc0490fdb
 80084ac:	3fc90fdb 	.word	0x3fc90fdb
 80084b0:	bfc90fdb 	.word	0xbfc90fdb
 80084b4:	080091d4 	.word	0x080091d4
 80084b8:	080091e0 	.word	0x080091e0
 80084bc:	33bbbd2e 	.word	0x33bbbd2e
 80084c0:	40490fdb 	.word	0x40490fdb
 80084c4:	00000000 	.word	0x00000000
 80084c8:	3f490fdb 	.word	0x3f490fdb

080084cc <__ieee754_fmodf>:
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	ee10 5a90 	vmov	r5, s1
 80084d2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80084d6:	d009      	beq.n	80084ec <__ieee754_fmodf+0x20>
 80084d8:	ee10 2a10 	vmov	r2, s0
 80084dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80084e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084e4:	da02      	bge.n	80084ec <__ieee754_fmodf+0x20>
 80084e6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80084ea:	dd04      	ble.n	80084f6 <__ieee754_fmodf+0x2a>
 80084ec:	ee60 0a20 	vmul.f32	s1, s0, s1
 80084f0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80084f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	dbfc      	blt.n	80084f4 <__ieee754_fmodf+0x28>
 80084fa:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80084fe:	d105      	bne.n	800850c <__ieee754_fmodf+0x40>
 8008500:	4b32      	ldr	r3, [pc, #200]	; (80085cc <__ieee754_fmodf+0x100>)
 8008502:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8008506:	ed93 0a00 	vldr	s0, [r3]
 800850a:	e7f3      	b.n	80084f4 <__ieee754_fmodf+0x28>
 800850c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8008510:	d13f      	bne.n	8008592 <__ieee754_fmodf+0xc6>
 8008512:	0219      	lsls	r1, r3, #8
 8008514:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008518:	2900      	cmp	r1, #0
 800851a:	dc37      	bgt.n	800858c <__ieee754_fmodf+0xc0>
 800851c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8008520:	d13d      	bne.n	800859e <__ieee754_fmodf+0xd2>
 8008522:	0227      	lsls	r7, r4, #8
 8008524:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008528:	2f00      	cmp	r7, #0
 800852a:	da35      	bge.n	8008598 <__ieee754_fmodf+0xcc>
 800852c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008530:	bfbb      	ittet	lt
 8008532:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008536:	1a12      	sublt	r2, r2, r0
 8008538:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800853c:	4093      	lsllt	r3, r2
 800853e:	bfa8      	it	ge
 8008540:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008544:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008548:	bfb5      	itete	lt
 800854a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800854e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8008552:	1a52      	sublt	r2, r2, r1
 8008554:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8008558:	bfb8      	it	lt
 800855a:	4094      	lsllt	r4, r2
 800855c:	1a40      	subs	r0, r0, r1
 800855e:	1b1a      	subs	r2, r3, r4
 8008560:	bb00      	cbnz	r0, 80085a4 <__ieee754_fmodf+0xd8>
 8008562:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8008566:	bf38      	it	cc
 8008568:	4613      	movcc	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0c8      	beq.n	8008500 <__ieee754_fmodf+0x34>
 800856e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008572:	db1f      	blt.n	80085b4 <__ieee754_fmodf+0xe8>
 8008574:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008578:	db1f      	blt.n	80085ba <__ieee754_fmodf+0xee>
 800857a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800857e:	317f      	adds	r1, #127	; 0x7f
 8008580:	4333      	orrs	r3, r6
 8008582:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8008586:	ee00 3a10 	vmov	s0, r3
 800858a:	e7b3      	b.n	80084f4 <__ieee754_fmodf+0x28>
 800858c:	3801      	subs	r0, #1
 800858e:	0049      	lsls	r1, r1, #1
 8008590:	e7c2      	b.n	8008518 <__ieee754_fmodf+0x4c>
 8008592:	15d8      	asrs	r0, r3, #23
 8008594:	387f      	subs	r0, #127	; 0x7f
 8008596:	e7c1      	b.n	800851c <__ieee754_fmodf+0x50>
 8008598:	3901      	subs	r1, #1
 800859a:	007f      	lsls	r7, r7, #1
 800859c:	e7c4      	b.n	8008528 <__ieee754_fmodf+0x5c>
 800859e:	15e1      	asrs	r1, r4, #23
 80085a0:	397f      	subs	r1, #127	; 0x7f
 80085a2:	e7c3      	b.n	800852c <__ieee754_fmodf+0x60>
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	da02      	bge.n	80085ae <__ieee754_fmodf+0xe2>
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	3801      	subs	r0, #1
 80085ac:	e7d7      	b.n	800855e <__ieee754_fmodf+0x92>
 80085ae:	d0a7      	beq.n	8008500 <__ieee754_fmodf+0x34>
 80085b0:	0053      	lsls	r3, r2, #1
 80085b2:	e7fa      	b.n	80085aa <__ieee754_fmodf+0xde>
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	3901      	subs	r1, #1
 80085b8:	e7d9      	b.n	800856e <__ieee754_fmodf+0xa2>
 80085ba:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80085be:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80085c2:	3182      	adds	r1, #130	; 0x82
 80085c4:	410b      	asrs	r3, r1
 80085c6:	4333      	orrs	r3, r6
 80085c8:	e7dd      	b.n	8008586 <__ieee754_fmodf+0xba>
 80085ca:	bf00      	nop
 80085cc:	080091ec 	.word	0x080091ec

080085d0 <__ieee754_rem_pio2f>:
 80085d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085d2:	ee10 6a10 	vmov	r6, s0
 80085d6:	4b8e      	ldr	r3, [pc, #568]	; (8008810 <__ieee754_rem_pio2f+0x240>)
 80085d8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80085dc:	429d      	cmp	r5, r3
 80085de:	b087      	sub	sp, #28
 80085e0:	eef0 7a40 	vmov.f32	s15, s0
 80085e4:	4604      	mov	r4, r0
 80085e6:	dc05      	bgt.n	80085f4 <__ieee754_rem_pio2f+0x24>
 80085e8:	2300      	movs	r3, #0
 80085ea:	ed80 0a00 	vstr	s0, [r0]
 80085ee:	6043      	str	r3, [r0, #4]
 80085f0:	2000      	movs	r0, #0
 80085f2:	e01a      	b.n	800862a <__ieee754_rem_pio2f+0x5a>
 80085f4:	4b87      	ldr	r3, [pc, #540]	; (8008814 <__ieee754_rem_pio2f+0x244>)
 80085f6:	429d      	cmp	r5, r3
 80085f8:	dc46      	bgt.n	8008688 <__ieee754_rem_pio2f+0xb8>
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008818 <__ieee754_rem_pio2f+0x248>
 8008600:	4b86      	ldr	r3, [pc, #536]	; (800881c <__ieee754_rem_pio2f+0x24c>)
 8008602:	f025 050f 	bic.w	r5, r5, #15
 8008606:	dd1f      	ble.n	8008648 <__ieee754_rem_pio2f+0x78>
 8008608:	429d      	cmp	r5, r3
 800860a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800860e:	d00e      	beq.n	800862e <__ieee754_rem_pio2f+0x5e>
 8008610:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008820 <__ieee754_rem_pio2f+0x250>
 8008614:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008618:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800861c:	ed80 0a00 	vstr	s0, [r0]
 8008620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008624:	2001      	movs	r0, #1
 8008626:	edc4 7a01 	vstr	s15, [r4, #4]
 800862a:	b007      	add	sp, #28
 800862c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008824 <__ieee754_rem_pio2f+0x254>
 8008632:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008828 <__ieee754_rem_pio2f+0x258>
 8008636:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800863a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800863e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008642:	edc0 6a00 	vstr	s13, [r0]
 8008646:	e7eb      	b.n	8008620 <__ieee754_rem_pio2f+0x50>
 8008648:	429d      	cmp	r5, r3
 800864a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800864e:	d00e      	beq.n	800866e <__ieee754_rem_pio2f+0x9e>
 8008650:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008820 <__ieee754_rem_pio2f+0x250>
 8008654:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008658:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800865c:	ed80 0a00 	vstr	s0, [r0]
 8008660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008664:	f04f 30ff 	mov.w	r0, #4294967295
 8008668:	edc4 7a01 	vstr	s15, [r4, #4]
 800866c:	e7dd      	b.n	800862a <__ieee754_rem_pio2f+0x5a>
 800866e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008824 <__ieee754_rem_pio2f+0x254>
 8008672:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008828 <__ieee754_rem_pio2f+0x258>
 8008676:	ee77 7a80 	vadd.f32	s15, s15, s0
 800867a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800867e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008682:	edc0 6a00 	vstr	s13, [r0]
 8008686:	e7eb      	b.n	8008660 <__ieee754_rem_pio2f+0x90>
 8008688:	4b68      	ldr	r3, [pc, #416]	; (800882c <__ieee754_rem_pio2f+0x25c>)
 800868a:	429d      	cmp	r5, r3
 800868c:	dc72      	bgt.n	8008774 <__ieee754_rem_pio2f+0x1a4>
 800868e:	f000 fcd1 	bl	8009034 <fabsf>
 8008692:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008830 <__ieee754_rem_pio2f+0x260>
 8008696:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800869a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800869e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086a6:	ee17 0a90 	vmov	r0, s15
 80086aa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008818 <__ieee754_rem_pio2f+0x248>
 80086ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 80086b2:	281f      	cmp	r0, #31
 80086b4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008820 <__ieee754_rem_pio2f+0x250>
 80086b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086bc:	eeb1 6a47 	vneg.f32	s12, s14
 80086c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80086c4:	ee16 2a90 	vmov	r2, s13
 80086c8:	dc1c      	bgt.n	8008704 <__ieee754_rem_pio2f+0x134>
 80086ca:	495a      	ldr	r1, [pc, #360]	; (8008834 <__ieee754_rem_pio2f+0x264>)
 80086cc:	1e47      	subs	r7, r0, #1
 80086ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80086d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80086d6:	428b      	cmp	r3, r1
 80086d8:	d014      	beq.n	8008704 <__ieee754_rem_pio2f+0x134>
 80086da:	6022      	str	r2, [r4, #0]
 80086dc:	ed94 7a00 	vldr	s14, [r4]
 80086e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80086ea:	ed84 0a01 	vstr	s0, [r4, #4]
 80086ee:	da9c      	bge.n	800862a <__ieee754_rem_pio2f+0x5a>
 80086f0:	eeb1 7a47 	vneg.f32	s14, s14
 80086f4:	eeb1 0a40 	vneg.f32	s0, s0
 80086f8:	ed84 7a00 	vstr	s14, [r4]
 80086fc:	ed84 0a01 	vstr	s0, [r4, #4]
 8008700:	4240      	negs	r0, r0
 8008702:	e792      	b.n	800862a <__ieee754_rem_pio2f+0x5a>
 8008704:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008708:	15eb      	asrs	r3, r5, #23
 800870a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800870e:	2d08      	cmp	r5, #8
 8008710:	dde3      	ble.n	80086da <__ieee754_rem_pio2f+0x10a>
 8008712:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008824 <__ieee754_rem_pio2f+0x254>
 8008716:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008828 <__ieee754_rem_pio2f+0x258>
 800871a:	eef0 6a40 	vmov.f32	s13, s0
 800871e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008722:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008726:	eea6 0a27 	vfma.f32	s0, s12, s15
 800872a:	eef0 7a40 	vmov.f32	s15, s0
 800872e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008732:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008736:	ee15 2a90 	vmov	r2, s11
 800873a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	2b19      	cmp	r3, #25
 8008742:	dc04      	bgt.n	800874e <__ieee754_rem_pio2f+0x17e>
 8008744:	edc4 5a00 	vstr	s11, [r4]
 8008748:	eeb0 0a66 	vmov.f32	s0, s13
 800874c:	e7c6      	b.n	80086dc <__ieee754_rem_pio2f+0x10c>
 800874e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008838 <__ieee754_rem_pio2f+0x268>
 8008752:	eeb0 0a66 	vmov.f32	s0, s13
 8008756:	eea6 0a25 	vfma.f32	s0, s12, s11
 800875a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800875e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800883c <__ieee754_rem_pio2f+0x26c>
 8008762:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008766:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800876a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800876e:	ed84 7a00 	vstr	s14, [r4]
 8008772:	e7b3      	b.n	80086dc <__ieee754_rem_pio2f+0x10c>
 8008774:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008778:	db06      	blt.n	8008788 <__ieee754_rem_pio2f+0x1b8>
 800877a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800877e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008782:	edc0 7a00 	vstr	s15, [r0]
 8008786:	e733      	b.n	80085f0 <__ieee754_rem_pio2f+0x20>
 8008788:	15ea      	asrs	r2, r5, #23
 800878a:	3a86      	subs	r2, #134	; 0x86
 800878c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008798:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008840 <__ieee754_rem_pio2f+0x270>
 800879c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087a4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80087a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087b8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80087bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c8:	edcd 7a05 	vstr	s15, [sp, #20]
 80087cc:	d11e      	bne.n	800880c <__ieee754_rem_pio2f+0x23c>
 80087ce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80087d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d6:	bf14      	ite	ne
 80087d8:	2302      	movne	r3, #2
 80087da:	2301      	moveq	r3, #1
 80087dc:	4919      	ldr	r1, [pc, #100]	; (8008844 <__ieee754_rem_pio2f+0x274>)
 80087de:	9101      	str	r1, [sp, #4]
 80087e0:	2102      	movs	r1, #2
 80087e2:	9100      	str	r1, [sp, #0]
 80087e4:	a803      	add	r0, sp, #12
 80087e6:	4621      	mov	r1, r4
 80087e8:	f000 f892 	bl	8008910 <__kernel_rem_pio2f>
 80087ec:	2e00      	cmp	r6, #0
 80087ee:	f6bf af1c 	bge.w	800862a <__ieee754_rem_pio2f+0x5a>
 80087f2:	edd4 7a00 	vldr	s15, [r4]
 80087f6:	eef1 7a67 	vneg.f32	s15, s15
 80087fa:	edc4 7a00 	vstr	s15, [r4]
 80087fe:	edd4 7a01 	vldr	s15, [r4, #4]
 8008802:	eef1 7a67 	vneg.f32	s15, s15
 8008806:	edc4 7a01 	vstr	s15, [r4, #4]
 800880a:	e779      	b.n	8008700 <__ieee754_rem_pio2f+0x130>
 800880c:	2303      	movs	r3, #3
 800880e:	e7e5      	b.n	80087dc <__ieee754_rem_pio2f+0x20c>
 8008810:	3f490fd8 	.word	0x3f490fd8
 8008814:	4016cbe3 	.word	0x4016cbe3
 8008818:	3fc90f80 	.word	0x3fc90f80
 800881c:	3fc90fd0 	.word	0x3fc90fd0
 8008820:	37354443 	.word	0x37354443
 8008824:	37354400 	.word	0x37354400
 8008828:	2e85a308 	.word	0x2e85a308
 800882c:	43490f80 	.word	0x43490f80
 8008830:	3f22f984 	.word	0x3f22f984
 8008834:	080091f4 	.word	0x080091f4
 8008838:	2e85a300 	.word	0x2e85a300
 800883c:	248d3132 	.word	0x248d3132
 8008840:	43800000 	.word	0x43800000
 8008844:	08009274 	.word	0x08009274

08008848 <__ieee754_sqrtf>:
 8008848:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800884c:	4770      	bx	lr
	...

08008850 <__kernel_cosf>:
 8008850:	ee10 3a10 	vmov	r3, s0
 8008854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008858:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800885c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008860:	da05      	bge.n	800886e <__kernel_cosf+0x1e>
 8008862:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008866:	ee17 2a90 	vmov	r2, s15
 800886a:	2a00      	cmp	r2, #0
 800886c:	d03d      	beq.n	80088ea <__kernel_cosf+0x9a>
 800886e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008872:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80088f0 <__kernel_cosf+0xa0>
 8008876:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80088f4 <__kernel_cosf+0xa4>
 800887a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80088f8 <__kernel_cosf+0xa8>
 800887e:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <__kernel_cosf+0xac>)
 8008880:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008884:	4293      	cmp	r3, r2
 8008886:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008900 <__kernel_cosf+0xb0>
 800888a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800888e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008904 <__kernel_cosf+0xb4>
 8008892:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008896:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008908 <__kernel_cosf+0xb8>
 800889a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800889e:	eeb0 7a66 	vmov.f32	s14, s13
 80088a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80088a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80088aa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80088ae:	ee67 6a25 	vmul.f32	s13, s14, s11
 80088b2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80088b6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80088ba:	dc04      	bgt.n	80088c6 <__kernel_cosf+0x76>
 80088bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80088c0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80088c4:	4770      	bx	lr
 80088c6:	4a11      	ldr	r2, [pc, #68]	; (800890c <__kernel_cosf+0xbc>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	bfda      	itte	le
 80088cc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80088d0:	ee06 3a90 	vmovle	s13, r3
 80088d4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80088d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088dc:	ee36 0a66 	vsub.f32	s0, s12, s13
 80088e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80088e8:	4770      	bx	lr
 80088ea:	eeb0 0a46 	vmov.f32	s0, s12
 80088ee:	4770      	bx	lr
 80088f0:	ad47d74e 	.word	0xad47d74e
 80088f4:	310f74f6 	.word	0x310f74f6
 80088f8:	3d2aaaab 	.word	0x3d2aaaab
 80088fc:	3e999999 	.word	0x3e999999
 8008900:	b493f27c 	.word	0xb493f27c
 8008904:	37d00d01 	.word	0x37d00d01
 8008908:	bab60b61 	.word	0xbab60b61
 800890c:	3f480000 	.word	0x3f480000

08008910 <__kernel_rem_pio2f>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	ed2d 8b04 	vpush	{d8-d9}
 8008918:	b0d9      	sub	sp, #356	; 0x164
 800891a:	4688      	mov	r8, r1
 800891c:	9002      	str	r0, [sp, #8]
 800891e:	49bb      	ldr	r1, [pc, #748]	; (8008c0c <__kernel_rem_pio2f+0x2fc>)
 8008920:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008928:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800892c:	1e59      	subs	r1, r3, #1
 800892e:	1d13      	adds	r3, r2, #4
 8008930:	db27      	blt.n	8008982 <__kernel_rem_pio2f+0x72>
 8008932:	f1b2 0b03 	subs.w	fp, r2, #3
 8008936:	bf48      	it	mi
 8008938:	f102 0b04 	addmi.w	fp, r2, #4
 800893c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008940:	1c45      	adds	r5, r0, #1
 8008942:	00ec      	lsls	r4, r5, #3
 8008944:	1a47      	subs	r7, r0, r1
 8008946:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 800894a:	9403      	str	r4, [sp, #12]
 800894c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008950:	eb0a 0c01 	add.w	ip, sl, r1
 8008954:	ae1c      	add	r6, sp, #112	; 0x70
 8008956:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800895a:	2400      	movs	r4, #0
 800895c:	4564      	cmp	r4, ip
 800895e:	dd12      	ble.n	8008986 <__kernel_rem_pio2f+0x76>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	ac1c      	add	r4, sp, #112	; 0x70
 8008964:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008968:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800896c:	f04f 0c00 	mov.w	ip, #0
 8008970:	45d4      	cmp	ip, sl
 8008972:	dc27      	bgt.n	80089c4 <__kernel_rem_pio2f+0xb4>
 8008974:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008978:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 800897c:	4627      	mov	r7, r4
 800897e:	2600      	movs	r6, #0
 8008980:	e016      	b.n	80089b0 <__kernel_rem_pio2f+0xa0>
 8008982:	2000      	movs	r0, #0
 8008984:	e7dc      	b.n	8008940 <__kernel_rem_pio2f+0x30>
 8008986:	42e7      	cmn	r7, r4
 8008988:	bf5d      	ittte	pl
 800898a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800898e:	ee07 3a90 	vmovpl	s15, r3
 8008992:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008996:	eef0 7a47 	vmovmi.f32	s15, s14
 800899a:	ece6 7a01 	vstmia	r6!, {s15}
 800899e:	3401      	adds	r4, #1
 80089a0:	e7dc      	b.n	800895c <__kernel_rem_pio2f+0x4c>
 80089a2:	ecf9 6a01 	vldmia	r9!, {s13}
 80089a6:	ed97 7a00 	vldr	s14, [r7]
 80089aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80089ae:	3601      	adds	r6, #1
 80089b0:	428e      	cmp	r6, r1
 80089b2:	f1a7 0704 	sub.w	r7, r7, #4
 80089b6:	ddf4      	ble.n	80089a2 <__kernel_rem_pio2f+0x92>
 80089b8:	eceb 7a01 	vstmia	fp!, {s15}
 80089bc:	f10c 0c01 	add.w	ip, ip, #1
 80089c0:	3404      	adds	r4, #4
 80089c2:	e7d5      	b.n	8008970 <__kernel_rem_pio2f+0x60>
 80089c4:	ab08      	add	r3, sp, #32
 80089c6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80089ca:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008c18 <__kernel_rem_pio2f+0x308>
 80089ce:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008c14 <__kernel_rem_pio2f+0x304>
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80089d8:	4656      	mov	r6, sl
 80089da:	00b3      	lsls	r3, r6, #2
 80089dc:	9305      	str	r3, [sp, #20]
 80089de:	ab58      	add	r3, sp, #352	; 0x160
 80089e0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80089e4:	ac08      	add	r4, sp, #32
 80089e6:	ab44      	add	r3, sp, #272	; 0x110
 80089e8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80089ec:	46a4      	mov	ip, r4
 80089ee:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80089f2:	4637      	mov	r7, r6
 80089f4:	2f00      	cmp	r7, #0
 80089f6:	f1a0 0004 	sub.w	r0, r0, #4
 80089fa:	dc4f      	bgt.n	8008a9c <__kernel_rem_pio2f+0x18c>
 80089fc:	4628      	mov	r0, r5
 80089fe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008a02:	f000 fb61 	bl	80090c8 <scalbnf>
 8008a06:	eeb0 8a40 	vmov.f32	s16, s0
 8008a0a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008a0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008a12:	f000 fb17 	bl	8009044 <floorf>
 8008a16:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008a1a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008a24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008a28:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008a2c:	ee17 9a90 	vmov	r9, s15
 8008a30:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008a34:	dd44      	ble.n	8008ac0 <__kernel_rem_pio2f+0x1b0>
 8008a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8008a3a:	ab08      	add	r3, sp, #32
 8008a3c:	f1c5 0e08 	rsb	lr, r5, #8
 8008a40:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008a44:	fa47 f00e 	asr.w	r0, r7, lr
 8008a48:	4481      	add	r9, r0
 8008a4a:	fa00 f00e 	lsl.w	r0, r0, lr
 8008a4e:	1a3f      	subs	r7, r7, r0
 8008a50:	f1c5 0007 	rsb	r0, r5, #7
 8008a54:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008a58:	4107      	asrs	r7, r0
 8008a5a:	2f00      	cmp	r7, #0
 8008a5c:	dd3f      	ble.n	8008ade <__kernel_rem_pio2f+0x1ce>
 8008a5e:	f04f 0e00 	mov.w	lr, #0
 8008a62:	f109 0901 	add.w	r9, r9, #1
 8008a66:	4673      	mov	r3, lr
 8008a68:	4576      	cmp	r6, lr
 8008a6a:	dc6b      	bgt.n	8008b44 <__kernel_rem_pio2f+0x234>
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	dd04      	ble.n	8008a7a <__kernel_rem_pio2f+0x16a>
 8008a70:	2d01      	cmp	r5, #1
 8008a72:	d078      	beq.n	8008b66 <__kernel_rem_pio2f+0x256>
 8008a74:	2d02      	cmp	r5, #2
 8008a76:	f000 8081 	beq.w	8008b7c <__kernel_rem_pio2f+0x26c>
 8008a7a:	2f02      	cmp	r7, #2
 8008a7c:	d12f      	bne.n	8008ade <__kernel_rem_pio2f+0x1ce>
 8008a7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a82:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008a86:	b353      	cbz	r3, 8008ade <__kernel_rem_pio2f+0x1ce>
 8008a88:	4628      	mov	r0, r5
 8008a8a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008a8e:	f000 fb1b 	bl	80090c8 <scalbnf>
 8008a92:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008a96:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008a9a:	e020      	b.n	8008ade <__kernel_rem_pio2f+0x1ce>
 8008a9c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008aa0:	3f01      	subs	r7, #1
 8008aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aaa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008aae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ab2:	ecac 0a01 	vstmia	ip!, {s0}
 8008ab6:	ed90 0a00 	vldr	s0, [r0]
 8008aba:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008abe:	e799      	b.n	80089f4 <__kernel_rem_pio2f+0xe4>
 8008ac0:	d105      	bne.n	8008ace <__kernel_rem_pio2f+0x1be>
 8008ac2:	1e70      	subs	r0, r6, #1
 8008ac4:	ab08      	add	r3, sp, #32
 8008ac6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008aca:	11ff      	asrs	r7, r7, #7
 8008acc:	e7c5      	b.n	8008a5a <__kernel_rem_pio2f+0x14a>
 8008ace:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008ad2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ada:	da31      	bge.n	8008b40 <__kernel_rem_pio2f+0x230>
 8008adc:	2700      	movs	r7, #0
 8008ade:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae6:	f040 809b 	bne.w	8008c20 <__kernel_rem_pio2f+0x310>
 8008aea:	1e74      	subs	r4, r6, #1
 8008aec:	46a4      	mov	ip, r4
 8008aee:	2000      	movs	r0, #0
 8008af0:	45d4      	cmp	ip, sl
 8008af2:	da4a      	bge.n	8008b8a <__kernel_rem_pio2f+0x27a>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d07a      	beq.n	8008bee <__kernel_rem_pio2f+0x2de>
 8008af8:	ab08      	add	r3, sp, #32
 8008afa:	3d08      	subs	r5, #8
 8008afc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8081 	beq.w	8008c08 <__kernel_rem_pio2f+0x2f8>
 8008b06:	4628      	mov	r0, r5
 8008b08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008b0c:	00a5      	lsls	r5, r4, #2
 8008b0e:	f000 fadb 	bl	80090c8 <scalbnf>
 8008b12:	aa44      	add	r2, sp, #272	; 0x110
 8008b14:	1d2b      	adds	r3, r5, #4
 8008b16:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008c18 <__kernel_rem_pio2f+0x308>
 8008b1a:	18d1      	adds	r1, r2, r3
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	f280 80ae 	bge.w	8008c80 <__kernel_rem_pio2f+0x370>
 8008b24:	4622      	mov	r2, r4
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	f2c0 80cc 	blt.w	8008cc4 <__kernel_rem_pio2f+0x3b4>
 8008b2c:	a944      	add	r1, sp, #272	; 0x110
 8008b2e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008b32:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008c10 <__kernel_rem_pio2f+0x300>
 8008b36:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	1aa1      	subs	r1, r4, r2
 8008b3e:	e0b6      	b.n	8008cae <__kernel_rem_pio2f+0x39e>
 8008b40:	2702      	movs	r7, #2
 8008b42:	e78c      	b.n	8008a5e <__kernel_rem_pio2f+0x14e>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	b94b      	cbnz	r3, 8008b5c <__kernel_rem_pio2f+0x24c>
 8008b48:	b118      	cbz	r0, 8008b52 <__kernel_rem_pio2f+0x242>
 8008b4a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008b4e:	6020      	str	r0, [r4, #0]
 8008b50:	2001      	movs	r0, #1
 8008b52:	f10e 0e01 	add.w	lr, lr, #1
 8008b56:	3404      	adds	r4, #4
 8008b58:	4603      	mov	r3, r0
 8008b5a:	e785      	b.n	8008a68 <__kernel_rem_pio2f+0x158>
 8008b5c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008b60:	6020      	str	r0, [r4, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	e7f5      	b.n	8008b52 <__kernel_rem_pio2f+0x242>
 8008b66:	1e74      	subs	r4, r6, #1
 8008b68:	a808      	add	r0, sp, #32
 8008b6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008b6e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008b72:	f10d 0c20 	add.w	ip, sp, #32
 8008b76:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008b7a:	e77e      	b.n	8008a7a <__kernel_rem_pio2f+0x16a>
 8008b7c:	1e74      	subs	r4, r6, #1
 8008b7e:	a808      	add	r0, sp, #32
 8008b80:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008b84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008b88:	e7f3      	b.n	8008b72 <__kernel_rem_pio2f+0x262>
 8008b8a:	ab08      	add	r3, sp, #32
 8008b8c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008b90:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b94:	4318      	orrs	r0, r3
 8008b96:	e7ab      	b.n	8008af0 <__kernel_rem_pio2f+0x1e0>
 8008b98:	f10c 0c01 	add.w	ip, ip, #1
 8008b9c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008ba0:	2c00      	cmp	r4, #0
 8008ba2:	d0f9      	beq.n	8008b98 <__kernel_rem_pio2f+0x288>
 8008ba4:	9b05      	ldr	r3, [sp, #20]
 8008ba6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008baa:	eb0d 0003 	add.w	r0, sp, r3
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	18f4      	adds	r4, r6, r3
 8008bb2:	ab1c      	add	r3, sp, #112	; 0x70
 8008bb4:	1c77      	adds	r7, r6, #1
 8008bb6:	384c      	subs	r0, #76	; 0x4c
 8008bb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bbc:	4466      	add	r6, ip
 8008bbe:	42be      	cmp	r6, r7
 8008bc0:	f6ff af0b 	blt.w	80089da <__kernel_rem_pio2f+0xca>
 8008bc4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008bc8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008bcc:	ee07 3a90 	vmov	s15, r3
 8008bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bd4:	f04f 0c00 	mov.w	ip, #0
 8008bd8:	ece4 7a01 	vstmia	r4!, {s15}
 8008bdc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 8008be0:	46a1      	mov	r9, r4
 8008be2:	458c      	cmp	ip, r1
 8008be4:	dd07      	ble.n	8008bf6 <__kernel_rem_pio2f+0x2e6>
 8008be6:	ece0 7a01 	vstmia	r0!, {s15}
 8008bea:	3701      	adds	r7, #1
 8008bec:	e7e7      	b.n	8008bbe <__kernel_rem_pio2f+0x2ae>
 8008bee:	9804      	ldr	r0, [sp, #16]
 8008bf0:	f04f 0c01 	mov.w	ip, #1
 8008bf4:	e7d2      	b.n	8008b9c <__kernel_rem_pio2f+0x28c>
 8008bf6:	ecfe 6a01 	vldmia	lr!, {s13}
 8008bfa:	ed39 7a01 	vldmdb	r9!, {s14}
 8008bfe:	f10c 0c01 	add.w	ip, ip, #1
 8008c02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c06:	e7ec      	b.n	8008be2 <__kernel_rem_pio2f+0x2d2>
 8008c08:	3c01      	subs	r4, #1
 8008c0a:	e775      	b.n	8008af8 <__kernel_rem_pio2f+0x1e8>
 8008c0c:	080095b8 	.word	0x080095b8
 8008c10:	0800958c 	.word	0x0800958c
 8008c14:	43800000 	.word	0x43800000
 8008c18:	3b800000 	.word	0x3b800000
 8008c1c:	00000000 	.word	0x00000000
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	eeb0 0a48 	vmov.f32	s0, s16
 8008c26:	1a98      	subs	r0, r3, r2
 8008c28:	f000 fa4e 	bl	80090c8 <scalbnf>
 8008c2c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008c14 <__kernel_rem_pio2f+0x304>
 8008c30:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c38:	db19      	blt.n	8008c6e <__kernel_rem_pio2f+0x35e>
 8008c3a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008c18 <__kernel_rem_pio2f+0x308>
 8008c3e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008c42:	aa08      	add	r2, sp, #32
 8008c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c48:	1c74      	adds	r4, r6, #1
 8008c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c4e:	3508      	adds	r5, #8
 8008c50:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008c5c:	ee10 3a10 	vmov	r3, s0
 8008c60:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008c64:	ee17 3a90 	vmov	r3, s15
 8008c68:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008c6c:	e74b      	b.n	8008b06 <__kernel_rem_pio2f+0x1f6>
 8008c6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008c72:	aa08      	add	r2, sp, #32
 8008c74:	ee10 3a10 	vmov	r3, s0
 8008c78:	4634      	mov	r4, r6
 8008c7a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008c7e:	e742      	b.n	8008b06 <__kernel_rem_pio2f+0x1f6>
 8008c80:	a808      	add	r0, sp, #32
 8008c82:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008c86:	9001      	str	r0, [sp, #4]
 8008c88:	ee07 0a90 	vmov	s15, r0
 8008c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c90:	3a01      	subs	r2, #1
 8008c92:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008c96:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008c9a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c9e:	e73e      	b.n	8008b1e <__kernel_rem_pio2f+0x20e>
 8008ca0:	ecfc 6a01 	vldmia	ip!, {s13}
 8008ca4:	ecb6 7a01 	vldmia	r6!, {s14}
 8008ca8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008cac:	3001      	adds	r0, #1
 8008cae:	4550      	cmp	r0, sl
 8008cb0:	dc01      	bgt.n	8008cb6 <__kernel_rem_pio2f+0x3a6>
 8008cb2:	4288      	cmp	r0, r1
 8008cb4:	ddf4      	ble.n	8008ca0 <__kernel_rem_pio2f+0x390>
 8008cb6:	a858      	add	r0, sp, #352	; 0x160
 8008cb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008cbc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008cc0:	3a01      	subs	r2, #1
 8008cc2:	e730      	b.n	8008b26 <__kernel_rem_pio2f+0x216>
 8008cc4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008cc6:	2a02      	cmp	r2, #2
 8008cc8:	dc09      	bgt.n	8008cde <__kernel_rem_pio2f+0x3ce>
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	dc2a      	bgt.n	8008d24 <__kernel_rem_pio2f+0x414>
 8008cce:	d043      	beq.n	8008d58 <__kernel_rem_pio2f+0x448>
 8008cd0:	f009 0007 	and.w	r0, r9, #7
 8008cd4:	b059      	add	sp, #356	; 0x164
 8008cd6:	ecbd 8b04 	vpop	{d8-d9}
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d1f5      	bne.n	8008cd0 <__kernel_rem_pio2f+0x3c0>
 8008ce4:	ab30      	add	r3, sp, #192	; 0xc0
 8008ce6:	442b      	add	r3, r5
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4619      	mov	r1, r3
 8008cec:	4620      	mov	r0, r4
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f1a1 0104 	sub.w	r1, r1, #4
 8008cf4:	dc51      	bgt.n	8008d9a <__kernel_rem_pio2f+0x48a>
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	2901      	cmp	r1, #1
 8008cfa:	f1a2 0204 	sub.w	r2, r2, #4
 8008cfe:	dc5c      	bgt.n	8008dba <__kernel_rem_pio2f+0x4aa>
 8008d00:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 8008d04:	3304      	adds	r3, #4
 8008d06:	2c01      	cmp	r4, #1
 8008d08:	dc67      	bgt.n	8008dda <__kernel_rem_pio2f+0x4ca>
 8008d0a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008d0e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	d167      	bne.n	8008de6 <__kernel_rem_pio2f+0x4d6>
 8008d16:	edc8 6a00 	vstr	s13, [r8]
 8008d1a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008d1e:	edc8 7a02 	vstr	s15, [r8, #8]
 8008d22:	e7d5      	b.n	8008cd0 <__kernel_rem_pio2f+0x3c0>
 8008d24:	aa30      	add	r2, sp, #192	; 0xc0
 8008d26:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 8008d2a:	4413      	add	r3, r2
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	da24      	bge.n	8008d7c <__kernel_rem_pio2f+0x46c>
 8008d32:	b34f      	cbz	r7, 8008d88 <__kernel_rem_pio2f+0x478>
 8008d34:	eef1 7a47 	vneg.f32	s15, s14
 8008d38:	edc8 7a00 	vstr	s15, [r8]
 8008d3c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d44:	aa31      	add	r2, sp, #196	; 0xc4
 8008d46:	2301      	movs	r3, #1
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	da20      	bge.n	8008d8e <__kernel_rem_pio2f+0x47e>
 8008d4c:	b10f      	cbz	r7, 8008d52 <__kernel_rem_pio2f+0x442>
 8008d4e:	eef1 7a67 	vneg.f32	s15, s15
 8008d52:	edc8 7a01 	vstr	s15, [r8, #4]
 8008d56:	e7bb      	b.n	8008cd0 <__kernel_rem_pio2f+0x3c0>
 8008d58:	aa30      	add	r2, sp, #192	; 0xc0
 8008d5a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008c1c <__kernel_rem_pio2f+0x30c>
 8008d5e:	4413      	add	r3, r2
 8008d60:	2c00      	cmp	r4, #0
 8008d62:	da05      	bge.n	8008d70 <__kernel_rem_pio2f+0x460>
 8008d64:	b10f      	cbz	r7, 8008d6a <__kernel_rem_pio2f+0x45a>
 8008d66:	eef1 7a67 	vneg.f32	s15, s15
 8008d6a:	edc8 7a00 	vstr	s15, [r8]
 8008d6e:	e7af      	b.n	8008cd0 <__kernel_rem_pio2f+0x3c0>
 8008d70:	ed33 7a01 	vldmdb	r3!, {s14}
 8008d74:	3c01      	subs	r4, #1
 8008d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d7a:	e7f1      	b.n	8008d60 <__kernel_rem_pio2f+0x450>
 8008d7c:	ed73 7a01 	vldmdb	r3!, {s15}
 8008d80:	3a01      	subs	r2, #1
 8008d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d86:	e7d2      	b.n	8008d2e <__kernel_rem_pio2f+0x41e>
 8008d88:	eef0 7a47 	vmov.f32	s15, s14
 8008d8c:	e7d4      	b.n	8008d38 <__kernel_rem_pio2f+0x428>
 8008d8e:	ecb2 7a01 	vldmia	r2!, {s14}
 8008d92:	3301      	adds	r3, #1
 8008d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d98:	e7d6      	b.n	8008d48 <__kernel_rem_pio2f+0x438>
 8008d9a:	edd1 7a00 	vldr	s15, [r1]
 8008d9e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008da2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008da6:	3801      	subs	r0, #1
 8008da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008dac:	ed81 7a00 	vstr	s14, [r1]
 8008db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db4:	edc1 7a01 	vstr	s15, [r1, #4]
 8008db8:	e799      	b.n	8008cee <__kernel_rem_pio2f+0x3de>
 8008dba:	edd2 7a00 	vldr	s15, [r2]
 8008dbe:	edd2 6a01 	vldr	s13, [r2, #4]
 8008dc2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008dc6:	3901      	subs	r1, #1
 8008dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008dcc:	ed82 7a00 	vstr	s14, [r2]
 8008dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd4:	edc2 7a01 	vstr	s15, [r2, #4]
 8008dd8:	e78e      	b.n	8008cf8 <__kernel_rem_pio2f+0x3e8>
 8008dda:	ed33 7a01 	vldmdb	r3!, {s14}
 8008dde:	3c01      	subs	r4, #1
 8008de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008de4:	e78f      	b.n	8008d06 <__kernel_rem_pio2f+0x3f6>
 8008de6:	eef1 6a66 	vneg.f32	s13, s13
 8008dea:	eeb1 7a47 	vneg.f32	s14, s14
 8008dee:	edc8 6a00 	vstr	s13, [r8]
 8008df2:	ed88 7a01 	vstr	s14, [r8, #4]
 8008df6:	eef1 7a67 	vneg.f32	s15, s15
 8008dfa:	e790      	b.n	8008d1e <__kernel_rem_pio2f+0x40e>

08008dfc <__kernel_sinf>:
 8008dfc:	ee10 3a10 	vmov	r3, s0
 8008e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e04:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008e08:	da04      	bge.n	8008e14 <__kernel_sinf+0x18>
 8008e0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008e0e:	ee17 3a90 	vmov	r3, s15
 8008e12:	b35b      	cbz	r3, 8008e6c <__kernel_sinf+0x70>
 8008e14:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008e18:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008e70 <__kernel_sinf+0x74>
 8008e1c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008e74 <__kernel_sinf+0x78>
 8008e20:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008e24:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008e78 <__kernel_sinf+0x7c>
 8008e28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008e2c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008e7c <__kernel_sinf+0x80>
 8008e30:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008e34:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008e80 <__kernel_sinf+0x84>
 8008e38:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008e3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008e40:	b930      	cbnz	r0, 8008e50 <__kernel_sinf+0x54>
 8008e42:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008e84 <__kernel_sinf+0x88>
 8008e46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008e4a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008e4e:	4770      	bx	lr
 8008e50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008e54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008e58:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008e5c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008e60:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008e88 <__kernel_sinf+0x8c>
 8008e64:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008e68:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	2f2ec9d3 	.word	0x2f2ec9d3
 8008e74:	b2d72f34 	.word	0xb2d72f34
 8008e78:	3638ef1b 	.word	0x3638ef1b
 8008e7c:	b9500d01 	.word	0xb9500d01
 8008e80:	3c088889 	.word	0x3c088889
 8008e84:	be2aaaab 	.word	0xbe2aaaab
 8008e88:	3e2aaaab 	.word	0x3e2aaaab

08008e8c <atanf>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	ee10 5a10 	vmov	r5, s0
 8008e92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008e96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008e9a:	eef0 7a40 	vmov.f32	s15, s0
 8008e9e:	db10      	blt.n	8008ec2 <atanf+0x36>
 8008ea0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008ea4:	dd04      	ble.n	8008eb0 <atanf+0x24>
 8008ea6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008fe8 <atanf+0x15c>
 8008eb4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008fec <atanf+0x160>
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	bfd8      	it	le
 8008ebc:	eef0 7a40 	vmovle.f32	s15, s0
 8008ec0:	e7f3      	b.n	8008eaa <atanf+0x1e>
 8008ec2:	4b4b      	ldr	r3, [pc, #300]	; (8008ff0 <atanf+0x164>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	dc10      	bgt.n	8008eea <atanf+0x5e>
 8008ec8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008ecc:	da0a      	bge.n	8008ee4 <atanf+0x58>
 8008ece:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008ff4 <atanf+0x168>
 8008ed2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eda:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	dce2      	bgt.n	8008eaa <atanf+0x1e>
 8008ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee8:	e013      	b.n	8008f12 <atanf+0x86>
 8008eea:	f000 f8a3 	bl	8009034 <fabsf>
 8008eee:	4b42      	ldr	r3, [pc, #264]	; (8008ff8 <atanf+0x16c>)
 8008ef0:	429c      	cmp	r4, r3
 8008ef2:	dc4f      	bgt.n	8008f94 <atanf+0x108>
 8008ef4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	dc41      	bgt.n	8008f80 <atanf+0xf4>
 8008efc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008f00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f04:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008f08:	2300      	movs	r3, #0
 8008f0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008f18:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008ffc <atanf+0x170>
 8008f1c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009000 <atanf+0x174>
 8008f20:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009004 <atanf+0x178>
 8008f24:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008f28:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008f2c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009008 <atanf+0x17c>
 8008f30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008f34:	eddf 5a35 	vldr	s11, [pc, #212]	; 800900c <atanf+0x180>
 8008f38:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008f3c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009010 <atanf+0x184>
 8008f40:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008f44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009014 <atanf+0x188>
 8008f48:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008f4c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009018 <atanf+0x18c>
 8008f50:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008f54:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800901c <atanf+0x190>
 8008f58:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f5c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009020 <atanf+0x194>
 8008f60:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008f64:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009024 <atanf+0x198>
 8008f68:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008f70:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008f74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f78:	d121      	bne.n	8008fbe <atanf+0x132>
 8008f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f7e:	e794      	b.n	8008eaa <atanf+0x1e>
 8008f80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008f88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f92:	e7be      	b.n	8008f12 <atanf+0x86>
 8008f94:	4b24      	ldr	r3, [pc, #144]	; (8009028 <atanf+0x19c>)
 8008f96:	429c      	cmp	r4, r3
 8008f98:	dc0b      	bgt.n	8008fb2 <atanf+0x126>
 8008f9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb0:	e7af      	b.n	8008f12 <atanf+0x86>
 8008fb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008fb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e7a9      	b.n	8008f12 <atanf+0x86>
 8008fbe:	4a1b      	ldr	r2, [pc, #108]	; (800902c <atanf+0x1a0>)
 8008fc0:	491b      	ldr	r1, [pc, #108]	; (8009030 <atanf+0x1a4>)
 8008fc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008fc6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008fca:	ed93 0a00 	vldr	s0, [r3]
 8008fce:	ee37 7a40 	vsub.f32	s14, s14, s0
 8008fd2:	ed92 0a00 	vldr	s0, [r2]
 8008fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008fe0:	bfb8      	it	lt
 8008fe2:	eef1 7a67 	vneglt.f32	s15, s15
 8008fe6:	e760      	b.n	8008eaa <atanf+0x1e>
 8008fe8:	3fc90fdb 	.word	0x3fc90fdb
 8008fec:	bfc90fdb 	.word	0xbfc90fdb
 8008ff0:	3edfffff 	.word	0x3edfffff
 8008ff4:	7149f2ca 	.word	0x7149f2ca
 8008ff8:	3f97ffff 	.word	0x3f97ffff
 8008ffc:	3c8569d7 	.word	0x3c8569d7
 8009000:	3d4bda59 	.word	0x3d4bda59
 8009004:	bd6ef16b 	.word	0xbd6ef16b
 8009008:	3d886b35 	.word	0x3d886b35
 800900c:	3dba2e6e 	.word	0x3dba2e6e
 8009010:	3e124925 	.word	0x3e124925
 8009014:	3eaaaaab 	.word	0x3eaaaaab
 8009018:	bd15a221 	.word	0xbd15a221
 800901c:	bd9d8795 	.word	0xbd9d8795
 8009020:	bde38e38 	.word	0xbde38e38
 8009024:	be4ccccd 	.word	0xbe4ccccd
 8009028:	401bffff 	.word	0x401bffff
 800902c:	080095c4 	.word	0x080095c4
 8009030:	080095d4 	.word	0x080095d4

08009034 <fabsf>:
 8009034:	ee10 3a10 	vmov	r3, s0
 8009038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800903c:	ee00 3a10 	vmov	s0, r3
 8009040:	4770      	bx	lr
	...

08009044 <floorf>:
 8009044:	ee10 3a10 	vmov	r3, s0
 8009048:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800904c:	3a7f      	subs	r2, #127	; 0x7f
 800904e:	2a16      	cmp	r2, #22
 8009050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009054:	dc2a      	bgt.n	80090ac <floorf+0x68>
 8009056:	2a00      	cmp	r2, #0
 8009058:	da11      	bge.n	800907e <floorf+0x3a>
 800905a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80090bc <floorf+0x78>
 800905e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009062:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	dd05      	ble.n	8009078 <floorf+0x34>
 800906c:	2b00      	cmp	r3, #0
 800906e:	da23      	bge.n	80090b8 <floorf+0x74>
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <floorf+0x7c>)
 8009072:	2900      	cmp	r1, #0
 8009074:	bf18      	it	ne
 8009076:	4613      	movne	r3, r2
 8009078:	ee00 3a10 	vmov	s0, r3
 800907c:	4770      	bx	lr
 800907e:	4911      	ldr	r1, [pc, #68]	; (80090c4 <floorf+0x80>)
 8009080:	4111      	asrs	r1, r2
 8009082:	420b      	tst	r3, r1
 8009084:	d0fa      	beq.n	800907c <floorf+0x38>
 8009086:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80090bc <floorf+0x78>
 800908a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800908e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	ddef      	ble.n	8009078 <floorf+0x34>
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfbe      	ittt	lt
 800909c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80090a0:	fa40 f202 	asrlt.w	r2, r0, r2
 80090a4:	189b      	addlt	r3, r3, r2
 80090a6:	ea23 0301 	bic.w	r3, r3, r1
 80090aa:	e7e5      	b.n	8009078 <floorf+0x34>
 80090ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80090b0:	d3e4      	bcc.n	800907c <floorf+0x38>
 80090b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090b6:	4770      	bx	lr
 80090b8:	2300      	movs	r3, #0
 80090ba:	e7dd      	b.n	8009078 <floorf+0x34>
 80090bc:	7149f2ca 	.word	0x7149f2ca
 80090c0:	bf800000 	.word	0xbf800000
 80090c4:	007fffff 	.word	0x007fffff

080090c8 <scalbnf>:
 80090c8:	ee10 3a10 	vmov	r3, s0
 80090cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80090d0:	d025      	beq.n	800911e <scalbnf+0x56>
 80090d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80090d6:	d302      	bcc.n	80090de <scalbnf+0x16>
 80090d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090dc:	4770      	bx	lr
 80090de:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80090e2:	d122      	bne.n	800912a <scalbnf+0x62>
 80090e4:	4b2a      	ldr	r3, [pc, #168]	; (8009190 <scalbnf+0xc8>)
 80090e6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009194 <scalbnf+0xcc>
 80090ea:	4298      	cmp	r0, r3
 80090ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80090f0:	db16      	blt.n	8009120 <scalbnf+0x58>
 80090f2:	ee10 3a10 	vmov	r3, s0
 80090f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80090fa:	3a19      	subs	r2, #25
 80090fc:	4402      	add	r2, r0
 80090fe:	2afe      	cmp	r2, #254	; 0xfe
 8009100:	dd15      	ble.n	800912e <scalbnf+0x66>
 8009102:	ee10 3a10 	vmov	r3, s0
 8009106:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009198 <scalbnf+0xd0>
 800910a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800919c <scalbnf+0xd4>
 800910e:	2b00      	cmp	r3, #0
 8009110:	eeb0 7a67 	vmov.f32	s14, s15
 8009114:	bfb8      	it	lt
 8009116:	eef0 7a66 	vmovlt.f32	s15, s13
 800911a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800911e:	4770      	bx	lr
 8009120:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80091a0 <scalbnf+0xd8>
 8009124:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009128:	4770      	bx	lr
 800912a:	0dd2      	lsrs	r2, r2, #23
 800912c:	e7e6      	b.n	80090fc <scalbnf+0x34>
 800912e:	2a00      	cmp	r2, #0
 8009130:	dd06      	ble.n	8009140 <scalbnf+0x78>
 8009132:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009136:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800913a:	ee00 3a10 	vmov	s0, r3
 800913e:	4770      	bx	lr
 8009140:	f112 0f16 	cmn.w	r2, #22
 8009144:	da1a      	bge.n	800917c <scalbnf+0xb4>
 8009146:	f24c 3350 	movw	r3, #50000	; 0xc350
 800914a:	4298      	cmp	r0, r3
 800914c:	ee10 3a10 	vmov	r3, s0
 8009150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009154:	dd0a      	ble.n	800916c <scalbnf+0xa4>
 8009156:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009198 <scalbnf+0xd0>
 800915a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800919c <scalbnf+0xd4>
 800915e:	eef0 7a40 	vmov.f32	s15, s0
 8009162:	2b00      	cmp	r3, #0
 8009164:	bf18      	it	ne
 8009166:	eeb0 0a47 	vmovne.f32	s0, s14
 800916a:	e7db      	b.n	8009124 <scalbnf+0x5c>
 800916c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80091a0 <scalbnf+0xd8>
 8009170:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80091a4 <scalbnf+0xdc>
 8009174:	eef0 7a40 	vmov.f32	s15, s0
 8009178:	2b00      	cmp	r3, #0
 800917a:	e7f3      	b.n	8009164 <scalbnf+0x9c>
 800917c:	3219      	adds	r2, #25
 800917e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009182:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009186:	eddf 7a08 	vldr	s15, [pc, #32]	; 80091a8 <scalbnf+0xe0>
 800918a:	ee07 3a10 	vmov	s14, r3
 800918e:	e7c4      	b.n	800911a <scalbnf+0x52>
 8009190:	ffff3cb0 	.word	0xffff3cb0
 8009194:	4c000000 	.word	0x4c000000
 8009198:	7149f2ca 	.word	0x7149f2ca
 800919c:	f149f2ca 	.word	0xf149f2ca
 80091a0:	0da24260 	.word	0x0da24260
 80091a4:	8da24260 	.word	0x8da24260
 80091a8:	33000000 	.word	0x33000000

080091ac <_init>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr

080091b8 <_fini>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr
